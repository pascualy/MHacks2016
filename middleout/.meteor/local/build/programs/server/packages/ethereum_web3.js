(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var require, Web3, BigNumber;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/ethereum_web3/dist/web3.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports=[                                                                                                       // 2
  {                                                                                                                    // 3
    "constant": true,                                                                                                  // 4
    "inputs": [                                                                                                        // 5
      {                                                                                                                // 6
        "name": "_owner",                                                                                              // 7
        "type": "address"                                                                                              // 8
      }                                                                                                                // 9
    ],                                                                                                                 // 10
    "name": "name",                                                                                                    // 11
    "outputs": [                                                                                                       // 12
      {                                                                                                                // 13
        "name": "o_name",                                                                                              // 14
        "type": "bytes32"                                                                                              // 15
      }                                                                                                                // 16
    ],                                                                                                                 // 17
    "type": "function"                                                                                                 // 18
  },                                                                                                                   // 19
  {                                                                                                                    // 20
    "constant": true,                                                                                                  // 21
    "inputs": [                                                                                                        // 22
      {                                                                                                                // 23
        "name": "_name",                                                                                               // 24
        "type": "bytes32"                                                                                              // 25
      }                                                                                                                // 26
    ],                                                                                                                 // 27
    "name": "owner",                                                                                                   // 28
    "outputs": [                                                                                                       // 29
      {                                                                                                                // 30
        "name": "",                                                                                                    // 31
        "type": "address"                                                                                              // 32
      }                                                                                                                // 33
    ],                                                                                                                 // 34
    "type": "function"                                                                                                 // 35
  },                                                                                                                   // 36
  {                                                                                                                    // 37
    "constant": true,                                                                                                  // 38
    "inputs": [                                                                                                        // 39
      {                                                                                                                // 40
        "name": "_name",                                                                                               // 41
        "type": "bytes32"                                                                                              // 42
      }                                                                                                                // 43
    ],                                                                                                                 // 44
    "name": "content",                                                                                                 // 45
    "outputs": [                                                                                                       // 46
      {                                                                                                                // 47
        "name": "",                                                                                                    // 48
        "type": "bytes32"                                                                                              // 49
      }                                                                                                                // 50
    ],                                                                                                                 // 51
    "type": "function"                                                                                                 // 52
  },                                                                                                                   // 53
  {                                                                                                                    // 54
    "constant": true,                                                                                                  // 55
    "inputs": [                                                                                                        // 56
      {                                                                                                                // 57
        "name": "_name",                                                                                               // 58
        "type": "bytes32"                                                                                              // 59
      }                                                                                                                // 60
    ],                                                                                                                 // 61
    "name": "addr",                                                                                                    // 62
    "outputs": [                                                                                                       // 63
      {                                                                                                                // 64
        "name": "",                                                                                                    // 65
        "type": "address"                                                                                              // 66
      }                                                                                                                // 67
    ],                                                                                                                 // 68
    "type": "function"                                                                                                 // 69
  },                                                                                                                   // 70
  {                                                                                                                    // 71
    "constant": false,                                                                                                 // 72
    "inputs": [                                                                                                        // 73
      {                                                                                                                // 74
        "name": "_name",                                                                                               // 75
        "type": "bytes32"                                                                                              // 76
      }                                                                                                                // 77
    ],                                                                                                                 // 78
    "name": "reserve",                                                                                                 // 79
    "outputs": [],                                                                                                     // 80
    "type": "function"                                                                                                 // 81
  },                                                                                                                   // 82
  {                                                                                                                    // 83
    "constant": true,                                                                                                  // 84
    "inputs": [                                                                                                        // 85
      {                                                                                                                // 86
        "name": "_name",                                                                                               // 87
        "type": "bytes32"                                                                                              // 88
      }                                                                                                                // 89
    ],                                                                                                                 // 90
    "name": "subRegistrar",                                                                                            // 91
    "outputs": [                                                                                                       // 92
      {                                                                                                                // 93
        "name": "",                                                                                                    // 94
        "type": "address"                                                                                              // 95
      }                                                                                                                // 96
    ],                                                                                                                 // 97
    "type": "function"                                                                                                 // 98
  },                                                                                                                   // 99
  {                                                                                                                    // 100
    "constant": false,                                                                                                 // 101
    "inputs": [                                                                                                        // 102
      {                                                                                                                // 103
        "name": "_name",                                                                                               // 104
        "type": "bytes32"                                                                                              // 105
      },                                                                                                               // 106
      {                                                                                                                // 107
        "name": "_newOwner",                                                                                           // 108
        "type": "address"                                                                                              // 109
      }                                                                                                                // 110
    ],                                                                                                                 // 111
    "name": "transfer",                                                                                                // 112
    "outputs": [],                                                                                                     // 113
    "type": "function"                                                                                                 // 114
  },                                                                                                                   // 115
  {                                                                                                                    // 116
    "constant": false,                                                                                                 // 117
    "inputs": [                                                                                                        // 118
      {                                                                                                                // 119
        "name": "_name",                                                                                               // 120
        "type": "bytes32"                                                                                              // 121
      },                                                                                                               // 122
      {                                                                                                                // 123
        "name": "_registrar",                                                                                          // 124
        "type": "address"                                                                                              // 125
      }                                                                                                                // 126
    ],                                                                                                                 // 127
    "name": "setSubRegistrar",                                                                                         // 128
    "outputs": [],                                                                                                     // 129
    "type": "function"                                                                                                 // 130
  },                                                                                                                   // 131
  {                                                                                                                    // 132
    "constant": false,                                                                                                 // 133
    "inputs": [],                                                                                                      // 134
    "name": "Registrar",                                                                                               // 135
    "outputs": [],                                                                                                     // 136
    "type": "function"                                                                                                 // 137
  },                                                                                                                   // 138
  {                                                                                                                    // 139
    "constant": false,                                                                                                 // 140
    "inputs": [                                                                                                        // 141
      {                                                                                                                // 142
        "name": "_name",                                                                                               // 143
        "type": "bytes32"                                                                                              // 144
      },                                                                                                               // 145
      {                                                                                                                // 146
        "name": "_a",                                                                                                  // 147
        "type": "address"                                                                                              // 148
      },                                                                                                               // 149
      {                                                                                                                // 150
        "name": "_primary",                                                                                            // 151
        "type": "bool"                                                                                                 // 152
      }                                                                                                                // 153
    ],                                                                                                                 // 154
    "name": "setAddress",                                                                                              // 155
    "outputs": [],                                                                                                     // 156
    "type": "function"                                                                                                 // 157
  },                                                                                                                   // 158
  {                                                                                                                    // 159
    "constant": false,                                                                                                 // 160
    "inputs": [                                                                                                        // 161
      {                                                                                                                // 162
        "name": "_name",                                                                                               // 163
        "type": "bytes32"                                                                                              // 164
      },                                                                                                               // 165
      {                                                                                                                // 166
        "name": "_content",                                                                                            // 167
        "type": "bytes32"                                                                                              // 168
      }                                                                                                                // 169
    ],                                                                                                                 // 170
    "name": "setContent",                                                                                              // 171
    "outputs": [],                                                                                                     // 172
    "type": "function"                                                                                                 // 173
  },                                                                                                                   // 174
  {                                                                                                                    // 175
    "constant": false,                                                                                                 // 176
    "inputs": [                                                                                                        // 177
      {                                                                                                                // 178
        "name": "_name",                                                                                               // 179
        "type": "bytes32"                                                                                              // 180
      }                                                                                                                // 181
    ],                                                                                                                 // 182
    "name": "disown",                                                                                                  // 183
    "outputs": [],                                                                                                     // 184
    "type": "function"                                                                                                 // 185
  },                                                                                                                   // 186
  {                                                                                                                    // 187
    "anonymous": false,                                                                                                // 188
    "inputs": [                                                                                                        // 189
      {                                                                                                                // 190
        "indexed": true,                                                                                               // 191
        "name": "_name",                                                                                               // 192
        "type": "bytes32"                                                                                              // 193
      },                                                                                                               // 194
      {                                                                                                                // 195
        "indexed": false,                                                                                              // 196
        "name": "_winner",                                                                                             // 197
        "type": "address"                                                                                              // 198
      }                                                                                                                // 199
    ],                                                                                                                 // 200
    "name": "AuctionEnded",                                                                                            // 201
    "type": "event"                                                                                                    // 202
  },                                                                                                                   // 203
  {                                                                                                                    // 204
    "anonymous": false,                                                                                                // 205
    "inputs": [                                                                                                        // 206
      {                                                                                                                // 207
        "indexed": true,                                                                                               // 208
        "name": "_name",                                                                                               // 209
        "type": "bytes32"                                                                                              // 210
      },                                                                                                               // 211
      {                                                                                                                // 212
        "indexed": false,                                                                                              // 213
        "name": "_bidder",                                                                                             // 214
        "type": "address"                                                                                              // 215
      },                                                                                                               // 216
      {                                                                                                                // 217
        "indexed": false,                                                                                              // 218
        "name": "_value",                                                                                              // 219
        "type": "uint256"                                                                                              // 220
      }                                                                                                                // 221
    ],                                                                                                                 // 222
    "name": "NewBid",                                                                                                  // 223
    "type": "event"                                                                                                    // 224
  },                                                                                                                   // 225
  {                                                                                                                    // 226
    "anonymous": false,                                                                                                // 227
    "inputs": [                                                                                                        // 228
      {                                                                                                                // 229
        "indexed": true,                                                                                               // 230
        "name": "name",                                                                                                // 231
        "type": "bytes32"                                                                                              // 232
      }                                                                                                                // 233
    ],                                                                                                                 // 234
    "name": "Changed",                                                                                                 // 235
    "type": "event"                                                                                                    // 236
  },                                                                                                                   // 237
  {                                                                                                                    // 238
    "anonymous": false,                                                                                                // 239
    "inputs": [                                                                                                        // 240
      {                                                                                                                // 241
        "indexed": true,                                                                                               // 242
        "name": "name",                                                                                                // 243
        "type": "bytes32"                                                                                              // 244
      },                                                                                                               // 245
      {                                                                                                                // 246
        "indexed": true,                                                                                               // 247
        "name": "addr",                                                                                                // 248
        "type": "address"                                                                                              // 249
      }                                                                                                                // 250
    ],                                                                                                                 // 251
    "name": "PrimaryChanged",                                                                                          // 252
    "type": "event"                                                                                                    // 253
  }                                                                                                                    // 254
]                                                                                                                      // 255
                                                                                                                       // 256
},{}],2:[function(require,module,exports){                                                                             // 257
module.exports=[                                                                                                       // 258
  {                                                                                                                    // 259
    "constant": true,                                                                                                  // 260
    "inputs": [                                                                                                        // 261
      {                                                                                                                // 262
        "name": "_name",                                                                                               // 263
        "type": "bytes32"                                                                                              // 264
      }                                                                                                                // 265
    ],                                                                                                                 // 266
    "name": "owner",                                                                                                   // 267
    "outputs": [                                                                                                       // 268
      {                                                                                                                // 269
        "name": "",                                                                                                    // 270
        "type": "address"                                                                                              // 271
      }                                                                                                                // 272
    ],                                                                                                                 // 273
    "type": "function"                                                                                                 // 274
  },                                                                                                                   // 275
  {                                                                                                                    // 276
    "constant": false,                                                                                                 // 277
    "inputs": [                                                                                                        // 278
      {                                                                                                                // 279
        "name": "_name",                                                                                               // 280
        "type": "bytes32"                                                                                              // 281
      },                                                                                                               // 282
      {                                                                                                                // 283
        "name": "_refund",                                                                                             // 284
        "type": "address"                                                                                              // 285
      }                                                                                                                // 286
    ],                                                                                                                 // 287
    "name": "disown",                                                                                                  // 288
    "outputs": [],                                                                                                     // 289
    "type": "function"                                                                                                 // 290
  },                                                                                                                   // 291
  {                                                                                                                    // 292
    "constant": true,                                                                                                  // 293
    "inputs": [                                                                                                        // 294
      {                                                                                                                // 295
        "name": "_name",                                                                                               // 296
        "type": "bytes32"                                                                                              // 297
      }                                                                                                                // 298
    ],                                                                                                                 // 299
    "name": "addr",                                                                                                    // 300
    "outputs": [                                                                                                       // 301
      {                                                                                                                // 302
        "name": "",                                                                                                    // 303
        "type": "address"                                                                                              // 304
      }                                                                                                                // 305
    ],                                                                                                                 // 306
    "type": "function"                                                                                                 // 307
  },                                                                                                                   // 308
  {                                                                                                                    // 309
    "constant": false,                                                                                                 // 310
    "inputs": [                                                                                                        // 311
      {                                                                                                                // 312
        "name": "_name",                                                                                               // 313
        "type": "bytes32"                                                                                              // 314
      }                                                                                                                // 315
    ],                                                                                                                 // 316
    "name": "reserve",                                                                                                 // 317
    "outputs": [],                                                                                                     // 318
    "type": "function"                                                                                                 // 319
  },                                                                                                                   // 320
  {                                                                                                                    // 321
    "constant": false,                                                                                                 // 322
    "inputs": [                                                                                                        // 323
      {                                                                                                                // 324
        "name": "_name",                                                                                               // 325
        "type": "bytes32"                                                                                              // 326
      },                                                                                                               // 327
      {                                                                                                                // 328
        "name": "_newOwner",                                                                                           // 329
        "type": "address"                                                                                              // 330
      }                                                                                                                // 331
    ],                                                                                                                 // 332
    "name": "transfer",                                                                                                // 333
    "outputs": [],                                                                                                     // 334
    "type": "function"                                                                                                 // 335
  },                                                                                                                   // 336
  {                                                                                                                    // 337
    "constant": false,                                                                                                 // 338
    "inputs": [                                                                                                        // 339
      {                                                                                                                // 340
        "name": "_name",                                                                                               // 341
        "type": "bytes32"                                                                                              // 342
      },                                                                                                               // 343
      {                                                                                                                // 344
        "name": "_a",                                                                                                  // 345
        "type": "address"                                                                                              // 346
      }                                                                                                                // 347
    ],                                                                                                                 // 348
    "name": "setAddr",                                                                                                 // 349
    "outputs": [],                                                                                                     // 350
    "type": "function"                                                                                                 // 351
  },                                                                                                                   // 352
  {                                                                                                                    // 353
    "anonymous": false,                                                                                                // 354
    "inputs": [                                                                                                        // 355
      {                                                                                                                // 356
        "indexed": true,                                                                                               // 357
        "name": "name",                                                                                                // 358
        "type": "bytes32"                                                                                              // 359
      }                                                                                                                // 360
    ],                                                                                                                 // 361
    "name": "Changed",                                                                                                 // 362
    "type": "event"                                                                                                    // 363
  }                                                                                                                    // 364
]                                                                                                                      // 365
                                                                                                                       // 366
},{}],3:[function(require,module,exports){                                                                             // 367
module.exports=[                                                                                                       // 368
  {                                                                                                                    // 369
    "constant": false,                                                                                                 // 370
    "inputs": [                                                                                                        // 371
      {                                                                                                                // 372
        "name": "from",                                                                                                // 373
        "type": "bytes32"                                                                                              // 374
      },                                                                                                               // 375
      {                                                                                                                // 376
        "name": "to",                                                                                                  // 377
        "type": "address"                                                                                              // 378
      },                                                                                                               // 379
      {                                                                                                                // 380
        "name": "value",                                                                                               // 381
        "type": "uint256"                                                                                              // 382
      }                                                                                                                // 383
    ],                                                                                                                 // 384
    "name": "transfer",                                                                                                // 385
    "outputs": [],                                                                                                     // 386
    "type": "function"                                                                                                 // 387
  },                                                                                                                   // 388
  {                                                                                                                    // 389
    "constant": false,                                                                                                 // 390
    "inputs": [                                                                                                        // 391
      {                                                                                                                // 392
        "name": "from",                                                                                                // 393
        "type": "bytes32"                                                                                              // 394
      },                                                                                                               // 395
      {                                                                                                                // 396
        "name": "to",                                                                                                  // 397
        "type": "address"                                                                                              // 398
      },                                                                                                               // 399
      {                                                                                                                // 400
        "name": "indirectId",                                                                                          // 401
        "type": "bytes32"                                                                                              // 402
      },                                                                                                               // 403
      {                                                                                                                // 404
        "name": "value",                                                                                               // 405
        "type": "uint256"                                                                                              // 406
      }                                                                                                                // 407
    ],                                                                                                                 // 408
    "name": "icapTransfer",                                                                                            // 409
    "outputs": [],                                                                                                     // 410
    "type": "function"                                                                                                 // 411
  },                                                                                                                   // 412
  {                                                                                                                    // 413
    "constant": false,                                                                                                 // 414
    "inputs": [                                                                                                        // 415
      {                                                                                                                // 416
        "name": "to",                                                                                                  // 417
        "type": "bytes32"                                                                                              // 418
      }                                                                                                                // 419
    ],                                                                                                                 // 420
    "name": "deposit",                                                                                                 // 421
    "outputs": [],                                                                                                     // 422
    "type": "function"                                                                                                 // 423
  },                                                                                                                   // 424
  {                                                                                                                    // 425
    "anonymous": false,                                                                                                // 426
    "inputs": [                                                                                                        // 427
      {                                                                                                                // 428
        "indexed": true,                                                                                               // 429
        "name": "from",                                                                                                // 430
        "type": "address"                                                                                              // 431
      },                                                                                                               // 432
      {                                                                                                                // 433
        "indexed": false,                                                                                              // 434
        "name": "value",                                                                                               // 435
        "type": "uint256"                                                                                              // 436
      }                                                                                                                // 437
    ],                                                                                                                 // 438
    "name": "AnonymousDeposit",                                                                                        // 439
    "type": "event"                                                                                                    // 440
  },                                                                                                                   // 441
  {                                                                                                                    // 442
    "anonymous": false,                                                                                                // 443
    "inputs": [                                                                                                        // 444
      {                                                                                                                // 445
        "indexed": true,                                                                                               // 446
        "name": "from",                                                                                                // 447
        "type": "address"                                                                                              // 448
      },                                                                                                               // 449
      {                                                                                                                // 450
        "indexed": true,                                                                                               // 451
        "name": "to",                                                                                                  // 452
        "type": "bytes32"                                                                                              // 453
      },                                                                                                               // 454
      {                                                                                                                // 455
        "indexed": false,                                                                                              // 456
        "name": "value",                                                                                               // 457
        "type": "uint256"                                                                                              // 458
      }                                                                                                                // 459
    ],                                                                                                                 // 460
    "name": "Deposit",                                                                                                 // 461
    "type": "event"                                                                                                    // 462
  },                                                                                                                   // 463
  {                                                                                                                    // 464
    "anonymous": false,                                                                                                // 465
    "inputs": [                                                                                                        // 466
      {                                                                                                                // 467
        "indexed": true,                                                                                               // 468
        "name": "from",                                                                                                // 469
        "type": "bytes32"                                                                                              // 470
      },                                                                                                               // 471
      {                                                                                                                // 472
        "indexed": true,                                                                                               // 473
        "name": "to",                                                                                                  // 474
        "type": "address"                                                                                              // 475
      },                                                                                                               // 476
      {                                                                                                                // 477
        "indexed": false,                                                                                              // 478
        "name": "value",                                                                                               // 479
        "type": "uint256"                                                                                              // 480
      }                                                                                                                // 481
    ],                                                                                                                 // 482
    "name": "Transfer",                                                                                                // 483
    "type": "event"                                                                                                    // 484
  },                                                                                                                   // 485
  {                                                                                                                    // 486
    "anonymous": false,                                                                                                // 487
    "inputs": [                                                                                                        // 488
      {                                                                                                                // 489
        "indexed": true,                                                                                               // 490
        "name": "from",                                                                                                // 491
        "type": "bytes32"                                                                                              // 492
      },                                                                                                               // 493
      {                                                                                                                // 494
        "indexed": true,                                                                                               // 495
        "name": "to",                                                                                                  // 496
        "type": "address"                                                                                              // 497
      },                                                                                                               // 498
      {                                                                                                                // 499
        "indexed": false,                                                                                              // 500
        "name": "indirectId",                                                                                          // 501
        "type": "bytes32"                                                                                              // 502
      },                                                                                                               // 503
      {                                                                                                                // 504
        "indexed": false,                                                                                              // 505
        "name": "value",                                                                                               // 506
        "type": "uint256"                                                                                              // 507
      }                                                                                                                // 508
    ],                                                                                                                 // 509
    "name": "IcapTransfer",                                                                                            // 510
    "type": "event"                                                                                                    // 511
  }                                                                                                                    // 512
]                                                                                                                      // 513
                                                                                                                       // 514
},{}],4:[function(require,module,exports){                                                                             // 515
var f = require('./formatters');                                                                                       // 516
var SolidityType = require('./type');                                                                                  // 517
                                                                                                                       // 518
/**                                                                                                                    // 519
 * SolidityTypeAddress is a prootype that represents address type                                                      // 520
 * It matches:                                                                                                         // 521
 * address                                                                                                             // 522
 * address[]                                                                                                           // 523
 * address[4]                                                                                                          // 524
 * address[][]                                                                                                         // 525
 * address[3][]                                                                                                        // 526
 * address[][6][], ...                                                                                                 // 527
 */                                                                                                                    // 528
var SolidityTypeAddress = function () {                                                                                // 529
    this._inputFormatter = f.formatInputInt;                                                                           // 530
    this._outputFormatter = f.formatOutputAddress;                                                                     // 531
};                                                                                                                     // 532
                                                                                                                       // 533
SolidityTypeAddress.prototype = new SolidityType({});                                                                  // 534
SolidityTypeAddress.prototype.constructor = SolidityTypeAddress;                                                       // 535
                                                                                                                       // 536
SolidityTypeAddress.prototype.isType = function (name) {                                                               // 537
    return !!name.match(/address(\[([0-9]*)\])?/);                                                                     // 538
};                                                                                                                     // 539
                                                                                                                       // 540
SolidityTypeAddress.prototype.staticPartLength = function (name) {                                                     // 541
    return 32 * this.staticArrayLength(name);                                                                          // 542
};                                                                                                                     // 543
                                                                                                                       // 544
module.exports = SolidityTypeAddress;                                                                                  // 545
                                                                                                                       // 546
                                                                                                                       // 547
},{"./formatters":9,"./type":14}],5:[function(require,module,exports){                                                 // 548
var f = require('./formatters');                                                                                       // 549
var SolidityType = require('./type');                                                                                  // 550
                                                                                                                       // 551
/**                                                                                                                    // 552
 * SolidityTypeBool is a prootype that represents bool type                                                            // 553
 * It matches:                                                                                                         // 554
 * bool                                                                                                                // 555
 * bool[]                                                                                                              // 556
 * bool[4]                                                                                                             // 557
 * bool[][]                                                                                                            // 558
 * bool[3][]                                                                                                           // 559
 * bool[][6][], ...                                                                                                    // 560
 */                                                                                                                    // 561
var SolidityTypeBool = function () {                                                                                   // 562
    this._inputFormatter = f.formatInputBool;                                                                          // 563
    this._outputFormatter = f.formatOutputBool;                                                                        // 564
};                                                                                                                     // 565
                                                                                                                       // 566
SolidityTypeBool.prototype = new SolidityType({});                                                                     // 567
SolidityTypeBool.prototype.constructor = SolidityTypeBool;                                                             // 568
                                                                                                                       // 569
SolidityTypeBool.prototype.isType = function (name) {                                                                  // 570
    return !!name.match(/^bool(\[([0-9]*)\])*$/);                                                                      // 571
};                                                                                                                     // 572
                                                                                                                       // 573
SolidityTypeBool.prototype.staticPartLength = function (name) {                                                        // 574
    return 32 * this.staticArrayLength(name);                                                                          // 575
};                                                                                                                     // 576
                                                                                                                       // 577
module.exports = SolidityTypeBool;                                                                                     // 578
                                                                                                                       // 579
},{"./formatters":9,"./type":14}],6:[function(require,module,exports){                                                 // 580
var f = require('./formatters');                                                                                       // 581
var SolidityType = require('./type');                                                                                  // 582
                                                                                                                       // 583
/**                                                                                                                    // 584
 * SolidityTypeBytes is a prootype that represents bytes type                                                          // 585
 * It matches:                                                                                                         // 586
 * bytes                                                                                                               // 587
 * bytes[]                                                                                                             // 588
 * bytes[4]                                                                                                            // 589
 * bytes[][]                                                                                                           // 590
 * bytes[3][]                                                                                                          // 591
 * bytes[][6][], ...                                                                                                   // 592
 * bytes32                                                                                                             // 593
 * bytes64[]                                                                                                           // 594
 * bytes8[4]                                                                                                           // 595
 * bytes256[][]                                                                                                        // 596
 * bytes[3][]                                                                                                          // 597
 * bytes64[][6][], ...                                                                                                 // 598
 */                                                                                                                    // 599
var SolidityTypeBytes = function () {                                                                                  // 600
    this._inputFormatter = f.formatInputBytes;                                                                         // 601
    this._outputFormatter = f.formatOutputBytes;                                                                       // 602
};                                                                                                                     // 603
                                                                                                                       // 604
SolidityTypeBytes.prototype = new SolidityType({});                                                                    // 605
SolidityTypeBytes.prototype.constructor = SolidityTypeBytes;                                                           // 606
                                                                                                                       // 607
SolidityTypeBytes.prototype.isType = function (name) {                                                                 // 608
    return !!name.match(/^bytes([0-9]{1,})(\[([0-9]*)\])*$/);                                                          // 609
};                                                                                                                     // 610
                                                                                                                       // 611
SolidityTypeBytes.prototype.staticPartLength = function (name) {                                                       // 612
    var matches = name.match(/^bytes([0-9]*)/);                                                                        // 613
    var size = parseInt(matches[1]);                                                                                   // 614
    return size * this.staticArrayLength(name);                                                                        // 615
};                                                                                                                     // 616
                                                                                                                       // 617
module.exports = SolidityTypeBytes;                                                                                    // 618
                                                                                                                       // 619
},{"./formatters":9,"./type":14}],7:[function(require,module,exports){                                                 // 620
/*                                                                                                                     // 621
    This file is part of web3.js.                                                                                      // 622
                                                                                                                       // 623
    web3.js is free software: you can redistribute it and/or modify                                                    // 624
    it under the terms of the GNU Lesser General Public License as published by                                        // 625
    the Free Software Foundation, either version 3 of the License, or                                                  // 626
    (at your option) any later version.                                                                                // 627
                                                                                                                       // 628
    web3.js is distributed in the hope that it will be useful,                                                         // 629
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 630
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 631
    GNU Lesser General Public License for more details.                                                                // 632
                                                                                                                       // 633
    You should have received a copy of the GNU Lesser General Public License                                           // 634
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 635
*/                                                                                                                     // 636
/**                                                                                                                    // 637
 * @file coder.js                                                                                                      // 638
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 639
 * @date 2015                                                                                                          // 640
 */                                                                                                                    // 641
                                                                                                                       // 642
var f = require('./formatters');                                                                                       // 643
                                                                                                                       // 644
var SolidityTypeAddress = require('./address');                                                                        // 645
var SolidityTypeBool = require('./bool');                                                                              // 646
var SolidityTypeInt = require('./int');                                                                                // 647
var SolidityTypeUInt = require('./uint');                                                                              // 648
var SolidityTypeDynamicBytes = require('./dynamicbytes');                                                              // 649
var SolidityTypeString = require('./string');                                                                          // 650
var SolidityTypeReal = require('./real');                                                                              // 651
var SolidityTypeUReal = require('./ureal');                                                                            // 652
var SolidityTypeBytes = require('./bytes');                                                                            // 653
                                                                                                                       // 654
/**                                                                                                                    // 655
 * SolidityCoder prototype should be used to encode/decode solidity params of any type                                 // 656
 */                                                                                                                    // 657
var SolidityCoder = function (types) {                                                                                 // 658
    this._types = types;                                                                                               // 659
};                                                                                                                     // 660
                                                                                                                       // 661
/**                                                                                                                    // 662
 * This method should be used to transform type to SolidityType                                                        // 663
 *                                                                                                                     // 664
 * @method _requireType                                                                                                // 665
 * @param {String} type                                                                                                // 666
 * @returns {SolidityType}                                                                                             // 667
 * @throws {Error} throws if no matching type is found                                                                 // 668
 */                                                                                                                    // 669
SolidityCoder.prototype._requireType = function (type) {                                                               // 670
    var solidityType = this._types.filter(function (t) {                                                               // 671
        return t.isType(type);                                                                                         // 672
    })[0];                                                                                                             // 673
                                                                                                                       // 674
    if (!solidityType) {                                                                                               // 675
        throw Error('invalid solidity type!: ' + type);                                                                // 676
    }                                                                                                                  // 677
                                                                                                                       // 678
    return solidityType;                                                                                               // 679
};                                                                                                                     // 680
                                                                                                                       // 681
/**                                                                                                                    // 682
 * Should be used to encode plain param                                                                                // 683
 *                                                                                                                     // 684
 * @method encodeParam                                                                                                 // 685
 * @param {String} type                                                                                                // 686
 * @param {Object} plain param                                                                                         // 687
 * @return {String} encoded plain param                                                                                // 688
 */                                                                                                                    // 689
SolidityCoder.prototype.encodeParam = function (type, param) {                                                         // 690
    return this.encodeParams([type], [param]);                                                                         // 691
};                                                                                                                     // 692
                                                                                                                       // 693
/**                                                                                                                    // 694
 * Should be used to encode list of params                                                                             // 695
 *                                                                                                                     // 696
 * @method encodeParams                                                                                                // 697
 * @param {Array} types                                                                                                // 698
 * @param {Array} params                                                                                               // 699
 * @return {String} encoded list of params                                                                             // 700
 */                                                                                                                    // 701
SolidityCoder.prototype.encodeParams = function (types, params) {                                                      // 702
    var solidityTypes = this.getSolidityTypes(types);                                                                  // 703
                                                                                                                       // 704
    var encodeds = solidityTypes.map(function (solidityType, index) {                                                  // 705
        return solidityType.encode(params[index], types[index]);                                                       // 706
    });                                                                                                                // 707
                                                                                                                       // 708
    var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {                                     // 709
        var staticPartLength = solidityType.staticPartLength(types[index]);                                            // 710
        var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;                                   // 711
        return acc + roundedStaticPartLength;                                                                          // 712
    }, 0);                                                                                                             // 713
                                                                                                                       // 714
    var result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);                            // 715
                                                                                                                       // 716
    return result;                                                                                                     // 717
};                                                                                                                     // 718
                                                                                                                       // 719
SolidityCoder.prototype.encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {             // 720
    var result = "";                                                                                                   // 721
    var self = this;                                                                                                   // 722
                                                                                                                       // 723
    var isDynamic = function (i) {                                                                                     // 724
       return solidityTypes[i].isDynamicArray(types[i]) || solidityTypes[i].isDynamicType(types[i]);                   // 725
    };                                                                                                                 // 726
                                                                                                                       // 727
    types.forEach(function (type, i) {                                                                                 // 728
        if (isDynamic(i)) {                                                                                            // 729
            result += f.formatInputInt(dynamicOffset).encode();                                                        // 730
            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);                     // 731
            dynamicOffset += e.length / 2;                                                                             // 732
        } else {                                                                                                       // 733
            // don't add length to dynamicOffset. it's already counted                                                 // 734
            result += self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);                   // 735
        }                                                                                                              // 736
                                                                                                                       // 737
        // TODO: figure out nested arrays                                                                              // 738
    });                                                                                                                // 739
                                                                                                                       // 740
    types.forEach(function (type, i) {                                                                                 // 741
        if (isDynamic(i)) {                                                                                            // 742
            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);                     // 743
            dynamicOffset += e.length / 2;                                                                             // 744
            result += e;                                                                                               // 745
        }                                                                                                              // 746
    });                                                                                                                // 747
    return result;                                                                                                     // 748
};                                                                                                                     // 749
                                                                                                                       // 750
// TODO: refactor whole encoding!                                                                                      // 751
SolidityCoder.prototype.encodeWithOffset = function (type, solidityType, encoded, offset) {                            // 752
    var self = this;                                                                                                   // 753
    if (solidityType.isDynamicArray(type)) {                                                                           // 754
        return (function () {                                                                                          // 755
            // offset was already set                                                                                  // 756
            var nestedName = solidityType.nestedName(type);                                                            // 757
            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);                                    // 758
            var result = encoded[0];                                                                                   // 759
                                                                                                                       // 760
            (function () {                                                                                             // 761
                var previousLength = 2; // in int                                                                      // 762
                if (solidityType.isDynamicArray(nestedName)) {                                                         // 763
                    for (var i = 1; i < encoded.length; i++) {                                                         // 764
                        previousLength += +(encoded[i - 1])[0] || 0;                                                   // 765
                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();
                    }                                                                                                  // 767
                }                                                                                                      // 768
            })();                                                                                                      // 769
                                                                                                                       // 770
            // first element is length, skip it                                                                        // 771
            (function () {                                                                                             // 772
                for (var i = 0; i < encoded.length - 1; i++) {                                                         // 773
                    var additionalOffset = result / 2;                                                                 // 774
                    result += self.encodeWithOffset(nestedName, solidityType, encoded[i + 1], offset +  additionalOffset);
                }                                                                                                      // 776
            })();                                                                                                      // 777
                                                                                                                       // 778
            return result;                                                                                             // 779
        })();                                                                                                          // 780
                                                                                                                       // 781
    } else if (solidityType.isStaticArray(type)) {                                                                     // 782
        return (function () {                                                                                          // 783
            var nestedName = solidityType.nestedName(type);                                                            // 784
            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);                                    // 785
            var result = "";                                                                                           // 786
                                                                                                                       // 787
                                                                                                                       // 788
            if (solidityType.isDynamicArray(nestedName)) {                                                             // 789
                (function () {                                                                                         // 790
                    var previousLength = 0; // in int                                                                  // 791
                    for (var i = 0; i < encoded.length; i++) {                                                         // 792
                        // calculate length of previous item                                                           // 793
                        previousLength += +(encoded[i - 1] || [])[0] || 0;                                             // 794
                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();
                    }                                                                                                  // 796
                })();                                                                                                  // 797
            }                                                                                                          // 798
                                                                                                                       // 799
            (function () {                                                                                             // 800
                for (var i = 0; i < encoded.length; i++) {                                                             // 801
                    var additionalOffset = result / 2;                                                                 // 802
                    result += self.encodeWithOffset(nestedName, solidityType, encoded[i], offset + additionalOffset);  // 803
                }                                                                                                      // 804
            })();                                                                                                      // 805
                                                                                                                       // 806
            return result;                                                                                             // 807
        })();                                                                                                          // 808
    }                                                                                                                  // 809
                                                                                                                       // 810
    return encoded;                                                                                                    // 811
};                                                                                                                     // 812
                                                                                                                       // 813
/**                                                                                                                    // 814
 * Should be used to decode bytes to plain param                                                                       // 815
 *                                                                                                                     // 816
 * @method decodeParam                                                                                                 // 817
 * @param {String} type                                                                                                // 818
 * @param {String} bytes                                                                                               // 819
 * @return {Object} plain param                                                                                        // 820
 */                                                                                                                    // 821
SolidityCoder.prototype.decodeParam = function (type, bytes) {                                                         // 822
    return this.decodeParams([type], bytes)[0];                                                                        // 823
};                                                                                                                     // 824
                                                                                                                       // 825
/**                                                                                                                    // 826
 * Should be used to decode list of params                                                                             // 827
 *                                                                                                                     // 828
 * @method decodeParam                                                                                                 // 829
 * @param {Array} types                                                                                                // 830
 * @param {String} bytes                                                                                               // 831
 * @return {Array} array of plain params                                                                               // 832
 */                                                                                                                    // 833
SolidityCoder.prototype.decodeParams = function (types, bytes) {                                                       // 834
    var solidityTypes = this.getSolidityTypes(types);                                                                  // 835
    var offsets = this.getOffsets(types, solidityTypes);                                                               // 836
                                                                                                                       // 837
    return solidityTypes.map(function (solidityType, index) {                                                          // 838
        return solidityType.decode(bytes, offsets[index],  types[index], index);                                       // 839
    });                                                                                                                // 840
};                                                                                                                     // 841
                                                                                                                       // 842
SolidityCoder.prototype.getOffsets = function (types, solidityTypes) {                                                 // 843
    var lengths =  solidityTypes.map(function (solidityType, index) {                                                  // 844
        return solidityType.staticPartLength(types[index]);                                                            // 845
    });                                                                                                                // 846
                                                                                                                       // 847
    for (var i = 1; i < lengths.length; i++) {                                                                         // 848
         // sum with length of previous element                                                                        // 849
        lengths[i] += lengths[i - 1];                                                                                  // 850
    }                                                                                                                  // 851
                                                                                                                       // 852
    return lengths.map(function (length, index) {                                                                      // 853
        // remove the current length, so the length is sum of previous elements                                        // 854
        var staticPartLength = solidityTypes[index].staticPartLength(types[index]);                                    // 855
        return length - staticPartLength;                                                                              // 856
    });                                                                                                                // 857
};                                                                                                                     // 858
                                                                                                                       // 859
SolidityCoder.prototype.getSolidityTypes = function (types) {                                                          // 860
    var self = this;                                                                                                   // 861
    return types.map(function (type) {                                                                                 // 862
        return self._requireType(type);                                                                                // 863
    });                                                                                                                // 864
};                                                                                                                     // 865
                                                                                                                       // 866
var coder = new SolidityCoder([                                                                                        // 867
    new SolidityTypeAddress(),                                                                                         // 868
    new SolidityTypeBool(),                                                                                            // 869
    new SolidityTypeInt(),                                                                                             // 870
    new SolidityTypeUInt(),                                                                                            // 871
    new SolidityTypeDynamicBytes(),                                                                                    // 872
    new SolidityTypeBytes(),                                                                                           // 873
    new SolidityTypeString(),                                                                                          // 874
    new SolidityTypeReal(),                                                                                            // 875
    new SolidityTypeUReal()                                                                                            // 876
]);                                                                                                                    // 877
                                                                                                                       // 878
module.exports = coder;                                                                                                // 879
                                                                                                                       // 880
                                                                                                                       // 881
},{"./address":4,"./bool":5,"./bytes":6,"./dynamicbytes":8,"./formatters":9,"./int":10,"./real":12,"./string":13,"./uint":15,"./ureal":16}],8:[function(require,module,exports){
var f = require('./formatters');                                                                                       // 883
var SolidityType = require('./type');                                                                                  // 884
                                                                                                                       // 885
var SolidityTypeDynamicBytes = function () {                                                                           // 886
    this._inputFormatter = f.formatInputDynamicBytes;                                                                  // 887
    this._outputFormatter = f.formatOutputDynamicBytes;                                                                // 888
};                                                                                                                     // 889
                                                                                                                       // 890
SolidityTypeDynamicBytes.prototype = new SolidityType({});                                                             // 891
SolidityTypeDynamicBytes.prototype.constructor = SolidityTypeDynamicBytes;                                             // 892
                                                                                                                       // 893
SolidityTypeDynamicBytes.prototype.isType = function (name) {                                                          // 894
    return !!name.match(/^bytes(\[([0-9]*)\])*$/);                                                                     // 895
};                                                                                                                     // 896
                                                                                                                       // 897
SolidityTypeDynamicBytes.prototype.staticPartLength = function (name) {                                                // 898
    return 32 * this.staticArrayLength(name);                                                                          // 899
};                                                                                                                     // 900
                                                                                                                       // 901
SolidityTypeDynamicBytes.prototype.isDynamicType = function () {                                                       // 902
    return true;                                                                                                       // 903
};                                                                                                                     // 904
                                                                                                                       // 905
module.exports = SolidityTypeDynamicBytes;                                                                             // 906
                                                                                                                       // 907
                                                                                                                       // 908
},{"./formatters":9,"./type":14}],9:[function(require,module,exports){                                                 // 909
/*                                                                                                                     // 910
    This file is part of web3.js.                                                                                      // 911
                                                                                                                       // 912
    web3.js is free software: you can redistribute it and/or modify                                                    // 913
    it under the terms of the GNU Lesser General Public License as published by                                        // 914
    the Free Software Foundation, either version 3 of the License, or                                                  // 915
    (at your option) any later version.                                                                                // 916
                                                                                                                       // 917
    web3.js is distributed in the hope that it will be useful,                                                         // 918
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 919
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 920
    GNU Lesser General Public License for more details.                                                                // 921
                                                                                                                       // 922
    You should have received a copy of the GNU Lesser General Public License                                           // 923
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 924
*/                                                                                                                     // 925
/**                                                                                                                    // 926
 * @file formatters.js                                                                                                 // 927
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 928
 * @date 2015                                                                                                          // 929
 */                                                                                                                    // 930
                                                                                                                       // 931
var BigNumber = require('bignumber.js');                                                                               // 932
var utils = require('../utils/utils');                                                                                 // 933
var c = require('../utils/config');                                                                                    // 934
var SolidityParam = require('./param');                                                                                // 935
                                                                                                                       // 936
                                                                                                                       // 937
/**                                                                                                                    // 938
 * Formats input value to byte representation of int                                                                   // 939
 * If value is negative, return it's two's complement                                                                  // 940
 * If the value is floating point, round it down                                                                       // 941
 *                                                                                                                     // 942
 * @method formatInputInt                                                                                              // 943
 * @param {String|Number|BigNumber} value that needs to be formatted                                                   // 944
 * @returns {SolidityParam}                                                                                            // 945
 */                                                                                                                    // 946
var formatInputInt = function (value) {                                                                                // 947
    BigNumber.config(c.ETH_BIGNUMBER_ROUNDING_MODE);                                                                   // 948
    var result = utils.padLeft(utils.toTwosComplement(value).round().toString(16), 64);                                // 949
    return new SolidityParam(result);                                                                                  // 950
};                                                                                                                     // 951
                                                                                                                       // 952
/**                                                                                                                    // 953
 * Formats input bytes                                                                                                 // 954
 *                                                                                                                     // 955
 * @method formatInputBytes                                                                                            // 956
 * @param {String}                                                                                                     // 957
 * @returns {SolidityParam}                                                                                            // 958
 */                                                                                                                    // 959
var formatInputBytes = function (value) {                                                                              // 960
    var result = utils.toHex(value).substr(2);                                                                         // 961
    var l = Math.floor((result.length + 63) / 64);                                                                     // 962
    result = utils.padRight(result, l * 64);                                                                           // 963
    return new SolidityParam(result);                                                                                  // 964
};                                                                                                                     // 965
                                                                                                                       // 966
/**                                                                                                                    // 967
 * Formats input bytes                                                                                                 // 968
 *                                                                                                                     // 969
 * @method formatDynamicInputBytes                                                                                     // 970
 * @param {String}                                                                                                     // 971
 * @returns {SolidityParam}                                                                                            // 972
 */                                                                                                                    // 973
var formatInputDynamicBytes = function (value) {                                                                       // 974
    var result = utils.toHex(value).substr(2);                                                                         // 975
    var length = result.length / 2;                                                                                    // 976
    var l = Math.floor((result.length + 63) / 64);                                                                     // 977
    result = utils.padRight(result, l * 64);                                                                           // 978
    return new SolidityParam(formatInputInt(length).value + result);                                                   // 979
};                                                                                                                     // 980
                                                                                                                       // 981
/**                                                                                                                    // 982
 * Formats input value to byte representation of string                                                                // 983
 *                                                                                                                     // 984
 * @method formatInputString                                                                                           // 985
 * @param {String}                                                                                                     // 986
 * @returns {SolidityParam}                                                                                            // 987
 */                                                                                                                    // 988
var formatInputString = function (value) {                                                                             // 989
    var result = utils.fromUtf8(value).substr(2);                                                                      // 990
    var length = result.length / 2;                                                                                    // 991
    var l = Math.floor((result.length + 63) / 64);                                                                     // 992
    result = utils.padRight(result, l * 64);                                                                           // 993
    return new SolidityParam(formatInputInt(length).value + result);                                                   // 994
};                                                                                                                     // 995
                                                                                                                       // 996
/**                                                                                                                    // 997
 * Formats input value to byte representation of bool                                                                  // 998
 *                                                                                                                     // 999
 * @method formatInputBool                                                                                             // 1000
 * @param {Boolean}                                                                                                    // 1001
 * @returns {SolidityParam}                                                                                            // 1002
 */                                                                                                                    // 1003
var formatInputBool = function (value) {                                                                               // 1004
    var result = '000000000000000000000000000000000000000000000000000000000000000' + (value ?  '1' : '0');             // 1005
    return new SolidityParam(result);                                                                                  // 1006
};                                                                                                                     // 1007
                                                                                                                       // 1008
/**                                                                                                                    // 1009
 * Formats input value to byte representation of real                                                                  // 1010
 * Values are multiplied by 2^m and encoded as integers                                                                // 1011
 *                                                                                                                     // 1012
 * @method formatInputReal                                                                                             // 1013
 * @param {String|Number|BigNumber}                                                                                    // 1014
 * @returns {SolidityParam}                                                                                            // 1015
 */                                                                                                                    // 1016
var formatInputReal = function (value) {                                                                               // 1017
    return formatInputInt(new BigNumber(value).times(new BigNumber(2).pow(128)));                                      // 1018
};                                                                                                                     // 1019
                                                                                                                       // 1020
/**                                                                                                                    // 1021
 * Check if input value is negative                                                                                    // 1022
 *                                                                                                                     // 1023
 * @method signedIsNegative                                                                                            // 1024
 * @param {String} value is hex format                                                                                 // 1025
 * @returns {Boolean} true if it is negative, otherwise false                                                          // 1026
 */                                                                                                                    // 1027
var signedIsNegative = function (value) {                                                                              // 1028
    return (new BigNumber(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';                                   // 1029
};                                                                                                                     // 1030
                                                                                                                       // 1031
/**                                                                                                                    // 1032
 * Formats right-aligned output bytes to int                                                                           // 1033
 *                                                                                                                     // 1034
 * @method formatOutputInt                                                                                             // 1035
 * @param {SolidityParam} param                                                                                        // 1036
 * @returns {BigNumber} right-aligned output bytes formatted to big number                                             // 1037
 */                                                                                                                    // 1038
var formatOutputInt = function (param) {                                                                               // 1039
    var value = param.staticPart() || "0";                                                                             // 1040
                                                                                                                       // 1041
    // check if it's negative number                                                                                   // 1042
    // it it is, return two's complement                                                                               // 1043
    if (signedIsNegative(value)) {                                                                                     // 1044
        return new BigNumber(value, 16).minus(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)).minus(1);
    }                                                                                                                  // 1046
    return new BigNumber(value, 16);                                                                                   // 1047
};                                                                                                                     // 1048
                                                                                                                       // 1049
/**                                                                                                                    // 1050
 * Formats right-aligned output bytes to uint                                                                          // 1051
 *                                                                                                                     // 1052
 * @method formatOutputUInt                                                                                            // 1053
 * @param {SolidityParam}                                                                                              // 1054
 * @returns {BigNumeber} right-aligned output bytes formatted to uint                                                  // 1055
 */                                                                                                                    // 1056
var formatOutputUInt = function (param) {                                                                              // 1057
    var value = param.staticPart() || "0";                                                                             // 1058
    return new BigNumber(value, 16);                                                                                   // 1059
};                                                                                                                     // 1060
                                                                                                                       // 1061
/**                                                                                                                    // 1062
 * Formats right-aligned output bytes to real                                                                          // 1063
 *                                                                                                                     // 1064
 * @method formatOutputReal                                                                                            // 1065
 * @param {SolidityParam}                                                                                              // 1066
 * @returns {BigNumber} input bytes formatted to real                                                                  // 1067
 */                                                                                                                    // 1068
var formatOutputReal = function (param) {                                                                              // 1069
    return formatOutputInt(param).dividedBy(new BigNumber(2).pow(128));                                                // 1070
};                                                                                                                     // 1071
                                                                                                                       // 1072
/**                                                                                                                    // 1073
 * Formats right-aligned output bytes to ureal                                                                         // 1074
 *                                                                                                                     // 1075
 * @method formatOutputUReal                                                                                           // 1076
 * @param {SolidityParam}                                                                                              // 1077
 * @returns {BigNumber} input bytes formatted to ureal                                                                 // 1078
 */                                                                                                                    // 1079
var formatOutputUReal = function (param) {                                                                             // 1080
    return formatOutputUInt(param).dividedBy(new BigNumber(2).pow(128));                                               // 1081
};                                                                                                                     // 1082
                                                                                                                       // 1083
/**                                                                                                                    // 1084
 * Should be used to format output bool                                                                                // 1085
 *                                                                                                                     // 1086
 * @method formatOutputBool                                                                                            // 1087
 * @param {SolidityParam}                                                                                              // 1088
 * @returns {Boolean} right-aligned input bytes formatted to bool                                                      // 1089
 */                                                                                                                    // 1090
var formatOutputBool = function (param) {                                                                              // 1091
    return param.staticPart() === '0000000000000000000000000000000000000000000000000000000000000001' ? true : false;   // 1092
};                                                                                                                     // 1093
                                                                                                                       // 1094
/**                                                                                                                    // 1095
 * Should be used to format output bytes                                                                               // 1096
 *                                                                                                                     // 1097
 * @method formatOutputBytes                                                                                           // 1098
 * @param {SolidityParam} left-aligned hex representation of string                                                    // 1099
 * @returns {String} hex string                                                                                        // 1100
 */                                                                                                                    // 1101
var formatOutputBytes = function (param) {                                                                             // 1102
    return '0x' + param.staticPart();                                                                                  // 1103
};                                                                                                                     // 1104
                                                                                                                       // 1105
/**                                                                                                                    // 1106
 * Should be used to format output bytes                                                                               // 1107
 *                                                                                                                     // 1108
 * @method formatOutputDynamicBytes                                                                                    // 1109
 * @param {SolidityParam} left-aligned hex representation of string                                                    // 1110
 * @returns {String} hex string                                                                                        // 1111
 */                                                                                                                    // 1112
var formatOutputDynamicBytes = function (param) {                                                                      // 1113
    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;                                 // 1114
    return '0x' + param.dynamicPart().substr(64, length);                                                              // 1115
};                                                                                                                     // 1116
                                                                                                                       // 1117
/**                                                                                                                    // 1118
 * Should be used to format output string                                                                              // 1119
 *                                                                                                                     // 1120
 * @method formatOutputString                                                                                          // 1121
 * @param {SolidityParam} left-aligned hex representation of string                                                    // 1122
 * @returns {String} ascii string                                                                                      // 1123
 */                                                                                                                    // 1124
var formatOutputString = function (param) {                                                                            // 1125
    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;                                 // 1126
    return utils.toUtf8(param.dynamicPart().substr(64, length));                                                       // 1127
};                                                                                                                     // 1128
                                                                                                                       // 1129
/**                                                                                                                    // 1130
 * Should be used to format output address                                                                             // 1131
 *                                                                                                                     // 1132
 * @method formatOutputAddress                                                                                         // 1133
 * @param {SolidityParam} right-aligned input bytes                                                                    // 1134
 * @returns {String} address                                                                                           // 1135
 */                                                                                                                    // 1136
var formatOutputAddress = function (param) {                                                                           // 1137
    var value = param.staticPart();                                                                                    // 1138
    return "0x" + value.slice(value.length - 40, value.length);                                                        // 1139
};                                                                                                                     // 1140
                                                                                                                       // 1141
module.exports = {                                                                                                     // 1142
    formatInputInt: formatInputInt,                                                                                    // 1143
    formatInputBytes: formatInputBytes,                                                                                // 1144
    formatInputDynamicBytes: formatInputDynamicBytes,                                                                  // 1145
    formatInputString: formatInputString,                                                                              // 1146
    formatInputBool: formatInputBool,                                                                                  // 1147
    formatInputReal: formatInputReal,                                                                                  // 1148
    formatOutputInt: formatOutputInt,                                                                                  // 1149
    formatOutputUInt: formatOutputUInt,                                                                                // 1150
    formatOutputReal: formatOutputReal,                                                                                // 1151
    formatOutputUReal: formatOutputUReal,                                                                              // 1152
    formatOutputBool: formatOutputBool,                                                                                // 1153
    formatOutputBytes: formatOutputBytes,                                                                              // 1154
    formatOutputDynamicBytes: formatOutputDynamicBytes,                                                                // 1155
    formatOutputString: formatOutputString,                                                                            // 1156
    formatOutputAddress: formatOutputAddress                                                                           // 1157
};                                                                                                                     // 1158
                                                                                                                       // 1159
                                                                                                                       // 1160
},{"../utils/config":18,"../utils/utils":20,"./param":11,"bignumber.js":"bignumber.js"}],10:[function(require,module,exports){
var f = require('./formatters');                                                                                       // 1162
var SolidityType = require('./type');                                                                                  // 1163
                                                                                                                       // 1164
/**                                                                                                                    // 1165
 * SolidityTypeInt is a prootype that represents int type                                                              // 1166
 * It matches:                                                                                                         // 1167
 * int                                                                                                                 // 1168
 * int[]                                                                                                               // 1169
 * int[4]                                                                                                              // 1170
 * int[][]                                                                                                             // 1171
 * int[3][]                                                                                                            // 1172
 * int[][6][], ...                                                                                                     // 1173
 * int32                                                                                                               // 1174
 * int64[]                                                                                                             // 1175
 * int8[4]                                                                                                             // 1176
 * int256[][]                                                                                                          // 1177
 * int[3][]                                                                                                            // 1178
 * int64[][6][], ...                                                                                                   // 1179
 */                                                                                                                    // 1180
var SolidityTypeInt = function () {                                                                                    // 1181
    this._inputFormatter = f.formatInputInt;                                                                           // 1182
    this._outputFormatter = f.formatOutputInt;                                                                         // 1183
};                                                                                                                     // 1184
                                                                                                                       // 1185
SolidityTypeInt.prototype = new SolidityType({});                                                                      // 1186
SolidityTypeInt.prototype.constructor = SolidityTypeInt;                                                               // 1187
                                                                                                                       // 1188
SolidityTypeInt.prototype.isType = function (name) {                                                                   // 1189
    return !!name.match(/^int([0-9]*)?(\[([0-9]*)\])*$/);                                                              // 1190
};                                                                                                                     // 1191
                                                                                                                       // 1192
SolidityTypeInt.prototype.staticPartLength = function (name) {                                                         // 1193
    return 32 * this.staticArrayLength(name);                                                                          // 1194
};                                                                                                                     // 1195
                                                                                                                       // 1196
module.exports = SolidityTypeInt;                                                                                      // 1197
                                                                                                                       // 1198
},{"./formatters":9,"./type":14}],11:[function(require,module,exports){                                                // 1199
/*                                                                                                                     // 1200
    This file is part of web3.js.                                                                                      // 1201
                                                                                                                       // 1202
    web3.js is free software: you can redistribute it and/or modify                                                    // 1203
    it under the terms of the GNU Lesser General Public License as published by                                        // 1204
    the Free Software Foundation, either version 3 of the License, or                                                  // 1205
    (at your option) any later version.                                                                                // 1206
                                                                                                                       // 1207
    web3.js is distributed in the hope that it will be useful,                                                         // 1208
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1209
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1210
    GNU Lesser General Public License for more details.                                                                // 1211
                                                                                                                       // 1212
    You should have received a copy of the GNU Lesser General Public License                                           // 1213
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1214
*/                                                                                                                     // 1215
/**                                                                                                                    // 1216
 * @file param.js                                                                                                      // 1217
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 1218
 * @date 2015                                                                                                          // 1219
 */                                                                                                                    // 1220
                                                                                                                       // 1221
var utils = require('../utils/utils');                                                                                 // 1222
                                                                                                                       // 1223
/**                                                                                                                    // 1224
 * SolidityParam object prototype.                                                                                     // 1225
 * Should be used when encoding, decoding solidity bytes                                                               // 1226
 */                                                                                                                    // 1227
var SolidityParam = function (value, offset) {                                                                         // 1228
    this.value = value || '';                                                                                          // 1229
    this.offset = offset; // offset in bytes                                                                           // 1230
};                                                                                                                     // 1231
                                                                                                                       // 1232
/**                                                                                                                    // 1233
 * This method should be used to get length of params's dynamic part                                                   // 1234
 *                                                                                                                     // 1235
 * @method dynamicPartLength                                                                                           // 1236
 * @returns {Number} length of dynamic part (in bytes)                                                                 // 1237
 */                                                                                                                    // 1238
SolidityParam.prototype.dynamicPartLength = function () {                                                              // 1239
    return this.dynamicPart().length / 2;                                                                              // 1240
};                                                                                                                     // 1241
                                                                                                                       // 1242
/**                                                                                                                    // 1243
 * This method should be used to create copy of solidity param with different offset                                   // 1244
 *                                                                                                                     // 1245
 * @method withOffset                                                                                                  // 1246
 * @param {Number} offset length in bytes                                                                              // 1247
 * @returns {SolidityParam} new solidity param with applied offset                                                     // 1248
 */                                                                                                                    // 1249
SolidityParam.prototype.withOffset = function (offset) {                                                               // 1250
    return new SolidityParam(this.value, offset);                                                                      // 1251
};                                                                                                                     // 1252
                                                                                                                       // 1253
/**                                                                                                                    // 1254
 * This method should be used to combine solidity params together                                                      // 1255
 * eg. when appending an array                                                                                         // 1256
 *                                                                                                                     // 1257
 * @method combine                                                                                                     // 1258
 * @param {SolidityParam} param with which we should combine                                                           // 1259
 * @param {SolidityParam} result of combination                                                                        // 1260
 */                                                                                                                    // 1261
SolidityParam.prototype.combine = function (param) {                                                                   // 1262
    return new SolidityParam(this.value + param.value);                                                                // 1263
};                                                                                                                     // 1264
                                                                                                                       // 1265
/**                                                                                                                    // 1266
 * This method should be called to check if param has dynamic size.                                                    // 1267
 * If it has, it returns true, otherwise false                                                                         // 1268
 *                                                                                                                     // 1269
 * @method isDynamic                                                                                                   // 1270
 * @returns {Boolean}                                                                                                  // 1271
 */                                                                                                                    // 1272
SolidityParam.prototype.isDynamic = function () {                                                                      // 1273
    return this.offset !== undefined;                                                                                  // 1274
};                                                                                                                     // 1275
                                                                                                                       // 1276
/**                                                                                                                    // 1277
 * This method should be called to transform offset to bytes                                                           // 1278
 *                                                                                                                     // 1279
 * @method offsetAsBytes                                                                                               // 1280
 * @returns {String} bytes representation of offset                                                                    // 1281
 */                                                                                                                    // 1282
SolidityParam.prototype.offsetAsBytes = function () {                                                                  // 1283
    return !this.isDynamic() ? '' : utils.padLeft(utils.toTwosComplement(this.offset).toString(16), 64);               // 1284
};                                                                                                                     // 1285
                                                                                                                       // 1286
/**                                                                                                                    // 1287
 * This method should be called to get static part of param                                                            // 1288
 *                                                                                                                     // 1289
 * @method staticPart                                                                                                  // 1290
 * @returns {String} offset if it is a dynamic param, otherwise value                                                  // 1291
 */                                                                                                                    // 1292
SolidityParam.prototype.staticPart = function () {                                                                     // 1293
    if (!this.isDynamic()) {                                                                                           // 1294
        return this.value;                                                                                             // 1295
    }                                                                                                                  // 1296
    return this.offsetAsBytes();                                                                                       // 1297
};                                                                                                                     // 1298
                                                                                                                       // 1299
/**                                                                                                                    // 1300
 * This method should be called to get dynamic part of param                                                           // 1301
 *                                                                                                                     // 1302
 * @method dynamicPart                                                                                                 // 1303
 * @returns {String} returns a value if it is a dynamic param, otherwise empty string                                  // 1304
 */                                                                                                                    // 1305
SolidityParam.prototype.dynamicPart = function () {                                                                    // 1306
    return this.isDynamic() ? this.value : '';                                                                         // 1307
};                                                                                                                     // 1308
                                                                                                                       // 1309
/**                                                                                                                    // 1310
 * This method should be called to encode param                                                                        // 1311
 *                                                                                                                     // 1312
 * @method encode                                                                                                      // 1313
 * @returns {String}                                                                                                   // 1314
 */                                                                                                                    // 1315
SolidityParam.prototype.encode = function () {                                                                         // 1316
    return this.staticPart() + this.dynamicPart();                                                                     // 1317
};                                                                                                                     // 1318
                                                                                                                       // 1319
/**                                                                                                                    // 1320
 * This method should be called to encode array of params                                                              // 1321
 *                                                                                                                     // 1322
 * @method encodeList                                                                                                  // 1323
 * @param {Array[SolidityParam]} params                                                                                // 1324
 * @returns {String}                                                                                                   // 1325
 */                                                                                                                    // 1326
SolidityParam.encodeList = function (params) {                                                                         // 1327
                                                                                                                       // 1328
    // updating offsets                                                                                                // 1329
    var totalOffset = params.length * 32;                                                                              // 1330
    var offsetParams = params.map(function (param) {                                                                   // 1331
        if (!param.isDynamic()) {                                                                                      // 1332
            return param;                                                                                              // 1333
        }                                                                                                              // 1334
        var offset = totalOffset;                                                                                      // 1335
        totalOffset += param.dynamicPartLength();                                                                      // 1336
        return param.withOffset(offset);                                                                               // 1337
    });                                                                                                                // 1338
                                                                                                                       // 1339
    // encode everything!                                                                                              // 1340
    return offsetParams.reduce(function (result, param) {                                                              // 1341
        return result + param.dynamicPart();                                                                           // 1342
    }, offsetParams.reduce(function (result, param) {                                                                  // 1343
        return result + param.staticPart();                                                                            // 1344
    }, ''));                                                                                                           // 1345
};                                                                                                                     // 1346
                                                                                                                       // 1347
                                                                                                                       // 1348
                                                                                                                       // 1349
module.exports = SolidityParam;                                                                                        // 1350
                                                                                                                       // 1351
                                                                                                                       // 1352
},{"../utils/utils":20}],12:[function(require,module,exports){                                                         // 1353
var f = require('./formatters');                                                                                       // 1354
var SolidityType = require('./type');                                                                                  // 1355
                                                                                                                       // 1356
/**                                                                                                                    // 1357
 * SolidityTypeReal is a prootype that represents real type                                                            // 1358
 * It matches:                                                                                                         // 1359
 * real                                                                                                                // 1360
 * real[]                                                                                                              // 1361
 * real[4]                                                                                                             // 1362
 * real[][]                                                                                                            // 1363
 * real[3][]                                                                                                           // 1364
 * real[][6][], ...                                                                                                    // 1365
 * real32                                                                                                              // 1366
 * real64[]                                                                                                            // 1367
 * real8[4]                                                                                                            // 1368
 * real256[][]                                                                                                         // 1369
 * real[3][]                                                                                                           // 1370
 * real64[][6][], ...                                                                                                  // 1371
 */                                                                                                                    // 1372
var SolidityTypeReal = function () {                                                                                   // 1373
    this._inputFormatter = f.formatInputReal;                                                                          // 1374
    this._outputFormatter = f.formatOutputReal;                                                                        // 1375
};                                                                                                                     // 1376
                                                                                                                       // 1377
SolidityTypeReal.prototype = new SolidityType({});                                                                     // 1378
SolidityTypeReal.prototype.constructor = SolidityTypeReal;                                                             // 1379
                                                                                                                       // 1380
SolidityTypeReal.prototype.isType = function (name) {                                                                  // 1381
    return !!name.match(/real([0-9]*)?(\[([0-9]*)\])?/);                                                               // 1382
};                                                                                                                     // 1383
                                                                                                                       // 1384
SolidityTypeReal.prototype.staticPartLength = function (name) {                                                        // 1385
    return 32 * this.staticArrayLength(name);                                                                          // 1386
};                                                                                                                     // 1387
                                                                                                                       // 1388
module.exports = SolidityTypeReal;                                                                                     // 1389
                                                                                                                       // 1390
},{"./formatters":9,"./type":14}],13:[function(require,module,exports){                                                // 1391
var f = require('./formatters');                                                                                       // 1392
var SolidityType = require('./type');                                                                                  // 1393
                                                                                                                       // 1394
var SolidityTypeString = function () {                                                                                 // 1395
    this._inputFormatter = f.formatInputString;                                                                        // 1396
    this._outputFormatter = f.formatOutputString;                                                                      // 1397
};                                                                                                                     // 1398
                                                                                                                       // 1399
SolidityTypeString.prototype = new SolidityType({});                                                                   // 1400
SolidityTypeString.prototype.constructor = SolidityTypeString;                                                         // 1401
                                                                                                                       // 1402
SolidityTypeString.prototype.isType = function (name) {                                                                // 1403
    return !!name.match(/^string(\[([0-9]*)\])*$/);                                                                    // 1404
};                                                                                                                     // 1405
                                                                                                                       // 1406
SolidityTypeString.prototype.staticPartLength = function (name) {                                                      // 1407
    return 32 * this.staticArrayLength(name);                                                                          // 1408
};                                                                                                                     // 1409
                                                                                                                       // 1410
SolidityTypeString.prototype.isDynamicType = function () {                                                             // 1411
    return true;                                                                                                       // 1412
};                                                                                                                     // 1413
                                                                                                                       // 1414
module.exports = SolidityTypeString;                                                                                   // 1415
                                                                                                                       // 1416
                                                                                                                       // 1417
},{"./formatters":9,"./type":14}],14:[function(require,module,exports){                                                // 1418
var f = require('./formatters');                                                                                       // 1419
var SolidityParam = require('./param');                                                                                // 1420
                                                                                                                       // 1421
/**                                                                                                                    // 1422
 * SolidityType prototype is used to encode/decode solidity params of certain type                                     // 1423
 */                                                                                                                    // 1424
var SolidityType = function (config) {                                                                                 // 1425
    this._inputFormatter = config.inputFormatter;                                                                      // 1426
    this._outputFormatter = config.outputFormatter;                                                                    // 1427
};                                                                                                                     // 1428
                                                                                                                       // 1429
/**                                                                                                                    // 1430
 * Should be used to determine if this SolidityType do match given name                                                // 1431
 *                                                                                                                     // 1432
 * @method isType                                                                                                      // 1433
 * @param {String} name                                                                                                // 1434
 * @return {Bool} true if type match this SolidityType, otherwise false                                                // 1435
 */                                                                                                                    // 1436
SolidityType.prototype.isType = function (name) {                                                                      // 1437
    throw "this method should be overrwritten for type " + name;                                                       // 1438
};                                                                                                                     // 1439
                                                                                                                       // 1440
/**                                                                                                                    // 1441
 * Should be used to determine what is the length of static part in given type                                         // 1442
 *                                                                                                                     // 1443
 * @method staticPartLength                                                                                            // 1444
 * @param {String} name                                                                                                // 1445
 * @return {Number} length of static part in bytes                                                                     // 1446
 */                                                                                                                    // 1447
SolidityType.prototype.staticPartLength = function (name) {                                                            // 1448
    throw "this method should be overrwritten for type: " + name;                                                      // 1449
};                                                                                                                     // 1450
                                                                                                                       // 1451
/**                                                                                                                    // 1452
 * Should be used to determine if type is dynamic array                                                                // 1453
 * eg:                                                                                                                 // 1454
 * "type[]" => true                                                                                                    // 1455
 * "type[4]" => false                                                                                                  // 1456
 *                                                                                                                     // 1457
 * @method isDynamicArray                                                                                              // 1458
 * @param {String} name                                                                                                // 1459
 * @return {Bool} true if the type is dynamic array                                                                    // 1460
 */                                                                                                                    // 1461
SolidityType.prototype.isDynamicArray = function (name) {                                                              // 1462
    var nestedTypes = this.nestedTypes(name);                                                                          // 1463
    return !!nestedTypes && !nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);                                  // 1464
};                                                                                                                     // 1465
                                                                                                                       // 1466
/**                                                                                                                    // 1467
 * Should be used to determine if type is static array                                                                 // 1468
 * eg:                                                                                                                 // 1469
 * "type[]" => false                                                                                                   // 1470
 * "type[4]" => true                                                                                                   // 1471
 *                                                                                                                     // 1472
 * @method isStaticArray                                                                                               // 1473
 * @param {String} name                                                                                                // 1474
 * @return {Bool} true if the type is static array                                                                     // 1475
 */                                                                                                                    // 1476
SolidityType.prototype.isStaticArray = function (name) {                                                               // 1477
    var nestedTypes = this.nestedTypes(name);                                                                          // 1478
    return !!nestedTypes && !!nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);                                 // 1479
};                                                                                                                     // 1480
                                                                                                                       // 1481
/**                                                                                                                    // 1482
 * Should return length of static array                                                                                // 1483
 * eg.                                                                                                                 // 1484
 * "int[32]" => 32                                                                                                     // 1485
 * "int256[14]" => 14                                                                                                  // 1486
 * "int[2][3]" => 3                                                                                                    // 1487
 * "int" => 1                                                                                                          // 1488
 * "int[1]" => 1                                                                                                       // 1489
 * "int[]" => 1                                                                                                        // 1490
 *                                                                                                                     // 1491
 * @method staticArrayLength                                                                                           // 1492
 * @param {String} name                                                                                                // 1493
 * @return {Number} static array length                                                                                // 1494
 */                                                                                                                    // 1495
SolidityType.prototype.staticArrayLength = function (name) {                                                           // 1496
    var nestedTypes = this.nestedTypes(name);                                                                          // 1497
    if (nestedTypes) {                                                                                                 // 1498
       return parseInt(nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g) || 1);                                  // 1499
    }                                                                                                                  // 1500
    return 1;                                                                                                          // 1501
};                                                                                                                     // 1502
                                                                                                                       // 1503
/**                                                                                                                    // 1504
 * Should return nested type                                                                                           // 1505
 * eg.                                                                                                                 // 1506
 * "int[32]" => "int"                                                                                                  // 1507
 * "int256[14]" => "int256"                                                                                            // 1508
 * "int[2][3]" => "int[2]"                                                                                             // 1509
 * "int" => "int"                                                                                                      // 1510
 * "int[]" => "int"                                                                                                    // 1511
 *                                                                                                                     // 1512
 * @method nestedName                                                                                                  // 1513
 * @param {String} name                                                                                                // 1514
 * @return {String} nested name                                                                                        // 1515
 */                                                                                                                    // 1516
SolidityType.prototype.nestedName = function (name) {                                                                  // 1517
    // remove last [] in name                                                                                          // 1518
    var nestedTypes = this.nestedTypes(name);                                                                          // 1519
    if (!nestedTypes) {                                                                                                // 1520
        return name;                                                                                                   // 1521
    }                                                                                                                  // 1522
                                                                                                                       // 1523
    return name.substr(0, name.length - nestedTypes[nestedTypes.length - 1].length);                                   // 1524
};                                                                                                                     // 1525
                                                                                                                       // 1526
/**                                                                                                                    // 1527
 * Should return true if type has dynamic size by default                                                              // 1528
 * such types are "string", "bytes"                                                                                    // 1529
 *                                                                                                                     // 1530
 * @method isDynamicType                                                                                               // 1531
 * @param {String} name                                                                                                // 1532
 * @return {Bool} true if is dynamic, otherwise false                                                                  // 1533
 */                                                                                                                    // 1534
SolidityType.prototype.isDynamicType = function () {                                                                   // 1535
    return false;                                                                                                      // 1536
};                                                                                                                     // 1537
                                                                                                                       // 1538
/**                                                                                                                    // 1539
 * Should return array of nested types                                                                                 // 1540
 * eg.                                                                                                                 // 1541
 * "int[2][3][]" => ["[2]", "[3]", "[]"]                                                                               // 1542
 * "int[] => ["[]"]                                                                                                    // 1543
 * "int" => null                                                                                                       // 1544
 *                                                                                                                     // 1545
 * @method nestedTypes                                                                                                 // 1546
 * @param {String} name                                                                                                // 1547
 * @return {Array} array of nested types                                                                               // 1548
 */                                                                                                                    // 1549
SolidityType.prototype.nestedTypes = function (name) {                                                                 // 1550
    // return list of strings eg. "[]", "[3]", "[]", "[2]"                                                             // 1551
    return name.match(/(\[[0-9]*\])/g);                                                                                // 1552
};                                                                                                                     // 1553
                                                                                                                       // 1554
/**                                                                                                                    // 1555
 * Should be used to encode the value                                                                                  // 1556
 *                                                                                                                     // 1557
 * @method encode                                                                                                      // 1558
 * @param {Object} value                                                                                               // 1559
 * @param {String} name                                                                                                // 1560
 * @return {String} encoded value                                                                                      // 1561
 */                                                                                                                    // 1562
SolidityType.prototype.encode = function (value, name) {                                                               // 1563
    var self = this;                                                                                                   // 1564
    if (this.isDynamicArray(name)) {                                                                                   // 1565
                                                                                                                       // 1566
        return (function () {                                                                                          // 1567
            var length = value.length;                          // in int                                              // 1568
            var nestedName = self.nestedName(name);                                                                    // 1569
                                                                                                                       // 1570
            var result = [];                                                                                           // 1571
            result.push(f.formatInputInt(length).encode());                                                            // 1572
                                                                                                                       // 1573
            value.forEach(function (v) {                                                                               // 1574
                result.push(self.encode(v, nestedName));                                                               // 1575
            });                                                                                                        // 1576
                                                                                                                       // 1577
            return result;                                                                                             // 1578
        })();                                                                                                          // 1579
                                                                                                                       // 1580
    } else if (this.isStaticArray(name)) {                                                                             // 1581
                                                                                                                       // 1582
        return (function () {                                                                                          // 1583
            var length = self.staticArrayLength(name);          // in int                                              // 1584
            var nestedName = self.nestedName(name);                                                                    // 1585
                                                                                                                       // 1586
            var result = [];                                                                                           // 1587
            for (var i = 0; i < length; i++) {                                                                         // 1588
                result.push(self.encode(value[i], nestedName));                                                        // 1589
            }                                                                                                          // 1590
                                                                                                                       // 1591
            return result;                                                                                             // 1592
        })();                                                                                                          // 1593
                                                                                                                       // 1594
    }                                                                                                                  // 1595
                                                                                                                       // 1596
    return this._inputFormatter(value, name).encode();                                                                 // 1597
};                                                                                                                     // 1598
                                                                                                                       // 1599
/**                                                                                                                    // 1600
 * Should be used to decode value from bytes                                                                           // 1601
 *                                                                                                                     // 1602
 * @method decode                                                                                                      // 1603
 * @param {String} bytes                                                                                               // 1604
 * @param {Number} offset in bytes                                                                                     // 1605
 * @param {String} name type name                                                                                      // 1606
 * @returns {Object} decoded value                                                                                     // 1607
 */                                                                                                                    // 1608
SolidityType.prototype.decode = function (bytes, offset, name) {                                                       // 1609
    var self = this;                                                                                                   // 1610
                                                                                                                       // 1611
    if (this.isDynamicArray(name)) {                                                                                   // 1612
                                                                                                                       // 1613
        return (function () {                                                                                          // 1614
            var arrayOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes                               // 1615
            var length = parseInt('0x' + bytes.substr(arrayOffset * 2, 64)); // in int                                 // 1616
            var arrayStart = arrayOffset + 32; // array starts after length; // in bytes                               // 1617
                                                                                                                       // 1618
            var nestedName = self.nestedName(name);                                                                    // 1619
            var nestedStaticPartLength = self.staticPartLength(nestedName);  // in bytes                               // 1620
            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;                   // 1621
            var result = [];                                                                                           // 1622
                                                                                                                       // 1623
            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {          // 1624
                result.push(self.decode(bytes, arrayStart + i, nestedName));                                           // 1625
            }                                                                                                          // 1626
                                                                                                                       // 1627
            return result;                                                                                             // 1628
        })();                                                                                                          // 1629
                                                                                                                       // 1630
    } else if (this.isStaticArray(name)) {                                                                             // 1631
                                                                                                                       // 1632
        return (function () {                                                                                          // 1633
            var length = self.staticArrayLength(name);                      // in int                                  // 1634
            var arrayStart = offset;                                        // in bytes                                // 1635
                                                                                                                       // 1636
            var nestedName = self.nestedName(name);                                                                    // 1637
            var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes                                // 1638
            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;                   // 1639
            var result = [];                                                                                           // 1640
                                                                                                                       // 1641
            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {          // 1642
                result.push(self.decode(bytes, arrayStart + i, nestedName));                                           // 1643
            }                                                                                                          // 1644
                                                                                                                       // 1645
            return result;                                                                                             // 1646
        })();                                                                                                          // 1647
    } else if (this.isDynamicType(name)) {                                                                             // 1648
                                                                                                                       // 1649
        return (function () {                                                                                          // 1650
            var dynamicOffset = parseInt('0x' + bytes.substr(offset * 2, 64));      // in bytes                        // 1651
            var length = parseInt('0x' + bytes.substr(dynamicOffset * 2, 64));      // in bytes                        // 1652
            var roundedLength = Math.floor((length + 31) / 32);                     // in int                          // 1653
                                                                                                                       // 1654
            return self._outputFormatter(new SolidityParam(bytes.substr(dynamicOffset * 2, ( 1 + roundedLength) * 64), 0));
        })();                                                                                                          // 1656
    }                                                                                                                  // 1657
                                                                                                                       // 1658
    var length = this.staticPartLength(name);                                                                          // 1659
    return this._outputFormatter(new SolidityParam(bytes.substr(offset * 2, length * 2)));                             // 1660
};                                                                                                                     // 1661
                                                                                                                       // 1662
module.exports = SolidityType;                                                                                         // 1663
                                                                                                                       // 1664
},{"./formatters":9,"./param":11}],15:[function(require,module,exports){                                               // 1665
var f = require('./formatters');                                                                                       // 1666
var SolidityType = require('./type');                                                                                  // 1667
                                                                                                                       // 1668
/**                                                                                                                    // 1669
 * SolidityTypeUInt is a prootype that represents uint type                                                            // 1670
 * It matches:                                                                                                         // 1671
 * uint                                                                                                                // 1672
 * uint[]                                                                                                              // 1673
 * uint[4]                                                                                                             // 1674
 * uint[][]                                                                                                            // 1675
 * uint[3][]                                                                                                           // 1676
 * uint[][6][], ...                                                                                                    // 1677
 * uint32                                                                                                              // 1678
 * uint64[]                                                                                                            // 1679
 * uint8[4]                                                                                                            // 1680
 * uint256[][]                                                                                                         // 1681
 * uint[3][]                                                                                                           // 1682
 * uint64[][6][], ...                                                                                                  // 1683
 */                                                                                                                    // 1684
var SolidityTypeUInt = function () {                                                                                   // 1685
    this._inputFormatter = f.formatInputInt;                                                                           // 1686
    this._outputFormatter = f.formatOutputUInt;                                                                        // 1687
};                                                                                                                     // 1688
                                                                                                                       // 1689
SolidityTypeUInt.prototype = new SolidityType({});                                                                     // 1690
SolidityTypeUInt.prototype.constructor = SolidityTypeUInt;                                                             // 1691
                                                                                                                       // 1692
SolidityTypeUInt.prototype.isType = function (name) {                                                                  // 1693
    return !!name.match(/^uint([0-9]*)?(\[([0-9]*)\])*$/);                                                             // 1694
};                                                                                                                     // 1695
                                                                                                                       // 1696
SolidityTypeUInt.prototype.staticPartLength = function (name) {                                                        // 1697
    return 32 * this.staticArrayLength(name);                                                                          // 1698
};                                                                                                                     // 1699
                                                                                                                       // 1700
module.exports = SolidityTypeUInt;                                                                                     // 1701
                                                                                                                       // 1702
},{"./formatters":9,"./type":14}],16:[function(require,module,exports){                                                // 1703
var f = require('./formatters');                                                                                       // 1704
var SolidityType = require('./type');                                                                                  // 1705
                                                                                                                       // 1706
/**                                                                                                                    // 1707
 * SolidityTypeUReal is a prootype that represents ureal type                                                          // 1708
 * It matches:                                                                                                         // 1709
 * ureal                                                                                                               // 1710
 * ureal[]                                                                                                             // 1711
 * ureal[4]                                                                                                            // 1712
 * ureal[][]                                                                                                           // 1713
 * ureal[3][]                                                                                                          // 1714
 * ureal[][6][], ...                                                                                                   // 1715
 * ureal32                                                                                                             // 1716
 * ureal64[]                                                                                                           // 1717
 * ureal8[4]                                                                                                           // 1718
 * ureal256[][]                                                                                                        // 1719
 * ureal[3][]                                                                                                          // 1720
 * ureal64[][6][], ...                                                                                                 // 1721
 */                                                                                                                    // 1722
var SolidityTypeUReal = function () {                                                                                  // 1723
    this._inputFormatter = f.formatInputReal;                                                                          // 1724
    this._outputFormatter = f.formatOutputUReal;                                                                       // 1725
};                                                                                                                     // 1726
                                                                                                                       // 1727
SolidityTypeUReal.prototype = new SolidityType({});                                                                    // 1728
SolidityTypeUReal.prototype.constructor = SolidityTypeUReal;                                                           // 1729
                                                                                                                       // 1730
SolidityTypeUReal.prototype.isType = function (name) {                                                                 // 1731
    return !!name.match(/^ureal([0-9]*)?(\[([0-9]*)\])*$/);                                                            // 1732
};                                                                                                                     // 1733
                                                                                                                       // 1734
SolidityTypeUReal.prototype.staticPartLength = function (name) {                                                       // 1735
    return 32 * this.staticArrayLength(name);                                                                          // 1736
};                                                                                                                     // 1737
                                                                                                                       // 1738
module.exports = SolidityTypeUReal;                                                                                    // 1739
                                                                                                                       // 1740
},{"./formatters":9,"./type":14}],17:[function(require,module,exports){                                                // 1741
'use strict';                                                                                                          // 1742
                                                                                                                       // 1743
// go env doesn't have and need XMLHttpRequest                                                                         // 1744
if (typeof XMLHttpRequest === 'undefined') {                                                                           // 1745
    exports.XMLHttpRequest = {};                                                                                       // 1746
} else {                                                                                                               // 1747
    exports.XMLHttpRequest = XMLHttpRequest; // jshint ignore:line                                                     // 1748
}                                                                                                                      // 1749
                                                                                                                       // 1750
                                                                                                                       // 1751
},{}],18:[function(require,module,exports){                                                                            // 1752
/*                                                                                                                     // 1753
    This file is part of web3.js.                                                                                      // 1754
                                                                                                                       // 1755
    web3.js is free software: you can redistribute it and/or modify                                                    // 1756
    it under the terms of the GNU Lesser General Public License as published by                                        // 1757
    the Free Software Foundation, either version 3 of the License, or                                                  // 1758
    (at your option) any later version.                                                                                // 1759
                                                                                                                       // 1760
    web3.js is distributed in the hope that it will be useful,                                                         // 1761
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1762
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1763
    GNU Lesser General Public License for more details.                                                                // 1764
                                                                                                                       // 1765
    You should have received a copy of the GNU Lesser General Public License                                           // 1766
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1767
*/                                                                                                                     // 1768
/** @file config.js                                                                                                    // 1769
 * @authors:                                                                                                           // 1770
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 1771
 * @date 2015                                                                                                          // 1772
 */                                                                                                                    // 1773
                                                                                                                       // 1774
/**                                                                                                                    // 1775
 * Utils                                                                                                               // 1776
 *                                                                                                                     // 1777
 * @module utils                                                                                                       // 1778
 */                                                                                                                    // 1779
                                                                                                                       // 1780
/**                                                                                                                    // 1781
 * Utility functions                                                                                                   // 1782
 *                                                                                                                     // 1783
 * @class [utils] config                                                                                               // 1784
 * @constructor                                                                                                        // 1785
 */                                                                                                                    // 1786
                                                                                                                       // 1787
                                                                                                                       // 1788
/// required to define ETH_BIGNUMBER_ROUNDING_MODE                                                                     // 1789
var BigNumber = require('bignumber.js');                                                                               // 1790
                                                                                                                       // 1791
var ETH_UNITS = [                                                                                                      // 1792
    'wei',                                                                                                             // 1793
    'kwei',                                                                                                            // 1794
    'Mwei',                                                                                                            // 1795
    'Gwei',                                                                                                            // 1796
    'szabo',                                                                                                           // 1797
    'finney',                                                                                                          // 1798
    'femtoether',                                                                                                      // 1799
    'picoether',                                                                                                       // 1800
    'nanoether',                                                                                                       // 1801
    'microether',                                                                                                      // 1802
    'milliether',                                                                                                      // 1803
    'nano',                                                                                                            // 1804
    'micro',                                                                                                           // 1805
    'milli',                                                                                                           // 1806
    'ether',                                                                                                           // 1807
    'grand',                                                                                                           // 1808
    'Mether',                                                                                                          // 1809
    'Gether',                                                                                                          // 1810
    'Tether',                                                                                                          // 1811
    'Pether',                                                                                                          // 1812
    'Eether',                                                                                                          // 1813
    'Zether',                                                                                                          // 1814
    'Yether',                                                                                                          // 1815
    'Nether',                                                                                                          // 1816
    'Dether',                                                                                                          // 1817
    'Vether',                                                                                                          // 1818
    'Uether'                                                                                                           // 1819
];                                                                                                                     // 1820
                                                                                                                       // 1821
module.exports = {                                                                                                     // 1822
    ETH_PADDING: 32,                                                                                                   // 1823
    ETH_SIGNATURE_LENGTH: 4,                                                                                           // 1824
    ETH_UNITS: ETH_UNITS,                                                                                              // 1825
    ETH_BIGNUMBER_ROUNDING_MODE: { ROUNDING_MODE: BigNumber.ROUND_DOWN },                                              // 1826
    ETH_POLLING_TIMEOUT: 1000/2,                                                                                       // 1827
    defaultBlock: 'latest',                                                                                            // 1828
    defaultAccount: undefined                                                                                          // 1829
};                                                                                                                     // 1830
                                                                                                                       // 1831
                                                                                                                       // 1832
},{"bignumber.js":"bignumber.js"}],19:[function(require,module,exports){                                               // 1833
/*                                                                                                                     // 1834
    This file is part of web3.js.                                                                                      // 1835
                                                                                                                       // 1836
    web3.js is free software: you can redistribute it and/or modify                                                    // 1837
    it under the terms of the GNU Lesser General Public License as published by                                        // 1838
    the Free Software Foundation, either version 3 of the License, or                                                  // 1839
    (at your option) any later version.                                                                                // 1840
                                                                                                                       // 1841
    web3.js is distributed in the hope that it will be useful,                                                         // 1842
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1843
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1844
    GNU Lesser General Public License for more details.                                                                // 1845
                                                                                                                       // 1846
    You should have received a copy of the GNU Lesser General Public License                                           // 1847
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1848
*/                                                                                                                     // 1849
/**                                                                                                                    // 1850
 * @file sha3.js                                                                                                       // 1851
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 1852
 * @date 2015                                                                                                          // 1853
 */                                                                                                                    // 1854
                                                                                                                       // 1855
var CryptoJS = require('crypto-js');                                                                                   // 1856
var sha3 = require('crypto-js/sha3');                                                                                  // 1857
                                                                                                                       // 1858
module.exports = function (value, options) {                                                                           // 1859
    if (options && options.encoding === 'hex') {                                                                       // 1860
        if (value.length > 2 && value.substr(0, 2) === '0x') {                                                         // 1861
            value = value.substr(2);                                                                                   // 1862
        }                                                                                                              // 1863
        value = CryptoJS.enc.Hex.parse(value);                                                                         // 1864
    }                                                                                                                  // 1865
                                                                                                                       // 1866
    return sha3(value, {                                                                                               // 1867
        outputLength: 256                                                                                              // 1868
    }).toString();                                                                                                     // 1869
};                                                                                                                     // 1870
                                                                                                                       // 1871
                                                                                                                       // 1872
},{"crypto-js":57,"crypto-js/sha3":78}],20:[function(require,module,exports){                                          // 1873
/*                                                                                                                     // 1874
    This file is part of web3.js.                                                                                      // 1875
                                                                                                                       // 1876
    web3.js is free software: you can redistribute it and/or modify                                                    // 1877
    it under the terms of the GNU Lesser General Public License as published by                                        // 1878
    the Free Software Foundation, either version 3 of the License, or                                                  // 1879
    (at your option) any later version.                                                                                // 1880
                                                                                                                       // 1881
    web3.js is distributed in the hope that it will be useful,                                                         // 1882
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1883
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1884
    GNU Lesser General Public License for more details.                                                                // 1885
                                                                                                                       // 1886
    You should have received a copy of the GNU Lesser General Public License                                           // 1887
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1888
*/                                                                                                                     // 1889
/**                                                                                                                    // 1890
 * @file utils.js                                                                                                      // 1891
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 1892
 * @date 2015                                                                                                          // 1893
 */                                                                                                                    // 1894
                                                                                                                       // 1895
/**                                                                                                                    // 1896
 * Utils                                                                                                               // 1897
 *                                                                                                                     // 1898
 * @module utils                                                                                                       // 1899
 */                                                                                                                    // 1900
                                                                                                                       // 1901
/**                                                                                                                    // 1902
 * Utility functions                                                                                                   // 1903
 *                                                                                                                     // 1904
 * @class [utils] utils                                                                                                // 1905
 * @constructor                                                                                                        // 1906
 */                                                                                                                    // 1907
                                                                                                                       // 1908
                                                                                                                       // 1909
var BigNumber = require('bignumber.js');                                                                               // 1910
var utf8 = require('utf8');                                                                                            // 1911
                                                                                                                       // 1912
var unitMap = {                                                                                                        // 1913
    'wei':          '1',                                                                                               // 1914
    'kwei':         '1000',                                                                                            // 1915
    'ada':          '1000',                                                                                            // 1916
    'femtoether':   '1000',                                                                                            // 1917
    'mwei':         '1000000',                                                                                         // 1918
    'babbage':      '1000000',                                                                                         // 1919
    'picoether':    '1000000',                                                                                         // 1920
    'gwei':         '1000000000',                                                                                      // 1921
    'shannon':      '1000000000',                                                                                      // 1922
    'nanoether':    '1000000000',                                                                                      // 1923
    'nano':         '1000000000',                                                                                      // 1924
    'szabo':        '1000000000000',                                                                                   // 1925
    'microether':   '1000000000000',                                                                                   // 1926
    'micro':        '1000000000000',                                                                                   // 1927
    'finney':       '1000000000000000',                                                                                // 1928
    'milliether':    '1000000000000000',                                                                               // 1929
    'milli':         '1000000000000000',                                                                               // 1930
    'ether':        '1000000000000000000',                                                                             // 1931
    'kether':       '1000000000000000000000',                                                                          // 1932
    'grand':        '1000000000000000000000',                                                                          // 1933
    'einstein':     '1000000000000000000000',                                                                          // 1934
    'mether':       '1000000000000000000000000',                                                                       // 1935
    'gether':       '1000000000000000000000000000',                                                                    // 1936
    'tether':       '1000000000000000000000000000000'                                                                  // 1937
};                                                                                                                     // 1938
                                                                                                                       // 1939
/**                                                                                                                    // 1940
 * Should be called to pad string to expected length                                                                   // 1941
 *                                                                                                                     // 1942
 * @method padLeft                                                                                                     // 1943
 * @param {String} string to be padded                                                                                 // 1944
 * @param {Number} characters that result string should have                                                           // 1945
 * @param {String} sign, by default 0                                                                                  // 1946
 * @returns {String} right aligned string                                                                              // 1947
 */                                                                                                                    // 1948
var padLeft = function (string, chars, sign) {                                                                         // 1949
    return new Array(chars - string.length + 1).join(sign ? sign : "0") + string;                                      // 1950
};                                                                                                                     // 1951
                                                                                                                       // 1952
/**                                                                                                                    // 1953
 * Should be called to pad string to expected length                                                                   // 1954
 *                                                                                                                     // 1955
 * @method padRight                                                                                                    // 1956
 * @param {String} string to be padded                                                                                 // 1957
 * @param {Number} characters that result string should have                                                           // 1958
 * @param {String} sign, by default 0                                                                                  // 1959
 * @returns {String} right aligned string                                                                              // 1960
 */                                                                                                                    // 1961
var padRight = function (string, chars, sign) {                                                                        // 1962
    return string + (new Array(chars - string.length + 1).join(sign ? sign : "0"));                                    // 1963
};                                                                                                                     // 1964
                                                                                                                       // 1965
/**                                                                                                                    // 1966
 * Should be called to get utf8 from it's hex representation                                                           // 1967
 *                                                                                                                     // 1968
 * @method toUtf8                                                                                                      // 1969
 * @param {String} string in hex                                                                                       // 1970
 * @returns {String} ascii string representation of hex value                                                          // 1971
 */                                                                                                                    // 1972
var toUtf8 = function(hex) {                                                                                           // 1973
// Find termination                                                                                                    // 1974
    var str = "";                                                                                                      // 1975
    var i = 0, l = hex.length;                                                                                         // 1976
    if (hex.substring(0, 2) === '0x') {                                                                                // 1977
        i = 2;                                                                                                         // 1978
    }                                                                                                                  // 1979
    for (; i < l; i+=2) {                                                                                              // 1980
        var code = parseInt(hex.substr(i, 2), 16);                                                                     // 1981
        if (code === 0)                                                                                                // 1982
            break;                                                                                                     // 1983
        str += String.fromCharCode(code);                                                                              // 1984
    }                                                                                                                  // 1985
                                                                                                                       // 1986
    return utf8.decode(str);                                                                                           // 1987
};                                                                                                                     // 1988
                                                                                                                       // 1989
/**                                                                                                                    // 1990
 * Should be called to get ascii from it's hex representation                                                          // 1991
 *                                                                                                                     // 1992
 * @method toAscii                                                                                                     // 1993
 * @param {String} string in hex                                                                                       // 1994
 * @returns {String} ascii string representation of hex value                                                          // 1995
 */                                                                                                                    // 1996
var toAscii = function(hex) {                                                                                          // 1997
// Find termination                                                                                                    // 1998
    var str = "";                                                                                                      // 1999
    var i = 0, l = hex.length;                                                                                         // 2000
    if (hex.substring(0, 2) === '0x') {                                                                                // 2001
        i = 2;                                                                                                         // 2002
    }                                                                                                                  // 2003
    for (; i < l; i+=2) {                                                                                              // 2004
        var code = parseInt(hex.substr(i, 2), 16);                                                                     // 2005
        str += String.fromCharCode(code);                                                                              // 2006
    }                                                                                                                  // 2007
                                                                                                                       // 2008
    return str;                                                                                                        // 2009
};                                                                                                                     // 2010
                                                                                                                       // 2011
/**                                                                                                                    // 2012
 * Should be called to get hex representation (prefixed by 0x) of utf8 a string                                        // 2013
 *                                                                                                                     // 2014
 * @method fromUtf8                                                                                                    // 2015
 * @param {String} string                                                                                              // 2016
 * @param {Number} optional padding                                                                                    // 2017
 * @returns {String} hex representation of input string                                                                // 2018
 */                                                                                                                    // 2019
var fromUtf8 = function(str) {                                                                                         // 2020
    str = utf8.encode(str);                                                                                            // 2021
    var hex = "";                                                                                                      // 2022
    for(var i = 0; i < str.length; i++) {                                                                              // 2023
        var code = str.charCodeAt(i);                                                                                  // 2024
        if (code === 0)                                                                                                // 2025
            break;                                                                                                     // 2026
        var n = code.toString(16);                                                                                     // 2027
        hex += n.length < 2 ? '0' + n : n;                                                                             // 2028
    }                                                                                                                  // 2029
                                                                                                                       // 2030
    return "0x" + hex;                                                                                                 // 2031
};                                                                                                                     // 2032
                                                                                                                       // 2033
/**                                                                                                                    // 2034
 * Should be called to get hex representation (prefixed by 0x) of ascii string                                         // 2035
 *                                                                                                                     // 2036
 * @method fromAscii                                                                                                   // 2037
 * @param {String} string                                                                                              // 2038
 * @param {Number} optional padding                                                                                    // 2039
 * @returns {String} hex representation of input string                                                                // 2040
 */                                                                                                                    // 2041
var fromAscii = function(str) {                                                                                        // 2042
    var hex = "";                                                                                                      // 2043
    for(var i = 0; i < str.length; i++) {                                                                              // 2044
        var code = str.charCodeAt(i);                                                                                  // 2045
        var n = code.toString(16);                                                                                     // 2046
        hex += n.length < 2 ? '0' + n : n;                                                                             // 2047
    }                                                                                                                  // 2048
                                                                                                                       // 2049
    return "0x" + hex;                                                                                                 // 2050
};                                                                                                                     // 2051
                                                                                                                       // 2052
/**                                                                                                                    // 2053
 * Should be used to create full function/event name from json abi                                                     // 2054
 *                                                                                                                     // 2055
 * @method transformToFullName                                                                                         // 2056
 * @param {Object} json-abi                                                                                            // 2057
 * @return {String} full fnction/event name                                                                            // 2058
 */                                                                                                                    // 2059
var transformToFullName = function (json) {                                                                            // 2060
    if (json.name.indexOf('(') !== -1) {                                                                               // 2061
        return json.name;                                                                                              // 2062
    }                                                                                                                  // 2063
                                                                                                                       // 2064
    var typeName = json.inputs.map(function(i){return i.type; }).join();                                               // 2065
    return json.name + '(' + typeName + ')';                                                                           // 2066
};                                                                                                                     // 2067
                                                                                                                       // 2068
/**                                                                                                                    // 2069
 * Should be called to get display name of contract function                                                           // 2070
 *                                                                                                                     // 2071
 * @method extractDisplayName                                                                                          // 2072
 * @param {String} name of function/event                                                                              // 2073
 * @returns {String} display name for function/event eg. multiply(uint256) -> multiply                                 // 2074
 */                                                                                                                    // 2075
var extractDisplayName = function (name) {                                                                             // 2076
    var length = name.indexOf('(');                                                                                    // 2077
    return length !== -1 ? name.substr(0, length) : name;                                                              // 2078
};                                                                                                                     // 2079
                                                                                                                       // 2080
/// @returns overloaded part of function/event name                                                                    // 2081
var extractTypeName = function (name) {                                                                                // 2082
    /// TODO: make it invulnerable                                                                                     // 2083
    var length = name.indexOf('(');                                                                                    // 2084
    return length !== -1 ? name.substr(length + 1, name.length - 1 - (length + 1)).replace(' ', '') : "";              // 2085
};                                                                                                                     // 2086
                                                                                                                       // 2087
/**                                                                                                                    // 2088
 * Converts value to it's decimal representation in string                                                             // 2089
 *                                                                                                                     // 2090
 * @method toDecimal                                                                                                   // 2091
 * @param {String|Number|BigNumber}                                                                                    // 2092
 * @return {String}                                                                                                    // 2093
 */                                                                                                                    // 2094
var toDecimal = function (value) {                                                                                     // 2095
    return toBigNumber(value).toNumber();                                                                              // 2096
};                                                                                                                     // 2097
                                                                                                                       // 2098
/**                                                                                                                    // 2099
 * Converts value to it's hex representation                                                                           // 2100
 *                                                                                                                     // 2101
 * @method fromDecimal                                                                                                 // 2102
 * @param {String|Number|BigNumber}                                                                                    // 2103
 * @return {String}                                                                                                    // 2104
 */                                                                                                                    // 2105
var fromDecimal = function (value) {                                                                                   // 2106
    var number = toBigNumber(value);                                                                                   // 2107
    var result = number.toString(16);                                                                                  // 2108
                                                                                                                       // 2109
    return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;                                              // 2110
};                                                                                                                     // 2111
                                                                                                                       // 2112
/**                                                                                                                    // 2113
 * Auto converts any given value into it's hex representation.                                                         // 2114
 *                                                                                                                     // 2115
 * And even stringifys objects before.                                                                                 // 2116
 *                                                                                                                     // 2117
 * @method toHex                                                                                                       // 2118
 * @param {String|Number|BigNumber|Object}                                                                             // 2119
 * @return {String}                                                                                                    // 2120
 */                                                                                                                    // 2121
var toHex = function (val) {                                                                                           // 2122
    /*jshint maxcomplexity: 8 */                                                                                       // 2123
                                                                                                                       // 2124
    if (isBoolean(val))                                                                                                // 2125
        return fromDecimal(+val);                                                                                      // 2126
                                                                                                                       // 2127
    if (isBigNumber(val))                                                                                              // 2128
        return fromDecimal(val);                                                                                       // 2129
                                                                                                                       // 2130
    if (isObject(val))                                                                                                 // 2131
        return fromUtf8(JSON.stringify(val));                                                                          // 2132
                                                                                                                       // 2133
    // if its a negative number, pass it through fromDecimal                                                           // 2134
    if (isString(val)) {                                                                                               // 2135
        if (val.indexOf('-0x') === 0)                                                                                  // 2136
            return fromDecimal(val);                                                                                   // 2137
        else if(val.indexOf('0x') === 0)                                                                               // 2138
            return val;                                                                                                // 2139
        else if (!isFinite(val))                                                                                       // 2140
            return fromAscii(val);                                                                                     // 2141
    }                                                                                                                  // 2142
                                                                                                                       // 2143
    return fromDecimal(val);                                                                                           // 2144
};                                                                                                                     // 2145
                                                                                                                       // 2146
/**                                                                                                                    // 2147
 * Returns value of unit in Wei                                                                                        // 2148
 *                                                                                                                     // 2149
 * @method getValueOfUnit                                                                                              // 2150
 * @param {String} unit the unit to convert to, default ether                                                          // 2151
 * @returns {BigNumber} value of the unit (in Wei)                                                                     // 2152
 * @throws error if the unit is not correct:w                                                                          // 2153
 */                                                                                                                    // 2154
var getValueOfUnit = function (unit) {                                                                                 // 2155
    unit = unit ? unit.toLowerCase() : 'ether';                                                                        // 2156
    var unitValue = unitMap[unit];                                                                                     // 2157
    if (unitValue === undefined) {                                                                                     // 2158
        throw new Error('This unit doesn\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));
    }                                                                                                                  // 2160
    return new BigNumber(unitValue, 10);                                                                               // 2161
};                                                                                                                     // 2162
                                                                                                                       // 2163
/**                                                                                                                    // 2164
 * Takes a number of wei and converts it to any other ether unit.                                                      // 2165
 *                                                                                                                     // 2166
 * Possible units are:                                                                                                 // 2167
 *   SI Short   SI Full        Effigy       Other                                                                      // 2168
 * - kwei       femtoether     ada                                                                                     // 2169
 * - mwei       picoether      babbage                                                                                 // 2170
 * - gwei       nanoether      shannon      nano                                                                       // 2171
 * - --         microether     szabo        micro                                                                      // 2172
 * - --         milliether     finney       milli                                                                      // 2173
 * - ether      --             --                                                                                      // 2174
 * - kether                    einstein     grand                                                                      // 2175
 * - mether                                                                                                            // 2176
 * - gether                                                                                                            // 2177
 * - tether                                                                                                            // 2178
 *                                                                                                                     // 2179
 * @method fromWei                                                                                                     // 2180
 * @param {Number|String} number can be a number, number string or a HEX of a decimal                                  // 2181
 * @param {String} unit the unit to convert to, default ether                                                          // 2182
 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number                    // 2183
*/                                                                                                                     // 2184
var fromWei = function(number, unit) {                                                                                 // 2185
    var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));                                             // 2186
                                                                                                                       // 2187
    return isBigNumber(number) ? returnValue : returnValue.toString(10);                                               // 2188
};                                                                                                                     // 2189
                                                                                                                       // 2190
/**                                                                                                                    // 2191
 * Takes a number of a unit and converts it to wei.                                                                    // 2192
 *                                                                                                                     // 2193
 * Possible units are:                                                                                                 // 2194
 *   SI Short   SI Full        Effigy       Other                                                                      // 2195
 * - kwei       femtoether     ada                                                                                     // 2196
 * - mwei       picoether      babbage                                                                                 // 2197
 * - gwei       nanoether      shannon      nano                                                                       // 2198
 * - --         microether     szabo        micro                                                                      // 2199
 * - --         milliether     finney       milli                                                                      // 2200
 * - ether      --             --                                                                                      // 2201
 * - kether                    einstein     grand                                                                      // 2202
 * - mether                                                                                                            // 2203
 * - gether                                                                                                            // 2204
 * - tether                                                                                                            // 2205
 *                                                                                                                     // 2206
 * @method toWei                                                                                                       // 2207
 * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal                        // 2208
 * @param {String} unit the unit to convert from, default ether                                                        // 2209
 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number                    // 2210
*/                                                                                                                     // 2211
var toWei = function(number, unit) {                                                                                   // 2212
    var returnValue = toBigNumber(number).times(getValueOfUnit(unit));                                                 // 2213
                                                                                                                       // 2214
    return isBigNumber(number) ? returnValue : returnValue.toString(10);                                               // 2215
};                                                                                                                     // 2216
                                                                                                                       // 2217
/**                                                                                                                    // 2218
 * Takes an input and transforms it into an bignumber                                                                  // 2219
 *                                                                                                                     // 2220
 * @method toBigNumber                                                                                                 // 2221
 * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber                                          // 2222
 * @return {BigNumber} BigNumber                                                                                       // 2223
*/                                                                                                                     // 2224
var toBigNumber = function(number) {                                                                                   // 2225
    /*jshint maxcomplexity:5 */                                                                                        // 2226
    number = number || 0;                                                                                              // 2227
    if (isBigNumber(number))                                                                                           // 2228
        return number;                                                                                                 // 2229
                                                                                                                       // 2230
    if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {                             // 2231
        return new BigNumber(number.replace('0x',''), 16);                                                             // 2232
    }                                                                                                                  // 2233
                                                                                                                       // 2234
    return new BigNumber(number.toString(10), 10);                                                                     // 2235
};                                                                                                                     // 2236
                                                                                                                       // 2237
/**                                                                                                                    // 2238
 * Takes and input transforms it into bignumber and if it is negative value, into two's complement                     // 2239
 *                                                                                                                     // 2240
 * @method toTwosComplement                                                                                            // 2241
 * @param {Number|String|BigNumber}                                                                                    // 2242
 * @return {BigNumber}                                                                                                 // 2243
 */                                                                                                                    // 2244
var toTwosComplement = function (number) {                                                                             // 2245
    var bigNumber = toBigNumber(number);                                                                               // 2246
    if (bigNumber.lessThan(0)) {                                                                                       // 2247
        return new BigNumber("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16).plus(bigNumber).plus(1);
    }                                                                                                                  // 2249
    return bigNumber;                                                                                                  // 2250
};                                                                                                                     // 2251
                                                                                                                       // 2252
/**                                                                                                                    // 2253
 * Checks if the given string is strictly an address                                                                   // 2254
 *                                                                                                                     // 2255
 * @method isStrictAddress                                                                                             // 2256
 * @param {String} address the given HEX adress                                                                        // 2257
 * @return {Boolean}                                                                                                   // 2258
*/                                                                                                                     // 2259
var isStrictAddress = function (address) {                                                                             // 2260
    return /^0x[0-9a-f]{40}$/i.test(address);                                                                          // 2261
};                                                                                                                     // 2262
                                                                                                                       // 2263
/**                                                                                                                    // 2264
 * Checks if the given string is an address                                                                            // 2265
 *                                                                                                                     // 2266
 * @method isAddress                                                                                                   // 2267
 * @param {String} address the given HEX adress                                                                        // 2268
 * @return {Boolean}                                                                                                   // 2269
*/                                                                                                                     // 2270
var isAddress = function (address) {                                                                                   // 2271
    return /^(0x)?[0-9a-f]{40}$/i.test(address);                                                                       // 2272
};                                                                                                                     // 2273
                                                                                                                       // 2274
/**                                                                                                                    // 2275
 * Transforms given string to valid 20 bytes-length addres with 0x prefix                                              // 2276
 *                                                                                                                     // 2277
 * @method toAddress                                                                                                   // 2278
 * @param {String} address                                                                                             // 2279
 * @return {String} formatted address                                                                                  // 2280
 */                                                                                                                    // 2281
var toAddress = function (address) {                                                                                   // 2282
    if (isStrictAddress(address)) {                                                                                    // 2283
        return address;                                                                                                // 2284
    }                                                                                                                  // 2285
                                                                                                                       // 2286
    if (/^[0-9a-f]{40}$/.test(address)) {                                                                              // 2287
        return '0x' + address;                                                                                         // 2288
    }                                                                                                                  // 2289
                                                                                                                       // 2290
    return '0x' + padLeft(toHex(address).substr(2), 40);                                                               // 2291
};                                                                                                                     // 2292
                                                                                                                       // 2293
/**                                                                                                                    // 2294
 * Returns true if object is BigNumber, otherwise false                                                                // 2295
 *                                                                                                                     // 2296
 * @method isBigNumber                                                                                                 // 2297
 * @param {Object}                                                                                                     // 2298
 * @return {Boolean}                                                                                                   // 2299
 */                                                                                                                    // 2300
var isBigNumber = function (object) {                                                                                  // 2301
    return object instanceof BigNumber ||                                                                              // 2302
        (object && object.constructor && object.constructor.name === 'BigNumber');                                     // 2303
};                                                                                                                     // 2304
                                                                                                                       // 2305
/**                                                                                                                    // 2306
 * Returns true if object is string, otherwise false                                                                   // 2307
 *                                                                                                                     // 2308
 * @method isString                                                                                                    // 2309
 * @param {Object}                                                                                                     // 2310
 * @return {Boolean}                                                                                                   // 2311
 */                                                                                                                    // 2312
var isString = function (object) {                                                                                     // 2313
    return typeof object === 'string' ||                                                                               // 2314
        (object && object.constructor && object.constructor.name === 'String');                                        // 2315
};                                                                                                                     // 2316
                                                                                                                       // 2317
/**                                                                                                                    // 2318
 * Returns true if object is function, otherwise false                                                                 // 2319
 *                                                                                                                     // 2320
 * @method isFunction                                                                                                  // 2321
 * @param {Object}                                                                                                     // 2322
 * @return {Boolean}                                                                                                   // 2323
 */                                                                                                                    // 2324
var isFunction = function (object) {                                                                                   // 2325
    return typeof object === 'function';                                                                               // 2326
};                                                                                                                     // 2327
                                                                                                                       // 2328
/**                                                                                                                    // 2329
 * Returns true if object is Objet, otherwise false                                                                    // 2330
 *                                                                                                                     // 2331
 * @method isObject                                                                                                    // 2332
 * @param {Object}                                                                                                     // 2333
 * @return {Boolean}                                                                                                   // 2334
 */                                                                                                                    // 2335
var isObject = function (object) {                                                                                     // 2336
    return typeof object === 'object';                                                                                 // 2337
};                                                                                                                     // 2338
                                                                                                                       // 2339
/**                                                                                                                    // 2340
 * Returns true if object is boolean, otherwise false                                                                  // 2341
 *                                                                                                                     // 2342
 * @method isBoolean                                                                                                   // 2343
 * @param {Object}                                                                                                     // 2344
 * @return {Boolean}                                                                                                   // 2345
 */                                                                                                                    // 2346
var isBoolean = function (object) {                                                                                    // 2347
    return typeof object === 'boolean';                                                                                // 2348
};                                                                                                                     // 2349
                                                                                                                       // 2350
/**                                                                                                                    // 2351
 * Returns true if object is array, otherwise false                                                                    // 2352
 *                                                                                                                     // 2353
 * @method isArray                                                                                                     // 2354
 * @param {Object}                                                                                                     // 2355
 * @return {Boolean}                                                                                                   // 2356
 */                                                                                                                    // 2357
var isArray = function (object) {                                                                                      // 2358
    return object instanceof Array;                                                                                    // 2359
};                                                                                                                     // 2360
                                                                                                                       // 2361
/**                                                                                                                    // 2362
 * Returns true if given string is valid json object                                                                   // 2363
 *                                                                                                                     // 2364
 * @method isJson                                                                                                      // 2365
 * @param {String}                                                                                                     // 2366
 * @return {Boolean}                                                                                                   // 2367
 */                                                                                                                    // 2368
var isJson = function (str) {                                                                                          // 2369
    try {                                                                                                              // 2370
        return !!JSON.parse(str);                                                                                      // 2371
    } catch (e) {                                                                                                      // 2372
        return false;                                                                                                  // 2373
    }                                                                                                                  // 2374
};                                                                                                                     // 2375
                                                                                                                       // 2376
module.exports = {                                                                                                     // 2377
    padLeft: padLeft,                                                                                                  // 2378
    padRight: padRight,                                                                                                // 2379
    toHex: toHex,                                                                                                      // 2380
    toDecimal: toDecimal,                                                                                              // 2381
    fromDecimal: fromDecimal,                                                                                          // 2382
    toUtf8: toUtf8,                                                                                                    // 2383
    toAscii: toAscii,                                                                                                  // 2384
    fromUtf8: fromUtf8,                                                                                                // 2385
    fromAscii: fromAscii,                                                                                              // 2386
    transformToFullName: transformToFullName,                                                                          // 2387
    extractDisplayName: extractDisplayName,                                                                            // 2388
    extractTypeName: extractTypeName,                                                                                  // 2389
    toWei: toWei,                                                                                                      // 2390
    fromWei: fromWei,                                                                                                  // 2391
    toBigNumber: toBigNumber,                                                                                          // 2392
    toTwosComplement: toTwosComplement,                                                                                // 2393
    toAddress: toAddress,                                                                                              // 2394
    isBigNumber: isBigNumber,                                                                                          // 2395
    isStrictAddress: isStrictAddress,                                                                                  // 2396
    isAddress: isAddress,                                                                                              // 2397
    isFunction: isFunction,                                                                                            // 2398
    isString: isString,                                                                                                // 2399
    isObject: isObject,                                                                                                // 2400
    isBoolean: isBoolean,                                                                                              // 2401
    isArray: isArray,                                                                                                  // 2402
    isJson: isJson                                                                                                     // 2403
};                                                                                                                     // 2404
                                                                                                                       // 2405
},{"bignumber.js":"bignumber.js","utf8":83}],21:[function(require,module,exports){                                     // 2406
module.exports={                                                                                                       // 2407
    "version": "0.15.2"                                                                                                // 2408
}                                                                                                                      // 2409
                                                                                                                       // 2410
},{}],22:[function(require,module,exports){                                                                            // 2411
/*                                                                                                                     // 2412
    This file is part of web3.js.                                                                                      // 2413
                                                                                                                       // 2414
    web3.js is free software: you can redistribute it and/or modify                                                    // 2415
    it under the terms of the GNU Lesser General Public License as published by                                        // 2416
    the Free Software Foundation, either version 3 of the License, or                                                  // 2417
    (at your option) any later version.                                                                                // 2418
                                                                                                                       // 2419
    web3.js is distributed in the hope that it will be useful,                                                         // 2420
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2421
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2422
    GNU Lesser General Public License for more details.                                                                // 2423
                                                                                                                       // 2424
    You should have received a copy of the GNU Lesser General Public License                                           // 2425
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2426
*/                                                                                                                     // 2427
/**                                                                                                                    // 2428
 * @file web3.js                                                                                                       // 2429
 * @authors:                                                                                                           // 2430
 *   Jeffrey Wilcke <jeff@ethdev.com>                                                                                  // 2431
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 2432
 *   Marian Oancea <marian@ethdev.com>                                                                                 // 2433
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 2434
 *   Gav Wood <g@ethdev.com>                                                                                           // 2435
 * @date 2014                                                                                                          // 2436
 */                                                                                                                    // 2437
                                                                                                                       // 2438
var RequestManager = require('./web3/requestmanager');                                                                 // 2439
var Iban = require('./web3/iban');                                                                                     // 2440
var Eth = require('./web3/methods/eth');                                                                               // 2441
var DB = require('./web3/methods/db');                                                                                 // 2442
var Shh = require('./web3/methods/shh');                                                                               // 2443
var Net = require('./web3/methods/net');                                                                               // 2444
var Settings = require('./web3/settings');                                                                             // 2445
var version = require('./version.json');                                                                               // 2446
var utils = require('./utils/utils');                                                                                  // 2447
var sha3 = require('./utils/sha3');                                                                                    // 2448
var extend = require('./web3/extend');                                                                                 // 2449
var Batch = require('./web3/batch');                                                                                   // 2450
var Property = require('./web3/property');                                                                             // 2451
var HttpProvider = require('./web3/httpprovider');                                                                     // 2452
var IpcProvider = require('./web3/ipcprovider');                                                                       // 2453
                                                                                                                       // 2454
                                                                                                                       // 2455
                                                                                                                       // 2456
function Web3 (provider) {                                                                                             // 2457
    this._requestManager = new RequestManager(provider);                                                               // 2458
    this.currentProvider = provider;                                                                                   // 2459
    this.eth = new Eth(this);                                                                                          // 2460
    this.db = new DB(this);                                                                                            // 2461
    this.shh = new Shh(this);                                                                                          // 2462
    this.net = new Net(this);                                                                                          // 2463
    this.settings = new Settings();                                                                                    // 2464
    this.version = {                                                                                                   // 2465
        api: version.version                                                                                           // 2466
    };                                                                                                                 // 2467
    this.providers = {                                                                                                 // 2468
        HttpProvider: HttpProvider,                                                                                    // 2469
        IpcProvider: IpcProvider                                                                                       // 2470
    };                                                                                                                 // 2471
    this._extend = extend(this);                                                                                       // 2472
    this._extend({                                                                                                     // 2473
        properties: properties()                                                                                       // 2474
    });                                                                                                                // 2475
}                                                                                                                      // 2476
                                                                                                                       // 2477
// expose providers on the class                                                                                       // 2478
Web3.providers = {                                                                                                     // 2479
    HttpProvider: HttpProvider,                                                                                        // 2480
    IpcProvider: IpcProvider                                                                                           // 2481
};                                                                                                                     // 2482
                                                                                                                       // 2483
Web3.prototype.setProvider = function (provider) {                                                                     // 2484
    this._requestManager.setProvider(provider);                                                                        // 2485
    this.currentProvider = provider;                                                                                   // 2486
};                                                                                                                     // 2487
                                                                                                                       // 2488
Web3.prototype.reset = function (keepIsSyncing) {                                                                      // 2489
    this._requestManager.reset(keepIsSyncing);                                                                         // 2490
    this.settings = new Settings();                                                                                    // 2491
};                                                                                                                     // 2492
                                                                                                                       // 2493
Web3.prototype.toHex = utils.toHex;                                                                                    // 2494
Web3.prototype.toAscii = utils.toAscii;                                                                                // 2495
Web3.prototype.toUtf8 = utils.toUtf8;                                                                                  // 2496
Web3.prototype.fromAscii = utils.fromAscii;                                                                            // 2497
Web3.prototype.fromUtf8 = utils.fromUtf8;                                                                              // 2498
Web3.prototype.toDecimal = utils.toDecimal;                                                                            // 2499
Web3.prototype.fromDecimal = utils.fromDecimal;                                                                        // 2500
Web3.prototype.toBigNumber = utils.toBigNumber;                                                                        // 2501
Web3.prototype.toWei = utils.toWei;                                                                                    // 2502
Web3.prototype.fromWei = utils.fromWei;                                                                                // 2503
Web3.prototype.isAddress = utils.isAddress;                                                                            // 2504
Web3.prototype.isIBAN = utils.isIBAN;                                                                                  // 2505
Web3.prototype.sha3 = sha3;                                                                                            // 2506
                                                                                                                       // 2507
/**                                                                                                                    // 2508
 * Transforms direct icap to address                                                                                   // 2509
 */                                                                                                                    // 2510
Web3.prototype.fromICAP = function (icap) {                                                                            // 2511
    var iban = new Iban(icap);                                                                                         // 2512
    return iban.address();                                                                                             // 2513
};                                                                                                                     // 2514
                                                                                                                       // 2515
var properties = function () {                                                                                         // 2516
    return [                                                                                                           // 2517
        new Property({                                                                                                 // 2518
            name: 'version.node',                                                                                      // 2519
            getter: 'web3_clientVersion'                                                                               // 2520
        }),                                                                                                            // 2521
        new Property({                                                                                                 // 2522
            name: 'version.network',                                                                                   // 2523
            getter: 'net_version',                                                                                     // 2524
            inputFormatter: utils.toDecimal                                                                            // 2525
        }),                                                                                                            // 2526
        new Property({                                                                                                 // 2527
            name: 'version.ethereum',                                                                                  // 2528
            getter: 'eth_protocolVersion',                                                                             // 2529
            inputFormatter: utils.toDecimal                                                                            // 2530
        }),                                                                                                            // 2531
        new Property({                                                                                                 // 2532
            name: 'version.whisper',                                                                                   // 2533
            getter: 'shh_version',                                                                                     // 2534
            inputFormatter: utils.toDecimal                                                                            // 2535
        })                                                                                                             // 2536
    ];                                                                                                                 // 2537
};                                                                                                                     // 2538
                                                                                                                       // 2539
Web3.prototype.isConnected = function(){                                                                               // 2540
    return (this.currentProvider && this.currentProvider.isConnected());                                               // 2541
};                                                                                                                     // 2542
                                                                                                                       // 2543
Web3.prototype.createBatch = function () {                                                                             // 2544
    return new Batch(this);                                                                                            // 2545
};                                                                                                                     // 2546
                                                                                                                       // 2547
module.exports = Web3;                                                                                                 // 2548
                                                                                                                       // 2549
                                                                                                                       // 2550
},{"./utils/sha3":19,"./utils/utils":20,"./version.json":21,"./web3/batch":24,"./web3/extend":28,"./web3/httpprovider":32,"./web3/iban":33,"./web3/ipcprovider":34,"./web3/methods/db":37,"./web3/methods/eth":38,"./web3/methods/net":39,"./web3/methods/shh":40,"./web3/property":43,"./web3/requestmanager":44,"./web3/settings":45}],23:[function(require,module,exports){
/*                                                                                                                     // 2552
    This file is part of web3.js.                                                                                      // 2553
                                                                                                                       // 2554
    web3.js is free software: you can redistribute it and/or modify                                                    // 2555
    it under the terms of the GNU Lesser General Public License as published by                                        // 2556
    the Free Software Foundation, either version 3 of the License, or                                                  // 2557
    (at your option) any later version.                                                                                // 2558
                                                                                                                       // 2559
    web3.js is distributed in the hope that it will be useful,                                                         // 2560
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2561
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2562
    GNU Lesser General Public License for more details.                                                                // 2563
                                                                                                                       // 2564
    You should have received a copy of the GNU Lesser General Public License                                           // 2565
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2566
*/                                                                                                                     // 2567
/**                                                                                                                    // 2568
 * @file allevents.js                                                                                                  // 2569
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 2570
 * @date 2014                                                                                                          // 2571
 */                                                                                                                    // 2572
                                                                                                                       // 2573
var sha3 = require('../utils/sha3');                                                                                   // 2574
var SolidityEvent = require('./event');                                                                                // 2575
var formatters = require('./formatters');                                                                              // 2576
var utils = require('../utils/utils');                                                                                 // 2577
var Filter = require('./filter');                                                                                      // 2578
var watches = require('./methods/watches');                                                                            // 2579
                                                                                                                       // 2580
var AllSolidityEvents = function (requestManager, json, address) {                                                     // 2581
    this._requestManager = requestManager;                                                                             // 2582
    this._json = json;                                                                                                 // 2583
    this._address = address;                                                                                           // 2584
};                                                                                                                     // 2585
                                                                                                                       // 2586
AllSolidityEvents.prototype.encode = function (options) {                                                              // 2587
    options = options || {};                                                                                           // 2588
    var result = {};                                                                                                   // 2589
                                                                                                                       // 2590
    ['fromBlock', 'toBlock'].filter(function (f) {                                                                     // 2591
        return options[f] !== undefined;                                                                               // 2592
    }).forEach(function (f) {                                                                                          // 2593
        result[f] = formatters.inputBlockNumberFormatter(options[f]);                                                  // 2594
    });                                                                                                                // 2595
                                                                                                                       // 2596
    result.address = this._address;                                                                                    // 2597
                                                                                                                       // 2598
    return result;                                                                                                     // 2599
};                                                                                                                     // 2600
                                                                                                                       // 2601
AllSolidityEvents.prototype.decode = function (data) {                                                                 // 2602
    data.data = data.data || '';                                                                                       // 2603
    data.topics = data.topics || [];                                                                                   // 2604
                                                                                                                       // 2605
    var eventTopic = data.topics[0].slice(2);                                                                          // 2606
    var match = this._json.filter(function (j) {                                                                       // 2607
        return eventTopic === sha3(utils.transformToFullName(j));                                                      // 2608
    })[0];                                                                                                             // 2609
                                                                                                                       // 2610
    if (!match) { // cannot find matching event?                                                                       // 2611
        console.warn('cannot find event for log');                                                                     // 2612
        return data;                                                                                                   // 2613
    }                                                                                                                  // 2614
                                                                                                                       // 2615
    var event = new SolidityEvent(this._requestManager, match, this._address);                                         // 2616
    return event.decode(data);                                                                                         // 2617
};                                                                                                                     // 2618
                                                                                                                       // 2619
AllSolidityEvents.prototype.execute = function (options, callback) {                                                   // 2620
                                                                                                                       // 2621
    if (utils.isFunction(arguments[arguments.length - 1])) {                                                           // 2622
        callback = arguments[arguments.length - 1];                                                                    // 2623
        if(arguments.length === 1)                                                                                     // 2624
            options = null;                                                                                            // 2625
    }                                                                                                                  // 2626
                                                                                                                       // 2627
    var o = this.encode(options);                                                                                      // 2628
    var formatter = this.decode.bind(this);                                                                            // 2629
    return new Filter(this._requestManager, o, watches.eth(), formatter, callback);                                    // 2630
};                                                                                                                     // 2631
                                                                                                                       // 2632
AllSolidityEvents.prototype.attachToContract = function (contract) {                                                   // 2633
    var execute = this.execute.bind(this);                                                                             // 2634
    contract.allEvents = execute;                                                                                      // 2635
};                                                                                                                     // 2636
                                                                                                                       // 2637
module.exports = AllSolidityEvents;                                                                                    // 2638
                                                                                                                       // 2639
                                                                                                                       // 2640
},{"../utils/sha3":19,"../utils/utils":20,"./event":27,"./filter":29,"./formatters":30,"./methods/watches":41}],24:[function(require,module,exports){
/*                                                                                                                     // 2642
    This file is part of web3.js.                                                                                      // 2643
                                                                                                                       // 2644
    web3.js is free software: you can redistribute it and/or modify                                                    // 2645
    it under the terms of the GNU Lesser General Public License as published by                                        // 2646
    the Free Software Foundation, either version 3 of the License, or                                                  // 2647
    (at your option) any later version.                                                                                // 2648
                                                                                                                       // 2649
    web3.js is distributed in the hope that it will be useful,                                                         // 2650
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2651
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2652
    GNU Lesser General Public License for more details.                                                                // 2653
                                                                                                                       // 2654
    You should have received a copy of the GNU Lesser General Public License                                           // 2655
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2656
*/                                                                                                                     // 2657
/**                                                                                                                    // 2658
 * @file batch.js                                                                                                      // 2659
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 2660
 * @date 2015                                                                                                          // 2661
 */                                                                                                                    // 2662
                                                                                                                       // 2663
var Jsonrpc = require('./jsonrpc');                                                                                    // 2664
var errors = require('./errors');                                                                                      // 2665
                                                                                                                       // 2666
var Batch = function (web3) {                                                                                          // 2667
    this.requestManager = web3._requestManager;                                                                        // 2668
    this.requests = [];                                                                                                // 2669
};                                                                                                                     // 2670
                                                                                                                       // 2671
/**                                                                                                                    // 2672
 * Should be called to add create new request to batch request                                                         // 2673
 *                                                                                                                     // 2674
 * @method add                                                                                                         // 2675
 * @param {Object} jsonrpc requet object                                                                               // 2676
 */                                                                                                                    // 2677
Batch.prototype.add = function (request) {                                                                             // 2678
    this.requests.push(request);                                                                                       // 2679
};                                                                                                                     // 2680
                                                                                                                       // 2681
/**                                                                                                                    // 2682
 * Should be called to execute batch request                                                                           // 2683
 *                                                                                                                     // 2684
 * @method execute                                                                                                     // 2685
 */                                                                                                                    // 2686
Batch.prototype.execute = function () {                                                                                // 2687
    var requests = this.requests;                                                                                      // 2688
    this.requestManager.sendBatch(requests, function (err, results) {                                                  // 2689
        results = results || [];                                                                                       // 2690
        requests.map(function (request, index) {                                                                       // 2691
            return results[index] || {};                                                                               // 2692
        }).forEach(function (result, index) {                                                                          // 2693
            if (requests[index].callback) {                                                                            // 2694
                                                                                                                       // 2695
                if (!Jsonrpc.getInstance().isValidResponse(result)) {                                                  // 2696
                    return requests[index].callback(errors.InvalidResponse(result));                                   // 2697
                }                                                                                                      // 2698
                                                                                                                       // 2699
                requests[index].callback(null, (requests[index].format ? requests[index].format(result.result) : result.result));
            }                                                                                                          // 2701
        });                                                                                                            // 2702
    });                                                                                                                // 2703
};                                                                                                                     // 2704
                                                                                                                       // 2705
module.exports = Batch;                                                                                                // 2706
                                                                                                                       // 2707
                                                                                                                       // 2708
},{"./errors":26,"./jsonrpc":35}],25:[function(require,module,exports){                                                // 2709
/*                                                                                                                     // 2710
    This file is part of web3.js.                                                                                      // 2711
                                                                                                                       // 2712
    web3.js is free software: you can redistribute it and/or modify                                                    // 2713
    it under the terms of the GNU Lesser General Public License as published by                                        // 2714
    the Free Software Foundation, either version 3 of the License, or                                                  // 2715
    (at your option) any later version.                                                                                // 2716
                                                                                                                       // 2717
    web3.js is distributed in the hope that it will be useful,                                                         // 2718
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2719
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2720
    GNU Lesser General Public License for more details.                                                                // 2721
                                                                                                                       // 2722
    You should have received a copy of the GNU Lesser General Public License                                           // 2723
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2724
*/                                                                                                                     // 2725
/**                                                                                                                    // 2726
 * @file contract.js                                                                                                   // 2727
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 2728
 * @date 2014                                                                                                          // 2729
 */                                                                                                                    // 2730
                                                                                                                       // 2731
var utils = require('../utils/utils');                                                                                 // 2732
var coder = require('../solidity/coder');                                                                              // 2733
var SolidityEvent = require('./event');                                                                                // 2734
var SolidityFunction = require('./function');                                                                          // 2735
var AllEvents = require('./allevents');                                                                                // 2736
                                                                                                                       // 2737
/**                                                                                                                    // 2738
 * Should be called to encode constructor params                                                                       // 2739
 *                                                                                                                     // 2740
 * @method encodeConstructorParams                                                                                     // 2741
 * @param {Array} abi                                                                                                  // 2742
 * @param {Array} constructor params                                                                                   // 2743
 */                                                                                                                    // 2744
var encodeConstructorParams = function (abi, params) {                                                                 // 2745
    return abi.filter(function (json) {                                                                                // 2746
        return json.type === 'constructor' && json.inputs.length === params.length;                                    // 2747
    }).map(function (json) {                                                                                           // 2748
        return json.inputs.map(function (input) {                                                                      // 2749
            return input.type;                                                                                         // 2750
        });                                                                                                            // 2751
    }).map(function (types) {                                                                                          // 2752
        return coder.encodeParams(types, params);                                                                      // 2753
    })[0] || '';                                                                                                       // 2754
};                                                                                                                     // 2755
                                                                                                                       // 2756
/**                                                                                                                    // 2757
 * Should be called to add functions to contract object                                                                // 2758
 *                                                                                                                     // 2759
 * @method addFunctionsToContract                                                                                      // 2760
 * @param {Contract} contract                                                                                          // 2761
 * @param {Array} abi                                                                                                  // 2762
 */                                                                                                                    // 2763
var addFunctionsToContract = function (contract) {                                                                     // 2764
    contract.abi.filter(function (json) {                                                                              // 2765
        return json.type === 'function';                                                                               // 2766
    }).map(function (json) {                                                                                           // 2767
        return new SolidityFunction(contract._eth, json, contract.address);                                            // 2768
    }).forEach(function (f) {                                                                                          // 2769
        f.attachToContract(contract);                                                                                  // 2770
    });                                                                                                                // 2771
};                                                                                                                     // 2772
                                                                                                                       // 2773
/**                                                                                                                    // 2774
 * Should be called to add events to contract object                                                                   // 2775
 *                                                                                                                     // 2776
 * @method addEventsToContract                                                                                         // 2777
 * @param {Contract} contract                                                                                          // 2778
 * @param {Array} abi                                                                                                  // 2779
 */                                                                                                                    // 2780
var addEventsToContract = function (contract) {                                                                        // 2781
    var events = contract.abi.filter(function (json) {                                                                 // 2782
        return json.type === 'event';                                                                                  // 2783
    });                                                                                                                // 2784
                                                                                                                       // 2785
    var All = new AllEvents(contract._eth._requestManager, events, contract.address);                                  // 2786
    All.attachToContract(contract);                                                                                    // 2787
                                                                                                                       // 2788
    events.map(function (json) {                                                                                       // 2789
        return new SolidityEvent(contract._eth._requestManager, json, contract.address);                               // 2790
    }).forEach(function (e) {                                                                                          // 2791
        e.attachToContract(contract);                                                                                  // 2792
    });                                                                                                                // 2793
};                                                                                                                     // 2794
                                                                                                                       // 2795
                                                                                                                       // 2796
/**                                                                                                                    // 2797
 * Should be called to check if the contract gets properly deployed on the blockchain.                                 // 2798
 *                                                                                                                     // 2799
 * @method checkForContractAddress                                                                                     // 2800
 * @param {Object} contract                                                                                            // 2801
 * @param {Function} callback                                                                                          // 2802
 * @returns {Undefined}                                                                                                // 2803
 */                                                                                                                    // 2804
var checkForContractAddress = function(contract, callback){                                                            // 2805
    var count = 0,                                                                                                     // 2806
        callbackFired = false;                                                                                         // 2807
                                                                                                                       // 2808
    // wait for receipt                                                                                                // 2809
    var filter = contract._eth.filter('latest', function(e){                                                           // 2810
        if (!e && !callbackFired) {                                                                                    // 2811
            count++;                                                                                                   // 2812
                                                                                                                       // 2813
            // stop watching after 50 blocks (timeout)                                                                 // 2814
            if (count > 50) {                                                                                          // 2815
                                                                                                                       // 2816
                filter.stopWatching();                                                                                 // 2817
                callbackFired = true;                                                                                  // 2818
                                                                                                                       // 2819
                if (callback)                                                                                          // 2820
                    callback(new Error('Contract transaction couldn\'t be found after 50 blocks'));                    // 2821
                else                                                                                                   // 2822
                    throw new Error('Contract transaction couldn\'t be found after 50 blocks');                        // 2823
                                                                                                                       // 2824
                                                                                                                       // 2825
            } else {                                                                                                   // 2826
                                                                                                                       // 2827
                contract._eth.getTransactionReceipt(contract.transactionHash, function(e, receipt){                    // 2828
                    if(receipt && !callbackFired) {                                                                    // 2829
                                                                                                                       // 2830
                        contract._eth.getCode(receipt.contractAddress, function(e, code){                              // 2831
                            /*jshint maxcomplexity: 6 */                                                               // 2832
                                                                                                                       // 2833
                            if(callbackFired || !code)                                                                 // 2834
                                return;                                                                                // 2835
                                                                                                                       // 2836
                            filter.stopWatching();                                                                     // 2837
                            callbackFired = true;                                                                      // 2838
                                                                                                                       // 2839
                            if(code.length > 2) {                                                                      // 2840
                                                                                                                       // 2841
                                // console.log('Contract code deployed!');                                             // 2842
                                                                                                                       // 2843
                                contract.address = receipt.contractAddress;                                            // 2844
                                                                                                                       // 2845
                                // attach events and methods again after we have                                       // 2846
                                addFunctionsToContract(contract);                                                      // 2847
                                addEventsToContract(contract);                                                         // 2848
                                                                                                                       // 2849
                                // call callback for the second time                                                   // 2850
                                if(callback)                                                                           // 2851
                                    callback(null, contract);                                                          // 2852
                                                                                                                       // 2853
                            } else {                                                                                   // 2854
                                if(callback)                                                                           // 2855
                                    callback(new Error('The contract code couldn\'t be stored, please check your gas amount.'));
                                else                                                                                   // 2857
                                    throw new Error('The contract code couldn\'t be stored, please check your gas amount.');
                            }                                                                                          // 2859
                        });                                                                                            // 2860
                    }                                                                                                  // 2861
                });                                                                                                    // 2862
            }                                                                                                          // 2863
        }                                                                                                              // 2864
    });                                                                                                                // 2865
};                                                                                                                     // 2866
                                                                                                                       // 2867
/**                                                                                                                    // 2868
 * Should be called to create new ContractFactory instance                                                             // 2869
 *                                                                                                                     // 2870
 * @method ContractFactory                                                                                             // 2871
 * @param {Array} abi                                                                                                  // 2872
 */                                                                                                                    // 2873
var ContractFactory = function (eth, abi) {                                                                            // 2874
    this.eth = eth;                                                                                                    // 2875
    this.abi = abi;                                                                                                    // 2876
                                                                                                                       // 2877
    /**                                                                                                                // 2878
     * Should be called to create new contract on a blockchain                                                         // 2879
     *                                                                                                                 // 2880
     * @method new                                                                                                     // 2881
     * @param {Any} contract constructor param1 (optional)                                                             // 2882
     * @param {Any} contract constructor param2 (optional)                                                             // 2883
     * @param {Object} contract transaction object (required)                                                          // 2884
     * @param {Function} callback                                                                                      // 2885
     * @returns {Contract} returns contract instance                                                                   // 2886
     */                                                                                                                // 2887
    this.new = function () {                                                                                           // 2888
        var contract = new Contract(this.eth, this.abi);                                                               // 2889
                                                                                                                       // 2890
        // parse arguments                                                                                             // 2891
        var options = {}; // required!                                                                                 // 2892
        var callback;                                                                                                  // 2893
                                                                                                                       // 2894
        var args = Array.prototype.slice.call(arguments);                                                              // 2895
        if (utils.isFunction(args[args.length - 1])) {                                                                 // 2896
            callback = args.pop();                                                                                     // 2897
        }                                                                                                              // 2898
                                                                                                                       // 2899
        var last = args[args.length - 1];                                                                              // 2900
        if (utils.isObject(last) && !utils.isArray(last)) {                                                            // 2901
            options = args.pop();                                                                                      // 2902
        }                                                                                                              // 2903
                                                                                                                       // 2904
        var bytes = encodeConstructorParams(this.abi, args);                                                           // 2905
        options.data += bytes;                                                                                         // 2906
                                                                                                                       // 2907
        if (callback) {                                                                                                // 2908
                                                                                                                       // 2909
            // wait for the contract address adn check if the code was deployed                                        // 2910
            this.eth.sendTransaction(options, function (err, hash) {                                                   // 2911
                if (err) {                                                                                             // 2912
                    callback(err);                                                                                     // 2913
                } else {                                                                                               // 2914
                    // add the transaction hash                                                                        // 2915
                    contract.transactionHash = hash;                                                                   // 2916
                                                                                                                       // 2917
                    // call callback for the first time                                                                // 2918
                    callback(null, contract);                                                                          // 2919
                                                                                                                       // 2920
                    checkForContractAddress(contract, callback);                                                       // 2921
                }                                                                                                      // 2922
            });                                                                                                        // 2923
        } else {                                                                                                       // 2924
            var hash = this.eth.sendTransaction(options);                                                              // 2925
            // add the transaction hash                                                                                // 2926
            contract.transactionHash = hash;                                                                           // 2927
            checkForContractAddress(contract);                                                                         // 2928
        }                                                                                                              // 2929
                                                                                                                       // 2930
        return contract;                                                                                               // 2931
    };                                                                                                                 // 2932
                                                                                                                       // 2933
    this.new.getData = this.getData.bind(this);                                                                        // 2934
};                                                                                                                     // 2935
                                                                                                                       // 2936
/**                                                                                                                    // 2937
 * Should be called to create new ContractFactory                                                                      // 2938
 *                                                                                                                     // 2939
 * @method contract                                                                                                    // 2940
 * @param {Array} abi                                                                                                  // 2941
 * @returns {ContractFactory} new contract factory                                                                     // 2942
 */                                                                                                                    // 2943
//var contract = function (abi) {                                                                                      // 2944
    //return new ContractFactory(abi);                                                                                 // 2945
//};                                                                                                                   // 2946
                                                                                                                       // 2947
                                                                                                                       // 2948
                                                                                                                       // 2949
/**                                                                                                                    // 2950
 * Should be called to get access to existing contract on a blockchain                                                 // 2951
 *                                                                                                                     // 2952
 * @method at                                                                                                          // 2953
 * @param {Address} contract address (required)                                                                        // 2954
 * @param {Function} callback {optional)                                                                               // 2955
 * @returns {Contract} returns contract if no callback was passed,                                                     // 2956
 * otherwise calls callback function (err, contract)                                                                   // 2957
 */                                                                                                                    // 2958
ContractFactory.prototype.at = function (address, callback) {                                                          // 2959
    var contract = new Contract(this.eth, this.abi, address);                                                          // 2960
                                                                                                                       // 2961
    // this functions are not part of prototype,                                                                       // 2962
    // because we dont want to spoil the interface                                                                     // 2963
    addFunctionsToContract(contract);                                                                                  // 2964
    addEventsToContract(contract);                                                                                     // 2965
                                                                                                                       // 2966
    if (callback) {                                                                                                    // 2967
        callback(null, contract);                                                                                      // 2968
    }                                                                                                                  // 2969
    return contract;                                                                                                   // 2970
};                                                                                                                     // 2971
                                                                                                                       // 2972
/**                                                                                                                    // 2973
 * Gets the data, which is data to deploy plus constructor params                                                      // 2974
 *                                                                                                                     // 2975
 * @method getData                                                                                                     // 2976
 */                                                                                                                    // 2977
ContractFactory.prototype.getData = function () {                                                                      // 2978
    var options = {}; // required!                                                                                     // 2979
    var args = Array.prototype.slice.call(arguments);                                                                  // 2980
                                                                                                                       // 2981
    var last = args[args.length - 1];                                                                                  // 2982
    if (utils.isObject(last) && !utils.isArray(last)) {                                                                // 2983
        options = args.pop();                                                                                          // 2984
    }                                                                                                                  // 2985
                                                                                                                       // 2986
    var bytes = encodeConstructorParams(this.abi, args);                                                               // 2987
    options.data += bytes;                                                                                             // 2988
                                                                                                                       // 2989
    return options.data;                                                                                               // 2990
};                                                                                                                     // 2991
                                                                                                                       // 2992
/**                                                                                                                    // 2993
 * Should be called to create new contract instance                                                                    // 2994
 *                                                                                                                     // 2995
 * @method Contract                                                                                                    // 2996
 * @param {Array} abi                                                                                                  // 2997
 * @param {Address} contract address                                                                                   // 2998
 */                                                                                                                    // 2999
var Contract = function (eth, abi, address) {                                                                          // 3000
    this._eth = eth;                                                                                                   // 3001
    this.transactionHash = null;                                                                                       // 3002
    this.address = address;                                                                                            // 3003
    this.abi = abi;                                                                                                    // 3004
};                                                                                                                     // 3005
                                                                                                                       // 3006
module.exports = ContractFactory;                                                                                      // 3007
                                                                                                                       // 3008
},{"../solidity/coder":7,"../utils/utils":20,"./allevents":23,"./event":27,"./function":31}],26:[function(require,module,exports){
/*                                                                                                                     // 3010
    This file is part of web3.js.                                                                                      // 3011
                                                                                                                       // 3012
    web3.js is free software: you can redistribute it and/or modify                                                    // 3013
    it under the terms of the GNU Lesser General Public License as published by                                        // 3014
    the Free Software Foundation, either version 3 of the License, or                                                  // 3015
    (at your option) any later version.                                                                                // 3016
                                                                                                                       // 3017
    web3.js is distributed in the hope that it will be useful,                                                         // 3018
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3019
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3020
    GNU Lesser General Public License for more details.                                                                // 3021
                                                                                                                       // 3022
    You should have received a copy of the GNU Lesser General Public License                                           // 3023
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3024
*/                                                                                                                     // 3025
/**                                                                                                                    // 3026
 * @file errors.js                                                                                                     // 3027
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3028
 * @date 2015                                                                                                          // 3029
 */                                                                                                                    // 3030
                                                                                                                       // 3031
module.exports = {                                                                                                     // 3032
    InvalidNumberOfParams: function () {                                                                               // 3033
        return new Error('Invalid number of input parameters');                                                        // 3034
    },                                                                                                                 // 3035
    InvalidConnection: function (host){                                                                                // 3036
        return new Error('CONNECTION ERROR: Couldn\'t connect to node '+ host +'.');                                   // 3037
    },                                                                                                                 // 3038
    InvalidProvider: function () {                                                                                     // 3039
        return new Error('Provider not set or invalid');                                                               // 3040
    },                                                                                                                 // 3041
    InvalidResponse: function (result){                                                                                // 3042
        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);
        return new Error(message);                                                                                     // 3044
    }                                                                                                                  // 3045
};                                                                                                                     // 3046
                                                                                                                       // 3047
                                                                                                                       // 3048
},{}],27:[function(require,module,exports){                                                                            // 3049
/*                                                                                                                     // 3050
    This file is part of web3.js.                                                                                      // 3051
                                                                                                                       // 3052
    web3.js is free software: you can redistribute it and/or modify                                                    // 3053
    it under the terms of the GNU Lesser General Public License as published by                                        // 3054
    the Free Software Foundation, either version 3 of the License, or                                                  // 3055
    (at your option) any later version.                                                                                // 3056
                                                                                                                       // 3057
    web3.js is distributed in the hope that it will be useful,                                                         // 3058
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3059
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3060
    GNU Lesser General Public License for more details.                                                                // 3061
                                                                                                                       // 3062
    You should have received a copy of the GNU Lesser General Public License                                           // 3063
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3064
*/                                                                                                                     // 3065
/**                                                                                                                    // 3066
 * @file event.js                                                                                                      // 3067
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3068
 * @date 2014                                                                                                          // 3069
 */                                                                                                                    // 3070
                                                                                                                       // 3071
var utils = require('../utils/utils');                                                                                 // 3072
var coder = require('../solidity/coder');                                                                              // 3073
var formatters = require('./formatters');                                                                              // 3074
var sha3 = require('../utils/sha3');                                                                                   // 3075
var Filter = require('./filter');                                                                                      // 3076
var watches = require('./methods/watches');                                                                            // 3077
                                                                                                                       // 3078
/**                                                                                                                    // 3079
 * This prototype should be used to create event filters                                                               // 3080
 */                                                                                                                    // 3081
var SolidityEvent = function (requestManager, json, address) {                                                         // 3082
    this._requestManager = requestManager;                                                                             // 3083
    this._params = json.inputs;                                                                                        // 3084
    this._name = utils.transformToFullName(json);                                                                      // 3085
    this._address = address;                                                                                           // 3086
    this._anonymous = json.anonymous;                                                                                  // 3087
};                                                                                                                     // 3088
                                                                                                                       // 3089
/**                                                                                                                    // 3090
 * Should be used to get filtered param types                                                                          // 3091
 *                                                                                                                     // 3092
 * @method types                                                                                                       // 3093
 * @param {Bool} decide if returned typed should be indexed                                                            // 3094
 * @return {Array} array of types                                                                                      // 3095
 */                                                                                                                    // 3096
SolidityEvent.prototype.types = function (indexed) {                                                                   // 3097
    return this._params.filter(function (i) {                                                                          // 3098
        return i.indexed === indexed;                                                                                  // 3099
    }).map(function (i) {                                                                                              // 3100
        return i.type;                                                                                                 // 3101
    });                                                                                                                // 3102
};                                                                                                                     // 3103
                                                                                                                       // 3104
/**                                                                                                                    // 3105
 * Should be used to get event display name                                                                            // 3106
 *                                                                                                                     // 3107
 * @method displayName                                                                                                 // 3108
 * @return {String} event display name                                                                                 // 3109
 */                                                                                                                    // 3110
SolidityEvent.prototype.displayName = function () {                                                                    // 3111
    return utils.extractDisplayName(this._name);                                                                       // 3112
};                                                                                                                     // 3113
                                                                                                                       // 3114
/**                                                                                                                    // 3115
 * Should be used to get event type name                                                                               // 3116
 *                                                                                                                     // 3117
 * @method typeName                                                                                                    // 3118
 * @return {String} event type name                                                                                    // 3119
 */                                                                                                                    // 3120
SolidityEvent.prototype.typeName = function () {                                                                       // 3121
    return utils.extractTypeName(this._name);                                                                          // 3122
};                                                                                                                     // 3123
                                                                                                                       // 3124
/**                                                                                                                    // 3125
 * Should be used to get event signature                                                                               // 3126
 *                                                                                                                     // 3127
 * @method signature                                                                                                   // 3128
 * @return {String} event signature                                                                                    // 3129
 */                                                                                                                    // 3130
SolidityEvent.prototype.signature = function () {                                                                      // 3131
    return sha3(this._name);                                                                                           // 3132
};                                                                                                                     // 3133
                                                                                                                       // 3134
/**                                                                                                                    // 3135
 * Should be used to encode indexed params and options to one final object                                             // 3136
 *                                                                                                                     // 3137
 * @method encode                                                                                                      // 3138
 * @param {Object} indexed                                                                                             // 3139
 * @param {Object} options                                                                                             // 3140
 * @return {Object} everything combined together and encoded                                                           // 3141
 */                                                                                                                    // 3142
SolidityEvent.prototype.encode = function (indexed, options) {                                                         // 3143
    indexed = indexed || {};                                                                                           // 3144
    options = options || {};                                                                                           // 3145
    var result = {};                                                                                                   // 3146
                                                                                                                       // 3147
    ['fromBlock', 'toBlock'].filter(function (f) {                                                                     // 3148
        return options[f] !== undefined;                                                                               // 3149
    }).forEach(function (f) {                                                                                          // 3150
        result[f] = formatters.inputBlockNumberFormatter(options[f]);                                                  // 3151
    });                                                                                                                // 3152
                                                                                                                       // 3153
    result.topics = [];                                                                                                // 3154
                                                                                                                       // 3155
    result.address = this._address;                                                                                    // 3156
    if (!this._anonymous) {                                                                                            // 3157
        result.topics.push('0x' + this.signature());                                                                   // 3158
    }                                                                                                                  // 3159
                                                                                                                       // 3160
    var indexedTopics = this._params.filter(function (i) {                                                             // 3161
        return i.indexed === true;                                                                                     // 3162
    }).map(function (i) {                                                                                              // 3163
        var value = indexed[i.name];                                                                                   // 3164
        if (value === undefined || value === null) {                                                                   // 3165
            return null;                                                                                               // 3166
        }                                                                                                              // 3167
                                                                                                                       // 3168
        if (utils.isArray(value)) {                                                                                    // 3169
            return value.map(function (v) {                                                                            // 3170
                return '0x' + coder.encodeParam(i.type, v);                                                            // 3171
            });                                                                                                        // 3172
        }                                                                                                              // 3173
        return '0x' + coder.encodeParam(i.type, value);                                                                // 3174
    });                                                                                                                // 3175
                                                                                                                       // 3176
    result.topics = result.topics.concat(indexedTopics);                                                               // 3177
                                                                                                                       // 3178
    return result;                                                                                                     // 3179
};                                                                                                                     // 3180
                                                                                                                       // 3181
/**                                                                                                                    // 3182
 * Should be used to decode indexed params and options                                                                 // 3183
 *                                                                                                                     // 3184
 * @method decode                                                                                                      // 3185
 * @param {Object} data                                                                                                // 3186
 * @return {Object} result object with decoded indexed && not indexed params                                           // 3187
 */                                                                                                                    // 3188
SolidityEvent.prototype.decode = function (data) {                                                                     // 3189
                                                                                                                       // 3190
    data.data = data.data || '';                                                                                       // 3191
    data.topics = data.topics || [];                                                                                   // 3192
                                                                                                                       // 3193
    var argTopics = this._anonymous ? data.topics : data.topics.slice(1);                                              // 3194
    var indexedData = argTopics.map(function (topics) { return topics.slice(2); }).join("");                           // 3195
    var indexedParams = coder.decodeParams(this.types(true), indexedData);                                             // 3196
                                                                                                                       // 3197
    var notIndexedData = data.data.slice(2);                                                                           // 3198
    var notIndexedParams = coder.decodeParams(this.types(false), notIndexedData);                                      // 3199
                                                                                                                       // 3200
    var result = formatters.outputLogFormatter(data);                                                                  // 3201
    result.event = this.displayName();                                                                                 // 3202
    result.address = data.address;                                                                                     // 3203
                                                                                                                       // 3204
    result.args = this._params.reduce(function (acc, current) {                                                        // 3205
        acc[current.name] = current.indexed ? indexedParams.shift() : notIndexedParams.shift();                        // 3206
        return acc;                                                                                                    // 3207
    }, {});                                                                                                            // 3208
                                                                                                                       // 3209
    delete result.data;                                                                                                // 3210
    delete result.topics;                                                                                              // 3211
                                                                                                                       // 3212
    return result;                                                                                                     // 3213
};                                                                                                                     // 3214
                                                                                                                       // 3215
/**                                                                                                                    // 3216
 * Should be used to create new filter object from event                                                               // 3217
 *                                                                                                                     // 3218
 * @method execute                                                                                                     // 3219
 * @param {Object} indexed                                                                                             // 3220
 * @param {Object} options                                                                                             // 3221
 * @return {Object} filter object                                                                                      // 3222
 */                                                                                                                    // 3223
SolidityEvent.prototype.execute = function (indexed, options, callback) {                                              // 3224
                                                                                                                       // 3225
    if (utils.isFunction(arguments[arguments.length - 1])) {                                                           // 3226
        callback = arguments[arguments.length - 1];                                                                    // 3227
        if(arguments.length === 2)                                                                                     // 3228
            options = null;                                                                                            // 3229
        if(arguments.length === 1) {                                                                                   // 3230
            options = null;                                                                                            // 3231
            indexed = {};                                                                                              // 3232
        }                                                                                                              // 3233
    }                                                                                                                  // 3234
                                                                                                                       // 3235
    var o = this.encode(indexed, options);                                                                             // 3236
    var formatter = this.decode.bind(this);                                                                            // 3237
    return new Filter(this._requestManager, o, watches.eth(), formatter, callback);                                    // 3238
};                                                                                                                     // 3239
                                                                                                                       // 3240
/**                                                                                                                    // 3241
 * Should be used to attach event to contract object                                                                   // 3242
 *                                                                                                                     // 3243
 * @method attachToContract                                                                                            // 3244
 * @param {Contract}                                                                                                   // 3245
 */                                                                                                                    // 3246
SolidityEvent.prototype.attachToContract = function (contract) {                                                       // 3247
    var execute = this.execute.bind(this);                                                                             // 3248
    var displayName = this.displayName();                                                                              // 3249
    if (!contract[displayName]) {                                                                                      // 3250
        contract[displayName] = execute;                                                                               // 3251
    }                                                                                                                  // 3252
    contract[displayName][this.typeName()] = this.execute.bind(this, contract);                                        // 3253
};                                                                                                                     // 3254
                                                                                                                       // 3255
module.exports = SolidityEvent;                                                                                        // 3256
                                                                                                                       // 3257
                                                                                                                       // 3258
},{"../solidity/coder":7,"../utils/sha3":19,"../utils/utils":20,"./filter":29,"./formatters":30,"./methods/watches":41}],28:[function(require,module,exports){
var formatters = require('./formatters');                                                                              // 3260
var utils = require('./../utils/utils');                                                                               // 3261
var Method = require('./method');                                                                                      // 3262
var Property = require('./property');                                                                                  // 3263
                                                                                                                       // 3264
// TODO: refactor, so the input params are not altered.                                                                // 3265
// it's necessary to make same 'extension' work with multiple providers                                                // 3266
var extend = function (web3) {                                                                                         // 3267
    /* jshint maxcomplexity:5 */                                                                                       // 3268
    var ex = function (extension) {                                                                                    // 3269
                                                                                                                       // 3270
        var extendedObject;                                                                                            // 3271
        if (extension.property) {                                                                                      // 3272
            if (!web3[extension.property]) {                                                                           // 3273
                web3[extension.property] = {};                                                                         // 3274
            }                                                                                                          // 3275
            extendedObject = web3[extension.property];                                                                 // 3276
        } else {                                                                                                       // 3277
            extendedObject = web3;                                                                                     // 3278
        }                                                                                                              // 3279
                                                                                                                       // 3280
        if (extension.methods) {                                                                                       // 3281
            extension.methods.forEach(function (method) {                                                              // 3282
                method.attachToObject(extendedObject);                                                                 // 3283
                method.setRequestManager(web3._requestManager);                                                        // 3284
            });                                                                                                        // 3285
        }                                                                                                              // 3286
                                                                                                                       // 3287
        if (extension.properties) {                                                                                    // 3288
            extension.properties.forEach(function (property) {                                                         // 3289
                property.attachToObject(extendedObject);                                                               // 3290
                property.setRequestManager(web3._requestManager);                                                      // 3291
            });                                                                                                        // 3292
        }                                                                                                              // 3293
    };                                                                                                                 // 3294
                                                                                                                       // 3295
    ex.formatters = formatters;                                                                                        // 3296
    ex.utils = utils;                                                                                                  // 3297
    ex.Method = Method;                                                                                                // 3298
    ex.Property = Property;                                                                                            // 3299
                                                                                                                       // 3300
    return ex;                                                                                                         // 3301
};                                                                                                                     // 3302
                                                                                                                       // 3303
                                                                                                                       // 3304
                                                                                                                       // 3305
module.exports = extend;                                                                                               // 3306
                                                                                                                       // 3307
                                                                                                                       // 3308
},{"./../utils/utils":20,"./formatters":30,"./method":36,"./property":43}],29:[function(require,module,exports){       // 3309
/*                                                                                                                     // 3310
    This file is part of web3.js.                                                                                      // 3311
                                                                                                                       // 3312
    web3.js is free software: you can redistribute it and/or modify                                                    // 3313
    it under the terms of the GNU Lesser General Public License as published by                                        // 3314
    the Free Software Foundation, either version 3 of the License, or                                                  // 3315
    (at your option) any later version.                                                                                // 3316
                                                                                                                       // 3317
    web3.js is distributed in the hope that it will be useful,                                                         // 3318
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3319
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3320
    GNU Lesser General Public License for more details.                                                                // 3321
                                                                                                                       // 3322
    You should have received a copy of the GNU Lesser General Public License                                           // 3323
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3324
*/                                                                                                                     // 3325
/** @file filter.js                                                                                                    // 3326
 * @authors:                                                                                                           // 3327
 *   Jeffrey Wilcke <jeff@ethdev.com>                                                                                  // 3328
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 3329
 *   Marian Oancea <marian@ethdev.com>                                                                                 // 3330
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 3331
 *   Gav Wood <g@ethdev.com>                                                                                           // 3332
 * @date 2014                                                                                                          // 3333
 */                                                                                                                    // 3334
                                                                                                                       // 3335
var formatters = require('./formatters');                                                                              // 3336
var utils = require('../utils/utils');                                                                                 // 3337
                                                                                                                       // 3338
/**                                                                                                                    // 3339
* Converts a given topic to a hex string, but also allows null values.                                                 // 3340
*                                                                                                                      // 3341
* @param {Mixed} value                                                                                                 // 3342
* @return {String}                                                                                                     // 3343
*/                                                                                                                     // 3344
var toTopic = function(value){                                                                                         // 3345
                                                                                                                       // 3346
    if(value === null || typeof value === 'undefined')                                                                 // 3347
        return null;                                                                                                   // 3348
                                                                                                                       // 3349
    value = String(value);                                                                                             // 3350
                                                                                                                       // 3351
    if(value.indexOf('0x') === 0)                                                                                      // 3352
        return value;                                                                                                  // 3353
    else                                                                                                               // 3354
        return utils.fromUtf8(value);                                                                                  // 3355
};                                                                                                                     // 3356
                                                                                                                       // 3357
/// This method should be called on options object, to verify deprecated properties && lazy load dynamic ones          // 3358
/// @param should be string or object                                                                                  // 3359
/// @returns options string or object                                                                                  // 3360
var getOptions = function (options) {                                                                                  // 3361
                                                                                                                       // 3362
    if (utils.isString(options)) {                                                                                     // 3363
        return options;                                                                                                // 3364
    }                                                                                                                  // 3365
                                                                                                                       // 3366
    options = options || {};                                                                                           // 3367
                                                                                                                       // 3368
    // make sure topics, get converted to hex                                                                          // 3369
    options.topics = options.topics || [];                                                                             // 3370
    options.topics = options.topics.map(function(topic){                                                               // 3371
        return (utils.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);                                           // 3372
    });                                                                                                                // 3373
                                                                                                                       // 3374
    return {                                                                                                           // 3375
        topics: options.topics,                                                                                        // 3376
        from: options.from,                                                                                            // 3377
        to: options.to,                                                                                                // 3378
        address: options.address,                                                                                      // 3379
        fromBlock: formatters.inputBlockNumberFormatter(options.fromBlock),                                            // 3380
        toBlock: formatters.inputBlockNumberFormatter(options.toBlock)                                                 // 3381
    };                                                                                                                 // 3382
};                                                                                                                     // 3383
                                                                                                                       // 3384
/**                                                                                                                    // 3385
Adds the callback and sets up the methods, to iterate over the results.                                                // 3386
                                                                                                                       // 3387
@method getLogsAtStart                                                                                                 // 3388
@param {Object} self                                                                                                   // 3389
@param {funciton}                                                                                                      // 3390
*/                                                                                                                     // 3391
var getLogsAtStart = function(self, callback){                                                                         // 3392
    // call getFilterLogs for the first watch callback start                                                           // 3393
    if (!utils.isString(self.options)) {                                                                               // 3394
        self.get(function (err, messages) {                                                                            // 3395
            // don't send all the responses to all the watches again... just to self one                               // 3396
            if (err) {                                                                                                 // 3397
                callback(err);                                                                                         // 3398
            }                                                                                                          // 3399
                                                                                                                       // 3400
            if(utils.isArray(messages)) {                                                                              // 3401
                messages.forEach(function (message) {                                                                  // 3402
                    callback(null, message);                                                                           // 3403
                });                                                                                                    // 3404
            }                                                                                                          // 3405
        });                                                                                                            // 3406
    }                                                                                                                  // 3407
};                                                                                                                     // 3408
                                                                                                                       // 3409
/**                                                                                                                    // 3410
Adds the callback and sets up the methods, to iterate over the results.                                                // 3411
                                                                                                                       // 3412
@method pollFilter                                                                                                     // 3413
@param {Object} self                                                                                                   // 3414
*/                                                                                                                     // 3415
var pollFilter = function(self) {                                                                                      // 3416
                                                                                                                       // 3417
    var onMessage = function (error, messages) {                                                                       // 3418
        if (error) {                                                                                                   // 3419
            return self.callbacks.forEach(function (callback) {                                                        // 3420
                callback(error);                                                                                       // 3421
            });                                                                                                        // 3422
        }                                                                                                              // 3423
                                                                                                                       // 3424
        if(utils.isArray(messages)) {                                                                                  // 3425
            messages.forEach(function (message) {                                                                      // 3426
                message = self.formatter ? self.formatter(message) : message;                                          // 3427
                self.callbacks.forEach(function (callback) {                                                           // 3428
                    callback(null, message);                                                                           // 3429
                });                                                                                                    // 3430
            });                                                                                                        // 3431
        }                                                                                                              // 3432
    };                                                                                                                 // 3433
                                                                                                                       // 3434
    self.requestManager.startPolling({                                                                                 // 3435
        method: self.implementation.poll.call,                                                                         // 3436
        params: [self.filterId],                                                                                       // 3437
    }, self.filterId, onMessage, self.stopWatching.bind(self));                                                        // 3438
                                                                                                                       // 3439
};                                                                                                                     // 3440
                                                                                                                       // 3441
var Filter = function (requestManager, options, methods, formatter, callback) {                                        // 3442
    var self = this;                                                                                                   // 3443
    var implementation = {};                                                                                           // 3444
    methods.forEach(function (method) {                                                                                // 3445
        method.setRequestManager(requestManager);                                                                      // 3446
        method.attachToObject(implementation);                                                                         // 3447
    });                                                                                                                // 3448
    this.requestManager = requestManager;                                                                              // 3449
    this.options = getOptions(options);                                                                                // 3450
    this.implementation = implementation;                                                                              // 3451
    this.filterId = null;                                                                                              // 3452
    this.callbacks = [];                                                                                               // 3453
    this.getLogsCallbacks = [];                                                                                        // 3454
    this.pollFilters = [];                                                                                             // 3455
    this.formatter = formatter;                                                                                        // 3456
    this.implementation.newFilter(this.options, function(error, id){                                                   // 3457
        if(error) {                                                                                                    // 3458
            self.callbacks.forEach(function(cb){                                                                       // 3459
                cb(error);                                                                                             // 3460
            });                                                                                                        // 3461
        } else {                                                                                                       // 3462
            self.filterId = id;                                                                                        // 3463
                                                                                                                       // 3464
            // check if there are get pending callbacks as a consequence                                               // 3465
            // of calling get() with filterId unassigned.                                                              // 3466
            self.getLogsCallbacks.forEach(function (cb){                                                               // 3467
                self.get(cb);                                                                                          // 3468
            });                                                                                                        // 3469
            self.getLogsCallbacks = [];                                                                                // 3470
                                                                                                                       // 3471
            // get filter logs for the already existing watch calls                                                    // 3472
            self.callbacks.forEach(function(cb){                                                                       // 3473
                getLogsAtStart(self, cb);                                                                              // 3474
            });                                                                                                        // 3475
            if(self.callbacks.length > 0)                                                                              // 3476
                pollFilter(self);                                                                                      // 3477
                                                                                                                       // 3478
            // start to watch immediately                                                                              // 3479
            if(typeof callback === 'function') {                                                                       // 3480
                return self.watch(callback);                                                                           // 3481
            }                                                                                                          // 3482
        }                                                                                                              // 3483
    });                                                                                                                // 3484
                                                                                                                       // 3485
    return this;                                                                                                       // 3486
};                                                                                                                     // 3487
                                                                                                                       // 3488
Filter.prototype.watch = function (callback) {                                                                         // 3489
    this.callbacks.push(callback);                                                                                     // 3490
                                                                                                                       // 3491
    if(this.filterId) {                                                                                                // 3492
        getLogsAtStart(this, callback);                                                                                // 3493
        pollFilter(this);                                                                                              // 3494
    }                                                                                                                  // 3495
                                                                                                                       // 3496
    return this;                                                                                                       // 3497
};                                                                                                                     // 3498
                                                                                                                       // 3499
Filter.prototype.stopWatching = function () {                                                                          // 3500
    this.requestManager.stopPolling(this.filterId);                                                                    // 3501
    // remove filter async                                                                                             // 3502
    this.implementation.uninstallFilter(this.filterId, function(){});                                                  // 3503
    this.callbacks = [];                                                                                               // 3504
};                                                                                                                     // 3505
                                                                                                                       // 3506
Filter.prototype.get = function (callback) {                                                                           // 3507
    var self = this;                                                                                                   // 3508
    if (utils.isFunction(callback)) {                                                                                  // 3509
        if (this.filterId === null) {                                                                                  // 3510
            // If filterId is not set yet, call it back                                                                // 3511
            // when newFilter() assigns it.                                                                            // 3512
            this.getLogsCallbacks.push(callback);                                                                      // 3513
        } else {                                                                                                       // 3514
            this.implementation.getLogs(this.filterId, function(err, res){                                             // 3515
                if (err) {                                                                                             // 3516
                    callback(err);                                                                                     // 3517
                } else {                                                                                               // 3518
                    callback(null, res.map(function (log) {                                                            // 3519
                        return self.formatter ? self.formatter(log) : log;                                             // 3520
                    }));                                                                                               // 3521
                }                                                                                                      // 3522
            });                                                                                                        // 3523
        }                                                                                                              // 3524
    } else {                                                                                                           // 3525
        if (this.filterId === null) {                                                                                  // 3526
            throw new Error('Filter ID Error: filter().get() can\'t be chained synchronous, please provide a callback for the get() method.');
        }                                                                                                              // 3528
        var logs = this.implementation.getLogs(this.filterId);                                                         // 3529
        return logs.map(function (log) {                                                                               // 3530
            return self.formatter ? self.formatter(log) : log;                                                         // 3531
        });                                                                                                            // 3532
    }                                                                                                                  // 3533
                                                                                                                       // 3534
    return this;                                                                                                       // 3535
};                                                                                                                     // 3536
                                                                                                                       // 3537
module.exports = Filter;                                                                                               // 3538
                                                                                                                       // 3539
                                                                                                                       // 3540
},{"../utils/utils":20,"./formatters":30}],30:[function(require,module,exports){                                       // 3541
/*                                                                                                                     // 3542
    This file is part of web3.js.                                                                                      // 3543
                                                                                                                       // 3544
    web3.js is free software: you can redistribute it and/or modify                                                    // 3545
    it under the terms of the GNU Lesser General Public License as published by                                        // 3546
    the Free Software Foundation, either version 3 of the License, or                                                  // 3547
    (at your option) any later version.                                                                                // 3548
                                                                                                                       // 3549
    web3.js is distributed in the hope that it will be useful,                                                         // 3550
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3551
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3552
    GNU Lesser General Public License for more details.                                                                // 3553
                                                                                                                       // 3554
    You should have received a copy of the GNU Lesser General Public License                                           // 3555
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3556
*/                                                                                                                     // 3557
/**                                                                                                                    // 3558
 * @file formatters.js                                                                                                 // 3559
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3560
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 3561
 * @date 2015                                                                                                          // 3562
 */                                                                                                                    // 3563
                                                                                                                       // 3564
var utils = require('../utils/utils');                                                                                 // 3565
var config = require('../utils/config');                                                                               // 3566
var Iban = require('./iban');                                                                                          // 3567
                                                                                                                       // 3568
/**                                                                                                                    // 3569
 * Should the format output to a big number                                                                            // 3570
 *                                                                                                                     // 3571
 * @method outputBigNumberFormatter                                                                                    // 3572
 * @param {String|Number|BigNumber}                                                                                    // 3573
 * @returns {BigNumber} object                                                                                         // 3574
 */                                                                                                                    // 3575
var outputBigNumberFormatter = function (number) {                                                                     // 3576
    return utils.toBigNumber(number);                                                                                  // 3577
};                                                                                                                     // 3578
                                                                                                                       // 3579
var isPredefinedBlockNumber = function (blockNumber) {                                                                 // 3580
    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';                        // 3581
};                                                                                                                     // 3582
                                                                                                                       // 3583
var inputDefaultBlockNumberFormatter = function (blockNumber) {                                                        // 3584
    if (blockNumber === undefined) {                                                                                   // 3585
        return config.defaultBlock;                                                                                    // 3586
    }                                                                                                                  // 3587
    return inputBlockNumberFormatter(blockNumber);                                                                     // 3588
};                                                                                                                     // 3589
                                                                                                                       // 3590
var inputBlockNumberFormatter = function (blockNumber) {                                                               // 3591
    if (blockNumber === undefined) {                                                                                   // 3592
        return undefined;                                                                                              // 3593
    } else if (isPredefinedBlockNumber(blockNumber)) {                                                                 // 3594
        return blockNumber;                                                                                            // 3595
    }                                                                                                                  // 3596
    return utils.toHex(blockNumber);                                                                                   // 3597
};                                                                                                                     // 3598
                                                                                                                       // 3599
/**                                                                                                                    // 3600
 * Formats the input of a transaction and converts all values to HEX                                                   // 3601
 *                                                                                                                     // 3602
 * @method inputCallFormatter                                                                                          // 3603
 * @param {Object} transaction options                                                                                 // 3604
 * @returns object                                                                                                     // 3605
*/                                                                                                                     // 3606
var inputCallFormatter = function (options){                                                                           // 3607
                                                                                                                       // 3608
    options.from = options.from || config.defaultAccount;                                                              // 3609
                                                                                                                       // 3610
    if (options.from) {                                                                                                // 3611
        options.from = inputAddressFormatter(options.from);                                                            // 3612
    }                                                                                                                  // 3613
                                                                                                                       // 3614
    if (options.to) { // it might be contract creation                                                                 // 3615
        options.to = inputAddressFormatter(options.to);                                                                // 3616
    }                                                                                                                  // 3617
                                                                                                                       // 3618
    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {                                                      // 3619
        return options[key] !== undefined;                                                                             // 3620
    }).forEach(function(key){                                                                                          // 3621
        options[key] = utils.fromDecimal(options[key]);                                                                // 3622
    });                                                                                                                // 3623
                                                                                                                       // 3624
    return options;                                                                                                    // 3625
};                                                                                                                     // 3626
                                                                                                                       // 3627
/**                                                                                                                    // 3628
 * Formats the input of a transaction and converts all values to HEX                                                   // 3629
 *                                                                                                                     // 3630
 * @method inputTransactionFormatter                                                                                   // 3631
 * @param {Object} transaction options                                                                                 // 3632
 * @returns object                                                                                                     // 3633
*/                                                                                                                     // 3634
var inputTransactionFormatter = function (options){                                                                    // 3635
                                                                                                                       // 3636
    options.from = options.from || config.defaultAccount;                                                              // 3637
    options.from = inputAddressFormatter(options.from);                                                                // 3638
                                                                                                                       // 3639
    if (options.to) { // it might be contract creation                                                                 // 3640
        options.to = inputAddressFormatter(options.to);                                                                // 3641
    }                                                                                                                  // 3642
                                                                                                                       // 3643
    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {                                                      // 3644
        return options[key] !== undefined;                                                                             // 3645
    }).forEach(function(key){                                                                                          // 3646
        options[key] = utils.fromDecimal(options[key]);                                                                // 3647
    });                                                                                                                // 3648
                                                                                                                       // 3649
    return options;                                                                                                    // 3650
};                                                                                                                     // 3651
                                                                                                                       // 3652
/**                                                                                                                    // 3653
 * Formats the output of a transaction to its proper values                                                            // 3654
 *                                                                                                                     // 3655
 * @method outputTransactionFormatter                                                                                  // 3656
 * @param {Object} tx                                                                                                  // 3657
 * @returns {Object}                                                                                                   // 3658
*/                                                                                                                     // 3659
var outputTransactionFormatter = function (tx){                                                                        // 3660
    if(tx.blockNumber !== null)                                                                                        // 3661
        tx.blockNumber = utils.toDecimal(tx.blockNumber);                                                              // 3662
    if(tx.transactionIndex !== null)                                                                                   // 3663
        tx.transactionIndex = utils.toDecimal(tx.transactionIndex);                                                    // 3664
    tx.nonce = utils.toDecimal(tx.nonce);                                                                              // 3665
    tx.gas = utils.toDecimal(tx.gas);                                                                                  // 3666
    tx.gasPrice = utils.toBigNumber(tx.gasPrice);                                                                      // 3667
    tx.value = utils.toBigNumber(tx.value);                                                                            // 3668
    return tx;                                                                                                         // 3669
};                                                                                                                     // 3670
                                                                                                                       // 3671
/**                                                                                                                    // 3672
 * Formats the output of a transaction receipt to its proper values                                                    // 3673
 *                                                                                                                     // 3674
 * @method outputTransactionReceiptFormatter                                                                           // 3675
 * @param {Object} receipt                                                                                             // 3676
 * @returns {Object}                                                                                                   // 3677
*/                                                                                                                     // 3678
var outputTransactionReceiptFormatter = function (receipt){                                                            // 3679
    if(receipt.blockNumber !== null)                                                                                   // 3680
        receipt.blockNumber = utils.toDecimal(receipt.blockNumber);                                                    // 3681
    if(receipt.transactionIndex !== null)                                                                              // 3682
        receipt.transactionIndex = utils.toDecimal(receipt.transactionIndex);                                          // 3683
    receipt.cumulativeGasUsed = utils.toDecimal(receipt.cumulativeGasUsed);                                            // 3684
    receipt.gasUsed = utils.toDecimal(receipt.gasUsed);                                                                // 3685
                                                                                                                       // 3686
    if(utils.isArray(receipt.logs)) {                                                                                  // 3687
        receipt.logs = receipt.logs.map(function(log){                                                                 // 3688
            return outputLogFormatter(log);                                                                            // 3689
        });                                                                                                            // 3690
    }                                                                                                                  // 3691
                                                                                                                       // 3692
    return receipt;                                                                                                    // 3693
};                                                                                                                     // 3694
                                                                                                                       // 3695
/**                                                                                                                    // 3696
 * Formats the output of a block to its proper values                                                                  // 3697
 *                                                                                                                     // 3698
 * @method outputBlockFormatter                                                                                        // 3699
 * @param {Object} block                                                                                               // 3700
 * @returns {Object}                                                                                                   // 3701
*/                                                                                                                     // 3702
var outputBlockFormatter = function(block) {                                                                           // 3703
                                                                                                                       // 3704
    // transform to number                                                                                             // 3705
    block.gasLimit = utils.toDecimal(block.gasLimit);                                                                  // 3706
    block.gasUsed = utils.toDecimal(block.gasUsed);                                                                    // 3707
    block.size = utils.toDecimal(block.size);                                                                          // 3708
    block.timestamp = utils.toDecimal(block.timestamp);                                                                // 3709
    if(block.number !== null)                                                                                          // 3710
        block.number = utils.toDecimal(block.number);                                                                  // 3711
                                                                                                                       // 3712
    block.difficulty = utils.toBigNumber(block.difficulty);                                                            // 3713
    block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);                                                  // 3714
                                                                                                                       // 3715
    if (utils.isArray(block.transactions)) {                                                                           // 3716
        block.transactions.forEach(function(item){                                                                     // 3717
            if(!utils.isString(item))                                                                                  // 3718
                return outputTransactionFormatter(item);                                                               // 3719
        });                                                                                                            // 3720
    }                                                                                                                  // 3721
                                                                                                                       // 3722
    return block;                                                                                                      // 3723
};                                                                                                                     // 3724
                                                                                                                       // 3725
/**                                                                                                                    // 3726
 * Formats the output of a log                                                                                         // 3727
 *                                                                                                                     // 3728
 * @method outputLogFormatter                                                                                          // 3729
 * @param {Object} log object                                                                                          // 3730
 * @returns {Object} log                                                                                               // 3731
*/                                                                                                                     // 3732
var outputLogFormatter = function(log) {                                                                               // 3733
    if(log.blockNumber !== null)                                                                                       // 3734
        log.blockNumber = utils.toDecimal(log.blockNumber);                                                            // 3735
    if(log.transactionIndex !== null)                                                                                  // 3736
        log.transactionIndex = utils.toDecimal(log.transactionIndex);                                                  // 3737
    if(log.logIndex !== null)                                                                                          // 3738
        log.logIndex = utils.toDecimal(log.logIndex);                                                                  // 3739
                                                                                                                       // 3740
    return log;                                                                                                        // 3741
};                                                                                                                     // 3742
                                                                                                                       // 3743
/**                                                                                                                    // 3744
 * Formats the input of a whisper post and converts all values to HEX                                                  // 3745
 *                                                                                                                     // 3746
 * @method inputPostFormatter                                                                                          // 3747
 * @param {Object} transaction object                                                                                  // 3748
 * @returns {Object}                                                                                                   // 3749
*/                                                                                                                     // 3750
var inputPostFormatter = function(post) {                                                                              // 3751
                                                                                                                       // 3752
    // post.payload = utils.toHex(post.payload);                                                                       // 3753
    post.ttl = utils.fromDecimal(post.ttl);                                                                            // 3754
    post.workToProve = utils.fromDecimal(post.workToProve);                                                            // 3755
    post.priority = utils.fromDecimal(post.priority);                                                                  // 3756
                                                                                                                       // 3757
    // fallback                                                                                                        // 3758
    if (!utils.isArray(post.topics)) {                                                                                 // 3759
        post.topics = post.topics ? [post.topics] : [];                                                                // 3760
    }                                                                                                                  // 3761
                                                                                                                       // 3762
    // format the following options                                                                                    // 3763
    post.topics = post.topics.map(function(topic){                                                                     // 3764
        // convert only if not hex                                                                                     // 3765
        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);                                            // 3766
    });                                                                                                                // 3767
                                                                                                                       // 3768
    return post;                                                                                                       // 3769
};                                                                                                                     // 3770
                                                                                                                       // 3771
/**                                                                                                                    // 3772
 * Formats the output of a received post message                                                                       // 3773
 *                                                                                                                     // 3774
 * @method outputPostFormatter                                                                                         // 3775
 * @param {Object}                                                                                                     // 3776
 * @returns {Object}                                                                                                   // 3777
 */                                                                                                                    // 3778
var outputPostFormatter = function(post){                                                                              // 3779
                                                                                                                       // 3780
    post.expiry = utils.toDecimal(post.expiry);                                                                        // 3781
    post.sent = utils.toDecimal(post.sent);                                                                            // 3782
    post.ttl = utils.toDecimal(post.ttl);                                                                              // 3783
    post.workProved = utils.toDecimal(post.workProved);                                                                // 3784
    // post.payloadRaw = post.payload;                                                                                 // 3785
    // post.payload = utils.toAscii(post.payload);                                                                     // 3786
                                                                                                                       // 3787
    // if (utils.isJson(post.payload)) {                                                                               // 3788
    //     post.payload = JSON.parse(post.payload);                                                                    // 3789
    // }                                                                                                               // 3790
                                                                                                                       // 3791
    // format the following options                                                                                    // 3792
    if (!post.topics) {                                                                                                // 3793
        post.topics = [];                                                                                              // 3794
    }                                                                                                                  // 3795
    post.topics = post.topics.map(function(topic){                                                                     // 3796
        return utils.toAscii(topic);                                                                                   // 3797
    });                                                                                                                // 3798
                                                                                                                       // 3799
    return post;                                                                                                       // 3800
};                                                                                                                     // 3801
                                                                                                                       // 3802
var inputAddressFormatter = function (address) {                                                                       // 3803
    var iban = new Iban(address);                                                                                      // 3804
    if (iban.isValid() && iban.isDirect()) {                                                                           // 3805
        return '0x' + iban.address();                                                                                  // 3806
    } else if (utils.isStrictAddress(address)) {                                                                       // 3807
        return address;                                                                                                // 3808
    } else if (utils.isAddress(address)) {                                                                             // 3809
        return '0x' + address;                                                                                         // 3810
    }                                                                                                                  // 3811
    throw 'invalid address';                                                                                           // 3812
};                                                                                                                     // 3813
                                                                                                                       // 3814
                                                                                                                       // 3815
var outputSyncingFormatter = function(result) {                                                                        // 3816
                                                                                                                       // 3817
    result.startingBlock = utils.toDecimal(result.startingBlock);                                                      // 3818
    result.currentBlock = utils.toDecimal(result.currentBlock);                                                        // 3819
    result.highestBlock = utils.toDecimal(result.highestBlock);                                                        // 3820
                                                                                                                       // 3821
    return result;                                                                                                     // 3822
};                                                                                                                     // 3823
                                                                                                                       // 3824
module.exports = {                                                                                                     // 3825
    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,                                                // 3826
    inputBlockNumberFormatter: inputBlockNumberFormatter,                                                              // 3827
    inputCallFormatter: inputCallFormatter,                                                                            // 3828
    inputTransactionFormatter: inputTransactionFormatter,                                                              // 3829
    inputAddressFormatter: inputAddressFormatter,                                                                      // 3830
    inputPostFormatter: inputPostFormatter,                                                                            // 3831
    outputBigNumberFormatter: outputBigNumberFormatter,                                                                // 3832
    outputTransactionFormatter: outputTransactionFormatter,                                                            // 3833
    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,                                              // 3834
    outputBlockFormatter: outputBlockFormatter,                                                                        // 3835
    outputLogFormatter: outputLogFormatter,                                                                            // 3836
    outputPostFormatter: outputPostFormatter,                                                                          // 3837
    outputSyncingFormatter: outputSyncingFormatter                                                                     // 3838
};                                                                                                                     // 3839
                                                                                                                       // 3840
                                                                                                                       // 3841
},{"../utils/config":18,"../utils/utils":20,"./iban":33}],31:[function(require,module,exports){                        // 3842
/*                                                                                                                     // 3843
    This file is part of web3.js.                                                                                      // 3844
                                                                                                                       // 3845
    web3.js is free software: you can redistribute it and/or modify                                                    // 3846
    it under the terms of the GNU Lesser General Public License as published by                                        // 3847
    the Free Software Foundation, either version 3 of the License, or                                                  // 3848
    (at your option) any later version.                                                                                // 3849
                                                                                                                       // 3850
    web3.js is distributed in the hope that it will be useful,                                                         // 3851
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3852
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3853
    GNU Lesser General Public License for more details.                                                                // 3854
                                                                                                                       // 3855
    You should have received a copy of the GNU Lesser General Public License                                           // 3856
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3857
*/                                                                                                                     // 3858
/**                                                                                                                    // 3859
 * @file function.js                                                                                                   // 3860
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3861
 * @date 2015                                                                                                          // 3862
 */                                                                                                                    // 3863
                                                                                                                       // 3864
var coder = require('../solidity/coder');                                                                              // 3865
var utils = require('../utils/utils');                                                                                 // 3866
var formatters = require('./formatters');                                                                              // 3867
var sha3 = require('../utils/sha3');                                                                                   // 3868
                                                                                                                       // 3869
/**                                                                                                                    // 3870
 * This prototype should be used to call/sendTransaction to solidity functions                                         // 3871
 */                                                                                                                    // 3872
var SolidityFunction = function (eth, json, address) {                                                                 // 3873
    this._eth = eth;                                                                                                   // 3874
    this._inputTypes = json.inputs.map(function (i) {                                                                  // 3875
        return i.type;                                                                                                 // 3876
    });                                                                                                                // 3877
    this._outputTypes = json.outputs.map(function (i) {                                                                // 3878
        return i.type;                                                                                                 // 3879
    });                                                                                                                // 3880
    this._constant = json.constant;                                                                                    // 3881
    this._name = utils.transformToFullName(json);                                                                      // 3882
    this._address = address;                                                                                           // 3883
};                                                                                                                     // 3884
                                                                                                                       // 3885
SolidityFunction.prototype.extractCallback = function (args) {                                                         // 3886
    if (utils.isFunction(args[args.length - 1])) {                                                                     // 3887
        return args.pop(); // modify the args array!                                                                   // 3888
    }                                                                                                                  // 3889
};                                                                                                                     // 3890
                                                                                                                       // 3891
SolidityFunction.prototype.extractDefaultBlock = function (args) {                                                     // 3892
    if (args.length > this._inputTypes.length && !utils.isObject(args[args.length -1])) {                              // 3893
        return formatters.inputDefaultBlockNumberFormatter(args.pop()); // modify the args array!                      // 3894
    }                                                                                                                  // 3895
};                                                                                                                     // 3896
                                                                                                                       // 3897
/**                                                                                                                    // 3898
 * Should be used to create payload from arguments                                                                     // 3899
 *                                                                                                                     // 3900
 * @method toPayload                                                                                                   // 3901
 * @param {Array} solidity function params                                                                             // 3902
 * @param {Object} optional payload options                                                                            // 3903
 */                                                                                                                    // 3904
SolidityFunction.prototype.toPayload = function (args) {                                                               // 3905
    var options = {};                                                                                                  // 3906
    if (args.length > this._inputTypes.length && utils.isObject(args[args.length -1])) {                               // 3907
        options = args[args.length - 1];                                                                               // 3908
    }                                                                                                                  // 3909
    options.to = this._address;                                                                                        // 3910
    options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);                               // 3911
    return options;                                                                                                    // 3912
};                                                                                                                     // 3913
                                                                                                                       // 3914
/**                                                                                                                    // 3915
 * Should be used to get function signature                                                                            // 3916
 *                                                                                                                     // 3917
 * @method signature                                                                                                   // 3918
 * @return {String} function signature                                                                                 // 3919
 */                                                                                                                    // 3920
SolidityFunction.prototype.signature = function () {                                                                   // 3921
    return sha3(this._name).slice(0, 8);                                                                               // 3922
};                                                                                                                     // 3923
                                                                                                                       // 3924
                                                                                                                       // 3925
SolidityFunction.prototype.unpackOutput = function (output) {                                                          // 3926
    if (!output) {                                                                                                     // 3927
        return;                                                                                                        // 3928
    }                                                                                                                  // 3929
                                                                                                                       // 3930
    output = output.length >= 2 ? output.slice(2) : output;                                                            // 3931
    var result = coder.decodeParams(this._outputTypes, output);                                                        // 3932
    return result.length === 1 ? result[0] : result;                                                                   // 3933
};                                                                                                                     // 3934
                                                                                                                       // 3935
/**                                                                                                                    // 3936
 * Calls a contract function.                                                                                          // 3937
 *                                                                                                                     // 3938
 * @method call                                                                                                        // 3939
 * @param {...Object} Contract function arguments                                                                      // 3940
 * @param {function} If the last argument is a function, the contract function                                         // 3941
 *   call will be asynchronous, and the callback will be passed the                                                    // 3942
 *   error and result.                                                                                                 // 3943
 * @return {String} output bytes                                                                                       // 3944
 */                                                                                                                    // 3945
SolidityFunction.prototype.call = function () {                                                                        // 3946
    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });                  // 3947
    var callback = this.extractCallback(args);                                                                         // 3948
    var defaultBlock = this.extractDefaultBlock(args);                                                                 // 3949
    var payload = this.toPayload(args);                                                                                // 3950
                                                                                                                       // 3951
                                                                                                                       // 3952
    if (!callback) {                                                                                                   // 3953
        var output = this._eth.call(payload, defaultBlock);                                                            // 3954
        return this.unpackOutput(output);                                                                              // 3955
    }                                                                                                                  // 3956
                                                                                                                       // 3957
    var self = this;                                                                                                   // 3958
    this._eth.call(payload, defaultBlock, function (error, output) {                                                   // 3959
        callback(error, self.unpackOutput(output));                                                                    // 3960
    });                                                                                                                // 3961
};                                                                                                                     // 3962
                                                                                                                       // 3963
/**                                                                                                                    // 3964
 * Should be used to sendTransaction to solidity function                                                              // 3965
 *                                                                                                                     // 3966
 * @method sendTransaction                                                                                             // 3967
 */                                                                                                                    // 3968
SolidityFunction.prototype.sendTransaction = function () {                                                             // 3969
    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });                  // 3970
    var callback = this.extractCallback(args);                                                                         // 3971
    var payload = this.toPayload(args);                                                                                // 3972
                                                                                                                       // 3973
    if (!callback) {                                                                                                   // 3974
        return this._eth.sendTransaction(payload);                                                                     // 3975
    }                                                                                                                  // 3976
                                                                                                                       // 3977
    this._eth.sendTransaction(payload, callback);                                                                      // 3978
};                                                                                                                     // 3979
                                                                                                                       // 3980
/**                                                                                                                    // 3981
 * Should be used to estimateGas of solidity function                                                                  // 3982
 *                                                                                                                     // 3983
 * @method estimateGas                                                                                                 // 3984
 */                                                                                                                    // 3985
SolidityFunction.prototype.estimateGas = function () {                                                                 // 3986
    var args = Array.prototype.slice.call(arguments);                                                                  // 3987
    var callback = this.extractCallback(args);                                                                         // 3988
    var payload = this.toPayload(args);                                                                                // 3989
                                                                                                                       // 3990
    if (!callback) {                                                                                                   // 3991
        return this._eth.estimateGas(payload);                                                                         // 3992
    }                                                                                                                  // 3993
                                                                                                                       // 3994
    this._eth.estimateGas(payload, callback);                                                                          // 3995
};                                                                                                                     // 3996
                                                                                                                       // 3997
/**                                                                                                                    // 3998
 * Return the encoded data of the call                                                                                 // 3999
 *                                                                                                                     // 4000
 * @method getData                                                                                                     // 4001
 * @return {String} the encoded data                                                                                   // 4002
 */                                                                                                                    // 4003
SolidityFunction.prototype.getData = function () {                                                                     // 4004
    var args = Array.prototype.slice.call(arguments);                                                                  // 4005
    var payload = this.toPayload(args);                                                                                // 4006
                                                                                                                       // 4007
    return payload.data;                                                                                               // 4008
};                                                                                                                     // 4009
                                                                                                                       // 4010
/**                                                                                                                    // 4011
 * Should be used to get function display name                                                                         // 4012
 *                                                                                                                     // 4013
 * @method displayName                                                                                                 // 4014
 * @return {String} display name of the function                                                                       // 4015
 */                                                                                                                    // 4016
SolidityFunction.prototype.displayName = function () {                                                                 // 4017
    return utils.extractDisplayName(this._name);                                                                       // 4018
};                                                                                                                     // 4019
                                                                                                                       // 4020
/**                                                                                                                    // 4021
 * Should be used to get function type name                                                                            // 4022
 *                                                                                                                     // 4023
 * @method typeName                                                                                                    // 4024
 * @return {String} type name of the function                                                                          // 4025
 */                                                                                                                    // 4026
SolidityFunction.prototype.typeName = function () {                                                                    // 4027
    return utils.extractTypeName(this._name);                                                                          // 4028
};                                                                                                                     // 4029
                                                                                                                       // 4030
/**                                                                                                                    // 4031
 * Should be called to get rpc requests from solidity function                                                         // 4032
 *                                                                                                                     // 4033
 * @method request                                                                                                     // 4034
 * @returns {Object}                                                                                                   // 4035
 */                                                                                                                    // 4036
SolidityFunction.prototype.request = function () {                                                                     // 4037
    var args = Array.prototype.slice.call(arguments);                                                                  // 4038
    var callback = this.extractCallback(args);                                                                         // 4039
    var payload = this.toPayload(args);                                                                                // 4040
    var format = this.unpackOutput.bind(this);                                                                         // 4041
                                                                                                                       // 4042
    return {                                                                                                           // 4043
        method: this._constant ? 'eth_call' : 'eth_sendTransaction',                                                   // 4044
        callback: callback,                                                                                            // 4045
        params: [payload],                                                                                             // 4046
        format: format                                                                                                 // 4047
    };                                                                                                                 // 4048
};                                                                                                                     // 4049
                                                                                                                       // 4050
/**                                                                                                                    // 4051
 * Should be called to execute function                                                                                // 4052
 *                                                                                                                     // 4053
 * @method execute                                                                                                     // 4054
 */                                                                                                                    // 4055
SolidityFunction.prototype.execute = function () {                                                                     // 4056
    var transaction = !this._constant;                                                                                 // 4057
                                                                                                                       // 4058
    // send transaction                                                                                                // 4059
    if (transaction) {                                                                                                 // 4060
        return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));                                // 4061
    }                                                                                                                  // 4062
                                                                                                                       // 4063
    // call                                                                                                            // 4064
    return this.call.apply(this, Array.prototype.slice.call(arguments));                                               // 4065
};                                                                                                                     // 4066
                                                                                                                       // 4067
/**                                                                                                                    // 4068
 * Should be called to attach function to contract                                                                     // 4069
 *                                                                                                                     // 4070
 * @method attachToContract                                                                                            // 4071
 * @param {Contract}                                                                                                   // 4072
 */                                                                                                                    // 4073
SolidityFunction.prototype.attachToContract = function (contract) {                                                    // 4074
    var execute = this.execute.bind(this);                                                                             // 4075
    execute.request = this.request.bind(this);                                                                         // 4076
    execute.call = this.call.bind(this);                                                                               // 4077
    execute.sendTransaction = this.sendTransaction.bind(this);                                                         // 4078
    execute.estimateGas = this.estimateGas.bind(this);                                                                 // 4079
    execute.getData = this.getData.bind(this);                                                                         // 4080
    var displayName = this.displayName();                                                                              // 4081
    if (!contract[displayName]) {                                                                                      // 4082
        contract[displayName] = execute;                                                                               // 4083
    }                                                                                                                  // 4084
    contract[displayName][this.typeName()] = execute; // circular!!!!                                                  // 4085
};                                                                                                                     // 4086
                                                                                                                       // 4087
module.exports = SolidityFunction;                                                                                     // 4088
                                                                                                                       // 4089
                                                                                                                       // 4090
},{"../solidity/coder":7,"../utils/sha3":19,"../utils/utils":20,"./formatters":30}],32:[function(require,module,exports){
/*                                                                                                                     // 4092
    This file is part of web3.js.                                                                                      // 4093
                                                                                                                       // 4094
    web3.js is free software: you can redistribute it and/or modify                                                    // 4095
    it under the terms of the GNU Lesser General Public License as published by                                        // 4096
    the Free Software Foundation, either version 3 of the License, or                                                  // 4097
    (at your option) any later version.                                                                                // 4098
                                                                                                                       // 4099
    web3.js is distributed in the hope that it will be useful,                                                         // 4100
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4101
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4102
    GNU Lesser General Public License for more details.                                                                // 4103
                                                                                                                       // 4104
    You should have received a copy of the GNU Lesser General Public License                                           // 4105
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4106
*/                                                                                                                     // 4107
/** @file httpprovider.js                                                                                              // 4108
 * @authors:                                                                                                           // 4109
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 4110
 *   Marian Oancea <marian@ethdev.com>                                                                                 // 4111
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 4112
 * @date 2015                                                                                                          // 4113
 */                                                                                                                    // 4114
                                                                                                                       // 4115
"use strict";                                                                                                          // 4116
                                                                                                                       // 4117
var errors = require('./errors');                                                                                      // 4118
                                                                                                                       // 4119
// workaround to use httpprovider in different envs                                                                    // 4120
var XMLHttpRequest; // jshint ignore: line                                                                             // 4121
                                                                                                                       // 4122
// meteor server environment                                                                                           // 4123
if (typeof Meteor !== 'undefined' && Meteor.isServer) { // jshint ignore: line                                         // 4124
    XMLHttpRequest = Npm.require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line                              // 4125
                                                                                                                       // 4126
// browser                                                                                                             // 4127
} else if (typeof window !== 'undefined' && window.XMLHttpRequest) {                                                   // 4128
    XMLHttpRequest = window.XMLHttpRequest; // jshint ignore: line                                                     // 4129
                                                                                                                       // 4130
// node                                                                                                                // 4131
} else {                                                                                                               // 4132
    XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line                                  // 4133
}                                                                                                                      // 4134
                                                                                                                       // 4135
/**                                                                                                                    // 4136
 * HttpProvider should be used to send rpc calls over http                                                             // 4137
 */                                                                                                                    // 4138
var HttpProvider = function (host) {                                                                                   // 4139
    this.host = host || 'http://localhost:8545';                                                                       // 4140
};                                                                                                                     // 4141
                                                                                                                       // 4142
/**                                                                                                                    // 4143
 * Should be called to prepare new XMLHttpRequest                                                                      // 4144
 *                                                                                                                     // 4145
 * @method prepareRequest                                                                                              // 4146
 * @param {Boolean} true if request should be async                                                                    // 4147
 * @return {XMLHttpRequest} object                                                                                     // 4148
 */                                                                                                                    // 4149
HttpProvider.prototype.prepareRequest = function (async) {                                                             // 4150
    var request = new XMLHttpRequest();                                                                                // 4151
    request.open('POST', this.host, async);                                                                            // 4152
    request.setRequestHeader('Content-Type','application/json');                                                       // 4153
    return request;                                                                                                    // 4154
};                                                                                                                     // 4155
                                                                                                                       // 4156
/**                                                                                                                    // 4157
 * Should be called to make sync request                                                                               // 4158
 *                                                                                                                     // 4159
 * @method send                                                                                                        // 4160
 * @param {Object} payload                                                                                             // 4161
 * @return {Object} result                                                                                             // 4162
 */                                                                                                                    // 4163
HttpProvider.prototype.send = function (payload) {                                                                     // 4164
    var request = this.prepareRequest(false);                                                                          // 4165
                                                                                                                       // 4166
    try {                                                                                                              // 4167
        request.send(JSON.stringify(payload));                                                                         // 4168
    } catch(error) {                                                                                                   // 4169
        throw errors.InvalidConnection(this.host);                                                                     // 4170
    }                                                                                                                  // 4171
                                                                                                                       // 4172
    var result = request.responseText;                                                                                 // 4173
                                                                                                                       // 4174
    try {                                                                                                              // 4175
        result = JSON.parse(result);                                                                                   // 4176
    } catch(e) {                                                                                                       // 4177
        throw errors.InvalidResponse(request.responseText);                                                            // 4178
    }                                                                                                                  // 4179
                                                                                                                       // 4180
    return result;                                                                                                     // 4181
};                                                                                                                     // 4182
                                                                                                                       // 4183
/**                                                                                                                    // 4184
 * Should be used to make async request                                                                                // 4185
 *                                                                                                                     // 4186
 * @method sendAsync                                                                                                   // 4187
 * @param {Object} payload                                                                                             // 4188
 * @param {Function} callback triggered on end with (err, result)                                                      // 4189
 */                                                                                                                    // 4190
HttpProvider.prototype.sendAsync = function (payload, callback) {                                                      // 4191
    var request = this.prepareRequest(true);                                                                           // 4192
                                                                                                                       // 4193
    request.onreadystatechange = function() {                                                                          // 4194
        if (request.readyState === 4) {                                                                                // 4195
            var result = request.responseText;                                                                         // 4196
            var error = null;                                                                                          // 4197
                                                                                                                       // 4198
            try {                                                                                                      // 4199
                result = JSON.parse(result);                                                                           // 4200
            } catch(e) {                                                                                               // 4201
                error = errors.InvalidResponse(request.responseText);                                                  // 4202
            }                                                                                                          // 4203
                                                                                                                       // 4204
            callback(error, result);                                                                                   // 4205
        }                                                                                                              // 4206
    };                                                                                                                 // 4207
                                                                                                                       // 4208
    try {                                                                                                              // 4209
        request.send(JSON.stringify(payload));                                                                         // 4210
    } catch(error) {                                                                                                   // 4211
        callback(errors.InvalidConnection(this.host));                                                                 // 4212
    }                                                                                                                  // 4213
};                                                                                                                     // 4214
                                                                                                                       // 4215
/**                                                                                                                    // 4216
 * Synchronously tries to make Http request                                                                            // 4217
 *                                                                                                                     // 4218
 * @method isConnected                                                                                                 // 4219
 * @return {Boolean} returns true if request haven't failed. Otherwise false                                           // 4220
 */                                                                                                                    // 4221
HttpProvider.prototype.isConnected = function() {                                                                      // 4222
    try {                                                                                                              // 4223
        this.send({                                                                                                    // 4224
            id: 9999999999,                                                                                            // 4225
            jsonrpc: '2.0',                                                                                            // 4226
            method: 'net_listening',                                                                                   // 4227
            params: []                                                                                                 // 4228
        });                                                                                                            // 4229
        return true;                                                                                                   // 4230
    } catch(e) {                                                                                                       // 4231
        return false;                                                                                                  // 4232
    }                                                                                                                  // 4233
};                                                                                                                     // 4234
                                                                                                                       // 4235
module.exports = HttpProvider;                                                                                         // 4236
                                                                                                                       // 4237
                                                                                                                       // 4238
},{"./errors":26,"xmlhttprequest":17}],33:[function(require,module,exports){                                           // 4239
/*                                                                                                                     // 4240
    This file is part of web3.js.                                                                                      // 4241
                                                                                                                       // 4242
    web3.js is free software: you can redistribute it and/or modify                                                    // 4243
    it under the terms of the GNU Lesser General Public License as published by                                        // 4244
    the Free Software Foundation, either version 3 of the License, or                                                  // 4245
    (at your option) any later version.                                                                                // 4246
                                                                                                                       // 4247
    web3.js is distributed in the hope that it will be useful,                                                         // 4248
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4249
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4250
    GNU Lesser General Public License for more details.                                                                // 4251
                                                                                                                       // 4252
    You should have received a copy of the GNU Lesser General Public License                                           // 4253
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4254
*/                                                                                                                     // 4255
/**                                                                                                                    // 4256
 * @file iban.js                                                                                                       // 4257
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 4258
 * @date 2015                                                                                                          // 4259
 */                                                                                                                    // 4260
                                                                                                                       // 4261
var BigNumber = require('bignumber.js');                                                                               // 4262
                                                                                                                       // 4263
var padLeft = function (string, bytes) {                                                                               // 4264
    var result = string;                                                                                               // 4265
    while (result.length < bytes * 2) {                                                                                // 4266
        result = '00' + result;                                                                                        // 4267
    }                                                                                                                  // 4268
    return result;                                                                                                     // 4269
};                                                                                                                     // 4270
                                                                                                                       // 4271
/**                                                                                                                    // 4272
 * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to       // 4273
 * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.                                                    // 4274
 *                                                                                                                     // 4275
 * @method iso13616Prepare                                                                                             // 4276
 * @param {String} iban the IBAN                                                                                       // 4277
 * @returns {String} the prepared IBAN                                                                                 // 4278
 */                                                                                                                    // 4279
var iso13616Prepare = function (iban) {                                                                                // 4280
    var A = 'A'.charCodeAt(0);                                                                                         // 4281
    var Z = 'Z'.charCodeAt(0);                                                                                         // 4282
                                                                                                                       // 4283
    iban = iban.toUpperCase();                                                                                         // 4284
    iban = iban.substr(4) + iban.substr(0,4);                                                                          // 4285
                                                                                                                       // 4286
    return iban.split('').map(function(n){                                                                             // 4287
        var code = n.charCodeAt(0);                                                                                    // 4288
        if (code >= A && code <= Z){                                                                                   // 4289
            // A = 10, B = 11, ... Z = 35                                                                              // 4290
            return code - A + 10;                                                                                      // 4291
        } else {                                                                                                       // 4292
            return n;                                                                                                  // 4293
        }                                                                                                              // 4294
    }).join('');                                                                                                       // 4295
};                                                                                                                     // 4296
                                                                                                                       // 4297
/**                                                                                                                    // 4298
 * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.                                                // 4299
 *                                                                                                                     // 4300
 * @method mod9710                                                                                                     // 4301
 * @param {String} iban                                                                                                // 4302
 * @returns {Number}                                                                                                   // 4303
 */                                                                                                                    // 4304
var mod9710 = function (iban) {                                                                                        // 4305
    var remainder = iban,                                                                                              // 4306
        block;                                                                                                         // 4307
                                                                                                                       // 4308
    while (remainder.length > 2){                                                                                      // 4309
        block = remainder.slice(0, 9);                                                                                 // 4310
        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);                                          // 4311
    }                                                                                                                  // 4312
                                                                                                                       // 4313
    return parseInt(remainder, 10) % 97;                                                                               // 4314
};                                                                                                                     // 4315
                                                                                                                       // 4316
/**                                                                                                                    // 4317
 * This prototype should be used to create iban object from iban correct string                                        // 4318
 *                                                                                                                     // 4319
 * @param {String} iban                                                                                                // 4320
 */                                                                                                                    // 4321
var Iban = function (iban) {                                                                                           // 4322
    this._iban = iban;                                                                                                 // 4323
};                                                                                                                     // 4324
                                                                                                                       // 4325
/**                                                                                                                    // 4326
 * This method should be used to create iban object from ethereum address                                              // 4327
 *                                                                                                                     // 4328
 * @method fromAddress                                                                                                 // 4329
 * @param {String} address                                                                                             // 4330
 * @return {Iban} the IBAN object                                                                                      // 4331
 */                                                                                                                    // 4332
Iban.fromAddress = function (address) {                                                                                // 4333
    var asBn = new BigNumber(address, 16);                                                                             // 4334
    var base36 = asBn.toString(36);                                                                                    // 4335
    var padded = padLeft(base36, 15);                                                                                  // 4336
    return Iban.fromBban(padded.toUpperCase());                                                                        // 4337
};                                                                                                                     // 4338
                                                                                                                       // 4339
/**                                                                                                                    // 4340
 * Convert the passed BBAN to an IBAN for this country specification.                                                  // 4341
 * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
 * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
 *                                                                                                                     // 4344
 * @method fromBban                                                                                                    // 4345
 * @param {String} bban the BBAN to convert to IBAN                                                                    // 4346
 * @returns {Iban} the IBAN object                                                                                     // 4347
 */                                                                                                                    // 4348
Iban.fromBban = function (bban) {                                                                                      // 4349
    var countryCode = 'XE';                                                                                            // 4350
                                                                                                                       // 4351
    var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));                                               // 4352
    var checkDigit = ('0' + (98 - remainder)).slice(-2);                                                               // 4353
                                                                                                                       // 4354
    return new Iban(countryCode + checkDigit + bban);                                                                  // 4355
};                                                                                                                     // 4356
                                                                                                                       // 4357
/**                                                                                                                    // 4358
 * Should be used to create IBAN object for given institution and identifier                                           // 4359
 *                                                                                                                     // 4360
 * @method createIndirect                                                                                              // 4361
 * @param {Object} options, required options are "institution" and "identifier"                                        // 4362
 * @return {Iban} the IBAN object                                                                                      // 4363
 */                                                                                                                    // 4364
Iban.createIndirect = function (options) {                                                                             // 4365
    return Iban.fromBban('ETH' + options.institution + options.identifier);                                            // 4366
};                                                                                                                     // 4367
                                                                                                                       // 4368
/**                                                                                                                    // 4369
 * Thos method should be used to check if given string is valid iban object                                            // 4370
 *                                                                                                                     // 4371
 * @method isValid                                                                                                     // 4372
 * @param {String} iban string                                                                                         // 4373
 * @return {Boolean} true if it is valid IBAN                                                                          // 4374
 */                                                                                                                    // 4375
Iban.isValid = function (iban) {                                                                                       // 4376
    var i = new Iban(iban);                                                                                            // 4377
    return i.isValid();                                                                                                // 4378
};                                                                                                                     // 4379
                                                                                                                       // 4380
/**                                                                                                                    // 4381
 * Should be called to check if iban is correct                                                                        // 4382
 *                                                                                                                     // 4383
 * @method isValid                                                                                                     // 4384
 * @returns {Boolean} true if it is, otherwise false                                                                   // 4385
 */                                                                                                                    // 4386
Iban.prototype.isValid = function () {                                                                                 // 4387
    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&                                         // 4388
        mod9710(iso13616Prepare(this._iban)) === 1;                                                                    // 4389
};                                                                                                                     // 4390
                                                                                                                       // 4391
/**                                                                                                                    // 4392
 * Should be called to check if iban number is direct                                                                  // 4393
 *                                                                                                                     // 4394
 * @method isDirect                                                                                                    // 4395
 * @returns {Boolean} true if it is, otherwise false                                                                   // 4396
 */                                                                                                                    // 4397
Iban.prototype.isDirect = function () {                                                                                // 4398
    return this._iban.length === 34 || this._iban.length === 35;                                                       // 4399
};                                                                                                                     // 4400
                                                                                                                       // 4401
/**                                                                                                                    // 4402
 * Should be called to check if iban number if indirect                                                                // 4403
 *                                                                                                                     // 4404
 * @method isIndirect                                                                                                  // 4405
 * @returns {Boolean} true if it is, otherwise false                                                                   // 4406
 */                                                                                                                    // 4407
Iban.prototype.isIndirect = function () {                                                                              // 4408
    return this._iban.length === 20;                                                                                   // 4409
};                                                                                                                     // 4410
                                                                                                                       // 4411
/**                                                                                                                    // 4412
 * Should be called to get iban checksum                                                                               // 4413
 * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)                                                        // 4414
 *                                                                                                                     // 4415
 * @method checksum                                                                                                    // 4416
 * @returns {String} checksum                                                                                          // 4417
 */                                                                                                                    // 4418
Iban.prototype.checksum = function () {                                                                                // 4419
    return this._iban.substr(2, 2);                                                                                    // 4420
};                                                                                                                     // 4421
                                                                                                                       // 4422
/**                                                                                                                    // 4423
 * Should be called to get institution identifier                                                                      // 4424
 * eg. XREG                                                                                                            // 4425
 *                                                                                                                     // 4426
 * @method institution                                                                                                 // 4427
 * @returns {String} institution identifier                                                                            // 4428
 */                                                                                                                    // 4429
Iban.prototype.institution = function () {                                                                             // 4430
    return this.isIndirect() ? this._iban.substr(7, 4) : '';                                                           // 4431
};                                                                                                                     // 4432
                                                                                                                       // 4433
/**                                                                                                                    // 4434
 * Should be called to get client identifier within institution                                                        // 4435
 * eg. GAVOFYORK                                                                                                       // 4436
 *                                                                                                                     // 4437
 * @method client                                                                                                      // 4438
 * @returns {String} client identifier                                                                                 // 4439
 */                                                                                                                    // 4440
Iban.prototype.client = function () {                                                                                  // 4441
    return this.isIndirect() ? this._iban.substr(11) : '';                                                             // 4442
};                                                                                                                     // 4443
                                                                                                                       // 4444
/**                                                                                                                    // 4445
 * Should be called to get client direct address                                                                       // 4446
 *                                                                                                                     // 4447
 * @method address                                                                                                     // 4448
 * @returns {String} client direct address                                                                             // 4449
 */                                                                                                                    // 4450
Iban.prototype.address = function () {                                                                                 // 4451
    if (this.isDirect()) {                                                                                             // 4452
        var base36 = this._iban.substr(4);                                                                             // 4453
        var asBn = new BigNumber(base36, 36);                                                                          // 4454
        return padLeft(asBn.toString(16), 20);                                                                         // 4455
    }                                                                                                                  // 4456
                                                                                                                       // 4457
    return '';                                                                                                         // 4458
};                                                                                                                     // 4459
                                                                                                                       // 4460
Iban.prototype.toString = function () {                                                                                // 4461
    return this._iban;                                                                                                 // 4462
};                                                                                                                     // 4463
                                                                                                                       // 4464
module.exports = Iban;                                                                                                 // 4465
                                                                                                                       // 4466
                                                                                                                       // 4467
},{"bignumber.js":"bignumber.js"}],34:[function(require,module,exports){                                               // 4468
/*                                                                                                                     // 4469
    This file is part of web3.js.                                                                                      // 4470
                                                                                                                       // 4471
    web3.js is free software: you can redistribute it and/or modify                                                    // 4472
    it under the terms of the GNU Lesser General Public License as published by                                        // 4473
    the Free Software Foundation, either version 3 of the License, or                                                  // 4474
    (at your option) any later version.                                                                                // 4475
                                                                                                                       // 4476
    web3.js is distributed in the hope that it will be useful,                                                         // 4477
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4478
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4479
    GNU Lesser General Public License for more details.                                                                // 4480
                                                                                                                       // 4481
    You should have received a copy of the GNU Lesser General Public License                                           // 4482
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4483
*/                                                                                                                     // 4484
/** @file ipcprovider.js                                                                                               // 4485
 * @authors:                                                                                                           // 4486
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 4487
 * @date 2015                                                                                                          // 4488
 */                                                                                                                    // 4489
                                                                                                                       // 4490
"use strict";                                                                                                          // 4491
                                                                                                                       // 4492
var utils = require('../utils/utils');                                                                                 // 4493
var errors = require('./errors');                                                                                      // 4494
                                                                                                                       // 4495
                                                                                                                       // 4496
var IpcProvider = function (path, net) {                                                                               // 4497
    var _this = this;                                                                                                  // 4498
    this.responseCallbacks = {};                                                                                       // 4499
    this.path = path;                                                                                                  // 4500
                                                                                                                       // 4501
    this.connection = net.connect({path: this.path});                                                                  // 4502
                                                                                                                       // 4503
    this.connection.on('error', function(e){                                                                           // 4504
        console.error('IPC Connection Error', e);                                                                      // 4505
        _this._timeout();                                                                                              // 4506
    });                                                                                                                // 4507
                                                                                                                       // 4508
    this.connection.on('end', function(){                                                                              // 4509
        _this._timeout();                                                                                              // 4510
    });                                                                                                                // 4511
                                                                                                                       // 4512
                                                                                                                       // 4513
    // LISTEN FOR CONNECTION RESPONSES                                                                                 // 4514
    this.connection.on('data', function(data) {                                                                        // 4515
        /*jshint maxcomplexity: 6 */                                                                                   // 4516
                                                                                                                       // 4517
        _this._parseResponse(data.toString()).forEach(function(result){                                                // 4518
                                                                                                                       // 4519
            var id = null;                                                                                             // 4520
                                                                                                                       // 4521
            // get the id which matches the returned id                                                                // 4522
            if(utils.isArray(result)) {                                                                                // 4523
                result.forEach(function(load){                                                                         // 4524
                    if(_this.responseCallbacks[load.id])                                                               // 4525
                        id = load.id;                                                                                  // 4526
                });                                                                                                    // 4527
            } else {                                                                                                   // 4528
                id = result.id;                                                                                        // 4529
            }                                                                                                          // 4530
                                                                                                                       // 4531
            // fire the callback                                                                                       // 4532
            if(_this.responseCallbacks[id]) {                                                                          // 4533
                _this.responseCallbacks[id](null, result);                                                             // 4534
                delete _this.responseCallbacks[id];                                                                    // 4535
            }                                                                                                          // 4536
        });                                                                                                            // 4537
    });                                                                                                                // 4538
};                                                                                                                     // 4539
                                                                                                                       // 4540
/**                                                                                                                    // 4541
Will parse the response and make an array out of it.                                                                   // 4542
                                                                                                                       // 4543
@method _parseResponse                                                                                                 // 4544
@param {String} data                                                                                                   // 4545
*/                                                                                                                     // 4546
IpcProvider.prototype._parseResponse = function(data) {                                                                // 4547
    var _this = this,                                                                                                  // 4548
        returnValues = [];                                                                                             // 4549
                                                                                                                       // 4550
    // DE-CHUNKER                                                                                                      // 4551
    var dechunkedData = data                                                                                           // 4552
        .replace(/\}\{/g,'}|--|{') // }{                                                                               // 4553
        .replace(/\}\]\[\{/g,'}]|--|[{') // }][{                                                                       // 4554
        .replace(/\}\[\{/g,'}|--|[{') // }[{                                                                           // 4555
        .replace(/\}\]\{/g,'}]|--|{') // }]{                                                                           // 4556
        .split('|--|');                                                                                                // 4557
                                                                                                                       // 4558
    dechunkedData.forEach(function(data){                                                                              // 4559
                                                                                                                       // 4560
        // prepend the last chunk                                                                                      // 4561
        if(_this.lastChunk)                                                                                            // 4562
            data = _this.lastChunk + data;                                                                             // 4563
                                                                                                                       // 4564
        var result = null;                                                                                             // 4565
                                                                                                                       // 4566
        try {                                                                                                          // 4567
            result = JSON.parse(data);                                                                                 // 4568
                                                                                                                       // 4569
        } catch(e) {                                                                                                   // 4570
                                                                                                                       // 4571
            _this.lastChunk = data;                                                                                    // 4572
                                                                                                                       // 4573
            // start timeout to cancel all requests                                                                    // 4574
            clearTimeout(_this.lastChunkTimeout);                                                                      // 4575
            _this.lastChunkTimeout = setTimeout(function(){                                                            // 4576
                _this._timeout();                                                                                      // 4577
                throw errors.InvalidResponse(data);                                                                    // 4578
            }, 1000 * 15);                                                                                             // 4579
                                                                                                                       // 4580
            return;                                                                                                    // 4581
        }                                                                                                              // 4582
                                                                                                                       // 4583
        // cancel timeout and set chunk to null                                                                        // 4584
        clearTimeout(_this.lastChunkTimeout);                                                                          // 4585
        _this.lastChunk = null;                                                                                        // 4586
                                                                                                                       // 4587
        if(result)                                                                                                     // 4588
            returnValues.push(result);                                                                                 // 4589
    });                                                                                                                // 4590
                                                                                                                       // 4591
    return returnValues;                                                                                               // 4592
};                                                                                                                     // 4593
                                                                                                                       // 4594
                                                                                                                       // 4595
/**                                                                                                                    // 4596
Get the adds a callback to the responseCallbacks object,                                                               // 4597
which will be called if a response matching the response Id will arrive.                                               // 4598
                                                                                                                       // 4599
@method _addResponseCallback                                                                                           // 4600
*/                                                                                                                     // 4601
IpcProvider.prototype._addResponseCallback = function(payload, callback) {                                             // 4602
    var id = payload.id || payload[0].id;                                                                              // 4603
    var method = payload.method || payload[0].method;                                                                  // 4604
                                                                                                                       // 4605
    this.responseCallbacks[id] = callback;                                                                             // 4606
    this.responseCallbacks[id].method = method;                                                                        // 4607
};                                                                                                                     // 4608
                                                                                                                       // 4609
/**                                                                                                                    // 4610
Timeout all requests when the end/error event is fired                                                                 // 4611
                                                                                                                       // 4612
@method _timeout                                                                                                       // 4613
*/                                                                                                                     // 4614
IpcProvider.prototype._timeout = function() {                                                                          // 4615
    for(var key in this.responseCallbacks) {                                                                           // 4616
        if(this.responseCallbacks.hasOwnProperty(key)){                                                                // 4617
            this.responseCallbacks[key](errors.InvalidConnection('on IPC'));                                           // 4618
            delete this.responseCallbacks[key];                                                                        // 4619
        }                                                                                                              // 4620
    }                                                                                                                  // 4621
};                                                                                                                     // 4622
                                                                                                                       // 4623
                                                                                                                       // 4624
/**                                                                                                                    // 4625
Check if the current connection is still valid.                                                                        // 4626
                                                                                                                       // 4627
@method isConnected                                                                                                    // 4628
*/                                                                                                                     // 4629
IpcProvider.prototype.isConnected = function() {                                                                       // 4630
    var _this = this;                                                                                                  // 4631
                                                                                                                       // 4632
    // try reconnect, when connection is gone                                                                          // 4633
    if(!_this.connection.writable)                                                                                     // 4634
        _this.connection.connect({path: _this.path});                                                                  // 4635
                                                                                                                       // 4636
    return !!this.connection.writable;                                                                                 // 4637
};                                                                                                                     // 4638
                                                                                                                       // 4639
IpcProvider.prototype.send = function (payload) {                                                                      // 4640
                                                                                                                       // 4641
    if(this.connection.writeSync) {                                                                                    // 4642
        var result;                                                                                                    // 4643
                                                                                                                       // 4644
        // try reconnect, when connection is gone                                                                      // 4645
        if(!this.connection.writable)                                                                                  // 4646
            this.connection.connect({path: this.path});                                                                // 4647
                                                                                                                       // 4648
        var data = this.connection.writeSync(JSON.stringify(payload));                                                 // 4649
                                                                                                                       // 4650
        try {                                                                                                          // 4651
            result = JSON.parse(data);                                                                                 // 4652
        } catch(e) {                                                                                                   // 4653
            throw errors.InvalidResponse(data);                                                                        // 4654
        }                                                                                                              // 4655
                                                                                                                       // 4656
        return result;                                                                                                 // 4657
                                                                                                                       // 4658
    } else {                                                                                                           // 4659
        throw new Error('You tried to send "'+ payload.method +'" synchronously. Synchronous requests are not supported by the IPC provider.');
    }                                                                                                                  // 4661
};                                                                                                                     // 4662
                                                                                                                       // 4663
IpcProvider.prototype.sendAsync = function (payload, callback) {                                                       // 4664
    // try reconnect, when connection is gone                                                                          // 4665
    if(!this.connection.writable)                                                                                      // 4666
        this.connection.connect({path: this.path});                                                                    // 4667
                                                                                                                       // 4668
                                                                                                                       // 4669
    this.connection.write(JSON.stringify(payload));                                                                    // 4670
    this._addResponseCallback(payload, callback);                                                                      // 4671
};                                                                                                                     // 4672
                                                                                                                       // 4673
module.exports = IpcProvider;                                                                                          // 4674
                                                                                                                       // 4675
                                                                                                                       // 4676
},{"../utils/utils":20,"./errors":26}],35:[function(require,module,exports){                                           // 4677
/*                                                                                                                     // 4678
    This file is part of web3.js.                                                                                      // 4679
                                                                                                                       // 4680
    web3.js is free software: you can redistribute it and/or modify                                                    // 4681
    it under the terms of the GNU Lesser General Public License as published by                                        // 4682
    the Free Software Foundation, either version 3 of the License, or                                                  // 4683
    (at your option) any later version.                                                                                // 4684
                                                                                                                       // 4685
    web3.js is distributed in the hope that it will be useful,                                                         // 4686
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4687
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4688
    GNU Lesser General Public License for more details.                                                                // 4689
                                                                                                                       // 4690
    You should have received a copy of the GNU Lesser General Public License                                           // 4691
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4692
*/                                                                                                                     // 4693
/** @file jsonrpc.js                                                                                                   // 4694
 * @authors:                                                                                                           // 4695
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 4696
 * @date 2015                                                                                                          // 4697
 */                                                                                                                    // 4698
                                                                                                                       // 4699
var Jsonrpc = function () {                                                                                            // 4700
    // singleton pattern                                                                                               // 4701
    if (arguments.callee._singletonInstance) {                                                                         // 4702
        return arguments.callee._singletonInstance;                                                                    // 4703
    }                                                                                                                  // 4704
    arguments.callee._singletonInstance = this;                                                                        // 4705
                                                                                                                       // 4706
    this.messageId = 1;                                                                                                // 4707
};                                                                                                                     // 4708
                                                                                                                       // 4709
/**                                                                                                                    // 4710
 * @return {Jsonrpc} singleton                                                                                         // 4711
 */                                                                                                                    // 4712
Jsonrpc.getInstance = function () {                                                                                    // 4713
    var instance = new Jsonrpc();                                                                                      // 4714
    return instance;                                                                                                   // 4715
};                                                                                                                     // 4716
                                                                                                                       // 4717
/**                                                                                                                    // 4718
 * Should be called to valid json create payload object                                                                // 4719
 *                                                                                                                     // 4720
 * @method toPayload                                                                                                   // 4721
 * @param {Function} method of jsonrpc call, required                                                                  // 4722
 * @param {Array} params, an array of method params, optional                                                          // 4723
 * @returns {Object} valid jsonrpc payload object                                                                      // 4724
 */                                                                                                                    // 4725
Jsonrpc.prototype.toPayload = function (method, params) {                                                              // 4726
    if (!method)                                                                                                       // 4727
        console.error('jsonrpc method should be specified!');                                                          // 4728
                                                                                                                       // 4729
    return {                                                                                                           // 4730
        jsonrpc: '2.0',                                                                                                // 4731
        method: method,                                                                                                // 4732
        params: params || [],                                                                                          // 4733
        id: this.messageId++                                                                                           // 4734
    };                                                                                                                 // 4735
};                                                                                                                     // 4736
                                                                                                                       // 4737
/**                                                                                                                    // 4738
 * Should be called to check if jsonrpc response is valid                                                              // 4739
 *                                                                                                                     // 4740
 * @method isValidResponse                                                                                             // 4741
 * @param {Object}                                                                                                     // 4742
 * @returns {Boolean} true if response is valid, otherwise false                                                       // 4743
 */                                                                                                                    // 4744
Jsonrpc.prototype.isValidResponse = function (response) {                                                              // 4745
    return !!response &&                                                                                               // 4746
        !response.error &&                                                                                             // 4747
        response.jsonrpc === '2.0' &&                                                                                  // 4748
        typeof response.id === 'number' &&                                                                             // 4749
        response.result !== undefined; // only undefined is not valid json object                                      // 4750
};                                                                                                                     // 4751
                                                                                                                       // 4752
/**                                                                                                                    // 4753
 * Should be called to create batch payload object                                                                     // 4754
 *                                                                                                                     // 4755
 * @method toBatchPayload                                                                                              // 4756
 * @param {Array} messages, an array of objects with method (required) and params (optional) fields                    // 4757
 * @returns {Array} batch payload                                                                                      // 4758
 */                                                                                                                    // 4759
Jsonrpc.prototype.toBatchPayload = function (messages) {                                                               // 4760
    var self = this;                                                                                                   // 4761
    return messages.map(function (message) {                                                                           // 4762
        return self.toPayload(message.method, message.params);                                                         // 4763
    });                                                                                                                // 4764
};                                                                                                                     // 4765
                                                                                                                       // 4766
module.exports = Jsonrpc;                                                                                              // 4767
                                                                                                                       // 4768
                                                                                                                       // 4769
},{}],36:[function(require,module,exports){                                                                            // 4770
/*                                                                                                                     // 4771
    This file is part of web3.js.                                                                                      // 4772
                                                                                                                       // 4773
    web3.js is free software: you can redistribute it and/or modify                                                    // 4774
    it under the terms of the GNU Lesser General Public License as published by                                        // 4775
    the Free Software Foundation, either version 3 of the License, or                                                  // 4776
    (at your option) any later version.                                                                                // 4777
                                                                                                                       // 4778
    web3.js is distributed in the hope that it will be useful,                                                         // 4779
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4780
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4781
    GNU Lesser General Public License for more details.                                                                // 4782
                                                                                                                       // 4783
    You should have received a copy of the GNU Lesser General Public License                                           // 4784
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4785
*/                                                                                                                     // 4786
/**                                                                                                                    // 4787
 * @file method.js                                                                                                     // 4788
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 4789
 * @date 2015                                                                                                          // 4790
 */                                                                                                                    // 4791
                                                                                                                       // 4792
var utils = require('../utils/utils');                                                                                 // 4793
var errors = require('./errors');                                                                                      // 4794
                                                                                                                       // 4795
var Method = function (options) {                                                                                      // 4796
    this.name = options.name;                                                                                          // 4797
    this.call = options.call;                                                                                          // 4798
    this.params = options.params || 0;                                                                                 // 4799
    this.inputFormatter = options.inputFormatter;                                                                      // 4800
    this.outputFormatter = options.outputFormatter;                                                                    // 4801
    this.requestManager = null;                                                                                        // 4802
};                                                                                                                     // 4803
                                                                                                                       // 4804
Method.prototype.setRequestManager = function (rm) {                                                                   // 4805
    this.requestManager = rm;                                                                                          // 4806
};                                                                                                                     // 4807
                                                                                                                       // 4808
/**                                                                                                                    // 4809
 * Should be used to determine name of the jsonrpc method based on arguments                                           // 4810
 *                                                                                                                     // 4811
 * @method getCall                                                                                                     // 4812
 * @param {Array} arguments                                                                                            // 4813
 * @return {String} name of jsonrpc method                                                                             // 4814
 */                                                                                                                    // 4815
Method.prototype.getCall = function (args) {                                                                           // 4816
    return utils.isFunction(this.call) ? this.call(args) : this.call;                                                  // 4817
};                                                                                                                     // 4818
                                                                                                                       // 4819
/**                                                                                                                    // 4820
 * Should be used to extract callback from array of arguments. Modifies input param                                    // 4821
 *                                                                                                                     // 4822
 * @method extractCallback                                                                                             // 4823
 * @param {Array} arguments                                                                                            // 4824
 * @return {Function|Null} callback, if exists                                                                         // 4825
 */                                                                                                                    // 4826
Method.prototype.extractCallback = function (args) {                                                                   // 4827
    if (utils.isFunction(args[args.length - 1])) {                                                                     // 4828
        return args.pop(); // modify the args array!                                                                   // 4829
    }                                                                                                                  // 4830
};                                                                                                                     // 4831
                                                                                                                       // 4832
/**                                                                                                                    // 4833
 * Should be called to check if the number of arguments is correct                                                     // 4834
 *                                                                                                                     // 4835
 * @method validateArgs                                                                                                // 4836
 * @param {Array} arguments                                                                                            // 4837
 * @throws {Error} if it is not                                                                                        // 4838
 */                                                                                                                    // 4839
Method.prototype.validateArgs = function (args) {                                                                      // 4840
    if (args.length !== this.params) {                                                                                 // 4841
        throw errors.InvalidNumberOfParams();                                                                          // 4842
    }                                                                                                                  // 4843
};                                                                                                                     // 4844
                                                                                                                       // 4845
/**                                                                                                                    // 4846
 * Should be called to format input args of method                                                                     // 4847
 *                                                                                                                     // 4848
 * @method formatInput                                                                                                 // 4849
 * @param {Array}                                                                                                      // 4850
 * @return {Array}                                                                                                     // 4851
 */                                                                                                                    // 4852
Method.prototype.formatInput = function (args) {                                                                       // 4853
    if (!this.inputFormatter) {                                                                                        // 4854
        return args;                                                                                                   // 4855
    }                                                                                                                  // 4856
                                                                                                                       // 4857
    return this.inputFormatter.map(function (formatter, index) {                                                       // 4858
        return formatter ? formatter(args[index]) : args[index];                                                       // 4859
    });                                                                                                                // 4860
};                                                                                                                     // 4861
                                                                                                                       // 4862
/**                                                                                                                    // 4863
 * Should be called to format output(result) of method                                                                 // 4864
 *                                                                                                                     // 4865
 * @method formatOutput                                                                                                // 4866
 * @param {Object}                                                                                                     // 4867
 * @return {Object}                                                                                                    // 4868
 */                                                                                                                    // 4869
Method.prototype.formatOutput = function (result) {                                                                    // 4870
    return this.outputFormatter && result ? this.outputFormatter(result) : result;                                     // 4871
};                                                                                                                     // 4872
                                                                                                                       // 4873
/**                                                                                                                    // 4874
 * Should create payload from given input args                                                                         // 4875
 *                                                                                                                     // 4876
 * @method toPayload                                                                                                   // 4877
 * @param {Array} args                                                                                                 // 4878
 * @return {Object}                                                                                                    // 4879
 */                                                                                                                    // 4880
Method.prototype.toPayload = function (args) {                                                                         // 4881
    var call = this.getCall(args);                                                                                     // 4882
    var callback = this.extractCallback(args);                                                                         // 4883
    var params = this.formatInput(args);                                                                               // 4884
    this.validateArgs(params);                                                                                         // 4885
                                                                                                                       // 4886
    return {                                                                                                           // 4887
        method: call,                                                                                                  // 4888
        params: params,                                                                                                // 4889
        callback: callback                                                                                             // 4890
    };                                                                                                                 // 4891
};                                                                                                                     // 4892
                                                                                                                       // 4893
Method.prototype.attachToObject = function (obj) {                                                                     // 4894
    var func = this.buildCall();                                                                                       // 4895
    func.call = this.call; // TODO!!! that's ugly. filter.js uses it                                                   // 4896
    var name = this.name.split('.');                                                                                   // 4897
    if (name.length > 1) {                                                                                             // 4898
        obj[name[0]] = obj[name[0]] || {};                                                                             // 4899
        obj[name[0]][name[1]] = func;                                                                                  // 4900
    } else {                                                                                                           // 4901
        obj[name[0]] = func;                                                                                           // 4902
    }                                                                                                                  // 4903
};                                                                                                                     // 4904
                                                                                                                       // 4905
Method.prototype.buildCall = function() {                                                                              // 4906
    var method = this;                                                                                                 // 4907
    var send = function () {                                                                                           // 4908
        var payload = method.toPayload(Array.prototype.slice.call(arguments));                                         // 4909
        if (payload.callback) {                                                                                        // 4910
            return method.requestManager.sendAsync(payload, function (err, result) {                                   // 4911
                payload.callback(err, method.formatOutput(result));                                                    // 4912
            });                                                                                                        // 4913
        }                                                                                                              // 4914
        return method.formatOutput(method.requestManager.send(payload));                                               // 4915
    };                                                                                                                 // 4916
    send.request = this.request.bind(this);                                                                            // 4917
    return send;                                                                                                       // 4918
};                                                                                                                     // 4919
                                                                                                                       // 4920
/**                                                                                                                    // 4921
 * Should be called to create pure JSONRPC request which can be used in batch request                                  // 4922
 *                                                                                                                     // 4923
 * @method request                                                                                                     // 4924
 * @param {...} params                                                                                                 // 4925
 * @return {Object} jsonrpc request                                                                                    // 4926
 */                                                                                                                    // 4927
Method.prototype.request = function () {                                                                               // 4928
    var payload = this.toPayload(Array.prototype.slice.call(arguments));                                               // 4929
    payload.format = this.formatOutput.bind(this);                                                                     // 4930
    return payload;                                                                                                    // 4931
};                                                                                                                     // 4932
                                                                                                                       // 4933
module.exports = Method;                                                                                               // 4934
                                                                                                                       // 4935
                                                                                                                       // 4936
},{"../utils/utils":20,"./errors":26}],37:[function(require,module,exports){                                           // 4937
/*                                                                                                                     // 4938
    This file is part of web3.js.                                                                                      // 4939
                                                                                                                       // 4940
    web3.js is free software: you can redistribute it and/or modify                                                    // 4941
    it under the terms of the GNU Lesser General Public License as published by                                        // 4942
    the Free Software Foundation, either version 3 of the License, or                                                  // 4943
    (at your option) any later version.                                                                                // 4944
                                                                                                                       // 4945
    web3.js is distributed in the hope that it will be useful,                                                         // 4946
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4947
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4948
    GNU Lesser General Public License for more details.                                                                // 4949
                                                                                                                       // 4950
    You should have received a copy of the GNU Lesser General Public License                                           // 4951
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4952
*/                                                                                                                     // 4953
/** @file db.js                                                                                                        // 4954
 * @authors:                                                                                                           // 4955
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 4956
 * @date 2015                                                                                                          // 4957
 */                                                                                                                    // 4958
                                                                                                                       // 4959
var Method = require('../method');                                                                                     // 4960
                                                                                                                       // 4961
var DB = function (web3) {                                                                                             // 4962
    this._requestManager = web3._requestManager;                                                                       // 4963
                                                                                                                       // 4964
    var self = this;                                                                                                   // 4965
                                                                                                                       // 4966
    methods().forEach(function(method) {                                                                               // 4967
        method.attachToObject(self);                                                                                   // 4968
        method.setRequestManager(web3._requestManager);                                                                // 4969
    });                                                                                                                // 4970
};                                                                                                                     // 4971
                                                                                                                       // 4972
var methods = function () {                                                                                            // 4973
    var putString = new Method({                                                                                       // 4974
        name: 'putString',                                                                                             // 4975
        call: 'db_putString',                                                                                          // 4976
        params: 3                                                                                                      // 4977
    });                                                                                                                // 4978
                                                                                                                       // 4979
    var getString = new Method({                                                                                       // 4980
        name: 'getString',                                                                                             // 4981
        call: 'db_getString',                                                                                          // 4982
        params: 2                                                                                                      // 4983
    });                                                                                                                // 4984
                                                                                                                       // 4985
    var putHex = new Method({                                                                                          // 4986
        name: 'putHex',                                                                                                // 4987
        call: 'db_putHex',                                                                                             // 4988
        params: 3                                                                                                      // 4989
    });                                                                                                                // 4990
                                                                                                                       // 4991
    var getHex = new Method({                                                                                          // 4992
        name: 'getHex',                                                                                                // 4993
        call: 'db_getHex',                                                                                             // 4994
        params: 2                                                                                                      // 4995
    });                                                                                                                // 4996
                                                                                                                       // 4997
    return [                                                                                                           // 4998
        putString, getString, putHex, getHex                                                                           // 4999
    ];                                                                                                                 // 5000
};                                                                                                                     // 5001
                                                                                                                       // 5002
module.exports = DB;                                                                                                   // 5003
                                                                                                                       // 5004
},{"../method":36}],38:[function(require,module,exports){                                                              // 5005
/*                                                                                                                     // 5006
    This file is part of web3.js.                                                                                      // 5007
                                                                                                                       // 5008
    web3.js is free software: you can redistribute it and/or modify                                                    // 5009
    it under the terms of the GNU Lesser General Public License as published by                                        // 5010
    the Free Software Foundation, either version 3 of the License, or                                                  // 5011
    (at your option) any later version.                                                                                // 5012
                                                                                                                       // 5013
    web3.js is distributed in the hope that it will be useful,                                                         // 5014
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5015
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5016
    GNU Lesser General Public License for more details.                                                                // 5017
                                                                                                                       // 5018
    You should have received a copy of the GNU Lesser General Public License                                           // 5019
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5020
*/                                                                                                                     // 5021
/**                                                                                                                    // 5022
 * @file eth.js                                                                                                        // 5023
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5024
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 5025
 * @date 2015                                                                                                          // 5026
 */                                                                                                                    // 5027
                                                                                                                       // 5028
"use strict";                                                                                                          // 5029
                                                                                                                       // 5030
var formatters = require('../formatters');                                                                             // 5031
var utils = require('../../utils/utils');                                                                              // 5032
var Method = require('../method');                                                                                     // 5033
var Property = require('../property');                                                                                 // 5034
var c = require('../../utils/config');                                                                                 // 5035
var Contract = require('../contract');                                                                                 // 5036
var watches = require('./watches');                                                                                    // 5037
var Filter = require('../filter');                                                                                     // 5038
var IsSyncing = require('../syncing');                                                                                 // 5039
var namereg = require('../namereg');                                                                                   // 5040
var Iban = require('../iban');                                                                                         // 5041
var transfer = require('../transfer');                                                                                 // 5042
                                                                                                                       // 5043
var blockCall = function (args) {                                                                                      // 5044
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? "eth_getBlockByHash" : "eth_getBlockByNumber";   // 5045
};                                                                                                                     // 5046
                                                                                                                       // 5047
var transactionFromBlockCall = function (args) {                                                                       // 5048
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';
};                                                                                                                     // 5050
                                                                                                                       // 5051
var uncleCall = function (args) {                                                                                      // 5052
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';
};                                                                                                                     // 5054
                                                                                                                       // 5055
var getBlockTransactionCountCall = function (args) {                                                                   // 5056
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';
};                                                                                                                     // 5058
                                                                                                                       // 5059
var uncleCountCall = function (args) {                                                                                 // 5060
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';
};                                                                                                                     // 5062
                                                                                                                       // 5063
function Eth(web3) {                                                                                                   // 5064
    this._requestManager = web3._requestManager;                                                                       // 5065
                                                                                                                       // 5066
    var self = this;                                                                                                   // 5067
                                                                                                                       // 5068
    methods().forEach(function(method) {                                                                               // 5069
        method.attachToObject(self);                                                                                   // 5070
        method.setRequestManager(self._requestManager);                                                                // 5071
    });                                                                                                                // 5072
                                                                                                                       // 5073
    properties().forEach(function(p) {                                                                                 // 5074
        p.attachToObject(self);                                                                                        // 5075
        p.setRequestManager(self._requestManager);                                                                     // 5076
    });                                                                                                                // 5077
                                                                                                                       // 5078
                                                                                                                       // 5079
    this.iban = Iban;                                                                                                  // 5080
    this.sendIBANTransaction = transfer.bind(null, this);                                                              // 5081
}                                                                                                                      // 5082
                                                                                                                       // 5083
Object.defineProperty(Eth.prototype, 'defaultBlock', {                                                                 // 5084
    get: function () {                                                                                                 // 5085
        return c.defaultBlock;                                                                                         // 5086
    },                                                                                                                 // 5087
    set: function (val) {                                                                                              // 5088
        c.defaultBlock = val;                                                                                          // 5089
        return val;                                                                                                    // 5090
    }                                                                                                                  // 5091
});                                                                                                                    // 5092
                                                                                                                       // 5093
Object.defineProperty(Eth.prototype, 'defaultAccount', {                                                               // 5094
    get: function () {                                                                                                 // 5095
        return c.defaultAccount;                                                                                       // 5096
    },                                                                                                                 // 5097
    set: function (val) {                                                                                              // 5098
        c.defaultAccount = val;                                                                                        // 5099
        return val;                                                                                                    // 5100
    }                                                                                                                  // 5101
});                                                                                                                    // 5102
                                                                                                                       // 5103
var methods = function () {                                                                                            // 5104
    var getBalance = new Method({                                                                                      // 5105
        name: 'getBalance',                                                                                            // 5106
        call: 'eth_getBalance',                                                                                        // 5107
        params: 2,                                                                                                     // 5108
        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],               // 5109
        outputFormatter: formatters.outputBigNumberFormatter                                                           // 5110
    });                                                                                                                // 5111
                                                                                                                       // 5112
    var getStorageAt = new Method({                                                                                    // 5113
        name: 'getStorageAt',                                                                                          // 5114
        call: 'eth_getStorageAt',                                                                                      // 5115
        params: 3,                                                                                                     // 5116
        inputFormatter: [null, utils.toHex, formatters.inputDefaultBlockNumberFormatter]                               // 5117
    });                                                                                                                // 5118
                                                                                                                       // 5119
    var getCode = new Method({                                                                                         // 5120
        name: 'getCode',                                                                                               // 5121
        call: 'eth_getCode',                                                                                           // 5122
        params: 2,                                                                                                     // 5123
        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]                // 5124
    });                                                                                                                // 5125
                                                                                                                       // 5126
    var getBlock = new Method({                                                                                        // 5127
        name: 'getBlock',                                                                                              // 5128
        call: blockCall,                                                                                               // 5129
        params: 2,                                                                                                     // 5130
        inputFormatter: [formatters.inputBlockNumberFormatter, function (val) { return !!val; }],                      // 5131
        outputFormatter: formatters.outputBlockFormatter                                                               // 5132
    });                                                                                                                // 5133
                                                                                                                       // 5134
    var getUncle = new Method({                                                                                        // 5135
        name: 'getUncle',                                                                                              // 5136
        call: uncleCall,                                                                                               // 5137
        params: 2,                                                                                                     // 5138
        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],                                           // 5139
        outputFormatter: formatters.outputBlockFormatter,                                                              // 5140
                                                                                                                       // 5141
    });                                                                                                                // 5142
                                                                                                                       // 5143
    var getCompilers = new Method({                                                                                    // 5144
        name: 'getCompilers',                                                                                          // 5145
        call: 'eth_getCompilers',                                                                                      // 5146
        params: 0                                                                                                      // 5147
    });                                                                                                                // 5148
                                                                                                                       // 5149
    var getBlockTransactionCount = new Method({                                                                        // 5150
        name: 'getBlockTransactionCount',                                                                              // 5151
        call: getBlockTransactionCountCall,                                                                            // 5152
        params: 1,                                                                                                     // 5153
        inputFormatter: [formatters.inputBlockNumberFormatter],                                                        // 5154
        outputFormatter: utils.toDecimal                                                                               // 5155
    });                                                                                                                // 5156
                                                                                                                       // 5157
    var getBlockUncleCount = new Method({                                                                              // 5158
        name: 'getBlockUncleCount',                                                                                    // 5159
        call: uncleCountCall,                                                                                          // 5160
        params: 1,                                                                                                     // 5161
        inputFormatter: [formatters.inputBlockNumberFormatter],                                                        // 5162
        outputFormatter: utils.toDecimal                                                                               // 5163
    });                                                                                                                // 5164
                                                                                                                       // 5165
    var getTransaction = new Method({                                                                                  // 5166
        name: 'getTransaction',                                                                                        // 5167
        call: 'eth_getTransactionByHash',                                                                              // 5168
        params: 1,                                                                                                     // 5169
        outputFormatter: formatters.outputTransactionFormatter                                                         // 5170
    });                                                                                                                // 5171
                                                                                                                       // 5172
    var getTransactionFromBlock = new Method({                                                                         // 5173
        name: 'getTransactionFromBlock',                                                                               // 5174
        call: transactionFromBlockCall,                                                                                // 5175
        params: 2,                                                                                                     // 5176
        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],                                           // 5177
        outputFormatter: formatters.outputTransactionFormatter                                                         // 5178
    });                                                                                                                // 5179
                                                                                                                       // 5180
    var getTransactionReceipt = new Method({                                                                           // 5181
        name: 'getTransactionReceipt',                                                                                 // 5182
        call: 'eth_getTransactionReceipt',                                                                             // 5183
        params: 1,                                                                                                     // 5184
        outputFormatter: formatters.outputTransactionReceiptFormatter                                                  // 5185
    });                                                                                                                // 5186
                                                                                                                       // 5187
    var getTransactionCount = new Method({                                                                             // 5188
        name: 'getTransactionCount',                                                                                   // 5189
        call: 'eth_getTransactionCount',                                                                               // 5190
        params: 2,                                                                                                     // 5191
        inputFormatter: [null, formatters.inputDefaultBlockNumberFormatter],                                           // 5192
        outputFormatter: utils.toDecimal                                                                               // 5193
    });                                                                                                                // 5194
                                                                                                                       // 5195
    var sendRawTransaction = new Method({                                                                              // 5196
        name: 'sendRawTransaction',                                                                                    // 5197
        call: 'eth_sendRawTransaction',                                                                                // 5198
        params: 1,                                                                                                     // 5199
        inputFormatter: [null]                                                                                         // 5200
    });                                                                                                                // 5201
                                                                                                                       // 5202
    var sendTransaction = new Method({                                                                                 // 5203
        name: 'sendTransaction',                                                                                       // 5204
        call: 'eth_sendTransaction',                                                                                   // 5205
        params: 1,                                                                                                     // 5206
        inputFormatter: [formatters.inputTransactionFormatter]                                                         // 5207
    });                                                                                                                // 5208
                                                                                                                       // 5209
    var sign = new Method({                                                                                            // 5210
        name: 'sign',                                                                                                  // 5211
        call: 'eth_sign',                                                                                              // 5212
        params: 2,                                                                                                     // 5213
        inputFormatter: [formatters.inputAddressFormatter, null]                                                       // 5214
    });                                                                                                                // 5215
                                                                                                                       // 5216
    var call = new Method({                                                                                            // 5217
        name: 'call',                                                                                                  // 5218
        call: 'eth_call',                                                                                              // 5219
        params: 2,                                                                                                     // 5220
        inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]                   // 5221
    });                                                                                                                // 5222
                                                                                                                       // 5223
    var estimateGas = new Method({                                                                                     // 5224
        name: 'estimateGas',                                                                                           // 5225
        call: 'eth_estimateGas',                                                                                       // 5226
        params: 1,                                                                                                     // 5227
        inputFormatter: [formatters.inputCallFormatter],                                                               // 5228
        outputFormatter: utils.toDecimal                                                                               // 5229
    });                                                                                                                // 5230
                                                                                                                       // 5231
    var compileSolidity = new Method({                                                                                 // 5232
        name: 'compile.solidity',                                                                                      // 5233
        call: 'eth_compileSolidity',                                                                                   // 5234
        params: 1                                                                                                      // 5235
    });                                                                                                                // 5236
                                                                                                                       // 5237
    var compileLLL = new Method({                                                                                      // 5238
        name: 'compile.lll',                                                                                           // 5239
        call: 'eth_compileLLL',                                                                                        // 5240
        params: 1                                                                                                      // 5241
    });                                                                                                                // 5242
                                                                                                                       // 5243
    var compileSerpent = new Method({                                                                                  // 5244
        name: 'compile.serpent',                                                                                       // 5245
        call: 'eth_compileSerpent',                                                                                    // 5246
        params: 1                                                                                                      // 5247
    });                                                                                                                // 5248
                                                                                                                       // 5249
    var submitWork = new Method({                                                                                      // 5250
        name: 'submitWork',                                                                                            // 5251
        call: 'eth_submitWork',                                                                                        // 5252
        params: 3                                                                                                      // 5253
    });                                                                                                                // 5254
                                                                                                                       // 5255
    var getWork = new Method({                                                                                         // 5256
        name: 'getWork',                                                                                               // 5257
        call: 'eth_getWork',                                                                                           // 5258
        params: 0                                                                                                      // 5259
    });                                                                                                                // 5260
                                                                                                                       // 5261
    return [                                                                                                           // 5262
        getBalance,                                                                                                    // 5263
        getStorageAt,                                                                                                  // 5264
        getCode,                                                                                                       // 5265
        getBlock,                                                                                                      // 5266
        getUncle,                                                                                                      // 5267
        getCompilers,                                                                                                  // 5268
        getBlockTransactionCount,                                                                                      // 5269
        getBlockUncleCount,                                                                                            // 5270
        getTransaction,                                                                                                // 5271
        getTransactionFromBlock,                                                                                       // 5272
        getTransactionReceipt,                                                                                         // 5273
        getTransactionCount,                                                                                           // 5274
        call,                                                                                                          // 5275
        estimateGas,                                                                                                   // 5276
        sendRawTransaction,                                                                                            // 5277
        sendTransaction,                                                                                               // 5278
        sign,                                                                                                          // 5279
        compileSolidity,                                                                                               // 5280
        compileLLL,                                                                                                    // 5281
        compileSerpent,                                                                                                // 5282
        submitWork,                                                                                                    // 5283
        getWork                                                                                                        // 5284
    ];                                                                                                                 // 5285
};                                                                                                                     // 5286
                                                                                                                       // 5287
                                                                                                                       // 5288
var properties = function () {                                                                                         // 5289
    return [                                                                                                           // 5290
        new Property({                                                                                                 // 5291
            name: 'coinbase',                                                                                          // 5292
            getter: 'eth_coinbase'                                                                                     // 5293
        }),                                                                                                            // 5294
        new Property({                                                                                                 // 5295
            name: 'mining',                                                                                            // 5296
            getter: 'eth_mining'                                                                                       // 5297
        }),                                                                                                            // 5298
        new Property({                                                                                                 // 5299
            name: 'hashrate',                                                                                          // 5300
            getter: 'eth_hashrate',                                                                                    // 5301
            outputFormatter: utils.toDecimal                                                                           // 5302
        }),                                                                                                            // 5303
        new Property({                                                                                                 // 5304
            name: 'syncing',                                                                                           // 5305
            getter: 'eth_syncing',                                                                                     // 5306
            outputFormatter: formatters.outputSyncingFormatter                                                         // 5307
        }),                                                                                                            // 5308
        new Property({                                                                                                 // 5309
            name: 'gasPrice',                                                                                          // 5310
            getter: 'eth_gasPrice',                                                                                    // 5311
            outputFormatter: formatters.outputBigNumberFormatter                                                       // 5312
        }),                                                                                                            // 5313
        new Property({                                                                                                 // 5314
            name: 'accounts',                                                                                          // 5315
            getter: 'eth_accounts'                                                                                     // 5316
        }),                                                                                                            // 5317
        new Property({                                                                                                 // 5318
            name: 'blockNumber',                                                                                       // 5319
            getter: 'eth_blockNumber',                                                                                 // 5320
            outputFormatter: utils.toDecimal                                                                           // 5321
        })                                                                                                             // 5322
    ];                                                                                                                 // 5323
};                                                                                                                     // 5324
                                                                                                                       // 5325
Eth.prototype.contract = function (abi) {                                                                              // 5326
    var factory = new Contract(this, abi);                                                                             // 5327
    return factory;                                                                                                    // 5328
};                                                                                                                     // 5329
                                                                                                                       // 5330
Eth.prototype.filter = function (fil, callback) {                                                                      // 5331
    return new Filter(this._requestManager, fil, watches.eth(), formatters.outputLogFormatter, callback);              // 5332
};                                                                                                                     // 5333
                                                                                                                       // 5334
Eth.prototype.namereg = function () {                                                                                  // 5335
    return this.contract(namereg.global.abi).at(namereg.global.address);                                               // 5336
};                                                                                                                     // 5337
                                                                                                                       // 5338
Eth.prototype.icapNamereg = function () {                                                                              // 5339
    return this.contract(namereg.icap.abi).at(namereg.icap.address);                                                   // 5340
};                                                                                                                     // 5341
                                                                                                                       // 5342
Eth.prototype.isSyncing = function (callback) {                                                                        // 5343
    return new IsSyncing(this._requestManager, callback);                                                              // 5344
};                                                                                                                     // 5345
                                                                                                                       // 5346
module.exports = Eth;                                                                                                  // 5347
                                                                                                                       // 5348
                                                                                                                       // 5349
},{"../../utils/config":18,"../../utils/utils":20,"../contract":25,"../filter":29,"../formatters":30,"../iban":33,"../method":36,"../namereg":42,"../property":43,"../syncing":46,"../transfer":47,"./watches":41}],39:[function(require,module,exports){
/*                                                                                                                     // 5351
    This file is part of web3.js.                                                                                      // 5352
                                                                                                                       // 5353
    web3.js is free software: you can redistribute it and/or modify                                                    // 5354
    it under the terms of the GNU Lesser General Public License as published by                                        // 5355
    the Free Software Foundation, either version 3 of the License, or                                                  // 5356
    (at your option) any later version.                                                                                // 5357
                                                                                                                       // 5358
    web3.js is distributed in the hope that it will be useful,                                                         // 5359
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5360
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5361
    GNU Lesser General Public License for more details.                                                                // 5362
                                                                                                                       // 5363
    You should have received a copy of the GNU Lesser General Public License                                           // 5364
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5365
*/                                                                                                                     // 5366
/** @file eth.js                                                                                                       // 5367
 * @authors:                                                                                                           // 5368
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 5369
 * @date 2015                                                                                                          // 5370
 */                                                                                                                    // 5371
                                                                                                                       // 5372
var utils = require('../../utils/utils');                                                                              // 5373
var Property = require('../property');                                                                                 // 5374
                                                                                                                       // 5375
var Net = function (web3) {                                                                                            // 5376
    this._requestManager = web3._requestManager;                                                                       // 5377
                                                                                                                       // 5378
    var self = this;                                                                                                   // 5379
                                                                                                                       // 5380
    properties().forEach(function(p) {                                                                                 // 5381
        p.attachToObject(self);                                                                                        // 5382
        p.setRequestManager(web3._requestManager);                                                                     // 5383
    });                                                                                                                // 5384
};                                                                                                                     // 5385
                                                                                                                       // 5386
/// @returns an array of objects describing web3.eth api properties                                                    // 5387
var properties = function () {                                                                                         // 5388
    return [                                                                                                           // 5389
        new Property({                                                                                                 // 5390
            name: 'listening',                                                                                         // 5391
            getter: 'net_listening'                                                                                    // 5392
        }),                                                                                                            // 5393
        new Property({                                                                                                 // 5394
            name: 'peerCount',                                                                                         // 5395
            getter: 'net_peerCount',                                                                                   // 5396
            outputFormatter: utils.toDecimal                                                                           // 5397
        })                                                                                                             // 5398
    ];                                                                                                                 // 5399
};                                                                                                                     // 5400
                                                                                                                       // 5401
module.exports = Net;                                                                                                  // 5402
                                                                                                                       // 5403
},{"../../utils/utils":20,"../property":43}],40:[function(require,module,exports){                                     // 5404
/*                                                                                                                     // 5405
    This file is part of web3.js.                                                                                      // 5406
                                                                                                                       // 5407
    web3.js is free software: you can redistribute it and/or modify                                                    // 5408
    it under the terms of the GNU Lesser General Public License as published by                                        // 5409
    the Free Software Foundation, either version 3 of the License, or                                                  // 5410
    (at your option) any later version.                                                                                // 5411
                                                                                                                       // 5412
    web3.js is distributed in the hope that it will be useful,                                                         // 5413
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5414
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5415
    GNU Lesser General Public License for more details.                                                                // 5416
                                                                                                                       // 5417
    You should have received a copy of the GNU Lesser General Public License                                           // 5418
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5419
*/                                                                                                                     // 5420
/** @file shh.js                                                                                                       // 5421
 * @authors:                                                                                                           // 5422
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 5423
 * @date 2015                                                                                                          // 5424
 */                                                                                                                    // 5425
                                                                                                                       // 5426
var Method = require('../method');                                                                                     // 5427
var formatters = require('../formatters');                                                                             // 5428
var Filter = require('../filter');                                                                                     // 5429
var watches = require('./watches');                                                                                    // 5430
                                                                                                                       // 5431
var Shh = function (web3) {                                                                                            // 5432
    this._requestManager = web3._requestManager;                                                                       // 5433
                                                                                                                       // 5434
    var self = this;                                                                                                   // 5435
                                                                                                                       // 5436
    methods().forEach(function(method) {                                                                               // 5437
        method.attachToObject(self);                                                                                   // 5438
        method.setRequestManager(self._requestManager);                                                                // 5439
    });                                                                                                                // 5440
};                                                                                                                     // 5441
                                                                                                                       // 5442
Shh.prototype.filter = function (fil, callback) {                                                                      // 5443
    return new Filter(this._requestManager, fil, watches.shh(), formatters.outputPostFormatter, callback);             // 5444
};                                                                                                                     // 5445
                                                                                                                       // 5446
var methods = function () {                                                                                            // 5447
                                                                                                                       // 5448
    var post = new Method({                                                                                            // 5449
        name: 'post',                                                                                                  // 5450
        call: 'shh_post',                                                                                              // 5451
        params: 1,                                                                                                     // 5452
        inputFormatter: [formatters.inputPostFormatter]                                                                // 5453
    });                                                                                                                // 5454
                                                                                                                       // 5455
    var newIdentity = new Method({                                                                                     // 5456
        name: 'newIdentity',                                                                                           // 5457
        call: 'shh_newIdentity',                                                                                       // 5458
        params: 0                                                                                                      // 5459
    });                                                                                                                // 5460
                                                                                                                       // 5461
    var hasIdentity = new Method({                                                                                     // 5462
        name: 'hasIdentity',                                                                                           // 5463
        call: 'shh_hasIdentity',                                                                                       // 5464
        params: 1                                                                                                      // 5465
    });                                                                                                                // 5466
                                                                                                                       // 5467
    var newGroup = new Method({                                                                                        // 5468
        name: 'newGroup',                                                                                              // 5469
        call: 'shh_newGroup',                                                                                          // 5470
        params: 0                                                                                                      // 5471
    });                                                                                                                // 5472
                                                                                                                       // 5473
    var addToGroup = new Method({                                                                                      // 5474
        name: 'addToGroup',                                                                                            // 5475
        call: 'shh_addToGroup',                                                                                        // 5476
        params: 0                                                                                                      // 5477
    });                                                                                                                // 5478
                                                                                                                       // 5479
    return [                                                                                                           // 5480
        post,                                                                                                          // 5481
        newIdentity,                                                                                                   // 5482
        hasIdentity,                                                                                                   // 5483
        newGroup,                                                                                                      // 5484
        addToGroup                                                                                                     // 5485
    ];                                                                                                                 // 5486
};                                                                                                                     // 5487
                                                                                                                       // 5488
module.exports = Shh;                                                                                                  // 5489
                                                                                                                       // 5490
                                                                                                                       // 5491
},{"../filter":29,"../formatters":30,"../method":36,"./watches":41}],41:[function(require,module,exports){             // 5492
/*                                                                                                                     // 5493
    This file is part of web3.js.                                                                                      // 5494
                                                                                                                       // 5495
    web3.js is free software: you can redistribute it and/or modify                                                    // 5496
    it under the terms of the GNU Lesser General Public License as published by                                        // 5497
    the Free Software Foundation, either version 3 of the License, or                                                  // 5498
    (at your option) any later version.                                                                                // 5499
                                                                                                                       // 5500
    web3.js is distributed in the hope that it will be useful,                                                         // 5501
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5502
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5503
    GNU Lesser General Public License for more details.                                                                // 5504
                                                                                                                       // 5505
    You should have received a copy of the GNU Lesser General Public License                                           // 5506
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5507
*/                                                                                                                     // 5508
/** @file watches.js                                                                                                   // 5509
 * @authors:                                                                                                           // 5510
 *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 5511
 * @date 2015                                                                                                          // 5512
 */                                                                                                                    // 5513
                                                                                                                       // 5514
var Method = require('../method');                                                                                     // 5515
                                                                                                                       // 5516
/// @returns an array of objects describing web3.eth.filter api methods                                                // 5517
var eth = function () {                                                                                                // 5518
    var newFilterCall = function (args) {                                                                              // 5519
        var type = args[0];                                                                                            // 5520
                                                                                                                       // 5521
        switch(type) {                                                                                                 // 5522
            case 'latest':                                                                                             // 5523
                args.shift();                                                                                          // 5524
                this.params = 0;                                                                                       // 5525
                return 'eth_newBlockFilter';                                                                           // 5526
            case 'pending':                                                                                            // 5527
                args.shift();                                                                                          // 5528
                this.params = 0;                                                                                       // 5529
                return 'eth_newPendingTransactionFilter';                                                              // 5530
            default:                                                                                                   // 5531
                return 'eth_newFilter';                                                                                // 5532
        }                                                                                                              // 5533
    };                                                                                                                 // 5534
                                                                                                                       // 5535
    var newFilter = new Method({                                                                                       // 5536
        name: 'newFilter',                                                                                             // 5537
        call: newFilterCall,                                                                                           // 5538
        params: 1                                                                                                      // 5539
    });                                                                                                                // 5540
                                                                                                                       // 5541
    var uninstallFilter = new Method({                                                                                 // 5542
        name: 'uninstallFilter',                                                                                       // 5543
        call: 'eth_uninstallFilter',                                                                                   // 5544
        params: 1                                                                                                      // 5545
    });                                                                                                                // 5546
                                                                                                                       // 5547
    var getLogs = new Method({                                                                                         // 5548
        name: 'getLogs',                                                                                               // 5549
        call: 'eth_getFilterLogs',                                                                                     // 5550
        params: 1                                                                                                      // 5551
    });                                                                                                                // 5552
                                                                                                                       // 5553
    var poll = new Method({                                                                                            // 5554
        name: 'poll',                                                                                                  // 5555
        call: 'eth_getFilterChanges',                                                                                  // 5556
        params: 1                                                                                                      // 5557
    });                                                                                                                // 5558
                                                                                                                       // 5559
    return [                                                                                                           // 5560
        newFilter,                                                                                                     // 5561
        uninstallFilter,                                                                                               // 5562
        getLogs,                                                                                                       // 5563
        poll                                                                                                           // 5564
    ];                                                                                                                 // 5565
};                                                                                                                     // 5566
                                                                                                                       // 5567
/// @returns an array of objects describing web3.shh.watch api methods                                                 // 5568
var shh = function () {                                                                                                // 5569
    var newFilter = new Method({                                                                                       // 5570
        name: 'newFilter',                                                                                             // 5571
        call: 'shh_newFilter',                                                                                         // 5572
        params: 1                                                                                                      // 5573
    });                                                                                                                // 5574
                                                                                                                       // 5575
    var uninstallFilter = new Method({                                                                                 // 5576
        name: 'uninstallFilter',                                                                                       // 5577
        call: 'shh_uninstallFilter',                                                                                   // 5578
        params: 1                                                                                                      // 5579
    });                                                                                                                // 5580
                                                                                                                       // 5581
    var getLogs = new Method({                                                                                         // 5582
        name: 'getLogs',                                                                                               // 5583
        call: 'shh_getMessages',                                                                                       // 5584
        params: 1                                                                                                      // 5585
    });                                                                                                                // 5586
                                                                                                                       // 5587
    var poll = new Method({                                                                                            // 5588
        name: 'poll',                                                                                                  // 5589
        call: 'shh_getFilterChanges',                                                                                  // 5590
        params: 1                                                                                                      // 5591
    });                                                                                                                // 5592
                                                                                                                       // 5593
    return [                                                                                                           // 5594
        newFilter,                                                                                                     // 5595
        uninstallFilter,                                                                                               // 5596
        getLogs,                                                                                                       // 5597
        poll                                                                                                           // 5598
    ];                                                                                                                 // 5599
};                                                                                                                     // 5600
                                                                                                                       // 5601
module.exports = {                                                                                                     // 5602
    eth: eth,                                                                                                          // 5603
    shh: shh                                                                                                           // 5604
};                                                                                                                     // 5605
                                                                                                                       // 5606
                                                                                                                       // 5607
},{"../method":36}],42:[function(require,module,exports){                                                              // 5608
/*                                                                                                                     // 5609
    This file is part of web3.js.                                                                                      // 5610
                                                                                                                       // 5611
    web3.js is free software: you can redistribute it and/or modify                                                    // 5612
    it under the terms of the GNU Lesser General Public License as published by                                        // 5613
    the Free Software Foundation, either version 3 of the License, or                                                  // 5614
    (at your option) any later version.                                                                                // 5615
                                                                                                                       // 5616
    web3.js is distributed in the hope that it will be useful,                                                         // 5617
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5618
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5619
    GNU Lesser General Public License for more details.                                                                // 5620
                                                                                                                       // 5621
    You should have received a copy of the GNU Lesser General Public License                                           // 5622
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5623
*/                                                                                                                     // 5624
/**                                                                                                                    // 5625
 * @file namereg.js                                                                                                    // 5626
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5627
 * @date 2015                                                                                                          // 5628
 */                                                                                                                    // 5629
                                                                                                                       // 5630
var globalRegistrarAbi = require('../contracts/GlobalRegistrar.json');                                                 // 5631
var icapRegistrarAbi= require('../contracts/ICAPRegistrar.json');                                                      // 5632
                                                                                                                       // 5633
var globalNameregAddress = '0xc6d9d2cd449a754c494264e1809c50e34d64562b';                                               // 5634
var icapNameregAddress = '0xa1a111bc074c9cfa781f0c38e63bd51c91b8af00';                                                 // 5635
                                                                                                                       // 5636
module.exports = {                                                                                                     // 5637
    global: {                                                                                                          // 5638
        abi: globalRegistrarAbi,                                                                                       // 5639
        address: globalNameregAddress                                                                                  // 5640
    },                                                                                                                 // 5641
    icap: {                                                                                                            // 5642
        abi: icapRegistrarAbi,                                                                                         // 5643
        address: icapNameregAddress                                                                                    // 5644
    }                                                                                                                  // 5645
};                                                                                                                     // 5646
                                                                                                                       // 5647
                                                                                                                       // 5648
},{"../contracts/GlobalRegistrar.json":1,"../contracts/ICAPRegistrar.json":2}],43:[function(require,module,exports){   // 5649
/*                                                                                                                     // 5650
    This file is part of web3.js.                                                                                      // 5651
                                                                                                                       // 5652
    web3.js is free software: you can redistribute it and/or modify                                                    // 5653
    it under the terms of the GNU Lesser General Public License as published by                                        // 5654
    the Free Software Foundation, either version 3 of the License, or                                                  // 5655
    (at your option) any later version.                                                                                // 5656
                                                                                                                       // 5657
    web3.js is distributed in the hope that it will be useful,                                                         // 5658
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5659
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5660
    GNU Lesser General Public License for more details.                                                                // 5661
                                                                                                                       // 5662
    You should have received a copy of the GNU Lesser General Public License                                           // 5663
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5664
*/                                                                                                                     // 5665
/**                                                                                                                    // 5666
 * @file property.js                                                                                                   // 5667
 * @author Fabian Vogelsteller <fabian@frozeman.de>                                                                    // 5668
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5669
 * @date 2015                                                                                                          // 5670
 */                                                                                                                    // 5671
                                                                                                                       // 5672
var utils = require('../utils/utils');                                                                                 // 5673
                                                                                                                       // 5674
var Property = function (options) {                                                                                    // 5675
    this.name = options.name;                                                                                          // 5676
    this.getter = options.getter;                                                                                      // 5677
    this.setter = options.setter;                                                                                      // 5678
    this.outputFormatter = options.outputFormatter;                                                                    // 5679
    this.inputFormatter = options.inputFormatter;                                                                      // 5680
    this.requestManager = null;                                                                                        // 5681
};                                                                                                                     // 5682
                                                                                                                       // 5683
Property.prototype.setRequestManager = function (rm) {                                                                 // 5684
    this.requestManager = rm;                                                                                          // 5685
};                                                                                                                     // 5686
                                                                                                                       // 5687
/**                                                                                                                    // 5688
 * Should be called to format input args of method                                                                     // 5689
 *                                                                                                                     // 5690
 * @method formatInput                                                                                                 // 5691
 * @param {Array}                                                                                                      // 5692
 * @return {Array}                                                                                                     // 5693
 */                                                                                                                    // 5694
Property.prototype.formatInput = function (arg) {                                                                      // 5695
    return this.inputFormatter ? this.inputFormatter(arg) : arg;                                                       // 5696
};                                                                                                                     // 5697
                                                                                                                       // 5698
/**                                                                                                                    // 5699
 * Should be called to format output(result) of method                                                                 // 5700
 *                                                                                                                     // 5701
 * @method formatOutput                                                                                                // 5702
 * @param {Object}                                                                                                     // 5703
 * @return {Object}                                                                                                    // 5704
 */                                                                                                                    // 5705
Property.prototype.formatOutput = function (result) {                                                                  // 5706
    return this.outputFormatter && result !== null ? this.outputFormatter(result) : result;                            // 5707
};                                                                                                                     // 5708
                                                                                                                       // 5709
/**                                                                                                                    // 5710
 * Should be used to extract callback from array of arguments. Modifies input param                                    // 5711
 *                                                                                                                     // 5712
 * @method extractCallback                                                                                             // 5713
 * @param {Array} arguments                                                                                            // 5714
 * @return {Function|Null} callback, if exists                                                                         // 5715
 */                                                                                                                    // 5716
Property.prototype.extractCallback = function (args) {                                                                 // 5717
    if (utils.isFunction(args[args.length - 1])) {                                                                     // 5718
        return args.pop(); // modify the args array!                                                                   // 5719
    }                                                                                                                  // 5720
};                                                                                                                     // 5721
                                                                                                                       // 5722
                                                                                                                       // 5723
/**                                                                                                                    // 5724
 * Should attach function to method                                                                                    // 5725
 *                                                                                                                     // 5726
 * @method attachToObject                                                                                              // 5727
 * @param {Object}                                                                                                     // 5728
 * @param {Function}                                                                                                   // 5729
 */                                                                                                                    // 5730
Property.prototype.attachToObject = function (obj) {                                                                   // 5731
    var proto = {                                                                                                      // 5732
        get: this.buildGet(),                                                                                          // 5733
        enumerable: true                                                                                               // 5734
    };                                                                                                                 // 5735
                                                                                                                       // 5736
    var names = this.name.split('.');                                                                                  // 5737
    var name = names[0];                                                                                               // 5738
    if (names.length > 1) {                                                                                            // 5739
        obj[names[0]] = obj[names[0]] || {};                                                                           // 5740
        obj = obj[names[0]];                                                                                           // 5741
        name = names[1];                                                                                               // 5742
    }                                                                                                                  // 5743
                                                                                                                       // 5744
    Object.defineProperty(obj, name, proto);                                                                           // 5745
    obj[asyncGetterName(name)] = this.buildAsyncGet();                                                                 // 5746
};                                                                                                                     // 5747
                                                                                                                       // 5748
var asyncGetterName = function (name) {                                                                                // 5749
    return 'get' + name.charAt(0).toUpperCase() + name.slice(1);                                                       // 5750
};                                                                                                                     // 5751
                                                                                                                       // 5752
Property.prototype.buildGet = function () {                                                                            // 5753
    var property = this;                                                                                               // 5754
    return function get() {                                                                                            // 5755
        return property.formatOutput(property.requestManager.send({                                                    // 5756
            method: property.getter                                                                                    // 5757
        }));                                                                                                           // 5758
    };                                                                                                                 // 5759
};                                                                                                                     // 5760
                                                                                                                       // 5761
Property.prototype.buildAsyncGet = function () {                                                                       // 5762
    var property = this;                                                                                               // 5763
    var get = function (callback) {                                                                                    // 5764
        property.requestManager.sendAsync({                                                                            // 5765
            method: property.getter                                                                                    // 5766
        }, function (err, result) {                                                                                    // 5767
            callback(err, property.formatOutput(result));                                                              // 5768
        });                                                                                                            // 5769
    };                                                                                                                 // 5770
    get.request = this.request.bind(this);                                                                             // 5771
    return get;                                                                                                        // 5772
};                                                                                                                     // 5773
                                                                                                                       // 5774
/**                                                                                                                    // 5775
 * Should be called to create pure JSONRPC request which can be used in batch request                                  // 5776
 *                                                                                                                     // 5777
 * @method request                                                                                                     // 5778
 * @param {...} params                                                                                                 // 5779
 * @return {Object} jsonrpc request                                                                                    // 5780
 */                                                                                                                    // 5781
Property.prototype.request = function () {                                                                             // 5782
    var payload = {                                                                                                    // 5783
        method: this.getter,                                                                                           // 5784
        params: [],                                                                                                    // 5785
        callback: this.extractCallback(Array.prototype.slice.call(arguments))                                          // 5786
    };                                                                                                                 // 5787
    payload.format = this.formatOutput.bind(this);                                                                     // 5788
    return payload;                                                                                                    // 5789
};                                                                                                                     // 5790
                                                                                                                       // 5791
module.exports = Property;                                                                                             // 5792
                                                                                                                       // 5793
                                                                                                                       // 5794
},{"../utils/utils":20}],44:[function(require,module,exports){                                                         // 5795
/*                                                                                                                     // 5796
    This file is part of web3.js.                                                                                      // 5797
                                                                                                                       // 5798
    web3.js is free software: you can redistribute it and/or modify                                                    // 5799
    it under the terms of the GNU Lesser General Public License as published by                                        // 5800
    the Free Software Foundation, either version 3 of the License, or                                                  // 5801
    (at your option) any later version.                                                                                // 5802
                                                                                                                       // 5803
    web3.js is distributed in the hope that it will be useful,                                                         // 5804
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5805
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5806
    GNU Lesser General Public License for more details.                                                                // 5807
                                                                                                                       // 5808
    You should have received a copy of the GNU Lesser General Public License                                           // 5809
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5810
*/                                                                                                                     // 5811
/**                                                                                                                    // 5812
 * @file requestmanager.js                                                                                             // 5813
 * @author Jeffrey Wilcke <jeff@ethdev.com>                                                                            // 5814
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5815
 * @author Marian Oancea <marian@ethdev.com>                                                                           // 5816
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 5817
 * @author Gav Wood <g@ethdev.com>                                                                                     // 5818
 * @date 2014                                                                                                          // 5819
 */                                                                                                                    // 5820
                                                                                                                       // 5821
var Jsonrpc = require('./jsonrpc');                                                                                    // 5822
var utils = require('../utils/utils');                                                                                 // 5823
var c = require('../utils/config');                                                                                    // 5824
var errors = require('./errors');                                                                                      // 5825
                                                                                                                       // 5826
/**                                                                                                                    // 5827
 * It's responsible for passing messages to providers                                                                  // 5828
 * It's also responsible for polling the ethereum node for incoming messages                                           // 5829
 * Default poll timeout is 1 second                                                                                    // 5830
 * Singleton                                                                                                           // 5831
 */                                                                                                                    // 5832
var RequestManager = function (provider) {                                                                             // 5833
    this.provider = provider;                                                                                          // 5834
    this.polls = {};                                                                                                   // 5835
    this.timeout = null;                                                                                               // 5836
};                                                                                                                     // 5837
                                                                                                                       // 5838
/**                                                                                                                    // 5839
 * Should be used to synchronously send request                                                                        // 5840
 *                                                                                                                     // 5841
 * @method send                                                                                                        // 5842
 * @param {Object} data                                                                                                // 5843
 * @return {Object}                                                                                                    // 5844
 */                                                                                                                    // 5845
RequestManager.prototype.send = function (data) {                                                                      // 5846
    if (!this.provider) {                                                                                              // 5847
        console.error(errors.InvalidProvider());                                                                       // 5848
        return null;                                                                                                   // 5849
    }                                                                                                                  // 5850
                                                                                                                       // 5851
    var payload = Jsonrpc.getInstance().toPayload(data.method, data.params);                                           // 5852
    var result = this.provider.send(payload);                                                                          // 5853
                                                                                                                       // 5854
    if (!Jsonrpc.getInstance().isValidResponse(result)) {                                                              // 5855
        throw errors.InvalidResponse(result);                                                                          // 5856
    }                                                                                                                  // 5857
                                                                                                                       // 5858
    return result.result;                                                                                              // 5859
};                                                                                                                     // 5860
                                                                                                                       // 5861
/**                                                                                                                    // 5862
 * Should be used to asynchronously send request                                                                       // 5863
 *                                                                                                                     // 5864
 * @method sendAsync                                                                                                   // 5865
 * @param {Object} data                                                                                                // 5866
 * @param {Function} callback                                                                                          // 5867
 */                                                                                                                    // 5868
RequestManager.prototype.sendAsync = function (data, callback) {                                                       // 5869
    if (!this.provider) {                                                                                              // 5870
        return callback(errors.InvalidProvider());                                                                     // 5871
    }                                                                                                                  // 5872
                                                                                                                       // 5873
    var payload = Jsonrpc.getInstance().toPayload(data.method, data.params);                                           // 5874
    this.provider.sendAsync(payload, function (err, result) {                                                          // 5875
        if (err) {                                                                                                     // 5876
            return callback(err);                                                                                      // 5877
        }                                                                                                              // 5878
                                                                                                                       // 5879
        if (!Jsonrpc.getInstance().isValidResponse(result)) {                                                          // 5880
            return callback(errors.InvalidResponse(result));                                                           // 5881
        }                                                                                                              // 5882
                                                                                                                       // 5883
        callback(null, result.result);                                                                                 // 5884
    });                                                                                                                // 5885
};                                                                                                                     // 5886
                                                                                                                       // 5887
/**                                                                                                                    // 5888
 * Should be called to asynchronously send batch request                                                               // 5889
 *                                                                                                                     // 5890
 * @method sendBatch                                                                                                   // 5891
 * @param {Array} batch data                                                                                           // 5892
 * @param {Function} callback                                                                                          // 5893
 */                                                                                                                    // 5894
RequestManager.prototype.sendBatch = function (data, callback) {                                                       // 5895
    if (!this.provider) {                                                                                              // 5896
        return callback(errors.InvalidProvider());                                                                     // 5897
    }                                                                                                                  // 5898
                                                                                                                       // 5899
    var payload = Jsonrpc.getInstance().toBatchPayload(data);                                                          // 5900
                                                                                                                       // 5901
    this.provider.sendAsync(payload, function (err, results) {                                                         // 5902
        if (err) {                                                                                                     // 5903
            return callback(err);                                                                                      // 5904
        }                                                                                                              // 5905
                                                                                                                       // 5906
        if (!utils.isArray(results)) {                                                                                 // 5907
            return callback(errors.InvalidResponse(results));                                                          // 5908
        }                                                                                                              // 5909
                                                                                                                       // 5910
        callback(err, results);                                                                                        // 5911
    });                                                                                                                // 5912
};                                                                                                                     // 5913
                                                                                                                       // 5914
/**                                                                                                                    // 5915
 * Should be used to set provider of request manager                                                                   // 5916
 *                                                                                                                     // 5917
 * @method setProvider                                                                                                 // 5918
 * @param {Object}                                                                                                     // 5919
 */                                                                                                                    // 5920
RequestManager.prototype.setProvider = function (p) {                                                                  // 5921
    this.provider = p;                                                                                                 // 5922
};                                                                                                                     // 5923
                                                                                                                       // 5924
/**                                                                                                                    // 5925
 * Should be used to start polling                                                                                     // 5926
 *                                                                                                                     // 5927
 * @method startPolling                                                                                                // 5928
 * @param {Object} data                                                                                                // 5929
 * @param {Number} pollId                                                                                              // 5930
 * @param {Function} callback                                                                                          // 5931
 * @param {Function} uninstall                                                                                         // 5932
 *                                                                                                                     // 5933
 * @todo cleanup number of params                                                                                      // 5934
 */                                                                                                                    // 5935
RequestManager.prototype.startPolling = function (data, pollId, callback, uninstall) {                                 // 5936
    this.polls[pollId] = {data: data, id: pollId, callback: callback, uninstall: uninstall};                           // 5937
                                                                                                                       // 5938
                                                                                                                       // 5939
    // start polling                                                                                                   // 5940
    if (!this.timeout) {                                                                                               // 5941
        this.poll();                                                                                                   // 5942
    }                                                                                                                  // 5943
};                                                                                                                     // 5944
                                                                                                                       // 5945
/**                                                                                                                    // 5946
 * Should be used to stop polling for filter with given id                                                             // 5947
 *                                                                                                                     // 5948
 * @method stopPolling                                                                                                 // 5949
 * @param {Number} pollId                                                                                              // 5950
 */                                                                                                                    // 5951
RequestManager.prototype.stopPolling = function (pollId) {                                                             // 5952
    delete this.polls[pollId];                                                                                         // 5953
                                                                                                                       // 5954
    // stop polling                                                                                                    // 5955
    if(Object.keys(this.polls).length === 0 && this.timeout) {                                                         // 5956
        clearTimeout(this.timeout);                                                                                    // 5957
        this.timeout = null;                                                                                           // 5958
    }                                                                                                                  // 5959
};                                                                                                                     // 5960
                                                                                                                       // 5961
/**                                                                                                                    // 5962
 * Should be called to reset the polling mechanism of the request manager                                              // 5963
 *                                                                                                                     // 5964
 * @method reset                                                                                                       // 5965
 */                                                                                                                    // 5966
RequestManager.prototype.reset = function (keepIsSyncing) {                                                            // 5967
    /*jshint maxcomplexity:5 */                                                                                        // 5968
                                                                                                                       // 5969
    for (var key in this.polls) {                                                                                      // 5970
        // remove all polls, except sync polls,                                                                        // 5971
        // they need to be removed manually by calling syncing.stopWatching()                                          // 5972
        if(!keepIsSyncing || key.indexOf('syncPoll_') === -1) {                                                        // 5973
            this.polls[key].uninstall();                                                                               // 5974
            delete this.polls[key];                                                                                    // 5975
        }                                                                                                              // 5976
    }                                                                                                                  // 5977
                                                                                                                       // 5978
    // stop polling                                                                                                    // 5979
    if(Object.keys(this.polls).length === 0 && this.timeout) {                                                         // 5980
        clearTimeout(this.timeout);                                                                                    // 5981
        this.timeout = null;                                                                                           // 5982
    }                                                                                                                  // 5983
};                                                                                                                     // 5984
                                                                                                                       // 5985
/**                                                                                                                    // 5986
 * Should be called to poll for changes on filter with given id                                                        // 5987
 *                                                                                                                     // 5988
 * @method poll                                                                                                        // 5989
 */                                                                                                                    // 5990
RequestManager.prototype.poll = function () {                                                                          // 5991
    /*jshint maxcomplexity: 6 */                                                                                       // 5992
    this.timeout = setTimeout(this.poll.bind(this), c.ETH_POLLING_TIMEOUT);                                            // 5993
                                                                                                                       // 5994
    if (Object.keys(this.polls).length === 0) {                                                                        // 5995
        return;                                                                                                        // 5996
    }                                                                                                                  // 5997
                                                                                                                       // 5998
    if (!this.provider) {                                                                                              // 5999
        console.error(errors.InvalidProvider());                                                                       // 6000
        return;                                                                                                        // 6001
    }                                                                                                                  // 6002
                                                                                                                       // 6003
    var pollsData = [];                                                                                                // 6004
    var pollsIds = [];                                                                                                 // 6005
    for (var key in this.polls) {                                                                                      // 6006
        pollsData.push(this.polls[key].data);                                                                          // 6007
        pollsIds.push(key);                                                                                            // 6008
    }                                                                                                                  // 6009
                                                                                                                       // 6010
    if (pollsData.length === 0) {                                                                                      // 6011
        return;                                                                                                        // 6012
    }                                                                                                                  // 6013
                                                                                                                       // 6014
    var payload = Jsonrpc.getInstance().toBatchPayload(pollsData);                                                     // 6015
                                                                                                                       // 6016
    // map the request id to they poll id                                                                              // 6017
    var pollsIdMap = {};                                                                                               // 6018
    payload.forEach(function(load, index){                                                                             // 6019
        pollsIdMap[load.id] = pollsIds[index];                                                                         // 6020
    });                                                                                                                // 6021
                                                                                                                       // 6022
                                                                                                                       // 6023
    var self = this;                                                                                                   // 6024
    this.provider.sendAsync(payload, function (error, results) {                                                       // 6025
                                                                                                                       // 6026
                                                                                                                       // 6027
        // TODO: console log?                                                                                          // 6028
        if (error) {                                                                                                   // 6029
            return;                                                                                                    // 6030
        }                                                                                                              // 6031
                                                                                                                       // 6032
        if (!utils.isArray(results)) {                                                                                 // 6033
            throw errors.InvalidResponse(results);                                                                     // 6034
        }                                                                                                              // 6035
        results.map(function (result) {                                                                                // 6036
            var id = pollsIdMap[result.id];                                                                            // 6037
                                                                                                                       // 6038
            // make sure the filter is still installed after arrival of the request                                    // 6039
            if (self.polls[id]) {                                                                                      // 6040
                result.callback = self.polls[id].callback;                                                             // 6041
                return result;                                                                                         // 6042
            } else                                                                                                     // 6043
                return false;                                                                                          // 6044
        }).filter(function (result) {                                                                                  // 6045
            return !!result;                                                                                           // 6046
        }).filter(function (result) {                                                                                  // 6047
            var valid = Jsonrpc.getInstance().isValidResponse(result);                                                 // 6048
            if (!valid) {                                                                                              // 6049
                result.callback(errors.InvalidResponse(result));                                                       // 6050
            }                                                                                                          // 6051
            return valid;                                                                                              // 6052
        }).forEach(function (result) {                                                                                 // 6053
            result.callback(null, result.result);                                                                      // 6054
        });                                                                                                            // 6055
    });                                                                                                                // 6056
};                                                                                                                     // 6057
                                                                                                                       // 6058
module.exports = RequestManager;                                                                                       // 6059
                                                                                                                       // 6060
                                                                                                                       // 6061
},{"../utils/config":18,"../utils/utils":20,"./errors":26,"./jsonrpc":35}],45:[function(require,module,exports){       // 6062
                                                                                                                       // 6063
                                                                                                                       // 6064
var Settings = function () {                                                                                           // 6065
    this.defaultBlock = 'latest';                                                                                      // 6066
    this.defaultAccount = undefined;                                                                                   // 6067
};                                                                                                                     // 6068
                                                                                                                       // 6069
module.exports = Settings;                                                                                             // 6070
                                                                                                                       // 6071
                                                                                                                       // 6072
},{}],46:[function(require,module,exports){                                                                            // 6073
/*                                                                                                                     // 6074
    This file is part of web3.js.                                                                                      // 6075
                                                                                                                       // 6076
    web3.js is free software: you can redistribute it and/or modify                                                    // 6077
    it under the terms of the GNU Lesser General Public License as published by                                        // 6078
    the Free Software Foundation, either version 3 of the License, or                                                  // 6079
    (at your option) any later version.                                                                                // 6080
                                                                                                                       // 6081
    web3.js is distributed in the hope that it will be useful,                                                         // 6082
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 6083
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 6084
    GNU Lesser General Public License for more details.                                                                // 6085
                                                                                                                       // 6086
    You should have received a copy of the GNU Lesser General Public License                                           // 6087
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 6088
*/                                                                                                                     // 6089
/** @file syncing.js                                                                                                   // 6090
 * @authors:                                                                                                           // 6091
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 6092
 * @date 2015                                                                                                          // 6093
 */                                                                                                                    // 6094
                                                                                                                       // 6095
var formatters = require('./formatters');                                                                              // 6096
var utils = require('../utils/utils');                                                                                 // 6097
                                                                                                                       // 6098
var count = 1;                                                                                                         // 6099
                                                                                                                       // 6100
/**                                                                                                                    // 6101
Adds the callback and sets up the methods, to iterate over the results.                                                // 6102
                                                                                                                       // 6103
@method pollSyncing                                                                                                    // 6104
@param {Object} self                                                                                                   // 6105
*/                                                                                                                     // 6106
var pollSyncing = function(self) {                                                                                     // 6107
                                                                                                                       // 6108
    var onMessage = function (error, sync) {                                                                           // 6109
        if (error) {                                                                                                   // 6110
            return self.callbacks.forEach(function (callback) {                                                        // 6111
                callback(error);                                                                                       // 6112
            });                                                                                                        // 6113
        }                                                                                                              // 6114
                                                                                                                       // 6115
        if(utils.isObject(sync) && sync.startingBlock)                                                                 // 6116
            sync = formatters.outputSyncingFormatter(sync);                                                            // 6117
                                                                                                                       // 6118
        self.callbacks.forEach(function (callback) {                                                                   // 6119
            if (self.lastSyncState !== sync) {                                                                         // 6120
                                                                                                                       // 6121
                // call the callback with true first so the app can stop anything, before receiving the sync data      // 6122
                if(!self.lastSyncState && utils.isObject(sync))                                                        // 6123
                    callback(null, true);                                                                              // 6124
                                                                                                                       // 6125
                // call on the next CPU cycle, so the actions of the sync stop can be processes first                  // 6126
                setTimeout(function() {                                                                                // 6127
                    callback(null, sync);                                                                              // 6128
                }, 0);                                                                                                 // 6129
                                                                                                                       // 6130
                self.lastSyncState = sync;                                                                             // 6131
            }                                                                                                          // 6132
        });                                                                                                            // 6133
    };                                                                                                                 // 6134
                                                                                                                       // 6135
    self.requestManager.startPolling({                                                                                 // 6136
        method: 'eth_syncing',                                                                                         // 6137
        params: [],                                                                                                    // 6138
    }, self.pollId, onMessage, self.stopWatching.bind(self));                                                          // 6139
                                                                                                                       // 6140
};                                                                                                                     // 6141
                                                                                                                       // 6142
var IsSyncing = function (requestManager, callback) {                                                                  // 6143
    this.requestManager = requestManager;                                                                              // 6144
    this.pollId = 'syncPoll_'+ count++;                                                                                // 6145
    this.callbacks = [];                                                                                               // 6146
    this.addCallback(callback);                                                                                        // 6147
    this.lastSyncState = false;                                                                                        // 6148
    pollSyncing(this);                                                                                                 // 6149
                                                                                                                       // 6150
    return this;                                                                                                       // 6151
};                                                                                                                     // 6152
                                                                                                                       // 6153
IsSyncing.prototype.addCallback = function (callback) {                                                                // 6154
    if(callback)                                                                                                       // 6155
        this.callbacks.push(callback);                                                                                 // 6156
    return this;                                                                                                       // 6157
};                                                                                                                     // 6158
                                                                                                                       // 6159
IsSyncing.prototype.stopWatching = function () {                                                                       // 6160
    this.requestManager.stopPolling(this.pollId);                                                                      // 6161
    this.callbacks = [];                                                                                               // 6162
};                                                                                                                     // 6163
                                                                                                                       // 6164
module.exports = IsSyncing;                                                                                            // 6165
                                                                                                                       // 6166
                                                                                                                       // 6167
},{"../utils/utils":20,"./formatters":30}],47:[function(require,module,exports){                                       // 6168
/*                                                                                                                     // 6169
    This file is part of web3.js.                                                                                      // 6170
                                                                                                                       // 6171
    web3.js is free software: you can redistribute it and/or modify                                                    // 6172
    it under the terms of the GNU Lesser General Public License as published by                                        // 6173
    the Free Software Foundation, either version 3 of the License, or                                                  // 6174
    (at your option) any later version.                                                                                // 6175
                                                                                                                       // 6176
    web3.js is distributed in the hope that it will be useful,                                                         // 6177
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 6178
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 6179
    GNU Lesser General Public License for more details.                                                                // 6180
                                                                                                                       // 6181
    You should have received a copy of the GNU Lesser General Public License                                           // 6182
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 6183
*/                                                                                                                     // 6184
/**                                                                                                                    // 6185
 * @file transfer.js                                                                                                   // 6186
 * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 6187
 * @date 2015                                                                                                          // 6188
 */                                                                                                                    // 6189
                                                                                                                       // 6190
var Iban = require('./iban');                                                                                          // 6191
var exchangeAbi = require('../contracts/SmartExchange.json');                                                          // 6192
                                                                                                                       // 6193
/**                                                                                                                    // 6194
 * Should be used to make Iban transfer                                                                                // 6195
 *                                                                                                                     // 6196
 * @method transfer                                                                                                    // 6197
 * @param {String} from                                                                                                // 6198
 * @param {String} to iban                                                                                             // 6199
 * @param {Value} value to be tranfered                                                                                // 6200
 * @param {Function} callback, callback                                                                                // 6201
 */                                                                                                                    // 6202
var transfer = function (eth, from, to, value, callback) {                                                             // 6203
    var iban = new Iban(to);                                                                                           // 6204
    if (!iban.isValid()) {                                                                                             // 6205
        throw new Error('invalid iban address');                                                                       // 6206
    }                                                                                                                  // 6207
                                                                                                                       // 6208
    if (iban.isDirect()) {                                                                                             // 6209
        return transferToAddress(eth, from, iban.address(), value, callback);                                          // 6210
    }                                                                                                                  // 6211
                                                                                                                       // 6212
    if (!callback) {                                                                                                   // 6213
        var address = eth.icapNamereg().addr(iban.institution());                                                      // 6214
        return deposit(eth, from, address, value, iban.client());                                                      // 6215
    }                                                                                                                  // 6216
                                                                                                                       // 6217
    eth.icapNamereg().addr(iban.institution(), function (err, address) {                                               // 6218
        return deposit(eth, from, address, value, iban.client(), callback);                                            // 6219
    });                                                                                                                // 6220
                                                                                                                       // 6221
};                                                                                                                     // 6222
                                                                                                                       // 6223
/**                                                                                                                    // 6224
 * Should be used to transfer funds to certain address                                                                 // 6225
 *                                                                                                                     // 6226
 * @method transferToAddress                                                                                           // 6227
 * @param {String} from                                                                                                // 6228
 * @param {String} to                                                                                                  // 6229
 * @param {Value} value to be tranfered                                                                                // 6230
 * @param {Function} callback, callback                                                                                // 6231
 */                                                                                                                    // 6232
var transferToAddress = function (eth, from, to, value, callback) {                                                    // 6233
    return eth.sendTransaction({                                                                                       // 6234
        address: to,                                                                                                   // 6235
        from: from,                                                                                                    // 6236
        value: value                                                                                                   // 6237
    }, callback);                                                                                                      // 6238
};                                                                                                                     // 6239
                                                                                                                       // 6240
/**                                                                                                                    // 6241
 * Should be used to deposit funds to generic Exchange contract (must implement deposit(bytes32) method!)              // 6242
 *                                                                                                                     // 6243
 * @method deposit                                                                                                     // 6244
 * @param {String} from                                                                                                // 6245
 * @param {String} to                                                                                                  // 6246
 * @param {Value} value to be transfered                                                                               // 6247
 * @param {String} client unique identifier                                                                            // 6248
 * @param {Function} callback, callback                                                                                // 6249
 */                                                                                                                    // 6250
var deposit = function (eth, from, to, value, client, callback) {                                                      // 6251
    var abi = exchangeAbi;                                                                                             // 6252
    return eth.contract(abi).at(to).deposit(client, {                                                                  // 6253
        from: from,                                                                                                    // 6254
        value: value                                                                                                   // 6255
    }, callback);                                                                                                      // 6256
};                                                                                                                     // 6257
                                                                                                                       // 6258
module.exports = transfer;                                                                                             // 6259
                                                                                                                       // 6260
                                                                                                                       // 6261
},{"../contracts/SmartExchange.json":3,"./iban":33}],48:[function(require,module,exports){                             // 6262
                                                                                                                       // 6263
},{}],49:[function(require,module,exports){                                                                            // 6264
;(function (root, factory, undef) {                                                                                    // 6265
	if (typeof exports === "object") {                                                                                    // 6266
		// CommonJS                                                                                                          // 6267
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 6269
	else if (typeof define === "function" && define.amd) {                                                                // 6270
		// AMD                                                                                                               // 6271
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 6272
	}                                                                                                                     // 6273
	else {                                                                                                                // 6274
		// Global (browser)                                                                                                  // 6275
		factory(root.CryptoJS);                                                                                              // 6276
	}                                                                                                                     // 6277
}(this, function (CryptoJS) {                                                                                          // 6278
                                                                                                                       // 6279
	(function () {                                                                                                        // 6280
	    // Shortcuts                                                                                                      // 6281
	    var C = CryptoJS;                                                                                                 // 6282
	    var C_lib = C.lib;                                                                                                // 6283
	    var BlockCipher = C_lib.BlockCipher;                                                                              // 6284
	    var C_algo = C.algo;                                                                                              // 6285
                                                                                                                       // 6286
	    // Lookup tables                                                                                                  // 6287
	    var SBOX = [];                                                                                                    // 6288
	    var INV_SBOX = [];                                                                                                // 6289
	    var SUB_MIX_0 = [];                                                                                               // 6290
	    var SUB_MIX_1 = [];                                                                                               // 6291
	    var SUB_MIX_2 = [];                                                                                               // 6292
	    var SUB_MIX_3 = [];                                                                                               // 6293
	    var INV_SUB_MIX_0 = [];                                                                                           // 6294
	    var INV_SUB_MIX_1 = [];                                                                                           // 6295
	    var INV_SUB_MIX_2 = [];                                                                                           // 6296
	    var INV_SUB_MIX_3 = [];                                                                                           // 6297
                                                                                                                       // 6298
	    // Compute lookup tables                                                                                          // 6299
	    (function () {                                                                                                    // 6300
	        // Compute double table                                                                                       // 6301
	        var d = [];                                                                                                   // 6302
	        for (var i = 0; i < 256; i++) {                                                                               // 6303
	            if (i < 128) {                                                                                            // 6304
	                d[i] = i << 1;                                                                                        // 6305
	            } else {                                                                                                  // 6306
	                d[i] = (i << 1) ^ 0x11b;                                                                              // 6307
	            }                                                                                                         // 6308
	        }                                                                                                             // 6309
                                                                                                                       // 6310
	        // Walk GF(2^8)                                                                                               // 6311
	        var x = 0;                                                                                                    // 6312
	        var xi = 0;                                                                                                   // 6313
	        for (var i = 0; i < 256; i++) {                                                                               // 6314
	            // Compute sbox                                                                                           // 6315
	            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);                                              // 6316
	            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;                                                                     // 6317
	            SBOX[x] = sx;                                                                                             // 6318
	            INV_SBOX[sx] = x;                                                                                         // 6319
                                                                                                                       // 6320
	            // Compute multiplication                                                                                 // 6321
	            var x2 = d[x];                                                                                            // 6322
	            var x4 = d[x2];                                                                                           // 6323
	            var x8 = d[x4];                                                                                           // 6324
                                                                                                                       // 6325
	            // Compute sub bytes, mix columns tables                                                                  // 6326
	            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);                                                               // 6327
	            SUB_MIX_0[x] = (t << 24) | (t >>> 8);                                                                     // 6328
	            SUB_MIX_1[x] = (t << 16) | (t >>> 16);                                                                    // 6329
	            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);                                                                    // 6330
	            SUB_MIX_3[x] = t;                                                                                         // 6331
                                                                                                                       // 6332
	            // Compute inv sub bytes, inv mix columns tables                                                          // 6333
	            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);                               // 6334
	            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);                                                                // 6335
	            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);                                                               // 6336
	            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);                                                               // 6337
	            INV_SUB_MIX_3[sx] = t;                                                                                    // 6338
                                                                                                                       // 6339
	            // Compute next counter                                                                                   // 6340
	            if (!x) {                                                                                                 // 6341
	                x = xi = 1;                                                                                           // 6342
	            } else {                                                                                                  // 6343
	                x = x2 ^ d[d[d[x8 ^ x2]]];                                                                            // 6344
	                xi ^= d[d[xi]];                                                                                       // 6345
	            }                                                                                                         // 6346
	        }                                                                                                             // 6347
	    }());                                                                                                             // 6348
                                                                                                                       // 6349
	    // Precomputed Rcon lookup                                                                                        // 6350
	    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];                                    // 6351
                                                                                                                       // 6352
	    /**                                                                                                               // 6353
	     * AES block cipher algorithm.                                                                                    // 6354
	     */                                                                                                               // 6355
	    var AES = C_algo.AES = BlockCipher.extend({                                                                       // 6356
	        _doReset: function () {                                                                                       // 6357
	            // Shortcuts                                                                                              // 6358
	            var key = this._key;                                                                                      // 6359
	            var keyWords = key.words;                                                                                 // 6360
	            var keySize = key.sigBytes / 4;                                                                           // 6361
                                                                                                                       // 6362
	            // Compute number of rounds                                                                               // 6363
	            var nRounds = this._nRounds = keySize + 6                                                                 // 6364
                                                                                                                       // 6365
	            // Compute number of key schedule rows                                                                    // 6366
	            var ksRows = (nRounds + 1) * 4;                                                                           // 6367
                                                                                                                       // 6368
	            // Compute key schedule                                                                                   // 6369
	            var keySchedule = this._keySchedule = [];                                                                 // 6370
	            for (var ksRow = 0; ksRow < ksRows; ksRow++) {                                                            // 6371
	                if (ksRow < keySize) {                                                                                // 6372
	                    keySchedule[ksRow] = keyWords[ksRow];                                                             // 6373
	                } else {                                                                                              // 6374
	                    var t = keySchedule[ksRow - 1];                                                                   // 6375
                                                                                                                       // 6376
	                    if (!(ksRow % keySize)) {                                                                         // 6377
	                        // Rot word                                                                                   // 6378
	                        t = (t << 8) | (t >>> 24);                                                                    // 6379
                                                                                                                       // 6380
	                        // Sub word                                                                                   // 6381
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
                                                                                                                       // 6383
	                        // Mix Rcon                                                                                   // 6384
	                        t ^= RCON[(ksRow / keySize) | 0] << 24;                                                       // 6385
	                    } else if (keySize > 6 && ksRow % keySize == 4) {                                                 // 6386
	                        // Sub word                                                                                   // 6387
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
	                    }                                                                                                 // 6389
                                                                                                                       // 6390
	                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;                                            // 6391
	                }                                                                                                     // 6392
	            }                                                                                                         // 6393
                                                                                                                       // 6394
	            // Compute inv key schedule                                                                               // 6395
	            var invKeySchedule = this._invKeySchedule = [];                                                           // 6396
	            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {                                                   // 6397
	                var ksRow = ksRows - invKsRow;                                                                        // 6398
                                                                                                                       // 6399
	                if (invKsRow % 4) {                                                                                   // 6400
	                    var t = keySchedule[ksRow];                                                                       // 6401
	                } else {                                                                                              // 6402
	                    var t = keySchedule[ksRow - 4];                                                                   // 6403
	                }                                                                                                     // 6404
                                                                                                                       // 6405
	                if (invKsRow < 4 || ksRow <= 4) {                                                                     // 6406
	                    invKeySchedule[invKsRow] = t;                                                                     // 6407
	                } else {                                                                                              // 6408
	                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
	                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
	                }                                                                                                     // 6411
	            }                                                                                                         // 6412
	        },                                                                                                            // 6413
                                                                                                                       // 6414
	        encryptBlock: function (M, offset) {                                                                          // 6415
	            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);       // 6416
	        },                                                                                                            // 6417
                                                                                                                       // 6418
	        decryptBlock: function (M, offset) {                                                                          // 6419
	            // Swap 2nd and 4th rows                                                                                  // 6420
	            var t = M[offset + 1];                                                                                    // 6421
	            M[offset + 1] = M[offset + 3];                                                                            // 6422
	            M[offset + 3] = t;                                                                                        // 6423
                                                                                                                       // 6424
	            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
                                                                                                                       // 6426
	            // Inv swap 2nd and 4th rows                                                                              // 6427
	            var t = M[offset + 1];                                                                                    // 6428
	            M[offset + 1] = M[offset + 3];                                                                            // 6429
	            M[offset + 3] = t;                                                                                        // 6430
	        },                                                                                                            // 6431
                                                                                                                       // 6432
	        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {          // 6433
	            // Shortcut                                                                                               // 6434
	            var nRounds = this._nRounds;                                                                              // 6435
                                                                                                                       // 6436
	            // Get input, add round key                                                                               // 6437
	            var s0 = M[offset]     ^ keySchedule[0];                                                                  // 6438
	            var s1 = M[offset + 1] ^ keySchedule[1];                                                                  // 6439
	            var s2 = M[offset + 2] ^ keySchedule[2];                                                                  // 6440
	            var s3 = M[offset + 3] ^ keySchedule[3];                                                                  // 6441
                                                                                                                       // 6442
	            // Key schedule row counter                                                                               // 6443
	            var ksRow = 4;                                                                                            // 6444
                                                                                                                       // 6445
	            // Rounds                                                                                                 // 6446
	            for (var round = 1; round < nRounds; round++) {                                                           // 6447
	                // Shift rows, sub bytes, mix columns, add round key                                                  // 6448
	                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
	                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
	                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
	                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];
                                                                                                                       // 6453
	                // Update state                                                                                       // 6454
	                s0 = t0;                                                                                              // 6455
	                s1 = t1;                                                                                              // 6456
	                s2 = t2;                                                                                              // 6457
	                s3 = t3;                                                                                              // 6458
	            }                                                                                                         // 6459
                                                                                                                       // 6460
	            // Shift rows, sub bytes, add round key                                                                   // 6461
	            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
                                                                                                                       // 6466
	            // Set output                                                                                             // 6467
	            M[offset]     = t0;                                                                                       // 6468
	            M[offset + 1] = t1;                                                                                       // 6469
	            M[offset + 2] = t2;                                                                                       // 6470
	            M[offset + 3] = t3;                                                                                       // 6471
	        },                                                                                                            // 6472
                                                                                                                       // 6473
	        keySize: 256/32                                                                                               // 6474
	    });                                                                                                               // 6475
                                                                                                                       // 6476
	    /**                                                                                                               // 6477
	     * Shortcut functions to the cipher's object interface.                                                           // 6478
	     *                                                                                                                // 6479
	     * @example                                                                                                       // 6480
	     *                                                                                                                // 6481
	     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);                                                  // 6482
	     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);                                               // 6483
	     */                                                                                                               // 6484
	    C.AES = BlockCipher._createHelper(AES);                                                                           // 6485
	}());                                                                                                                 // 6486
                                                                                                                       // 6487
                                                                                                                       // 6488
	return CryptoJS.AES;                                                                                                  // 6489
                                                                                                                       // 6490
}));                                                                                                                   // 6491
},{"./cipher-core":50,"./core":51,"./enc-base64":52,"./evpkdf":54,"./md5":59}],50:[function(require,module,exports){   // 6492
;(function (root, factory) {                                                                                           // 6493
	if (typeof exports === "object") {                                                                                    // 6494
		// CommonJS                                                                                                          // 6495
		module.exports = exports = factory(require("./core"));                                                               // 6496
	}                                                                                                                     // 6497
	else if (typeof define === "function" && define.amd) {                                                                // 6498
		// AMD                                                                                                               // 6499
		define(["./core"], factory);                                                                                         // 6500
	}                                                                                                                     // 6501
	else {                                                                                                                // 6502
		// Global (browser)                                                                                                  // 6503
		factory(root.CryptoJS);                                                                                              // 6504
	}                                                                                                                     // 6505
}(this, function (CryptoJS) {                                                                                          // 6506
                                                                                                                       // 6507
	/**                                                                                                                   // 6508
	 * Cipher core components.                                                                                            // 6509
	 */                                                                                                                   // 6510
	CryptoJS.lib.Cipher || (function (undefined) {                                                                        // 6511
	    // Shortcuts                                                                                                      // 6512
	    var C = CryptoJS;                                                                                                 // 6513
	    var C_lib = C.lib;                                                                                                // 6514
	    var Base = C_lib.Base;                                                                                            // 6515
	    var WordArray = C_lib.WordArray;                                                                                  // 6516
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;                                                        // 6517
	    var C_enc = C.enc;                                                                                                // 6518
	    var Utf8 = C_enc.Utf8;                                                                                            // 6519
	    var Base64 = C_enc.Base64;                                                                                        // 6520
	    var C_algo = C.algo;                                                                                              // 6521
	    var EvpKDF = C_algo.EvpKDF;                                                                                       // 6522
                                                                                                                       // 6523
	    /**                                                                                                               // 6524
	     * Abstract base cipher template.                                                                                 // 6525
	     *                                                                                                                // 6526
	     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)                                       // 6527
	     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)                                         // 6528
	     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.                                    // 6529
	     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.                                    // 6530
	     */                                                                                                               // 6531
	    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({                                                       // 6532
	        /**                                                                                                           // 6533
	         * Configuration options.                                                                                     // 6534
	         *                                                                                                            // 6535
	         * @property {WordArray} iv The IV to use for this operation.                                                 // 6536
	         */                                                                                                           // 6537
	        cfg: Base.extend(),                                                                                           // 6538
                                                                                                                       // 6539
	        /**                                                                                                           // 6540
	         * Creates this cipher in encryption mode.                                                                    // 6541
	         *                                                                                                            // 6542
	         * @param {WordArray} key The key.                                                                            // 6543
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 6544
	         *                                                                                                            // 6545
	         * @return {Cipher} A cipher instance.                                                                        // 6546
	         *                                                                                                            // 6547
	         * @static                                                                                                    // 6548
	         *                                                                                                            // 6549
	         * @example                                                                                                   // 6550
	         *                                                                                                            // 6551
	         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });                     // 6552
	         */                                                                                                           // 6553
	        createEncryptor: function (key, cfg) {                                                                        // 6554
	            return this.create(this._ENC_XFORM_MODE, key, cfg);                                                       // 6555
	        },                                                                                                            // 6556
                                                                                                                       // 6557
	        /**                                                                                                           // 6558
	         * Creates this cipher in decryption mode.                                                                    // 6559
	         *                                                                                                            // 6560
	         * @param {WordArray} key The key.                                                                            // 6561
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 6562
	         *                                                                                                            // 6563
	         * @return {Cipher} A cipher instance.                                                                        // 6564
	         *                                                                                                            // 6565
	         * @static                                                                                                    // 6566
	         *                                                                                                            // 6567
	         * @example                                                                                                   // 6568
	         *                                                                                                            // 6569
	         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });                     // 6570
	         */                                                                                                           // 6571
	        createDecryptor: function (key, cfg) {                                                                        // 6572
	            return this.create(this._DEC_XFORM_MODE, key, cfg);                                                       // 6573
	        },                                                                                                            // 6574
                                                                                                                       // 6575
	        /**                                                                                                           // 6576
	         * Initializes a newly created cipher.                                                                        // 6577
	         *                                                                                                            // 6578
	         * @param {number} xformMode Either the encryption or decryption transormation mode constant.                 // 6579
	         * @param {WordArray} key The key.                                                                            // 6580
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 6581
	         *                                                                                                            // 6582
	         * @example                                                                                                   // 6583
	         *                                                                                                            // 6584
	         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
	         */                                                                                                           // 6586
	        init: function (xformMode, key, cfg) {                                                                        // 6587
	            // Apply config defaults                                                                                  // 6588
	            this.cfg = this.cfg.extend(cfg);                                                                          // 6589
                                                                                                                       // 6590
	            // Store transform mode and key                                                                           // 6591
	            this._xformMode = xformMode;                                                                              // 6592
	            this._key = key;                                                                                          // 6593
                                                                                                                       // 6594
	            // Set initial values                                                                                     // 6595
	            this.reset();                                                                                             // 6596
	        },                                                                                                            // 6597
                                                                                                                       // 6598
	        /**                                                                                                           // 6599
	         * Resets this cipher to its initial state.                                                                   // 6600
	         *                                                                                                            // 6601
	         * @example                                                                                                   // 6602
	         *                                                                                                            // 6603
	         *     cipher.reset();                                                                                        // 6604
	         */                                                                                                           // 6605
	        reset: function () {                                                                                          // 6606
	            // Reset data buffer                                                                                      // 6607
	            BufferedBlockAlgorithm.reset.call(this);                                                                  // 6608
                                                                                                                       // 6609
	            // Perform concrete-cipher logic                                                                          // 6610
	            this._doReset();                                                                                          // 6611
	        },                                                                                                            // 6612
                                                                                                                       // 6613
	        /**                                                                                                           // 6614
	         * Adds data to be encrypted or decrypted.                                                                    // 6615
	         *                                                                                                            // 6616
	         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.                                       // 6617
	         *                                                                                                            // 6618
	         * @return {WordArray} The data after processing.                                                             // 6619
	         *                                                                                                            // 6620
	         * @example                                                                                                   // 6621
	         *                                                                                                            // 6622
	         *     var encrypted = cipher.process('data');                                                                // 6623
	         *     var encrypted = cipher.process(wordArray);                                                             // 6624
	         */                                                                                                           // 6625
	        process: function (dataUpdate) {                                                                              // 6626
	            // Append                                                                                                 // 6627
	            this._append(dataUpdate);                                                                                 // 6628
                                                                                                                       // 6629
	            // Process available blocks                                                                               // 6630
	            return this._process();                                                                                   // 6631
	        },                                                                                                            // 6632
                                                                                                                       // 6633
	        /**                                                                                                           // 6634
	         * Finalizes the encryption or decryption process.                                                            // 6635
	         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 6636
	         *                                                                                                            // 6637
	         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.                                 // 6638
	         *                                                                                                            // 6639
	         * @return {WordArray} The data after final processing.                                                       // 6640
	         *                                                                                                            // 6641
	         * @example                                                                                                   // 6642
	         *                                                                                                            // 6643
	         *     var encrypted = cipher.finalize();                                                                     // 6644
	         *     var encrypted = cipher.finalize('data');                                                               // 6645
	         *     var encrypted = cipher.finalize(wordArray);                                                            // 6646
	         */                                                                                                           // 6647
	        finalize: function (dataUpdate) {                                                                             // 6648
	            // Final data update                                                                                      // 6649
	            if (dataUpdate) {                                                                                         // 6650
	                this._append(dataUpdate);                                                                             // 6651
	            }                                                                                                         // 6652
                                                                                                                       // 6653
	            // Perform concrete-cipher logic                                                                          // 6654
	            var finalProcessedData = this._doFinalize();                                                              // 6655
                                                                                                                       // 6656
	            return finalProcessedData;                                                                                // 6657
	        },                                                                                                            // 6658
                                                                                                                       // 6659
	        keySize: 128/32,                                                                                              // 6660
                                                                                                                       // 6661
	        ivSize: 128/32,                                                                                               // 6662
                                                                                                                       // 6663
	        _ENC_XFORM_MODE: 1,                                                                                           // 6664
                                                                                                                       // 6665
	        _DEC_XFORM_MODE: 2,                                                                                           // 6666
                                                                                                                       // 6667
	        /**                                                                                                           // 6668
	         * Creates shortcut functions to a cipher's object interface.                                                 // 6669
	         *                                                                                                            // 6670
	         * @param {Cipher} cipher The cipher to create a helper for.                                                  // 6671
	         *                                                                                                            // 6672
	         * @return {Object} An object with encrypt and decrypt shortcut functions.                                    // 6673
	         *                                                                                                            // 6674
	         * @static                                                                                                    // 6675
	         *                                                                                                            // 6676
	         * @example                                                                                                   // 6677
	         *                                                                                                            // 6678
	         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);                                        // 6679
	         */                                                                                                           // 6680
	        _createHelper: (function () {                                                                                 // 6681
	            function selectCipherStrategy(key) {                                                                      // 6682
	                if (typeof key == 'string') {                                                                         // 6683
	                    return PasswordBasedCipher;                                                                       // 6684
	                } else {                                                                                              // 6685
	                    return SerializableCipher;                                                                        // 6686
	                }                                                                                                     // 6687
	            }                                                                                                         // 6688
                                                                                                                       // 6689
	            return function (cipher) {                                                                                // 6690
	                return {                                                                                              // 6691
	                    encrypt: function (message, key, cfg) {                                                           // 6692
	                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);                          // 6693
	                    },                                                                                                // 6694
                                                                                                                       // 6695
	                    decrypt: function (ciphertext, key, cfg) {                                                        // 6696
	                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);                       // 6697
	                    }                                                                                                 // 6698
	                };                                                                                                    // 6699
	            };                                                                                                        // 6700
	        }())                                                                                                          // 6701
	    });                                                                                                               // 6702
                                                                                                                       // 6703
	    /**                                                                                                               // 6704
	     * Abstract base stream cipher template.                                                                          // 6705
	     *                                                                                                                // 6706
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)          // 6707
	     */                                                                                                               // 6708
	    var StreamCipher = C_lib.StreamCipher = Cipher.extend({                                                           // 6709
	        _doFinalize: function () {                                                                                    // 6710
	            // Process partial blocks                                                                                 // 6711
	            var finalProcessedBlocks = this._process(!!'flush');                                                      // 6712
                                                                                                                       // 6713
	            return finalProcessedBlocks;                                                                              // 6714
	        },                                                                                                            // 6715
                                                                                                                       // 6716
	        blockSize: 1                                                                                                  // 6717
	    });                                                                                                               // 6718
                                                                                                                       // 6719
	    /**                                                                                                               // 6720
	     * Mode namespace.                                                                                                // 6721
	     */                                                                                                               // 6722
	    var C_mode = C.mode = {};                                                                                         // 6723
                                                                                                                       // 6724
	    /**                                                                                                               // 6725
	     * Abstract base block cipher mode template.                                                                      // 6726
	     */                                                                                                               // 6727
	    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({                                                       // 6728
	        /**                                                                                                           // 6729
	         * Creates this mode for encryption.                                                                          // 6730
	         *                                                                                                            // 6731
	         * @param {Cipher} cipher A block cipher instance.                                                            // 6732
	         * @param {Array} iv The IV words.                                                                            // 6733
	         *                                                                                                            // 6734
	         * @static                                                                                                    // 6735
	         *                                                                                                            // 6736
	         * @example                                                                                                   // 6737
	         *                                                                                                            // 6738
	         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);                                        // 6739
	         */                                                                                                           // 6740
	        createEncryptor: function (cipher, iv) {                                                                      // 6741
	            return this.Encryptor.create(cipher, iv);                                                                 // 6742
	        },                                                                                                            // 6743
                                                                                                                       // 6744
	        /**                                                                                                           // 6745
	         * Creates this mode for decryption.                                                                          // 6746
	         *                                                                                                            // 6747
	         * @param {Cipher} cipher A block cipher instance.                                                            // 6748
	         * @param {Array} iv The IV words.                                                                            // 6749
	         *                                                                                                            // 6750
	         * @static                                                                                                    // 6751
	         *                                                                                                            // 6752
	         * @example                                                                                                   // 6753
	         *                                                                                                            // 6754
	         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);                                        // 6755
	         */                                                                                                           // 6756
	        createDecryptor: function (cipher, iv) {                                                                      // 6757
	            return this.Decryptor.create(cipher, iv);                                                                 // 6758
	        },                                                                                                            // 6759
                                                                                                                       // 6760
	        /**                                                                                                           // 6761
	         * Initializes a newly created mode.                                                                          // 6762
	         *                                                                                                            // 6763
	         * @param {Cipher} cipher A block cipher instance.                                                            // 6764
	         * @param {Array} iv The IV words.                                                                            // 6765
	         *                                                                                                            // 6766
	         * @example                                                                                                   // 6767
	         *                                                                                                            // 6768
	         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);                                       // 6769
	         */                                                                                                           // 6770
	        init: function (cipher, iv) {                                                                                 // 6771
	            this._cipher = cipher;                                                                                    // 6772
	            this._iv = iv;                                                                                            // 6773
	        }                                                                                                             // 6774
	    });                                                                                                               // 6775
                                                                                                                       // 6776
	    /**                                                                                                               // 6777
	     * Cipher Block Chaining mode.                                                                                    // 6778
	     */                                                                                                               // 6779
	    var CBC = C_mode.CBC = (function () {                                                                             // 6780
	        /**                                                                                                           // 6781
	         * Abstract base CBC mode.                                                                                    // 6782
	         */                                                                                                           // 6783
	        var CBC = BlockCipherMode.extend();                                                                           // 6784
                                                                                                                       // 6785
	        /**                                                                                                           // 6786
	         * CBC encryptor.                                                                                             // 6787
	         */                                                                                                           // 6788
	        CBC.Encryptor = CBC.extend({                                                                                  // 6789
	            /**                                                                                                       // 6790
	             * Processes the data block at offset.                                                                    // 6791
	             *                                                                                                        // 6792
	             * @param {Array} words The data words to operate on.                                                     // 6793
	             * @param {number} offset The offset where the block starts.                                              // 6794
	             *                                                                                                        // 6795
	             * @example                                                                                               // 6796
	             *                                                                                                        // 6797
	             *     mode.processBlock(data.words, offset);                                                             // 6798
	             */                                                                                                       // 6799
	            processBlock: function (words, offset) {                                                                  // 6800
	                // Shortcuts                                                                                          // 6801
	                var cipher = this._cipher;                                                                            // 6802
	                var blockSize = cipher.blockSize;                                                                     // 6803
                                                                                                                       // 6804
	                // XOR and encrypt                                                                                    // 6805
	                xorBlock.call(this, words, offset, blockSize);                                                        // 6806
	                cipher.encryptBlock(words, offset);                                                                   // 6807
                                                                                                                       // 6808
	                // Remember this block to use with next block                                                         // 6809
	                this._prevBlock = words.slice(offset, offset + blockSize);                                            // 6810
	            }                                                                                                         // 6811
	        });                                                                                                           // 6812
                                                                                                                       // 6813
	        /**                                                                                                           // 6814
	         * CBC decryptor.                                                                                             // 6815
	         */                                                                                                           // 6816
	        CBC.Decryptor = CBC.extend({                                                                                  // 6817
	            /**                                                                                                       // 6818
	             * Processes the data block at offset.                                                                    // 6819
	             *                                                                                                        // 6820
	             * @param {Array} words The data words to operate on.                                                     // 6821
	             * @param {number} offset The offset where the block starts.                                              // 6822
	             *                                                                                                        // 6823
	             * @example                                                                                               // 6824
	             *                                                                                                        // 6825
	             *     mode.processBlock(data.words, offset);                                                             // 6826
	             */                                                                                                       // 6827
	            processBlock: function (words, offset) {                                                                  // 6828
	                // Shortcuts                                                                                          // 6829
	                var cipher = this._cipher;                                                                            // 6830
	                var blockSize = cipher.blockSize;                                                                     // 6831
                                                                                                                       // 6832
	                // Remember this block to use with next block                                                         // 6833
	                var thisBlock = words.slice(offset, offset + blockSize);                                              // 6834
                                                                                                                       // 6835
	                // Decrypt and XOR                                                                                    // 6836
	                cipher.decryptBlock(words, offset);                                                                   // 6837
	                xorBlock.call(this, words, offset, blockSize);                                                        // 6838
                                                                                                                       // 6839
	                // This block becomes the previous block                                                              // 6840
	                this._prevBlock = thisBlock;                                                                          // 6841
	            }                                                                                                         // 6842
	        });                                                                                                           // 6843
                                                                                                                       // 6844
	        function xorBlock(words, offset, blockSize) {                                                                 // 6845
	            // Shortcut                                                                                               // 6846
	            var iv = this._iv;                                                                                        // 6847
                                                                                                                       // 6848
	            // Choose mixing block                                                                                    // 6849
	            if (iv) {                                                                                                 // 6850
	                var block = iv;                                                                                       // 6851
                                                                                                                       // 6852
	                // Remove IV for subsequent blocks                                                                    // 6853
	                this._iv = undefined;                                                                                 // 6854
	            } else {                                                                                                  // 6855
	                var block = this._prevBlock;                                                                          // 6856
	            }                                                                                                         // 6857
                                                                                                                       // 6858
	            // XOR blocks                                                                                             // 6859
	            for (var i = 0; i < blockSize; i++) {                                                                     // 6860
	                words[offset + i] ^= block[i];                                                                        // 6861
	            }                                                                                                         // 6862
	        }                                                                                                             // 6863
                                                                                                                       // 6864
	        return CBC;                                                                                                   // 6865
	    }());                                                                                                             // 6866
                                                                                                                       // 6867
	    /**                                                                                                               // 6868
	     * Padding namespace.                                                                                             // 6869
	     */                                                                                                               // 6870
	    var C_pad = C.pad = {};                                                                                           // 6871
                                                                                                                       // 6872
	    /**                                                                                                               // 6873
	     * PKCS #5/7 padding strategy.                                                                                    // 6874
	     */                                                                                                               // 6875
	    var Pkcs7 = C_pad.Pkcs7 = {                                                                                       // 6876
	        /**                                                                                                           // 6877
	         * Pads data using the algorithm defined in PKCS #5/7.                                                        // 6878
	         *                                                                                                            // 6879
	         * @param {WordArray} data The data to pad.                                                                   // 6880
	         * @param {number} blockSize The multiple that the data should be padded to.                                  // 6881
	         *                                                                                                            // 6882
	         * @static                                                                                                    // 6883
	         *                                                                                                            // 6884
	         * @example                                                                                                   // 6885
	         *                                                                                                            // 6886
	         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);                                                                  // 6887
	         */                                                                                                           // 6888
	        pad: function (data, blockSize) {                                                                             // 6889
	            // Shortcut                                                                                               // 6890
	            var blockSizeBytes = blockSize * 4;                                                                       // 6891
                                                                                                                       // 6892
	            // Count padding bytes                                                                                    // 6893
	            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;                                      // 6894
                                                                                                                       // 6895
	            // Create padding word                                                                                    // 6896
	            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;   // 6897
                                                                                                                       // 6898
	            // Create padding                                                                                         // 6899
	            var paddingWords = [];                                                                                    // 6900
	            for (var i = 0; i < nPaddingBytes; i += 4) {                                                              // 6901
	                paddingWords.push(paddingWord);                                                                       // 6902
	            }                                                                                                         // 6903
	            var padding = WordArray.create(paddingWords, nPaddingBytes);                                              // 6904
                                                                                                                       // 6905
	            // Add padding                                                                                            // 6906
	            data.concat(padding);                                                                                     // 6907
	        },                                                                                                            // 6908
                                                                                                                       // 6909
	        /**                                                                                                           // 6910
	         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.                                 // 6911
	         *                                                                                                            // 6912
	         * @param {WordArray} data The data to unpad.                                                                 // 6913
	         *                                                                                                            // 6914
	         * @static                                                                                                    // 6915
	         *                                                                                                            // 6916
	         * @example                                                                                                   // 6917
	         *                                                                                                            // 6918
	         *     CryptoJS.pad.Pkcs7.unpad(wordArray);                                                                   // 6919
	         */                                                                                                           // 6920
	        unpad: function (data) {                                                                                      // 6921
	            // Get number of padding bytes from last byte                                                             // 6922
	            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                         // 6923
                                                                                                                       // 6924
	            // Remove padding                                                                                         // 6925
	            data.sigBytes -= nPaddingBytes;                                                                           // 6926
	        }                                                                                                             // 6927
	    };                                                                                                                // 6928
                                                                                                                       // 6929
	    /**                                                                                                               // 6930
	     * Abstract base block cipher template.                                                                           // 6931
	     *                                                                                                                // 6932
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)         // 6933
	     */                                                                                                               // 6934
	    var BlockCipher = C_lib.BlockCipher = Cipher.extend({                                                             // 6935
	        /**                                                                                                           // 6936
	         * Configuration options.                                                                                     // 6937
	         *                                                                                                            // 6938
	         * @property {Mode} mode The block mode to use. Default: CBC                                                  // 6939
	         * @property {Padding} padding The padding strategy to use. Default: Pkcs7                                    // 6940
	         */                                                                                                           // 6941
	        cfg: Cipher.cfg.extend({                                                                                      // 6942
	            mode: CBC,                                                                                                // 6943
	            padding: Pkcs7                                                                                            // 6944
	        }),                                                                                                           // 6945
                                                                                                                       // 6946
	        reset: function () {                                                                                          // 6947
	            // Reset cipher                                                                                           // 6948
	            Cipher.reset.call(this);                                                                                  // 6949
                                                                                                                       // 6950
	            // Shortcuts                                                                                              // 6951
	            var cfg = this.cfg;                                                                                       // 6952
	            var iv = cfg.iv;                                                                                          // 6953
	            var mode = cfg.mode;                                                                                      // 6954
                                                                                                                       // 6955
	            // Reset block mode                                                                                       // 6956
	            if (this._xformMode == this._ENC_XFORM_MODE) {                                                            // 6957
	                var modeCreator = mode.createEncryptor;                                                               // 6958
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {                                               // 6959
	                var modeCreator = mode.createDecryptor;                                                               // 6960
                                                                                                                       // 6961
	                // Keep at least one block in the buffer for unpadding                                                // 6962
	                this._minBufferSize = 1;                                                                              // 6963
	            }                                                                                                         // 6964
	            this._mode = modeCreator.call(mode, this, iv && iv.words);                                                // 6965
	        },                                                                                                            // 6966
                                                                                                                       // 6967
	        _doProcessBlock: function (words, offset) {                                                                   // 6968
	            this._mode.processBlock(words, offset);                                                                   // 6969
	        },                                                                                                            // 6970
                                                                                                                       // 6971
	        _doFinalize: function () {                                                                                    // 6972
	            // Shortcut                                                                                               // 6973
	            var padding = this.cfg.padding;                                                                           // 6974
                                                                                                                       // 6975
	            // Finalize                                                                                               // 6976
	            if (this._xformMode == this._ENC_XFORM_MODE) {                                                            // 6977
	                // Pad data                                                                                           // 6978
	                padding.pad(this._data, this.blockSize);                                                              // 6979
                                                                                                                       // 6980
	                // Process final blocks                                                                               // 6981
	                var finalProcessedBlocks = this._process(!!'flush');                                                  // 6982
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {                                               // 6983
	                // Process final blocks                                                                               // 6984
	                var finalProcessedBlocks = this._process(!!'flush');                                                  // 6985
                                                                                                                       // 6986
	                // Unpad data                                                                                         // 6987
	                padding.unpad(finalProcessedBlocks);                                                                  // 6988
	            }                                                                                                         // 6989
                                                                                                                       // 6990
	            return finalProcessedBlocks;                                                                              // 6991
	        },                                                                                                            // 6992
                                                                                                                       // 6993
	        blockSize: 128/32                                                                                             // 6994
	    });                                                                                                               // 6995
                                                                                                                       // 6996
	    /**                                                                                                               // 6997
	     * A collection of cipher parameters.                                                                             // 6998
	     *                                                                                                                // 6999
	     * @property {WordArray} ciphertext The raw ciphertext.                                                           // 7000
	     * @property {WordArray} key The key to this ciphertext.                                                          // 7001
	     * @property {WordArray} iv The IV used in the ciphering operation.                                               // 7002
	     * @property {WordArray} salt The salt used with a key derivation function.                                       // 7003
	     * @property {Cipher} algorithm The cipher algorithm.                                                             // 7004
	     * @property {Mode} mode The block mode used in the ciphering operation.                                          // 7005
	     * @property {Padding} padding The padding scheme used in the ciphering operation.                                // 7006
	     * @property {number} blockSize The block size of the cipher.                                                     // 7007
	     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
	     */                                                                                                               // 7009
	    var CipherParams = C_lib.CipherParams = Base.extend({                                                             // 7010
	        /**                                                                                                           // 7011
	         * Initializes a newly created cipher params object.                                                          // 7012
	         *                                                                                                            // 7013
	         * @param {Object} cipherParams An object with any of the possible cipher parameters.                         // 7014
	         *                                                                                                            // 7015
	         * @example                                                                                                   // 7016
	         *                                                                                                            // 7017
	         *     var cipherParams = CryptoJS.lib.CipherParams.create({                                                  // 7018
	         *         ciphertext: ciphertextWordArray,                                                                   // 7019
	         *         key: keyWordArray,                                                                                 // 7020
	         *         iv: ivWordArray,                                                                                   // 7021
	         *         salt: saltWordArray,                                                                               // 7022
	         *         algorithm: CryptoJS.algo.AES,                                                                      // 7023
	         *         mode: CryptoJS.mode.CBC,                                                                           // 7024
	         *         padding: CryptoJS.pad.PKCS7,                                                                       // 7025
	         *         blockSize: 4,                                                                                      // 7026
	         *         formatter: CryptoJS.format.OpenSSL                                                                 // 7027
	         *     });                                                                                                    // 7028
	         */                                                                                                           // 7029
	        init: function (cipherParams) {                                                                               // 7030
	            this.mixIn(cipherParams);                                                                                 // 7031
	        },                                                                                                            // 7032
                                                                                                                       // 7033
	        /**                                                                                                           // 7034
	         * Converts this cipher params object to a string.                                                            // 7035
	         *                                                                                                            // 7036
	         * @param {Format} formatter (Optional) The formatting strategy to use.                                       // 7037
	         *                                                                                                            // 7038
	         * @return {string} The stringified cipher params.                                                            // 7039
	         *                                                                                                            // 7040
	         * @throws Error If neither the formatter nor the default formatter is set.                                   // 7041
	         *                                                                                                            // 7042
	         * @example                                                                                                   // 7043
	         *                                                                                                            // 7044
	         *     var string = cipherParams + '';                                                                        // 7045
	         *     var string = cipherParams.toString();                                                                  // 7046
	         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);                                           // 7047
	         */                                                                                                           // 7048
	        toString: function (formatter) {                                                                              // 7049
	            return (formatter || this.formatter).stringify(this);                                                     // 7050
	        }                                                                                                             // 7051
	    });                                                                                                               // 7052
                                                                                                                       // 7053
	    /**                                                                                                               // 7054
	     * Format namespace.                                                                                              // 7055
	     */                                                                                                               // 7056
	    var C_format = C.format = {};                                                                                     // 7057
                                                                                                                       // 7058
	    /**                                                                                                               // 7059
	     * OpenSSL formatting strategy.                                                                                   // 7060
	     */                                                                                                               // 7061
	    var OpenSSLFormatter = C_format.OpenSSL = {                                                                       // 7062
	        /**                                                                                                           // 7063
	         * Converts a cipher params object to an OpenSSL-compatible string.                                           // 7064
	         *                                                                                                            // 7065
	         * @param {CipherParams} cipherParams The cipher params object.                                               // 7066
	         *                                                                                                            // 7067
	         * @return {string} The OpenSSL-compatible string.                                                            // 7068
	         *                                                                                                            // 7069
	         * @static                                                                                                    // 7070
	         *                                                                                                            // 7071
	         * @example                                                                                                   // 7072
	         *                                                                                                            // 7073
	         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);                                   // 7074
	         */                                                                                                           // 7075
	        stringify: function (cipherParams) {                                                                          // 7076
	            // Shortcuts                                                                                              // 7077
	            var ciphertext = cipherParams.ciphertext;                                                                 // 7078
	            var salt = cipherParams.salt;                                                                             // 7079
                                                                                                                       // 7080
	            // Format                                                                                                 // 7081
	            if (salt) {                                                                                               // 7082
	                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);           // 7083
	            } else {                                                                                                  // 7084
	                var wordArray = ciphertext;                                                                           // 7085
	            }                                                                                                         // 7086
                                                                                                                       // 7087
	            return wordArray.toString(Base64);                                                                        // 7088
	        },                                                                                                            // 7089
                                                                                                                       // 7090
	        /**                                                                                                           // 7091
	         * Converts an OpenSSL-compatible string to a cipher params object.                                           // 7092
	         *                                                                                                            // 7093
	         * @param {string} openSSLStr The OpenSSL-compatible string.                                                  // 7094
	         *                                                                                                            // 7095
	         * @return {CipherParams} The cipher params object.                                                           // 7096
	         *                                                                                                            // 7097
	         * @static                                                                                                    // 7098
	         *                                                                                                            // 7099
	         * @example                                                                                                   // 7100
	         *                                                                                                            // 7101
	         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);                                       // 7102
	         */                                                                                                           // 7103
	        parse: function (openSSLStr) {                                                                                // 7104
	            // Parse base64                                                                                           // 7105
	            var ciphertext = Base64.parse(openSSLStr);                                                                // 7106
                                                                                                                       // 7107
	            // Shortcut                                                                                               // 7108
	            var ciphertextWords = ciphertext.words;                                                                   // 7109
                                                                                                                       // 7110
	            // Test for salt                                                                                          // 7111
	            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {                               // 7112
	                // Extract salt                                                                                       // 7113
	                var salt = WordArray.create(ciphertextWords.slice(2, 4));                                             // 7114
                                                                                                                       // 7115
	                // Remove salt from ciphertext                                                                        // 7116
	                ciphertextWords.splice(0, 4);                                                                         // 7117
	                ciphertext.sigBytes -= 16;                                                                            // 7118
	            }                                                                                                         // 7119
                                                                                                                       // 7120
	            return CipherParams.create({ ciphertext: ciphertext, salt: salt });                                       // 7121
	        }                                                                                                             // 7122
	    };                                                                                                                // 7123
                                                                                                                       // 7124
	    /**                                                                                                               // 7125
	     * A cipher wrapper that returns ciphertext as a serializable cipher params object.                               // 7126
	     */                                                                                                               // 7127
	    var SerializableCipher = C_lib.SerializableCipher = Base.extend({                                                 // 7128
	        /**                                                                                                           // 7129
	         * Configuration options.                                                                                     // 7130
	         *                                                                                                            // 7131
	         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
	         */                                                                                                           // 7133
	        cfg: Base.extend({                                                                                            // 7134
	            format: OpenSSLFormatter                                                                                  // 7135
	        }),                                                                                                           // 7136
                                                                                                                       // 7137
	        /**                                                                                                           // 7138
	         * Encrypts a message.                                                                                        // 7139
	         *                                                                                                            // 7140
	         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7141
	         * @param {WordArray|string} message The message to encrypt.                                                  // 7142
	         * @param {WordArray} key The key.                                                                            // 7143
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7144
	         *                                                                                                            // 7145
	         * @return {CipherParams} A cipher params object.                                                             // 7146
	         *                                                                                                            // 7147
	         * @static                                                                                                    // 7148
	         *                                                                                                            // 7149
	         * @example                                                                                                   // 7150
	         *                                                                                                            // 7151
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);       // 7152
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */                                                                                                           // 7155
	        encrypt: function (cipher, message, key, cfg) {                                                               // 7156
	            // Apply config defaults                                                                                  // 7157
	            cfg = this.cfg.extend(cfg);                                                                               // 7158
                                                                                                                       // 7159
	            // Encrypt                                                                                                // 7160
	            var encryptor = cipher.createEncryptor(key, cfg);                                                         // 7161
	            var ciphertext = encryptor.finalize(message);                                                             // 7162
                                                                                                                       // 7163
	            // Shortcut                                                                                               // 7164
	            var cipherCfg = encryptor.cfg;                                                                            // 7165
                                                                                                                       // 7166
	            // Create and return serializable cipher params                                                           // 7167
	            return CipherParams.create({                                                                              // 7168
	                ciphertext: ciphertext,                                                                               // 7169
	                key: key,                                                                                             // 7170
	                iv: cipherCfg.iv,                                                                                     // 7171
	                algorithm: cipher,                                                                                    // 7172
	                mode: cipherCfg.mode,                                                                                 // 7173
	                padding: cipherCfg.padding,                                                                           // 7174
	                blockSize: cipher.blockSize,                                                                          // 7175
	                formatter: cfg.format                                                                                 // 7176
	            });                                                                                                       // 7177
	        },                                                                                                            // 7178
                                                                                                                       // 7179
	        /**                                                                                                           // 7180
	         * Decrypts serialized ciphertext.                                                                            // 7181
	         *                                                                                                            // 7182
	         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7183
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.                                         // 7184
	         * @param {WordArray} key The key.                                                                            // 7185
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7186
	         *                                                                                                            // 7187
	         * @return {WordArray} The plaintext.                                                                         // 7188
	         *                                                                                                            // 7189
	         * @static                                                                                                    // 7190
	         *                                                                                                            // 7191
	         * @example                                                                                                   // 7192
	         *                                                                                                            // 7193
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */                                                                                                           // 7196
	        decrypt: function (cipher, ciphertext, key, cfg) {                                                            // 7197
	            // Apply config defaults                                                                                  // 7198
	            cfg = this.cfg.extend(cfg);                                                                               // 7199
                                                                                                                       // 7200
	            // Convert string to CipherParams                                                                         // 7201
	            ciphertext = this._parse(ciphertext, cfg.format);                                                         // 7202
                                                                                                                       // 7203
	            // Decrypt                                                                                                // 7204
	            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);                         // 7205
                                                                                                                       // 7206
	            return plaintext;                                                                                         // 7207
	        },                                                                                                            // 7208
                                                                                                                       // 7209
	        /**                                                                                                           // 7210
	         * Converts serialized ciphertext to CipherParams,                                                            // 7211
	         * else assumed CipherParams already and returns ciphertext unchanged.                                        // 7212
	         *                                                                                                            // 7213
	         * @param {CipherParams|string} ciphertext The ciphertext.                                                    // 7214
	         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.                   // 7215
	         *                                                                                                            // 7216
	         * @return {CipherParams} The unserialized ciphertext.                                                        // 7217
	         *                                                                                                            // 7218
	         * @static                                                                                                    // 7219
	         *                                                                                                            // 7220
	         * @example                                                                                                   // 7221
	         *                                                                                                            // 7222
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);       // 7223
	         */                                                                                                           // 7224
	        _parse: function (ciphertext, format) {                                                                       // 7225
	            if (typeof ciphertext == 'string') {                                                                      // 7226
	                return format.parse(ciphertext, this);                                                                // 7227
	            } else {                                                                                                  // 7228
	                return ciphertext;                                                                                    // 7229
	            }                                                                                                         // 7230
	        }                                                                                                             // 7231
	    });                                                                                                               // 7232
                                                                                                                       // 7233
	    /**                                                                                                               // 7234
	     * Key derivation function namespace.                                                                             // 7235
	     */                                                                                                               // 7236
	    var C_kdf = C.kdf = {};                                                                                           // 7237
                                                                                                                       // 7238
	    /**                                                                                                               // 7239
	     * OpenSSL key derivation function.                                                                               // 7240
	     */                                                                                                               // 7241
	    var OpenSSLKdf = C_kdf.OpenSSL = {                                                                                // 7242
	        /**                                                                                                           // 7243
	         * Derives a key and IV from a password.                                                                      // 7244
	         *                                                                                                            // 7245
	         * @param {string} password The password to derive from.                                                      // 7246
	         * @param {number} keySize The size in words of the key to generate.                                          // 7247
	         * @param {number} ivSize The size in words of the IV to generate.                                            // 7248
	         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
	         *                                                                                                            // 7250
	         * @return {CipherParams} A cipher params object with the key, IV, and salt.                                  // 7251
	         *                                                                                                            // 7252
	         * @static                                                                                                    // 7253
	         *                                                                                                            // 7254
	         * @example                                                                                                   // 7255
	         *                                                                                                            // 7256
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);                          // 7257
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');              // 7258
	         */                                                                                                           // 7259
	        execute: function (password, keySize, ivSize, salt) {                                                         // 7260
	            // Generate random salt                                                                                   // 7261
	            if (!salt) {                                                                                              // 7262
	                salt = WordArray.random(64/8);                                                                        // 7263
	            }                                                                                                         // 7264
                                                                                                                       // 7265
	            // Derive key and IV                                                                                      // 7266
	            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);                           // 7267
                                                                                                                       // 7268
	            // Separate key and IV                                                                                    // 7269
	            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);                                          // 7270
	            key.sigBytes = keySize * 4;                                                                               // 7271
                                                                                                                       // 7272
	            // Return params                                                                                          // 7273
	            return CipherParams.create({ key: key, iv: iv, salt: salt });                                             // 7274
	        }                                                                                                             // 7275
	    };                                                                                                                // 7276
                                                                                                                       // 7277
	    /**                                                                                                               // 7278
	     * A serializable cipher wrapper that derives the key from a password,                                            // 7279
	     * and returns ciphertext as a serializable cipher params object.                                                 // 7280
	     */                                                                                                               // 7281
	    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({                                 // 7282
	        /**                                                                                                           // 7283
	         * Configuration options.                                                                                     // 7284
	         *                                                                                                            // 7285
	         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
	         */                                                                                                           // 7287
	        cfg: SerializableCipher.cfg.extend({                                                                          // 7288
	            kdf: OpenSSLKdf                                                                                           // 7289
	        }),                                                                                                           // 7290
                                                                                                                       // 7291
	        /**                                                                                                           // 7292
	         * Encrypts a message using a password.                                                                       // 7293
	         *                                                                                                            // 7294
	         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7295
	         * @param {WordArray|string} message The message to encrypt.                                                  // 7296
	         * @param {string} password The password.                                                                     // 7297
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7298
	         *                                                                                                            // 7299
	         * @return {CipherParams} A cipher params object.                                                             // 7300
	         *                                                                                                            // 7301
	         * @static                                                                                                    // 7302
	         *                                                                                                            // 7303
	         * @example                                                                                                   // 7304
	         *                                                                                                            // 7305
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
	         */                                                                                                           // 7308
	        encrypt: function (cipher, message, password, cfg) {                                                          // 7309
	            // Apply config defaults                                                                                  // 7310
	            cfg = this.cfg.extend(cfg);                                                                               // 7311
                                                                                                                       // 7312
	            // Derive key and other params                                                                            // 7313
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);                             // 7314
                                                                                                                       // 7315
	            // Add IV to config                                                                                       // 7316
	            cfg.iv = derivedParams.iv;                                                                                // 7317
                                                                                                                       // 7318
	            // Encrypt                                                                                                // 7319
	            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);          // 7320
                                                                                                                       // 7321
	            // Mix in derived params                                                                                  // 7322
	            ciphertext.mixIn(derivedParams);                                                                          // 7323
                                                                                                                       // 7324
	            return ciphertext;                                                                                        // 7325
	        },                                                                                                            // 7326
                                                                                                                       // 7327
	        /**                                                                                                           // 7328
	         * Decrypts serialized ciphertext using a password.                                                           // 7329
	         *                                                                                                            // 7330
	         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7331
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.                                         // 7332
	         * @param {string} password The password.                                                                     // 7333
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7334
	         *                                                                                                            // 7335
	         * @return {WordArray} The plaintext.                                                                         // 7336
	         *                                                                                                            // 7337
	         * @static                                                                                                    // 7338
	         *                                                                                                            // 7339
	         * @example                                                                                                   // 7340
	         *                                                                                                            // 7341
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
	         */                                                                                                           // 7344
	        decrypt: function (cipher, ciphertext, password, cfg) {                                                       // 7345
	            // Apply config defaults                                                                                  // 7346
	            cfg = this.cfg.extend(cfg);                                                                               // 7347
                                                                                                                       // 7348
	            // Convert string to CipherParams                                                                         // 7349
	            ciphertext = this._parse(ciphertext, cfg.format);                                                         // 7350
                                                                                                                       // 7351
	            // Derive key and other params                                                                            // 7352
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);            // 7353
                                                                                                                       // 7354
	            // Add IV to config                                                                                       // 7355
	            cfg.iv = derivedParams.iv;                                                                                // 7356
                                                                                                                       // 7357
	            // Decrypt                                                                                                // 7358
	            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);        // 7359
                                                                                                                       // 7360
	            return plaintext;                                                                                         // 7361
	        }                                                                                                             // 7362
	    });                                                                                                               // 7363
	}());                                                                                                                 // 7364
                                                                                                                       // 7365
                                                                                                                       // 7366
}));                                                                                                                   // 7367
},{"./core":51}],51:[function(require,module,exports){                                                                 // 7368
;(function (root, factory) {                                                                                           // 7369
	if (typeof exports === "object") {                                                                                    // 7370
		// CommonJS                                                                                                          // 7371
		module.exports = exports = factory();                                                                                // 7372
	}                                                                                                                     // 7373
	else if (typeof define === "function" && define.amd) {                                                                // 7374
		// AMD                                                                                                               // 7375
		define([], factory);                                                                                                 // 7376
	}                                                                                                                     // 7377
	else {                                                                                                                // 7378
		// Global (browser)                                                                                                  // 7379
		root.CryptoJS = factory();                                                                                           // 7380
	}                                                                                                                     // 7381
}(this, function () {                                                                                                  // 7382
                                                                                                                       // 7383
	/**                                                                                                                   // 7384
	 * CryptoJS core components.                                                                                          // 7385
	 */                                                                                                                   // 7386
	var CryptoJS = CryptoJS || (function (Math, undefined) {                                                              // 7387
	    /**                                                                                                               // 7388
	     * CryptoJS namespace.                                                                                            // 7389
	     */                                                                                                               // 7390
	    var C = {};                                                                                                       // 7391
                                                                                                                       // 7392
	    /**                                                                                                               // 7393
	     * Library namespace.                                                                                             // 7394
	     */                                                                                                               // 7395
	    var C_lib = C.lib = {};                                                                                           // 7396
                                                                                                                       // 7397
	    /**                                                                                                               // 7398
	     * Base object for prototypal inheritance.                                                                        // 7399
	     */                                                                                                               // 7400
	    var Base = C_lib.Base = (function () {                                                                            // 7401
	        function F() {}                                                                                               // 7402
                                                                                                                       // 7403
	        return {                                                                                                      // 7404
	            /**                                                                                                       // 7405
	             * Creates a new object that inherits from this object.                                                   // 7406
	             *                                                                                                        // 7407
	             * @param {Object} overrides Properties to copy into the new object.                                      // 7408
	             *                                                                                                        // 7409
	             * @return {Object} The new object.                                                                       // 7410
	             *                                                                                                        // 7411
	             * @static                                                                                                // 7412
	             *                                                                                                        // 7413
	             * @example                                                                                               // 7414
	             *                                                                                                        // 7415
	             *     var MyType = CryptoJS.lib.Base.extend({                                                            // 7416
	             *         field: 'value',                                                                                // 7417
	             *                                                                                                        // 7418
	             *         method: function () {                                                                          // 7419
	             *         }                                                                                              // 7420
	             *     });                                                                                                // 7421
	             */                                                                                                       // 7422
	            extend: function (overrides) {                                                                            // 7423
	                // Spawn                                                                                              // 7424
	                F.prototype = this;                                                                                   // 7425
	                var subtype = new F();                                                                                // 7426
                                                                                                                       // 7427
	                // Augment                                                                                            // 7428
	                if (overrides) {                                                                                      // 7429
	                    subtype.mixIn(overrides);                                                                         // 7430
	                }                                                                                                     // 7431
                                                                                                                       // 7432
	                // Create default initializer                                                                         // 7433
	                if (!subtype.hasOwnProperty('init')) {                                                                // 7434
	                    subtype.init = function () {                                                                      // 7435
	                        subtype.$super.init.apply(this, arguments);                                                   // 7436
	                    };                                                                                                // 7437
	                }                                                                                                     // 7438
                                                                                                                       // 7439
	                // Initializer's prototype is the subtype object                                                      // 7440
	                subtype.init.prototype = subtype;                                                                     // 7441
                                                                                                                       // 7442
	                // Reference supertype                                                                                // 7443
	                subtype.$super = this;                                                                                // 7444
                                                                                                                       // 7445
	                return subtype;                                                                                       // 7446
	            },                                                                                                        // 7447
                                                                                                                       // 7448
	            /**                                                                                                       // 7449
	             * Extends this object and runs the init method.                                                          // 7450
	             * Arguments to create() will be passed to init().                                                        // 7451
	             *                                                                                                        // 7452
	             * @return {Object} The new object.                                                                       // 7453
	             *                                                                                                        // 7454
	             * @static                                                                                                // 7455
	             *                                                                                                        // 7456
	             * @example                                                                                               // 7457
	             *                                                                                                        // 7458
	             *     var instance = MyType.create();                                                                    // 7459
	             */                                                                                                       // 7460
	            create: function () {                                                                                     // 7461
	                var instance = this.extend();                                                                         // 7462
	                instance.init.apply(instance, arguments);                                                             // 7463
                                                                                                                       // 7464
	                return instance;                                                                                      // 7465
	            },                                                                                                        // 7466
                                                                                                                       // 7467
	            /**                                                                                                       // 7468
	             * Initializes a newly created object.                                                                    // 7469
	             * Override this method to add some logic when your objects are created.                                  // 7470
	             *                                                                                                        // 7471
	             * @example                                                                                               // 7472
	             *                                                                                                        // 7473
	             *     var MyType = CryptoJS.lib.Base.extend({                                                            // 7474
	             *         init: function () {                                                                            // 7475
	             *             // ...                                                                                     // 7476
	             *         }                                                                                              // 7477
	             *     });                                                                                                // 7478
	             */                                                                                                       // 7479
	            init: function () {                                                                                       // 7480
	            },                                                                                                        // 7481
                                                                                                                       // 7482
	            /**                                                                                                       // 7483
	             * Copies properties into this object.                                                                    // 7484
	             *                                                                                                        // 7485
	             * @param {Object} properties The properties to mix in.                                                   // 7486
	             *                                                                                                        // 7487
	             * @example                                                                                               // 7488
	             *                                                                                                        // 7489
	             *     MyType.mixIn({                                                                                     // 7490
	             *         field: 'value'                                                                                 // 7491
	             *     });                                                                                                // 7492
	             */                                                                                                       // 7493
	            mixIn: function (properties) {                                                                            // 7494
	                for (var propertyName in properties) {                                                                // 7495
	                    if (properties.hasOwnProperty(propertyName)) {                                                    // 7496
	                        this[propertyName] = properties[propertyName];                                                // 7497
	                    }                                                                                                 // 7498
	                }                                                                                                     // 7499
                                                                                                                       // 7500
	                // IE won't copy toString using the loop above                                                        // 7501
	                if (properties.hasOwnProperty('toString')) {                                                          // 7502
	                    this.toString = properties.toString;                                                              // 7503
	                }                                                                                                     // 7504
	            },                                                                                                        // 7505
                                                                                                                       // 7506
	            /**                                                                                                       // 7507
	             * Creates a copy of this object.                                                                         // 7508
	             *                                                                                                        // 7509
	             * @return {Object} The clone.                                                                            // 7510
	             *                                                                                                        // 7511
	             * @example                                                                                               // 7512
	             *                                                                                                        // 7513
	             *     var clone = instance.clone();                                                                      // 7514
	             */                                                                                                       // 7515
	            clone: function () {                                                                                      // 7516
	                return this.init.prototype.extend(this);                                                              // 7517
	            }                                                                                                         // 7518
	        };                                                                                                            // 7519
	    }());                                                                                                             // 7520
                                                                                                                       // 7521
	    /**                                                                                                               // 7522
	     * An array of 32-bit words.                                                                                      // 7523
	     *                                                                                                                // 7524
	     * @property {Array} words The array of 32-bit words.                                                             // 7525
	     * @property {number} sigBytes The number of significant bytes in this word array.                                // 7526
	     */                                                                                                               // 7527
	    var WordArray = C_lib.WordArray = Base.extend({                                                                   // 7528
	        /**                                                                                                           // 7529
	         * Initializes a newly created word array.                                                                    // 7530
	         *                                                                                                            // 7531
	         * @param {Array} words (Optional) An array of 32-bit words.                                                  // 7532
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.                          // 7533
	         *                                                                                                            // 7534
	         * @example                                                                                                   // 7535
	         *                                                                                                            // 7536
	         *     var wordArray = CryptoJS.lib.WordArray.create();                                                       // 7537
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);                               // 7538
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);                            // 7539
	         */                                                                                                           // 7540
	        init: function (words, sigBytes) {                                                                            // 7541
	            words = this.words = words || [];                                                                         // 7542
                                                                                                                       // 7543
	            if (sigBytes != undefined) {                                                                              // 7544
	                this.sigBytes = sigBytes;                                                                             // 7545
	            } else {                                                                                                  // 7546
	                this.sigBytes = words.length * 4;                                                                     // 7547
	            }                                                                                                         // 7548
	        },                                                                                                            // 7549
                                                                                                                       // 7550
	        /**                                                                                                           // 7551
	         * Converts this word array to a string.                                                                      // 7552
	         *                                                                                                            // 7553
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex                // 7554
	         *                                                                                                            // 7555
	         * @return {string} The stringified word array.                                                               // 7556
	         *                                                                                                            // 7557
	         * @example                                                                                                   // 7558
	         *                                                                                                            // 7559
	         *     var string = wordArray + '';                                                                           // 7560
	         *     var string = wordArray.toString();                                                                     // 7561
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);                                                    // 7562
	         */                                                                                                           // 7563
	        toString: function (encoder) {                                                                                // 7564
	            return (encoder || Hex).stringify(this);                                                                  // 7565
	        },                                                                                                            // 7566
                                                                                                                       // 7567
	        /**                                                                                                           // 7568
	         * Concatenates a word array to this word array.                                                              // 7569
	         *                                                                                                            // 7570
	         * @param {WordArray} wordArray The word array to append.                                                     // 7571
	         *                                                                                                            // 7572
	         * @return {WordArray} This word array.                                                                       // 7573
	         *                                                                                                            // 7574
	         * @example                                                                                                   // 7575
	         *                                                                                                            // 7576
	         *     wordArray1.concat(wordArray2);                                                                         // 7577
	         */                                                                                                           // 7578
	        concat: function (wordArray) {                                                                                // 7579
	            // Shortcuts                                                                                              // 7580
	            var thisWords = this.words;                                                                               // 7581
	            var thatWords = wordArray.words;                                                                          // 7582
	            var thisSigBytes = this.sigBytes;                                                                         // 7583
	            var thatSigBytes = wordArray.sigBytes;                                                                    // 7584
                                                                                                                       // 7585
	            // Clamp excess bits                                                                                      // 7586
	            this.clamp();                                                                                             // 7587
                                                                                                                       // 7588
	            // Concat                                                                                                 // 7589
	            if (thisSigBytes % 4) {                                                                                   // 7590
	                // Copy one byte at a time                                                                            // 7591
	                for (var i = 0; i < thatSigBytes; i++) {                                                              // 7592
	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                // 7593
	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);           // 7594
	                }                                                                                                     // 7595
	            } else {                                                                                                  // 7596
	                // Copy one word at a time                                                                            // 7597
	                for (var i = 0; i < thatSigBytes; i += 4) {                                                           // 7598
	                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];                                         // 7599
	                }                                                                                                     // 7600
	            }                                                                                                         // 7601
	            this.sigBytes += thatSigBytes;                                                                            // 7602
                                                                                                                       // 7603
	            // Chainable                                                                                              // 7604
	            return this;                                                                                              // 7605
	        },                                                                                                            // 7606
                                                                                                                       // 7607
	        /**                                                                                                           // 7608
	         * Removes insignificant bits.                                                                                // 7609
	         *                                                                                                            // 7610
	         * @example                                                                                                   // 7611
	         *                                                                                                            // 7612
	         *     wordArray.clamp();                                                                                     // 7613
	         */                                                                                                           // 7614
	        clamp: function () {                                                                                          // 7615
	            // Shortcuts                                                                                              // 7616
	            var words = this.words;                                                                                   // 7617
	            var sigBytes = this.sigBytes;                                                                             // 7618
                                                                                                                       // 7619
	            // Clamp                                                                                                  // 7620
	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);                                         // 7621
	            words.length = Math.ceil(sigBytes / 4);                                                                   // 7622
	        },                                                                                                            // 7623
                                                                                                                       // 7624
	        /**                                                                                                           // 7625
	         * Creates a copy of this word array.                                                                         // 7626
	         *                                                                                                            // 7627
	         * @return {WordArray} The clone.                                                                             // 7628
	         *                                                                                                            // 7629
	         * @example                                                                                                   // 7630
	         *                                                                                                            // 7631
	         *     var clone = wordArray.clone();                                                                         // 7632
	         */                                                                                                           // 7633
	        clone: function () {                                                                                          // 7634
	            var clone = Base.clone.call(this);                                                                        // 7635
	            clone.words = this.words.slice(0);                                                                        // 7636
                                                                                                                       // 7637
	            return clone;                                                                                             // 7638
	        },                                                                                                            // 7639
                                                                                                                       // 7640
	        /**                                                                                                           // 7641
	         * Creates a word array filled with random bytes.                                                             // 7642
	         *                                                                                                            // 7643
	         * @param {number} nBytes The number of random bytes to generate.                                             // 7644
	         *                                                                                                            // 7645
	         * @return {WordArray} The random word array.                                                                 // 7646
	         *                                                                                                            // 7647
	         * @static                                                                                                    // 7648
	         *                                                                                                            // 7649
	         * @example                                                                                                   // 7650
	         *                                                                                                            // 7651
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);                                                     // 7652
	         */                                                                                                           // 7653
	        random: function (nBytes) {                                                                                   // 7654
	            var words = [];                                                                                           // 7655
                                                                                                                       // 7656
	            var r = (function (m_w) {                                                                                 // 7657
	                var m_w = m_w;                                                                                        // 7658
	                var m_z = 0x3ade68b1;                                                                                 // 7659
	                var mask = 0xffffffff;                                                                                // 7660
                                                                                                                       // 7661
	                return function () {                                                                                  // 7662
	                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;                                           // 7663
	                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;                                           // 7664
	                    var result = ((m_z << 0x10) + m_w) & mask;                                                        // 7665
	                    result /= 0x100000000;                                                                            // 7666
	                    result += 0.5;                                                                                    // 7667
	                    return result * (Math.random() > .5 ? 1 : -1);                                                    // 7668
	                }                                                                                                     // 7669
	            });                                                                                                       // 7670
                                                                                                                       // 7671
	            for (var i = 0, rcache; i < nBytes; i += 4) {                                                             // 7672
	                var _r = r((rcache || Math.random()) * 0x100000000);                                                  // 7673
                                                                                                                       // 7674
	                rcache = _r() * 0x3ade67b7;                                                                           // 7675
	                words.push((_r() * 0x100000000) | 0);                                                                 // 7676
	            }                                                                                                         // 7677
                                                                                                                       // 7678
	            return new WordArray.init(words, nBytes);                                                                 // 7679
	        }                                                                                                             // 7680
	    });                                                                                                               // 7681
                                                                                                                       // 7682
	    /**                                                                                                               // 7683
	     * Encoder namespace.                                                                                             // 7684
	     */                                                                                                               // 7685
	    var C_enc = C.enc = {};                                                                                           // 7686
                                                                                                                       // 7687
	    /**                                                                                                               // 7688
	     * Hex encoding strategy.                                                                                         // 7689
	     */                                                                                                               // 7690
	    var Hex = C_enc.Hex = {                                                                                           // 7691
	        /**                                                                                                           // 7692
	         * Converts a word array to a hex string.                                                                     // 7693
	         *                                                                                                            // 7694
	         * @param {WordArray} wordArray The word array.                                                               // 7695
	         *                                                                                                            // 7696
	         * @return {string} The hex string.                                                                           // 7697
	         *                                                                                                            // 7698
	         * @static                                                                                                    // 7699
	         *                                                                                                            // 7700
	         * @example                                                                                                   // 7701
	         *                                                                                                            // 7702
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);                                                 // 7703
	         */                                                                                                           // 7704
	        stringify: function (wordArray) {                                                                             // 7705
	            // Shortcuts                                                                                              // 7706
	            var words = wordArray.words;                                                                              // 7707
	            var sigBytes = wordArray.sigBytes;                                                                        // 7708
                                                                                                                       // 7709
	            // Convert                                                                                                // 7710
	            var hexChars = [];                                                                                        // 7711
	            for (var i = 0; i < sigBytes; i++) {                                                                      // 7712
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                            // 7713
	                hexChars.push((bite >>> 4).toString(16));                                                             // 7714
	                hexChars.push((bite & 0x0f).toString(16));                                                            // 7715
	            }                                                                                                         // 7716
                                                                                                                       // 7717
	            return hexChars.join('');                                                                                 // 7718
	        },                                                                                                            // 7719
                                                                                                                       // 7720
	        /**                                                                                                           // 7721
	         * Converts a hex string to a word array.                                                                     // 7722
	         *                                                                                                            // 7723
	         * @param {string} hexStr The hex string.                                                                     // 7724
	         *                                                                                                            // 7725
	         * @return {WordArray} The word array.                                                                        // 7726
	         *                                                                                                            // 7727
	         * @static                                                                                                    // 7728
	         *                                                                                                            // 7729
	         * @example                                                                                                   // 7730
	         *                                                                                                            // 7731
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);                                                     // 7732
	         */                                                                                                           // 7733
	        parse: function (hexStr) {                                                                                    // 7734
	            // Shortcut                                                                                               // 7735
	            var hexStrLength = hexStr.length;                                                                         // 7736
                                                                                                                       // 7737
	            // Convert                                                                                                // 7738
	            var words = [];                                                                                           // 7739
	            for (var i = 0; i < hexStrLength; i += 2) {                                                               // 7740
	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);                            // 7741
	            }                                                                                                         // 7742
                                                                                                                       // 7743
	            return new WordArray.init(words, hexStrLength / 2);                                                       // 7744
	        }                                                                                                             // 7745
	    };                                                                                                                // 7746
                                                                                                                       // 7747
	    /**                                                                                                               // 7748
	     * Latin1 encoding strategy.                                                                                      // 7749
	     */                                                                                                               // 7750
	    var Latin1 = C_enc.Latin1 = {                                                                                     // 7751
	        /**                                                                                                           // 7752
	         * Converts a word array to a Latin1 string.                                                                  // 7753
	         *                                                                                                            // 7754
	         * @param {WordArray} wordArray The word array.                                                               // 7755
	         *                                                                                                            // 7756
	         * @return {string} The Latin1 string.                                                                        // 7757
	         *                                                                                                            // 7758
	         * @static                                                                                                    // 7759
	         *                                                                                                            // 7760
	         * @example                                                                                                   // 7761
	         *                                                                                                            // 7762
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);                                           // 7763
	         */                                                                                                           // 7764
	        stringify: function (wordArray) {                                                                             // 7765
	            // Shortcuts                                                                                              // 7766
	            var words = wordArray.words;                                                                              // 7767
	            var sigBytes = wordArray.sigBytes;                                                                        // 7768
                                                                                                                       // 7769
	            // Convert                                                                                                // 7770
	            var latin1Chars = [];                                                                                     // 7771
	            for (var i = 0; i < sigBytes; i++) {                                                                      // 7772
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                            // 7773
	                latin1Chars.push(String.fromCharCode(bite));                                                          // 7774
	            }                                                                                                         // 7775
                                                                                                                       // 7776
	            return latin1Chars.join('');                                                                              // 7777
	        },                                                                                                            // 7778
                                                                                                                       // 7779
	        /**                                                                                                           // 7780
	         * Converts a Latin1 string to a word array.                                                                  // 7781
	         *                                                                                                            // 7782
	         * @param {string} latin1Str The Latin1 string.                                                               // 7783
	         *                                                                                                            // 7784
	         * @return {WordArray} The word array.                                                                        // 7785
	         *                                                                                                            // 7786
	         * @static                                                                                                    // 7787
	         *                                                                                                            // 7788
	         * @example                                                                                                   // 7789
	         *                                                                                                            // 7790
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);                                               // 7791
	         */                                                                                                           // 7792
	        parse: function (latin1Str) {                                                                                 // 7793
	            // Shortcut                                                                                               // 7794
	            var latin1StrLength = latin1Str.length;                                                                   // 7795
                                                                                                                       // 7796
	            // Convert                                                                                                // 7797
	            var words = [];                                                                                           // 7798
	            for (var i = 0; i < latin1StrLength; i++) {                                                               // 7799
	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);                             // 7800
	            }                                                                                                         // 7801
                                                                                                                       // 7802
	            return new WordArray.init(words, latin1StrLength);                                                        // 7803
	        }                                                                                                             // 7804
	    };                                                                                                                // 7805
                                                                                                                       // 7806
	    /**                                                                                                               // 7807
	     * UTF-8 encoding strategy.                                                                                       // 7808
	     */                                                                                                               // 7809
	    var Utf8 = C_enc.Utf8 = {                                                                                         // 7810
	        /**                                                                                                           // 7811
	         * Converts a word array to a UTF-8 string.                                                                   // 7812
	         *                                                                                                            // 7813
	         * @param {WordArray} wordArray The word array.                                                               // 7814
	         *                                                                                                            // 7815
	         * @return {string} The UTF-8 string.                                                                         // 7816
	         *                                                                                                            // 7817
	         * @static                                                                                                    // 7818
	         *                                                                                                            // 7819
	         * @example                                                                                                   // 7820
	         *                                                                                                            // 7821
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);                                               // 7822
	         */                                                                                                           // 7823
	        stringify: function (wordArray) {                                                                             // 7824
	            try {                                                                                                     // 7825
	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));                                       // 7826
	            } catch (e) {                                                                                             // 7827
	                throw new Error('Malformed UTF-8 data');                                                              // 7828
	            }                                                                                                         // 7829
	        },                                                                                                            // 7830
                                                                                                                       // 7831
	        /**                                                                                                           // 7832
	         * Converts a UTF-8 string to a word array.                                                                   // 7833
	         *                                                                                                            // 7834
	         * @param {string} utf8Str The UTF-8 string.                                                                  // 7835
	         *                                                                                                            // 7836
	         * @return {WordArray} The word array.                                                                        // 7837
	         *                                                                                                            // 7838
	         * @static                                                                                                    // 7839
	         *                                                                                                            // 7840
	         * @example                                                                                                   // 7841
	         *                                                                                                            // 7842
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);                                                   // 7843
	         */                                                                                                           // 7844
	        parse: function (utf8Str) {                                                                                   // 7845
	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));                                               // 7846
	        }                                                                                                             // 7847
	    };                                                                                                                // 7848
                                                                                                                       // 7849
	    /**                                                                                                               // 7850
	     * Abstract buffered block algorithm template.                                                                    // 7851
	     *                                                                                                                // 7852
	     * The property blockSize must be implemented in a concrete subtype.                                              // 7853
	     *                                                                                                                // 7854
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */                                                                                                               // 7856
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({                                         // 7857
	        /**                                                                                                           // 7858
	         * Resets this block algorithm's data buffer to its initial state.                                            // 7859
	         *                                                                                                            // 7860
	         * @example                                                                                                   // 7861
	         *                                                                                                            // 7862
	         *     bufferedBlockAlgorithm.reset();                                                                        // 7863
	         */                                                                                                           // 7864
	        reset: function () {                                                                                          // 7865
	            // Initial values                                                                                         // 7866
	            this._data = new WordArray.init();                                                                        // 7867
	            this._nDataBytes = 0;                                                                                     // 7868
	        },                                                                                                            // 7869
                                                                                                                       // 7870
	        /**                                                                                                           // 7871
	         * Adds new data to this block algorithm's buffer.                                                            // 7872
	         *                                                                                                            // 7873
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.       // 7874
	         *                                                                                                            // 7875
	         * @example                                                                                                   // 7876
	         *                                                                                                            // 7877
	         *     bufferedBlockAlgorithm._append('data');                                                                // 7878
	         *     bufferedBlockAlgorithm._append(wordArray);                                                             // 7879
	         */                                                                                                           // 7880
	        _append: function (data) {                                                                                    // 7881
	            // Convert string to WordArray, else assume WordArray already                                             // 7882
	            if (typeof data == 'string') {                                                                            // 7883
	                data = Utf8.parse(data);                                                                              // 7884
	            }                                                                                                         // 7885
                                                                                                                       // 7886
	            // Append                                                                                                 // 7887
	            this._data.concat(data);                                                                                  // 7888
	            this._nDataBytes += data.sigBytes;                                                                        // 7889
	        },                                                                                                            // 7890
                                                                                                                       // 7891
	        /**                                                                                                           // 7892
	         * Processes available data blocks.                                                                           // 7893
	         *                                                                                                            // 7894
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.              // 7895
	         *                                                                                                            // 7896
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.                        // 7897
	         *                                                                                                            // 7898
	         * @return {WordArray} The processed data.                                                                    // 7899
	         *                                                                                                            // 7900
	         * @example                                                                                                   // 7901
	         *                                                                                                            // 7902
	         *     var processedData = bufferedBlockAlgorithm._process();                                                 // 7903
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');                                        // 7904
	         */                                                                                                           // 7905
	        _process: function (doFlush) {                                                                                // 7906
	            // Shortcuts                                                                                              // 7907
	            var data = this._data;                                                                                    // 7908
	            var dataWords = data.words;                                                                               // 7909
	            var dataSigBytes = data.sigBytes;                                                                         // 7910
	            var blockSize = this.blockSize;                                                                           // 7911
	            var blockSizeBytes = blockSize * 4;                                                                       // 7912
                                                                                                                       // 7913
	            // Count blocks ready                                                                                     // 7914
	            var nBlocksReady = dataSigBytes / blockSizeBytes;                                                         // 7915
	            if (doFlush) {                                                                                            // 7916
	                // Round up to include partial blocks                                                                 // 7917
	                nBlocksReady = Math.ceil(nBlocksReady);                                                               // 7918
	            } else {                                                                                                  // 7919
	                // Round down to include only full blocks,                                                            // 7920
	                // less the number of blocks that must remain in the buffer                                           // 7921
	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);                                 // 7922
	            }                                                                                                         // 7923
                                                                                                                       // 7924
	            // Count words ready                                                                                      // 7925
	            var nWordsReady = nBlocksReady * blockSize;                                                               // 7926
                                                                                                                       // 7927
	            // Count bytes ready                                                                                      // 7928
	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);                                                // 7929
                                                                                                                       // 7930
	            // Process blocks                                                                                         // 7931
	            if (nWordsReady) {                                                                                        // 7932
	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {                                     // 7933
	                    // Perform concrete-algorithm logic                                                               // 7934
	                    this._doProcessBlock(dataWords, offset);                                                          // 7935
	                }                                                                                                     // 7936
                                                                                                                       // 7937
	                // Remove processed words                                                                             // 7938
	                var processedWords = dataWords.splice(0, nWordsReady);                                                // 7939
	                data.sigBytes -= nBytesReady;                                                                         // 7940
	            }                                                                                                         // 7941
                                                                                                                       // 7942
	            // Return processed words                                                                                 // 7943
	            return new WordArray.init(processedWords, nBytesReady);                                                   // 7944
	        },                                                                                                            // 7945
                                                                                                                       // 7946
	        /**                                                                                                           // 7947
	         * Creates a copy of this object.                                                                             // 7948
	         *                                                                                                            // 7949
	         * @return {Object} The clone.                                                                                // 7950
	         *                                                                                                            // 7951
	         * @example                                                                                                   // 7952
	         *                                                                                                            // 7953
	         *     var clone = bufferedBlockAlgorithm.clone();                                                            // 7954
	         */                                                                                                           // 7955
	        clone: function () {                                                                                          // 7956
	            var clone = Base.clone.call(this);                                                                        // 7957
	            clone._data = this._data.clone();                                                                         // 7958
                                                                                                                       // 7959
	            return clone;                                                                                             // 7960
	        },                                                                                                            // 7961
                                                                                                                       // 7962
	        _minBufferSize: 0                                                                                             // 7963
	    });                                                                                                               // 7964
                                                                                                                       // 7965
	    /**                                                                                                               // 7966
	     * Abstract hasher template.                                                                                      // 7967
	     *                                                                                                                // 7968
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)        // 7969
	     */                                                                                                               // 7970
	    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({                                                       // 7971
	        /**                                                                                                           // 7972
	         * Configuration options.                                                                                     // 7973
	         */                                                                                                           // 7974
	        cfg: Base.extend(),                                                                                           // 7975
                                                                                                                       // 7976
	        /**                                                                                                           // 7977
	         * Initializes a newly created hasher.                                                                        // 7978
	         *                                                                                                            // 7979
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.                 // 7980
	         *                                                                                                            // 7981
	         * @example                                                                                                   // 7982
	         *                                                                                                            // 7983
	         *     var hasher = CryptoJS.algo.SHA256.create();                                                            // 7984
	         */                                                                                                           // 7985
	        init: function (cfg) {                                                                                        // 7986
	            // Apply config defaults                                                                                  // 7987
	            this.cfg = this.cfg.extend(cfg);                                                                          // 7988
                                                                                                                       // 7989
	            // Set initial values                                                                                     // 7990
	            this.reset();                                                                                             // 7991
	        },                                                                                                            // 7992
                                                                                                                       // 7993
	        /**                                                                                                           // 7994
	         * Resets this hasher to its initial state.                                                                   // 7995
	         *                                                                                                            // 7996
	         * @example                                                                                                   // 7997
	         *                                                                                                            // 7998
	         *     hasher.reset();                                                                                        // 7999
	         */                                                                                                           // 8000
	        reset: function () {                                                                                          // 8001
	            // Reset data buffer                                                                                      // 8002
	            BufferedBlockAlgorithm.reset.call(this);                                                                  // 8003
                                                                                                                       // 8004
	            // Perform concrete-hasher logic                                                                          // 8005
	            this._doReset();                                                                                          // 8006
	        },                                                                                                            // 8007
                                                                                                                       // 8008
	        /**                                                                                                           // 8009
	         * Updates this hasher with a message.                                                                        // 8010
	         *                                                                                                            // 8011
	         * @param {WordArray|string} messageUpdate The message to append.                                             // 8012
	         *                                                                                                            // 8013
	         * @return {Hasher} This hasher.                                                                              // 8014
	         *                                                                                                            // 8015
	         * @example                                                                                                   // 8016
	         *                                                                                                            // 8017
	         *     hasher.update('message');                                                                              // 8018
	         *     hasher.update(wordArray);                                                                              // 8019
	         */                                                                                                           // 8020
	        update: function (messageUpdate) {                                                                            // 8021
	            // Append                                                                                                 // 8022
	            this._append(messageUpdate);                                                                              // 8023
                                                                                                                       // 8024
	            // Update the hash                                                                                        // 8025
	            this._process();                                                                                          // 8026
                                                                                                                       // 8027
	            // Chainable                                                                                              // 8028
	            return this;                                                                                              // 8029
	        },                                                                                                            // 8030
                                                                                                                       // 8031
	        /**                                                                                                           // 8032
	         * Finalizes the hash computation.                                                                            // 8033
	         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 8034
	         *                                                                                                            // 8035
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.                                 // 8036
	         *                                                                                                            // 8037
	         * @return {WordArray} The hash.                                                                              // 8038
	         *                                                                                                            // 8039
	         * @example                                                                                                   // 8040
	         *                                                                                                            // 8041
	         *     var hash = hasher.finalize();                                                                          // 8042
	         *     var hash = hasher.finalize('message');                                                                 // 8043
	         *     var hash = hasher.finalize(wordArray);                                                                 // 8044
	         */                                                                                                           // 8045
	        finalize: function (messageUpdate) {                                                                          // 8046
	            // Final message update                                                                                   // 8047
	            if (messageUpdate) {                                                                                      // 8048
	                this._append(messageUpdate);                                                                          // 8049
	            }                                                                                                         // 8050
                                                                                                                       // 8051
	            // Perform concrete-hasher logic                                                                          // 8052
	            var hash = this._doFinalize();                                                                            // 8053
                                                                                                                       // 8054
	            return hash;                                                                                              // 8055
	        },                                                                                                            // 8056
                                                                                                                       // 8057
	        blockSize: 512/32,                                                                                            // 8058
                                                                                                                       // 8059
	        /**                                                                                                           // 8060
	         * Creates a shortcut function to a hasher's object interface.                                                // 8061
	         *                                                                                                            // 8062
	         * @param {Hasher} hasher The hasher to create a helper for.                                                  // 8063
	         *                                                                                                            // 8064
	         * @return {Function} The shortcut function.                                                                  // 8065
	         *                                                                                                            // 8066
	         * @static                                                                                                    // 8067
	         *                                                                                                            // 8068
	         * @example                                                                                                   // 8069
	         *                                                                                                            // 8070
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);                                  // 8071
	         */                                                                                                           // 8072
	        _createHelper: function (hasher) {                                                                            // 8073
	            return function (message, cfg) {                                                                          // 8074
	                return new hasher.init(cfg).finalize(message);                                                        // 8075
	            };                                                                                                        // 8076
	        },                                                                                                            // 8077
                                                                                                                       // 8078
	        /**                                                                                                           // 8079
	         * Creates a shortcut function to the HMAC's object interface.                                                // 8080
	         *                                                                                                            // 8081
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.                                              // 8082
	         *                                                                                                            // 8083
	         * @return {Function} The shortcut function.                                                                  // 8084
	         *                                                                                                            // 8085
	         * @static                                                                                                    // 8086
	         *                                                                                                            // 8087
	         * @example                                                                                                   // 8088
	         *                                                                                                            // 8089
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);                          // 8090
	         */                                                                                                           // 8091
	        _createHmacHelper: function (hasher) {                                                                        // 8092
	            return function (message, key) {                                                                          // 8093
	                return new C_algo.HMAC.init(hasher, key).finalize(message);                                           // 8094
	            };                                                                                                        // 8095
	        }                                                                                                             // 8096
	    });                                                                                                               // 8097
                                                                                                                       // 8098
	    /**                                                                                                               // 8099
	     * Algorithm namespace.                                                                                           // 8100
	     */                                                                                                               // 8101
	    var C_algo = C.algo = {};                                                                                         // 8102
                                                                                                                       // 8103
	    return C;                                                                                                         // 8104
	}(Math));                                                                                                             // 8105
                                                                                                                       // 8106
                                                                                                                       // 8107
	return CryptoJS;                                                                                                      // 8108
                                                                                                                       // 8109
}));                                                                                                                   // 8110
},{}],52:[function(require,module,exports){                                                                            // 8111
;(function (root, factory) {                                                                                           // 8112
	if (typeof exports === "object") {                                                                                    // 8113
		// CommonJS                                                                                                          // 8114
		module.exports = exports = factory(require("./core"));                                                               // 8115
	}                                                                                                                     // 8116
	else if (typeof define === "function" && define.amd) {                                                                // 8117
		// AMD                                                                                                               // 8118
		define(["./core"], factory);                                                                                         // 8119
	}                                                                                                                     // 8120
	else {                                                                                                                // 8121
		// Global (browser)                                                                                                  // 8122
		factory(root.CryptoJS);                                                                                              // 8123
	}                                                                                                                     // 8124
}(this, function (CryptoJS) {                                                                                          // 8125
                                                                                                                       // 8126
	(function () {                                                                                                        // 8127
	    // Shortcuts                                                                                                      // 8128
	    var C = CryptoJS;                                                                                                 // 8129
	    var C_lib = C.lib;                                                                                                // 8130
	    var WordArray = C_lib.WordArray;                                                                                  // 8131
	    var C_enc = C.enc;                                                                                                // 8132
                                                                                                                       // 8133
	    /**                                                                                                               // 8134
	     * Base64 encoding strategy.                                                                                      // 8135
	     */                                                                                                               // 8136
	    var Base64 = C_enc.Base64 = {                                                                                     // 8137
	        /**                                                                                                           // 8138
	         * Converts a word array to a Base64 string.                                                                  // 8139
	         *                                                                                                            // 8140
	         * @param {WordArray} wordArray The word array.                                                               // 8141
	         *                                                                                                            // 8142
	         * @return {string} The Base64 string.                                                                        // 8143
	         *                                                                                                            // 8144
	         * @static                                                                                                    // 8145
	         *                                                                                                            // 8146
	         * @example                                                                                                   // 8147
	         *                                                                                                            // 8148
	         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);                                           // 8149
	         */                                                                                                           // 8150
	        stringify: function (wordArray) {                                                                             // 8151
	            // Shortcuts                                                                                              // 8152
	            var words = wordArray.words;                                                                              // 8153
	            var sigBytes = wordArray.sigBytes;                                                                        // 8154
	            var map = this._map;                                                                                      // 8155
                                                                                                                       // 8156
	            // Clamp excess bits                                                                                      // 8157
	            wordArray.clamp();                                                                                        // 8158
                                                                                                                       // 8159
	            // Convert                                                                                                // 8160
	            var base64Chars = [];                                                                                     // 8161
	            for (var i = 0; i < sigBytes; i += 3) {                                                                   // 8162
	                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;                               // 8163
	                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;                               // 8164
	                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;                               // 8165
                                                                                                                       // 8166
	                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;                                                   // 8167
                                                                                                                       // 8168
	                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {                                          // 8169
	                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));                                 // 8170
	                }                                                                                                     // 8171
	            }                                                                                                         // 8172
                                                                                                                       // 8173
	            // Add padding                                                                                            // 8174
	            var paddingChar = map.charAt(64);                                                                         // 8175
	            if (paddingChar) {                                                                                        // 8176
	                while (base64Chars.length % 4) {                                                                      // 8177
	                    base64Chars.push(paddingChar);                                                                    // 8178
	                }                                                                                                     // 8179
	            }                                                                                                         // 8180
                                                                                                                       // 8181
	            return base64Chars.join('');                                                                              // 8182
	        },                                                                                                            // 8183
                                                                                                                       // 8184
	        /**                                                                                                           // 8185
	         * Converts a Base64 string to a word array.                                                                  // 8186
	         *                                                                                                            // 8187
	         * @param {string} base64Str The Base64 string.                                                               // 8188
	         *                                                                                                            // 8189
	         * @return {WordArray} The word array.                                                                        // 8190
	         *                                                                                                            // 8191
	         * @static                                                                                                    // 8192
	         *                                                                                                            // 8193
	         * @example                                                                                                   // 8194
	         *                                                                                                            // 8195
	         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);                                               // 8196
	         */                                                                                                           // 8197
	        parse: function (base64Str) {                                                                                 // 8198
	            // Shortcuts                                                                                              // 8199
	            var base64StrLength = base64Str.length;                                                                   // 8200
	            var map = this._map;                                                                                      // 8201
                                                                                                                       // 8202
	            // Ignore padding                                                                                         // 8203
	            var paddingChar = map.charAt(64);                                                                         // 8204
	            if (paddingChar) {                                                                                        // 8205
	                var paddingIndex = base64Str.indexOf(paddingChar);                                                    // 8206
	                if (paddingIndex != -1) {                                                                             // 8207
	                    base64StrLength = paddingIndex;                                                                   // 8208
	                }                                                                                                     // 8209
	            }                                                                                                         // 8210
                                                                                                                       // 8211
	            // Convert                                                                                                // 8212
	            var words = [];                                                                                           // 8213
	            var nBytes = 0;                                                                                           // 8214
	            for (var i = 0; i < base64StrLength; i++) {                                                               // 8215
	                if (i % 4) {                                                                                          // 8216
	                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);                                // 8217
	                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);                               // 8218
	                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);                                // 8219
	                    nBytes++;                                                                                         // 8220
	                }                                                                                                     // 8221
	            }                                                                                                         // 8222
                                                                                                                       // 8223
	            return WordArray.create(words, nBytes);                                                                   // 8224
	        },                                                                                                            // 8225
                                                                                                                       // 8226
	        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='                                     // 8227
	    };                                                                                                                // 8228
	}());                                                                                                                 // 8229
                                                                                                                       // 8230
                                                                                                                       // 8231
	return CryptoJS.enc.Base64;                                                                                           // 8232
                                                                                                                       // 8233
}));                                                                                                                   // 8234
},{"./core":51}],53:[function(require,module,exports){                                                                 // 8235
;(function (root, factory) {                                                                                           // 8236
	if (typeof exports === "object") {                                                                                    // 8237
		// CommonJS                                                                                                          // 8238
		module.exports = exports = factory(require("./core"));                                                               // 8239
	}                                                                                                                     // 8240
	else if (typeof define === "function" && define.amd) {                                                                // 8241
		// AMD                                                                                                               // 8242
		define(["./core"], factory);                                                                                         // 8243
	}                                                                                                                     // 8244
	else {                                                                                                                // 8245
		// Global (browser)                                                                                                  // 8246
		factory(root.CryptoJS);                                                                                              // 8247
	}                                                                                                                     // 8248
}(this, function (CryptoJS) {                                                                                          // 8249
                                                                                                                       // 8250
	(function () {                                                                                                        // 8251
	    // Shortcuts                                                                                                      // 8252
	    var C = CryptoJS;                                                                                                 // 8253
	    var C_lib = C.lib;                                                                                                // 8254
	    var WordArray = C_lib.WordArray;                                                                                  // 8255
	    var C_enc = C.enc;                                                                                                // 8256
                                                                                                                       // 8257
	    /**                                                                                                               // 8258
	     * UTF-16 BE encoding strategy.                                                                                   // 8259
	     */                                                                                                               // 8260
	    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {                                                                     // 8261
	        /**                                                                                                           // 8262
	         * Converts a word array to a UTF-16 BE string.                                                               // 8263
	         *                                                                                                            // 8264
	         * @param {WordArray} wordArray The word array.                                                               // 8265
	         *                                                                                                            // 8266
	         * @return {string} The UTF-16 BE string.                                                                     // 8267
	         *                                                                                                            // 8268
	         * @static                                                                                                    // 8269
	         *                                                                                                            // 8270
	         * @example                                                                                                   // 8271
	         *                                                                                                            // 8272
	         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);                                             // 8273
	         */                                                                                                           // 8274
	        stringify: function (wordArray) {                                                                             // 8275
	            // Shortcuts                                                                                              // 8276
	            var words = wordArray.words;                                                                              // 8277
	            var sigBytes = wordArray.sigBytes;                                                                        // 8278
                                                                                                                       // 8279
	            // Convert                                                                                                // 8280
	            var utf16Chars = [];                                                                                      // 8281
	            for (var i = 0; i < sigBytes; i += 2) {                                                                   // 8282
	                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;                                     // 8283
	                utf16Chars.push(String.fromCharCode(codePoint));                                                      // 8284
	            }                                                                                                         // 8285
                                                                                                                       // 8286
	            return utf16Chars.join('');                                                                               // 8287
	        },                                                                                                            // 8288
                                                                                                                       // 8289
	        /**                                                                                                           // 8290
	         * Converts a UTF-16 BE string to a word array.                                                               // 8291
	         *                                                                                                            // 8292
	         * @param {string} utf16Str The UTF-16 BE string.                                                             // 8293
	         *                                                                                                            // 8294
	         * @return {WordArray} The word array.                                                                        // 8295
	         *                                                                                                            // 8296
	         * @static                                                                                                    // 8297
	         *                                                                                                            // 8298
	         * @example                                                                                                   // 8299
	         *                                                                                                            // 8300
	         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);                                                 // 8301
	         */                                                                                                           // 8302
	        parse: function (utf16Str) {                                                                                  // 8303
	            // Shortcut                                                                                               // 8304
	            var utf16StrLength = utf16Str.length;                                                                     // 8305
                                                                                                                       // 8306
	            // Convert                                                                                                // 8307
	            var words = [];                                                                                           // 8308
	            for (var i = 0; i < utf16StrLength; i++) {                                                                // 8309
	                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);                                      // 8310
	            }                                                                                                         // 8311
                                                                                                                       // 8312
	            return WordArray.create(words, utf16StrLength * 2);                                                       // 8313
	        }                                                                                                             // 8314
	    };                                                                                                                // 8315
                                                                                                                       // 8316
	    /**                                                                                                               // 8317
	     * UTF-16 LE encoding strategy.                                                                                   // 8318
	     */                                                                                                               // 8319
	    C_enc.Utf16LE = {                                                                                                 // 8320
	        /**                                                                                                           // 8321
	         * Converts a word array to a UTF-16 LE string.                                                               // 8322
	         *                                                                                                            // 8323
	         * @param {WordArray} wordArray The word array.                                                               // 8324
	         *                                                                                                            // 8325
	         * @return {string} The UTF-16 LE string.                                                                     // 8326
	         *                                                                                                            // 8327
	         * @static                                                                                                    // 8328
	         *                                                                                                            // 8329
	         * @example                                                                                                   // 8330
	         *                                                                                                            // 8331
	         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);                                              // 8332
	         */                                                                                                           // 8333
	        stringify: function (wordArray) {                                                                             // 8334
	            // Shortcuts                                                                                              // 8335
	            var words = wordArray.words;                                                                              // 8336
	            var sigBytes = wordArray.sigBytes;                                                                        // 8337
                                                                                                                       // 8338
	            // Convert                                                                                                // 8339
	            var utf16Chars = [];                                                                                      // 8340
	            for (var i = 0; i < sigBytes; i += 2) {                                                                   // 8341
	                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);                         // 8342
	                utf16Chars.push(String.fromCharCode(codePoint));                                                      // 8343
	            }                                                                                                         // 8344
                                                                                                                       // 8345
	            return utf16Chars.join('');                                                                               // 8346
	        },                                                                                                            // 8347
                                                                                                                       // 8348
	        /**                                                                                                           // 8349
	         * Converts a UTF-16 LE string to a word array.                                                               // 8350
	         *                                                                                                            // 8351
	         * @param {string} utf16Str The UTF-16 LE string.                                                             // 8352
	         *                                                                                                            // 8353
	         * @return {WordArray} The word array.                                                                        // 8354
	         *                                                                                                            // 8355
	         * @static                                                                                                    // 8356
	         *                                                                                                            // 8357
	         * @example                                                                                                   // 8358
	         *                                                                                                            // 8359
	         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);                                                  // 8360
	         */                                                                                                           // 8361
	        parse: function (utf16Str) {                                                                                  // 8362
	            // Shortcut                                                                                               // 8363
	            var utf16StrLength = utf16Str.length;                                                                     // 8364
                                                                                                                       // 8365
	            // Convert                                                                                                // 8366
	            var words = [];                                                                                           // 8367
	            for (var i = 0; i < utf16StrLength; i++) {                                                                // 8368
	                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));                          // 8369
	            }                                                                                                         // 8370
                                                                                                                       // 8371
	            return WordArray.create(words, utf16StrLength * 2);                                                       // 8372
	        }                                                                                                             // 8373
	    };                                                                                                                // 8374
                                                                                                                       // 8375
	    function swapEndian(word) {                                                                                       // 8376
	        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);                                              // 8377
	    }                                                                                                                 // 8378
	}());                                                                                                                 // 8379
                                                                                                                       // 8380
                                                                                                                       // 8381
	return CryptoJS.enc.Utf16;                                                                                            // 8382
                                                                                                                       // 8383
}));                                                                                                                   // 8384
},{"./core":51}],54:[function(require,module,exports){                                                                 // 8385
;(function (root, factory, undef) {                                                                                    // 8386
	if (typeof exports === "object") {                                                                                    // 8387
		// CommonJS                                                                                                          // 8388
		module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));                         // 8389
	}                                                                                                                     // 8390
	else if (typeof define === "function" && define.amd) {                                                                // 8391
		// AMD                                                                                                               // 8392
		define(["./core", "./sha1", "./hmac"], factory);                                                                     // 8393
	}                                                                                                                     // 8394
	else {                                                                                                                // 8395
		// Global (browser)                                                                                                  // 8396
		factory(root.CryptoJS);                                                                                              // 8397
	}                                                                                                                     // 8398
}(this, function (CryptoJS) {                                                                                          // 8399
                                                                                                                       // 8400
	(function () {                                                                                                        // 8401
	    // Shortcuts                                                                                                      // 8402
	    var C = CryptoJS;                                                                                                 // 8403
	    var C_lib = C.lib;                                                                                                // 8404
	    var Base = C_lib.Base;                                                                                            // 8405
	    var WordArray = C_lib.WordArray;                                                                                  // 8406
	    var C_algo = C.algo;                                                                                              // 8407
	    var MD5 = C_algo.MD5;                                                                                             // 8408
                                                                                                                       // 8409
	    /**                                                                                                               // 8410
	     * This key derivation function is meant to conform with EVP_BytesToKey.                                          // 8411
	     * www.openssl.org/docs/crypto/EVP_BytesToKey.html                                                                // 8412
	     */                                                                                                               // 8413
	    var EvpKDF = C_algo.EvpKDF = Base.extend({                                                                        // 8414
	        /**                                                                                                           // 8415
	         * Configuration options.                                                                                     // 8416
	         *                                                                                                            // 8417
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)                        // 8418
	         * @property {Hasher} hasher The hash algorithm to use. Default: MD5                                          // 8419
	         * @property {number} iterations The number of iterations to perform. Default: 1                              // 8420
	         */                                                                                                           // 8421
	        cfg: Base.extend({                                                                                            // 8422
	            keySize: 128/32,                                                                                          // 8423
	            hasher: MD5,                                                                                              // 8424
	            iterations: 1                                                                                             // 8425
	        }),                                                                                                           // 8426
                                                                                                                       // 8427
	        /**                                                                                                           // 8428
	         * Initializes a newly created key derivation function.                                                       // 8429
	         *                                                                                                            // 8430
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.                        // 8431
	         *                                                                                                            // 8432
	         * @example                                                                                                   // 8433
	         *                                                                                                            // 8434
	         *     var kdf = CryptoJS.algo.EvpKDF.create();                                                               // 8435
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });                                                 // 8436
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });                               // 8437
	         */                                                                                                           // 8438
	        init: function (cfg) {                                                                                        // 8439
	            this.cfg = this.cfg.extend(cfg);                                                                          // 8440
	        },                                                                                                            // 8441
                                                                                                                       // 8442
	        /**                                                                                                           // 8443
	         * Derives a key from a password.                                                                             // 8444
	         *                                                                                                            // 8445
	         * @param {WordArray|string} password The password.                                                           // 8446
	         * @param {WordArray|string} salt A salt.                                                                     // 8447
	         *                                                                                                            // 8448
	         * @return {WordArray} The derived key.                                                                       // 8449
	         *                                                                                                            // 8450
	         * @example                                                                                                   // 8451
	         *                                                                                                            // 8452
	         *     var key = kdf.compute(password, salt);                                                                 // 8453
	         */                                                                                                           // 8454
	        compute: function (password, salt) {                                                                          // 8455
	            // Shortcut                                                                                               // 8456
	            var cfg = this.cfg;                                                                                       // 8457
                                                                                                                       // 8458
	            // Init hasher                                                                                            // 8459
	            var hasher = cfg.hasher.create();                                                                         // 8460
                                                                                                                       // 8461
	            // Initial values                                                                                         // 8462
	            var derivedKey = WordArray.create();                                                                      // 8463
                                                                                                                       // 8464
	            // Shortcuts                                                                                              // 8465
	            var derivedKeyWords = derivedKey.words;                                                                   // 8466
	            var keySize = cfg.keySize;                                                                                // 8467
	            var iterations = cfg.iterations;                                                                          // 8468
                                                                                                                       // 8469
	            // Generate key                                                                                           // 8470
	            while (derivedKeyWords.length < keySize) {                                                                // 8471
	                if (block) {                                                                                          // 8472
	                    hasher.update(block);                                                                             // 8473
	                }                                                                                                     // 8474
	                var block = hasher.update(password).finalize(salt);                                                   // 8475
	                hasher.reset();                                                                                       // 8476
                                                                                                                       // 8477
	                // Iterations                                                                                         // 8478
	                for (var i = 1; i < iterations; i++) {                                                                // 8479
	                    block = hasher.finalize(block);                                                                   // 8480
	                    hasher.reset();                                                                                   // 8481
	                }                                                                                                     // 8482
                                                                                                                       // 8483
	                derivedKey.concat(block);                                                                             // 8484
	            }                                                                                                         // 8485
	            derivedKey.sigBytes = keySize * 4;                                                                        // 8486
                                                                                                                       // 8487
	            return derivedKey;                                                                                        // 8488
	        }                                                                                                             // 8489
	    });                                                                                                               // 8490
                                                                                                                       // 8491
	    /**                                                                                                               // 8492
	     * Derives a key from a password.                                                                                 // 8493
	     *                                                                                                                // 8494
	     * @param {WordArray|string} password The password.                                                               // 8495
	     * @param {WordArray|string} salt A salt.                                                                         // 8496
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.                          // 8497
	     *                                                                                                                // 8498
	     * @return {WordArray} The derived key.                                                                           // 8499
	     *                                                                                                                // 8500
	     * @static                                                                                                        // 8501
	     *                                                                                                                // 8502
	     * @example                                                                                                       // 8503
	     *                                                                                                                // 8504
	     *     var key = CryptoJS.EvpKDF(password, salt);                                                                 // 8505
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });                                                 // 8506
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });                               // 8507
	     */                                                                                                               // 8508
	    C.EvpKDF = function (password, salt, cfg) {                                                                       // 8509
	        return EvpKDF.create(cfg).compute(password, salt);                                                            // 8510
	    };                                                                                                                // 8511
	}());                                                                                                                 // 8512
                                                                                                                       // 8513
                                                                                                                       // 8514
	return CryptoJS.EvpKDF;                                                                                               // 8515
                                                                                                                       // 8516
}));                                                                                                                   // 8517
},{"./core":51,"./hmac":56,"./sha1":75}],55:[function(require,module,exports){                                         // 8518
;(function (root, factory, undef) {                                                                                    // 8519
	if (typeof exports === "object") {                                                                                    // 8520
		// CommonJS                                                                                                          // 8521
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 8522
	}                                                                                                                     // 8523
	else if (typeof define === "function" && define.amd) {                                                                // 8524
		// AMD                                                                                                               // 8525
		define(["./core", "./cipher-core"], factory);                                                                        // 8526
	}                                                                                                                     // 8527
	else {                                                                                                                // 8528
		// Global (browser)                                                                                                  // 8529
		factory(root.CryptoJS);                                                                                              // 8530
	}                                                                                                                     // 8531
}(this, function (CryptoJS) {                                                                                          // 8532
                                                                                                                       // 8533
	(function (undefined) {                                                                                               // 8534
	    // Shortcuts                                                                                                      // 8535
	    var C = CryptoJS;                                                                                                 // 8536
	    var C_lib = C.lib;                                                                                                // 8537
	    var CipherParams = C_lib.CipherParams;                                                                            // 8538
	    var C_enc = C.enc;                                                                                                // 8539
	    var Hex = C_enc.Hex;                                                                                              // 8540
	    var C_format = C.format;                                                                                          // 8541
                                                                                                                       // 8542
	    var HexFormatter = C_format.Hex = {                                                                               // 8543
	        /**                                                                                                           // 8544
	         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.                       // 8545
	         *                                                                                                            // 8546
	         * @param {CipherParams} cipherParams The cipher params object.                                               // 8547
	         *                                                                                                            // 8548
	         * @return {string} The hexadecimally encoded string.                                                         // 8549
	         *                                                                                                            // 8550
	         * @static                                                                                                    // 8551
	         *                                                                                                            // 8552
	         * @example                                                                                                   // 8553
	         *                                                                                                            // 8554
	         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);                                           // 8555
	         */                                                                                                           // 8556
	        stringify: function (cipherParams) {                                                                          // 8557
	            return cipherParams.ciphertext.toString(Hex);                                                             // 8558
	        },                                                                                                            // 8559
                                                                                                                       // 8560
	        /**                                                                                                           // 8561
	         * Converts a hexadecimally encoded ciphertext string to a cipher params object.                              // 8562
	         *                                                                                                            // 8563
	         * @param {string} input The hexadecimally encoded string.                                                    // 8564
	         *                                                                                                            // 8565
	         * @return {CipherParams} The cipher params object.                                                           // 8566
	         *                                                                                                            // 8567
	         * @static                                                                                                    // 8568
	         *                                                                                                            // 8569
	         * @example                                                                                                   // 8570
	         *                                                                                                            // 8571
	         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);                                               // 8572
	         */                                                                                                           // 8573
	        parse: function (input) {                                                                                     // 8574
	            var ciphertext = Hex.parse(input);                                                                        // 8575
	            return CipherParams.create({ ciphertext: ciphertext });                                                   // 8576
	        }                                                                                                             // 8577
	    };                                                                                                                // 8578
	}());                                                                                                                 // 8579
                                                                                                                       // 8580
                                                                                                                       // 8581
	return CryptoJS.format.Hex;                                                                                           // 8582
                                                                                                                       // 8583
}));                                                                                                                   // 8584
},{"./cipher-core":50,"./core":51}],56:[function(require,module,exports){                                              // 8585
;(function (root, factory) {                                                                                           // 8586
	if (typeof exports === "object") {                                                                                    // 8587
		// CommonJS                                                                                                          // 8588
		module.exports = exports = factory(require("./core"));                                                               // 8589
	}                                                                                                                     // 8590
	else if (typeof define === "function" && define.amd) {                                                                // 8591
		// AMD                                                                                                               // 8592
		define(["./core"], factory);                                                                                         // 8593
	}                                                                                                                     // 8594
	else {                                                                                                                // 8595
		// Global (browser)                                                                                                  // 8596
		factory(root.CryptoJS);                                                                                              // 8597
	}                                                                                                                     // 8598
}(this, function (CryptoJS) {                                                                                          // 8599
                                                                                                                       // 8600
	(function () {                                                                                                        // 8601
	    // Shortcuts                                                                                                      // 8602
	    var C = CryptoJS;                                                                                                 // 8603
	    var C_lib = C.lib;                                                                                                // 8604
	    var Base = C_lib.Base;                                                                                            // 8605
	    var C_enc = C.enc;                                                                                                // 8606
	    var Utf8 = C_enc.Utf8;                                                                                            // 8607
	    var C_algo = C.algo;                                                                                              // 8608
                                                                                                                       // 8609
	    /**                                                                                                               // 8610
	     * HMAC algorithm.                                                                                                // 8611
	     */                                                                                                               // 8612
	    var HMAC = C_algo.HMAC = Base.extend({                                                                            // 8613
	        /**                                                                                                           // 8614
	         * Initializes a newly created HMAC.                                                                          // 8615
	         *                                                                                                            // 8616
	         * @param {Hasher} hasher The hash algorithm to use.                                                          // 8617
	         * @param {WordArray|string} key The secret key.                                                              // 8618
	         *                                                                                                            // 8619
	         * @example                                                                                                   // 8620
	         *                                                                                                            // 8621
	         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);                                 // 8622
	         */                                                                                                           // 8623
	        init: function (hasher, key) {                                                                                // 8624
	            // Init hasher                                                                                            // 8625
	            hasher = this._hasher = new hasher.init();                                                                // 8626
                                                                                                                       // 8627
	            // Convert string to WordArray, else assume WordArray already                                             // 8628
	            if (typeof key == 'string') {                                                                             // 8629
	                key = Utf8.parse(key);                                                                                // 8630
	            }                                                                                                         // 8631
                                                                                                                       // 8632
	            // Shortcuts                                                                                              // 8633
	            var hasherBlockSize = hasher.blockSize;                                                                   // 8634
	            var hasherBlockSizeBytes = hasherBlockSize * 4;                                                           // 8635
                                                                                                                       // 8636
	            // Allow arbitrary length keys                                                                            // 8637
	            if (key.sigBytes > hasherBlockSizeBytes) {                                                                // 8638
	                key = hasher.finalize(key);                                                                           // 8639
	            }                                                                                                         // 8640
                                                                                                                       // 8641
	            // Clamp excess bits                                                                                      // 8642
	            key.clamp();                                                                                              // 8643
                                                                                                                       // 8644
	            // Clone key for inner and outer pads                                                                     // 8645
	            var oKey = this._oKey = key.clone();                                                                      // 8646
	            var iKey = this._iKey = key.clone();                                                                      // 8647
                                                                                                                       // 8648
	            // Shortcuts                                                                                              // 8649
	            var oKeyWords = oKey.words;                                                                               // 8650
	            var iKeyWords = iKey.words;                                                                               // 8651
                                                                                                                       // 8652
	            // XOR keys with pad constants                                                                            // 8653
	            for (var i = 0; i < hasherBlockSize; i++) {                                                               // 8654
	                oKeyWords[i] ^= 0x5c5c5c5c;                                                                           // 8655
	                iKeyWords[i] ^= 0x36363636;                                                                           // 8656
	            }                                                                                                         // 8657
	            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;                                                     // 8658
                                                                                                                       // 8659
	            // Set initial values                                                                                     // 8660
	            this.reset();                                                                                             // 8661
	        },                                                                                                            // 8662
                                                                                                                       // 8663
	        /**                                                                                                           // 8664
	         * Resets this HMAC to its initial state.                                                                     // 8665
	         *                                                                                                            // 8666
	         * @example                                                                                                   // 8667
	         *                                                                                                            // 8668
	         *     hmacHasher.reset();                                                                                    // 8669
	         */                                                                                                           // 8670
	        reset: function () {                                                                                          // 8671
	            // Shortcut                                                                                               // 8672
	            var hasher = this._hasher;                                                                                // 8673
                                                                                                                       // 8674
	            // Reset                                                                                                  // 8675
	            hasher.reset();                                                                                           // 8676
	            hasher.update(this._iKey);                                                                                // 8677
	        },                                                                                                            // 8678
                                                                                                                       // 8679
	        /**                                                                                                           // 8680
	         * Updates this HMAC with a message.                                                                          // 8681
	         *                                                                                                            // 8682
	         * @param {WordArray|string} messageUpdate The message to append.                                             // 8683
	         *                                                                                                            // 8684
	         * @return {HMAC} This HMAC instance.                                                                         // 8685
	         *                                                                                                            // 8686
	         * @example                                                                                                   // 8687
	         *                                                                                                            // 8688
	         *     hmacHasher.update('message');                                                                          // 8689
	         *     hmacHasher.update(wordArray);                                                                          // 8690
	         */                                                                                                           // 8691
	        update: function (messageUpdate) {                                                                            // 8692
	            this._hasher.update(messageUpdate);                                                                       // 8693
                                                                                                                       // 8694
	            // Chainable                                                                                              // 8695
	            return this;                                                                                              // 8696
	        },                                                                                                            // 8697
                                                                                                                       // 8698
	        /**                                                                                                           // 8699
	         * Finalizes the HMAC computation.                                                                            // 8700
	         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 8701
	         *                                                                                                            // 8702
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.                                 // 8703
	         *                                                                                                            // 8704
	         * @return {WordArray} The HMAC.                                                                              // 8705
	         *                                                                                                            // 8706
	         * @example                                                                                                   // 8707
	         *                                                                                                            // 8708
	         *     var hmac = hmacHasher.finalize();                                                                      // 8709
	         *     var hmac = hmacHasher.finalize('message');                                                             // 8710
	         *     var hmac = hmacHasher.finalize(wordArray);                                                             // 8711
	         */                                                                                                           // 8712
	        finalize: function (messageUpdate) {                                                                          // 8713
	            // Shortcut                                                                                               // 8714
	            var hasher = this._hasher;                                                                                // 8715
                                                                                                                       // 8716
	            // Compute HMAC                                                                                           // 8717
	            var innerHash = hasher.finalize(messageUpdate);                                                           // 8718
	            hasher.reset();                                                                                           // 8719
	            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));                                         // 8720
                                                                                                                       // 8721
	            return hmac;                                                                                              // 8722
	        }                                                                                                             // 8723
	    });                                                                                                               // 8724
	}());                                                                                                                 // 8725
                                                                                                                       // 8726
                                                                                                                       // 8727
}));                                                                                                                   // 8728
},{"./core":51}],57:[function(require,module,exports){                                                                 // 8729
;(function (root, factory, undef) {                                                                                    // 8730
	if (typeof exports === "object") {                                                                                    // 8731
		// CommonJS                                                                                                          // 8732
		module.exports = exports = factory(require("./core"), require("./x64-core"), require("./lib-typedarrays"), require("./enc-utf16"), require("./enc-base64"), require("./md5"), require("./sha1"), require("./sha256"), require("./sha224"), require("./sha512"), require("./sha384"), require("./sha3"), require("./ripemd160"), require("./hmac"), require("./pbkdf2"), require("./evpkdf"), require("./cipher-core"), require("./mode-cfb"), require("./mode-ctr"), require("./mode-ctr-gladman"), require("./mode-ofb"), require("./mode-ecb"), require("./pad-ansix923"), require("./pad-iso10126"), require("./pad-iso97971"), require("./pad-zeropadding"), require("./pad-nopadding"), require("./format-hex"), require("./aes"), require("./tripledes"), require("./rc4"), require("./rabbit"), require("./rabbit-legacy"));
	}                                                                                                                     // 8734
	else if (typeof define === "function" && define.amd) {                                                                // 8735
		// AMD                                                                                                               // 8736
		define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory);
	}                                                                                                                     // 8738
	else {                                                                                                                // 8739
		// Global (browser)                                                                                                  // 8740
		root.CryptoJS = factory(root.CryptoJS);                                                                              // 8741
	}                                                                                                                     // 8742
}(this, function (CryptoJS) {                                                                                          // 8743
                                                                                                                       // 8744
	return CryptoJS;                                                                                                      // 8745
                                                                                                                       // 8746
}));                                                                                                                   // 8747
},{"./aes":49,"./cipher-core":50,"./core":51,"./enc-base64":52,"./enc-utf16":53,"./evpkdf":54,"./format-hex":55,"./hmac":56,"./lib-typedarrays":58,"./md5":59,"./mode-cfb":60,"./mode-ctr":62,"./mode-ctr-gladman":61,"./mode-ecb":63,"./mode-ofb":64,"./pad-ansix923":65,"./pad-iso10126":66,"./pad-iso97971":67,"./pad-nopadding":68,"./pad-zeropadding":69,"./pbkdf2":70,"./rabbit":72,"./rabbit-legacy":71,"./rc4":73,"./ripemd160":74,"./sha1":75,"./sha224":76,"./sha256":77,"./sha3":78,"./sha384":79,"./sha512":80,"./tripledes":81,"./x64-core":82}],58:[function(require,module,exports){
;(function (root, factory) {                                                                                           // 8749
	if (typeof exports === "object") {                                                                                    // 8750
		// CommonJS                                                                                                          // 8751
		module.exports = exports = factory(require("./core"));                                                               // 8752
	}                                                                                                                     // 8753
	else if (typeof define === "function" && define.amd) {                                                                // 8754
		// AMD                                                                                                               // 8755
		define(["./core"], factory);                                                                                         // 8756
	}                                                                                                                     // 8757
	else {                                                                                                                // 8758
		// Global (browser)                                                                                                  // 8759
		factory(root.CryptoJS);                                                                                              // 8760
	}                                                                                                                     // 8761
}(this, function (CryptoJS) {                                                                                          // 8762
                                                                                                                       // 8763
	(function () {                                                                                                        // 8764
	    // Check if typed arrays are supported                                                                            // 8765
	    if (typeof ArrayBuffer != 'function') {                                                                           // 8766
	        return;                                                                                                       // 8767
	    }                                                                                                                 // 8768
                                                                                                                       // 8769
	    // Shortcuts                                                                                                      // 8770
	    var C = CryptoJS;                                                                                                 // 8771
	    var C_lib = C.lib;                                                                                                // 8772
	    var WordArray = C_lib.WordArray;                                                                                  // 8773
                                                                                                                       // 8774
	    // Reference original init                                                                                        // 8775
	    var superInit = WordArray.init;                                                                                   // 8776
                                                                                                                       // 8777
	    // Augment WordArray.init to handle typed arrays                                                                  // 8778
	    var subInit = WordArray.init = function (typedArray) {                                                            // 8779
	        // Convert buffers to uint8                                                                                   // 8780
	        if (typedArray instanceof ArrayBuffer) {                                                                      // 8781
	            typedArray = new Uint8Array(typedArray);                                                                  // 8782
	        }                                                                                                             // 8783
                                                                                                                       // 8784
	        // Convert other array views to uint8                                                                         // 8785
	        if (                                                                                                          // 8786
	            typedArray instanceof Int8Array ||                                                                        // 8787
	            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||                  // 8788
	            typedArray instanceof Int16Array ||                                                                       // 8789
	            typedArray instanceof Uint16Array ||                                                                      // 8790
	            typedArray instanceof Int32Array ||                                                                       // 8791
	            typedArray instanceof Uint32Array ||                                                                      // 8792
	            typedArray instanceof Float32Array ||                                                                     // 8793
	            typedArray instanceof Float64Array                                                                        // 8794
	        ) {                                                                                                           // 8795
	            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);             // 8796
	        }                                                                                                             // 8797
                                                                                                                       // 8798
	        // Handle Uint8Array                                                                                          // 8799
	        if (typedArray instanceof Uint8Array) {                                                                       // 8800
	            // Shortcut                                                                                               // 8801
	            var typedArrayByteLength = typedArray.byteLength;                                                         // 8802
                                                                                                                       // 8803
	            // Extract bytes                                                                                          // 8804
	            var words = [];                                                                                           // 8805
	            for (var i = 0; i < typedArrayByteLength; i++) {                                                          // 8806
	                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);                                                // 8807
	            }                                                                                                         // 8808
                                                                                                                       // 8809
	            // Initialize this word array                                                                             // 8810
	            superInit.call(this, words, typedArrayByteLength);                                                        // 8811
	        } else {                                                                                                      // 8812
	            // Else call normal init                                                                                  // 8813
	            superInit.apply(this, arguments);                                                                         // 8814
	        }                                                                                                             // 8815
	    };                                                                                                                // 8816
                                                                                                                       // 8817
	    subInit.prototype = WordArray;                                                                                    // 8818
	}());                                                                                                                 // 8819
                                                                                                                       // 8820
                                                                                                                       // 8821
	return CryptoJS.lib.WordArray;                                                                                        // 8822
                                                                                                                       // 8823
}));                                                                                                                   // 8824
},{"./core":51}],59:[function(require,module,exports){                                                                 // 8825
;(function (root, factory) {                                                                                           // 8826
	if (typeof exports === "object") {                                                                                    // 8827
		// CommonJS                                                                                                          // 8828
		module.exports = exports = factory(require("./core"));                                                               // 8829
	}                                                                                                                     // 8830
	else if (typeof define === "function" && define.amd) {                                                                // 8831
		// AMD                                                                                                               // 8832
		define(["./core"], factory);                                                                                         // 8833
	}                                                                                                                     // 8834
	else {                                                                                                                // 8835
		// Global (browser)                                                                                                  // 8836
		factory(root.CryptoJS);                                                                                              // 8837
	}                                                                                                                     // 8838
}(this, function (CryptoJS) {                                                                                          // 8839
                                                                                                                       // 8840
	(function (Math) {                                                                                                    // 8841
	    // Shortcuts                                                                                                      // 8842
	    var C = CryptoJS;                                                                                                 // 8843
	    var C_lib = C.lib;                                                                                                // 8844
	    var WordArray = C_lib.WordArray;                                                                                  // 8845
	    var Hasher = C_lib.Hasher;                                                                                        // 8846
	    var C_algo = C.algo;                                                                                              // 8847
                                                                                                                       // 8848
	    // Constants table                                                                                                // 8849
	    var T = [];                                                                                                       // 8850
                                                                                                                       // 8851
	    // Compute constants                                                                                              // 8852
	    (function () {                                                                                                    // 8853
	        for (var i = 0; i < 64; i++) {                                                                                // 8854
	            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;                                                     // 8855
	        }                                                                                                             // 8856
	    }());                                                                                                             // 8857
                                                                                                                       // 8858
	    /**                                                                                                               // 8859
	     * MD5 hash algorithm.                                                                                            // 8860
	     */                                                                                                               // 8861
	    var MD5 = C_algo.MD5 = Hasher.extend({                                                                            // 8862
	        _doReset: function () {                                                                                       // 8863
	            this._hash = new WordArray.init([                                                                         // 8864
	                0x67452301, 0xefcdab89,                                                                               // 8865
	                0x98badcfe, 0x10325476                                                                                // 8866
	            ]);                                                                                                       // 8867
	        },                                                                                                            // 8868
                                                                                                                       // 8869
	        _doProcessBlock: function (M, offset) {                                                                       // 8870
	            // Swap endian                                                                                            // 8871
	            for (var i = 0; i < 16; i++) {                                                                            // 8872
	                // Shortcuts                                                                                          // 8873
	                var offset_i = offset + i;                                                                            // 8874
	                var M_offset_i = M[offset_i];                                                                         // 8875
                                                                                                                       // 8876
	                M[offset_i] = (                                                                                       // 8877
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |                                       // 8878
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)                                         // 8879
	                );                                                                                                    // 8880
	            }                                                                                                         // 8881
                                                                                                                       // 8882
	            // Shortcuts                                                                                              // 8883
	            var H = this._hash.words;                                                                                 // 8884
                                                                                                                       // 8885
	            var M_offset_0  = M[offset + 0];                                                                          // 8886
	            var M_offset_1  = M[offset + 1];                                                                          // 8887
	            var M_offset_2  = M[offset + 2];                                                                          // 8888
	            var M_offset_3  = M[offset + 3];                                                                          // 8889
	            var M_offset_4  = M[offset + 4];                                                                          // 8890
	            var M_offset_5  = M[offset + 5];                                                                          // 8891
	            var M_offset_6  = M[offset + 6];                                                                          // 8892
	            var M_offset_7  = M[offset + 7];                                                                          // 8893
	            var M_offset_8  = M[offset + 8];                                                                          // 8894
	            var M_offset_9  = M[offset + 9];                                                                          // 8895
	            var M_offset_10 = M[offset + 10];                                                                         // 8896
	            var M_offset_11 = M[offset + 11];                                                                         // 8897
	            var M_offset_12 = M[offset + 12];                                                                         // 8898
	            var M_offset_13 = M[offset + 13];                                                                         // 8899
	            var M_offset_14 = M[offset + 14];                                                                         // 8900
	            var M_offset_15 = M[offset + 15];                                                                         // 8901
                                                                                                                       // 8902
	            // Working varialbes                                                                                      // 8903
	            var a = H[0];                                                                                             // 8904
	            var b = H[1];                                                                                             // 8905
	            var c = H[2];                                                                                             // 8906
	            var d = H[3];                                                                                             // 8907
                                                                                                                       // 8908
	            // Computation                                                                                            // 8909
	            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);                                                                // 8910
	            d = FF(d, a, b, c, M_offset_1,  12, T[1]);                                                                // 8911
	            c = FF(c, d, a, b, M_offset_2,  17, T[2]);                                                                // 8912
	            b = FF(b, c, d, a, M_offset_3,  22, T[3]);                                                                // 8913
	            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);                                                                // 8914
	            d = FF(d, a, b, c, M_offset_5,  12, T[5]);                                                                // 8915
	            c = FF(c, d, a, b, M_offset_6,  17, T[6]);                                                                // 8916
	            b = FF(b, c, d, a, M_offset_7,  22, T[7]);                                                                // 8917
	            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);                                                                // 8918
	            d = FF(d, a, b, c, M_offset_9,  12, T[9]);                                                                // 8919
	            c = FF(c, d, a, b, M_offset_10, 17, T[10]);                                                               // 8920
	            b = FF(b, c, d, a, M_offset_11, 22, T[11]);                                                               // 8921
	            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);                                                               // 8922
	            d = FF(d, a, b, c, M_offset_13, 12, T[13]);                                                               // 8923
	            c = FF(c, d, a, b, M_offset_14, 17, T[14]);                                                               // 8924
	            b = FF(b, c, d, a, M_offset_15, 22, T[15]);                                                               // 8925
                                                                                                                       // 8926
	            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);                                                               // 8927
	            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);                                                               // 8928
	            c = GG(c, d, a, b, M_offset_11, 14, T[18]);                                                               // 8929
	            b = GG(b, c, d, a, M_offset_0,  20, T[19]);                                                               // 8930
	            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);                                                               // 8931
	            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);                                                               // 8932
	            c = GG(c, d, a, b, M_offset_15, 14, T[22]);                                                               // 8933
	            b = GG(b, c, d, a, M_offset_4,  20, T[23]);                                                               // 8934
	            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);                                                               // 8935
	            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);                                                               // 8936
	            c = GG(c, d, a, b, M_offset_3,  14, T[26]);                                                               // 8937
	            b = GG(b, c, d, a, M_offset_8,  20, T[27]);                                                               // 8938
	            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);                                                               // 8939
	            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);                                                               // 8940
	            c = GG(c, d, a, b, M_offset_7,  14, T[30]);                                                               // 8941
	            b = GG(b, c, d, a, M_offset_12, 20, T[31]);                                                               // 8942
                                                                                                                       // 8943
	            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);                                                               // 8944
	            d = HH(d, a, b, c, M_offset_8,  11, T[33]);                                                               // 8945
	            c = HH(c, d, a, b, M_offset_11, 16, T[34]);                                                               // 8946
	            b = HH(b, c, d, a, M_offset_14, 23, T[35]);                                                               // 8947
	            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);                                                               // 8948
	            d = HH(d, a, b, c, M_offset_4,  11, T[37]);                                                               // 8949
	            c = HH(c, d, a, b, M_offset_7,  16, T[38]);                                                               // 8950
	            b = HH(b, c, d, a, M_offset_10, 23, T[39]);                                                               // 8951
	            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);                                                               // 8952
	            d = HH(d, a, b, c, M_offset_0,  11, T[41]);                                                               // 8953
	            c = HH(c, d, a, b, M_offset_3,  16, T[42]);                                                               // 8954
	            b = HH(b, c, d, a, M_offset_6,  23, T[43]);                                                               // 8955
	            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);                                                               // 8956
	            d = HH(d, a, b, c, M_offset_12, 11, T[45]);                                                               // 8957
	            c = HH(c, d, a, b, M_offset_15, 16, T[46]);                                                               // 8958
	            b = HH(b, c, d, a, M_offset_2,  23, T[47]);                                                               // 8959
                                                                                                                       // 8960
	            a = II(a, b, c, d, M_offset_0,  6,  T[48]);                                                               // 8961
	            d = II(d, a, b, c, M_offset_7,  10, T[49]);                                                               // 8962
	            c = II(c, d, a, b, M_offset_14, 15, T[50]);                                                               // 8963
	            b = II(b, c, d, a, M_offset_5,  21, T[51]);                                                               // 8964
	            a = II(a, b, c, d, M_offset_12, 6,  T[52]);                                                               // 8965
	            d = II(d, a, b, c, M_offset_3,  10, T[53]);                                                               // 8966
	            c = II(c, d, a, b, M_offset_10, 15, T[54]);                                                               // 8967
	            b = II(b, c, d, a, M_offset_1,  21, T[55]);                                                               // 8968
	            a = II(a, b, c, d, M_offset_8,  6,  T[56]);                                                               // 8969
	            d = II(d, a, b, c, M_offset_15, 10, T[57]);                                                               // 8970
	            c = II(c, d, a, b, M_offset_6,  15, T[58]);                                                               // 8971
	            b = II(b, c, d, a, M_offset_13, 21, T[59]);                                                               // 8972
	            a = II(a, b, c, d, M_offset_4,  6,  T[60]);                                                               // 8973
	            d = II(d, a, b, c, M_offset_11, 10, T[61]);                                                               // 8974
	            c = II(c, d, a, b, M_offset_2,  15, T[62]);                                                               // 8975
	            b = II(b, c, d, a, M_offset_9,  21, T[63]);                                                               // 8976
                                                                                                                       // 8977
	            // Intermediate hash value                                                                                // 8978
	            H[0] = (H[0] + a) | 0;                                                                                    // 8979
	            H[1] = (H[1] + b) | 0;                                                                                    // 8980
	            H[2] = (H[2] + c) | 0;                                                                                    // 8981
	            H[3] = (H[3] + d) | 0;                                                                                    // 8982
	        },                                                                                                            // 8983
                                                                                                                       // 8984
	        _doFinalize: function () {                                                                                    // 8985
	            // Shortcuts                                                                                              // 8986
	            var data = this._data;                                                                                    // 8987
	            var dataWords = data.words;                                                                               // 8988
                                                                                                                       // 8989
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 8990
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 8991
                                                                                                                       // 8992
	            // Add padding                                                                                            // 8993
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 8994
                                                                                                                       // 8995
	            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);                                                   // 8996
	            var nBitsTotalL = nBitsTotal;                                                                             // 8997
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (                                                       // 8998
	                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |                                         // 8999
	                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)                                           // 9000
	            );                                                                                                        // 9001
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (                                                       // 9002
	                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |                                         // 9003
	                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)                                           // 9004
	            );                                                                                                        // 9005
                                                                                                                       // 9006
	            data.sigBytes = (dataWords.length + 1) * 4;                                                               // 9007
                                                                                                                       // 9008
	            // Hash final blocks                                                                                      // 9009
	            this._process();                                                                                          // 9010
                                                                                                                       // 9011
	            // Shortcuts                                                                                              // 9012
	            var hash = this._hash;                                                                                    // 9013
	            var H = hash.words;                                                                                       // 9014
                                                                                                                       // 9015
	            // Swap endian                                                                                            // 9016
	            for (var i = 0; i < 4; i++) {                                                                             // 9017
	                // Shortcut                                                                                           // 9018
	                var H_i = H[i];                                                                                       // 9019
                                                                                                                       // 9020
	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |                                                  // 9021
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);                                                   // 9022
	            }                                                                                                         // 9023
                                                                                                                       // 9024
	            // Return final computed hash                                                                             // 9025
	            return hash;                                                                                              // 9026
	        },                                                                                                            // 9027
                                                                                                                       // 9028
	        clone: function () {                                                                                          // 9029
	            var clone = Hasher.clone.call(this);                                                                      // 9030
	            clone._hash = this._hash.clone();                                                                         // 9031
                                                                                                                       // 9032
	            return clone;                                                                                             // 9033
	        }                                                                                                             // 9034
	    });                                                                                                               // 9035
                                                                                                                       // 9036
	    function FF(a, b, c, d, x, s, t) {                                                                                // 9037
	        var n = a + ((b & c) | (~b & d)) + x + t;                                                                     // 9038
	        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9039
	    }                                                                                                                 // 9040
                                                                                                                       // 9041
	    function GG(a, b, c, d, x, s, t) {                                                                                // 9042
	        var n = a + ((b & d) | (c & ~d)) + x + t;                                                                     // 9043
	        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9044
	    }                                                                                                                 // 9045
                                                                                                                       // 9046
	    function HH(a, b, c, d, x, s, t) {                                                                                // 9047
	        var n = a + (b ^ c ^ d) + x + t;                                                                              // 9048
	        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9049
	    }                                                                                                                 // 9050
                                                                                                                       // 9051
	    function II(a, b, c, d, x, s, t) {                                                                                // 9052
	        var n = a + (c ^ (b | ~d)) + x + t;                                                                           // 9053
	        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9054
	    }                                                                                                                 // 9055
                                                                                                                       // 9056
	    /**                                                                                                               // 9057
	     * Shortcut function to the hasher's object interface.                                                            // 9058
	     *                                                                                                                // 9059
	     * @param {WordArray|string} message The message to hash.                                                         // 9060
	     *                                                                                                                // 9061
	     * @return {WordArray} The hash.                                                                                  // 9062
	     *                                                                                                                // 9063
	     * @static                                                                                                        // 9064
	     *                                                                                                                // 9065
	     * @example                                                                                                       // 9066
	     *                                                                                                                // 9067
	     *     var hash = CryptoJS.MD5('message');                                                                        // 9068
	     *     var hash = CryptoJS.MD5(wordArray);                                                                        // 9069
	     */                                                                                                               // 9070
	    C.MD5 = Hasher._createHelper(MD5);                                                                                // 9071
                                                                                                                       // 9072
	    /**                                                                                                               // 9073
	     * Shortcut function to the HMAC's object interface.                                                              // 9074
	     *                                                                                                                // 9075
	     * @param {WordArray|string} message The message to hash.                                                         // 9076
	     * @param {WordArray|string} key The secret key.                                                                  // 9077
	     *                                                                                                                // 9078
	     * @return {WordArray} The HMAC.                                                                                  // 9079
	     *                                                                                                                // 9080
	     * @static                                                                                                        // 9081
	     *                                                                                                                // 9082
	     * @example                                                                                                       // 9083
	     *                                                                                                                // 9084
	     *     var hmac = CryptoJS.HmacMD5(message, key);                                                                 // 9085
	     */                                                                                                               // 9086
	    C.HmacMD5 = Hasher._createHmacHelper(MD5);                                                                        // 9087
	}(Math));                                                                                                             // 9088
                                                                                                                       // 9089
                                                                                                                       // 9090
	return CryptoJS.MD5;                                                                                                  // 9091
                                                                                                                       // 9092
}));                                                                                                                   // 9093
},{"./core":51}],60:[function(require,module,exports){                                                                 // 9094
;(function (root, factory, undef) {                                                                                    // 9095
	if (typeof exports === "object") {                                                                                    // 9096
		// CommonJS                                                                                                          // 9097
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9098
	}                                                                                                                     // 9099
	else if (typeof define === "function" && define.amd) {                                                                // 9100
		// AMD                                                                                                               // 9101
		define(["./core", "./cipher-core"], factory);                                                                        // 9102
	}                                                                                                                     // 9103
	else {                                                                                                                // 9104
		// Global (browser)                                                                                                  // 9105
		factory(root.CryptoJS);                                                                                              // 9106
	}                                                                                                                     // 9107
}(this, function (CryptoJS) {                                                                                          // 9108
                                                                                                                       // 9109
	/**                                                                                                                   // 9110
	 * Cipher Feedback block mode.                                                                                        // 9111
	 */                                                                                                                   // 9112
	CryptoJS.mode.CFB = (function () {                                                                                    // 9113
	    var CFB = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9114
                                                                                                                       // 9115
	    CFB.Encryptor = CFB.extend({                                                                                      // 9116
	        processBlock: function (words, offset) {                                                                      // 9117
	            // Shortcuts                                                                                              // 9118
	            var cipher = this._cipher;                                                                                // 9119
	            var blockSize = cipher.blockSize;                                                                         // 9120
                                                                                                                       // 9121
	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);                                 // 9122
                                                                                                                       // 9123
	            // Remember this block to use with next block                                                             // 9124
	            this._prevBlock = words.slice(offset, offset + blockSize);                                                // 9125
	        }                                                                                                             // 9126
	    });                                                                                                               // 9127
                                                                                                                       // 9128
	    CFB.Decryptor = CFB.extend({                                                                                      // 9129
	        processBlock: function (words, offset) {                                                                      // 9130
	            // Shortcuts                                                                                              // 9131
	            var cipher = this._cipher;                                                                                // 9132
	            var blockSize = cipher.blockSize;                                                                         // 9133
                                                                                                                       // 9134
	            // Remember this block to use with next block                                                             // 9135
	            var thisBlock = words.slice(offset, offset + blockSize);                                                  // 9136
                                                                                                                       // 9137
	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);                                 // 9138
                                                                                                                       // 9139
	            // This block becomes the previous block                                                                  // 9140
	            this._prevBlock = thisBlock;                                                                              // 9141
	        }                                                                                                             // 9142
	    });                                                                                                               // 9143
                                                                                                                       // 9144
	    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {                                          // 9145
	        // Shortcut                                                                                                   // 9146
	        var iv = this._iv;                                                                                            // 9147
                                                                                                                       // 9148
	        // Generate keystream                                                                                         // 9149
	        if (iv) {                                                                                                     // 9150
	            var keystream = iv.slice(0);                                                                              // 9151
                                                                                                                       // 9152
	            // Remove IV for subsequent blocks                                                                        // 9153
	            this._iv = undefined;                                                                                     // 9154
	        } else {                                                                                                      // 9155
	            var keystream = this._prevBlock;                                                                          // 9156
	        }                                                                                                             // 9157
	        cipher.encryptBlock(keystream, 0);                                                                            // 9158
                                                                                                                       // 9159
	        // Encrypt                                                                                                    // 9160
	        for (var i = 0; i < blockSize; i++) {                                                                         // 9161
	            words[offset + i] ^= keystream[i];                                                                        // 9162
	        }                                                                                                             // 9163
	    }                                                                                                                 // 9164
                                                                                                                       // 9165
	    return CFB;                                                                                                       // 9166
	}());                                                                                                                 // 9167
                                                                                                                       // 9168
                                                                                                                       // 9169
	return CryptoJS.mode.CFB;                                                                                             // 9170
                                                                                                                       // 9171
}));                                                                                                                   // 9172
},{"./cipher-core":50,"./core":51}],61:[function(require,module,exports){                                              // 9173
;(function (root, factory, undef) {                                                                                    // 9174
	if (typeof exports === "object") {                                                                                    // 9175
		// CommonJS                                                                                                          // 9176
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9177
	}                                                                                                                     // 9178
	else if (typeof define === "function" && define.amd) {                                                                // 9179
		// AMD                                                                                                               // 9180
		define(["./core", "./cipher-core"], factory);                                                                        // 9181
	}                                                                                                                     // 9182
	else {                                                                                                                // 9183
		// Global (browser)                                                                                                  // 9184
		factory(root.CryptoJS);                                                                                              // 9185
	}                                                                                                                     // 9186
}(this, function (CryptoJS) {                                                                                          // 9187
                                                                                                                       // 9188
	/** @preserve                                                                                                         // 9189
	 * Counter block mode compatible with  Dr Brian Gladman fileenc.c                                                     // 9190
	 * derived from CryptoJS.mode.CTR                                                                                     // 9191
	 * Jan Hruby jhruby.web@gmail.com                                                                                     // 9192
	 */                                                                                                                   // 9193
	CryptoJS.mode.CTRGladman = (function () {                                                                             // 9194
	    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();                                                           // 9195
                                                                                                                       // 9196
		function incWord(word)                                                                                               // 9197
		{                                                                                                                    // 9198
			if (((word >> 24) & 0xff) === 0xff) { //overflow                                                                    // 9199
			var b1 = (word >> 16)&0xff;                                                                                         // 9200
			var b2 = (word >> 8)&0xff;                                                                                          // 9201
			var b3 = word & 0xff;                                                                                               // 9202
                                                                                                                       // 9203
			if (b1 === 0xff) // overflow b1                                                                                     // 9204
			{                                                                                                                   // 9205
			b1 = 0;                                                                                                             // 9206
			if (b2 === 0xff)                                                                                                    // 9207
			{                                                                                                                   // 9208
				b2 = 0;                                                                                                            // 9209
				if (b3 === 0xff)                                                                                                   // 9210
				{                                                                                                                  // 9211
					b3 = 0;                                                                                                           // 9212
				}                                                                                                                  // 9213
				else                                                                                                               // 9214
				{                                                                                                                  // 9215
					++b3;                                                                                                             // 9216
				}                                                                                                                  // 9217
			}                                                                                                                   // 9218
			else                                                                                                                // 9219
			{                                                                                                                   // 9220
				++b2;                                                                                                              // 9221
			}                                                                                                                   // 9222
			}                                                                                                                   // 9223
			else                                                                                                                // 9224
			{                                                                                                                   // 9225
			++b1;                                                                                                               // 9226
			}                                                                                                                   // 9227
                                                                                                                       // 9228
			word = 0;                                                                                                           // 9229
			word += (b1 << 16);                                                                                                 // 9230
			word += (b2 << 8);                                                                                                  // 9231
			word += b3;                                                                                                         // 9232
			}                                                                                                                   // 9233
			else                                                                                                                // 9234
			{                                                                                                                   // 9235
			word += (0x01 << 24);                                                                                               // 9236
			}                                                                                                                   // 9237
			return word;                                                                                                        // 9238
		}                                                                                                                    // 9239
                                                                                                                       // 9240
		function incCounter(counter)                                                                                         // 9241
		{                                                                                                                    // 9242
			if ((counter[0] = incWord(counter[0])) === 0)                                                                       // 9243
			{                                                                                                                   // 9244
				// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8                                    // 9245
				counter[1] = incWord(counter[1]);                                                                                  // 9246
			}                                                                                                                   // 9247
			return counter;                                                                                                     // 9248
		}                                                                                                                    // 9249
                                                                                                                       // 9250
	    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({                                                        // 9251
	        processBlock: function (words, offset) {                                                                      // 9252
	            // Shortcuts                                                                                              // 9253
	            var cipher = this._cipher                                                                                 // 9254
	            var blockSize = cipher.blockSize;                                                                         // 9255
	            var iv = this._iv;                                                                                        // 9256
	            var counter = this._counter;                                                                              // 9257
                                                                                                                       // 9258
	            // Generate keystream                                                                                     // 9259
	            if (iv) {                                                                                                 // 9260
	                counter = this._counter = iv.slice(0);                                                                // 9261
                                                                                                                       // 9262
	                // Remove IV for subsequent blocks                                                                    // 9263
	                this._iv = undefined;                                                                                 // 9264
	            }                                                                                                         // 9265
                                                                                                                       // 9266
				incCounter(counter);                                                                                               // 9267
                                                                                                                       // 9268
				var keystream = counter.slice(0);                                                                                  // 9269
	            cipher.encryptBlock(keystream, 0);                                                                        // 9270
                                                                                                                       // 9271
	            // Encrypt                                                                                                // 9272
	            for (var i = 0; i < blockSize; i++) {                                                                     // 9273
	                words[offset + i] ^= keystream[i];                                                                    // 9274
	            }                                                                                                         // 9275
	        }                                                                                                             // 9276
	    });                                                                                                               // 9277
                                                                                                                       // 9278
	    CTRGladman.Decryptor = Encryptor;                                                                                 // 9279
                                                                                                                       // 9280
	    return CTRGladman;                                                                                                // 9281
	}());                                                                                                                 // 9282
                                                                                                                       // 9283
                                                                                                                       // 9284
                                                                                                                       // 9285
                                                                                                                       // 9286
	return CryptoJS.mode.CTRGladman;                                                                                      // 9287
                                                                                                                       // 9288
}));                                                                                                                   // 9289
},{"./cipher-core":50,"./core":51}],62:[function(require,module,exports){                                              // 9290
;(function (root, factory, undef) {                                                                                    // 9291
	if (typeof exports === "object") {                                                                                    // 9292
		// CommonJS                                                                                                          // 9293
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9294
	}                                                                                                                     // 9295
	else if (typeof define === "function" && define.amd) {                                                                // 9296
		// AMD                                                                                                               // 9297
		define(["./core", "./cipher-core"], factory);                                                                        // 9298
	}                                                                                                                     // 9299
	else {                                                                                                                // 9300
		// Global (browser)                                                                                                  // 9301
		factory(root.CryptoJS);                                                                                              // 9302
	}                                                                                                                     // 9303
}(this, function (CryptoJS) {                                                                                          // 9304
                                                                                                                       // 9305
	/**                                                                                                                   // 9306
	 * Counter block mode.                                                                                                // 9307
	 */                                                                                                                   // 9308
	CryptoJS.mode.CTR = (function () {                                                                                    // 9309
	    var CTR = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9310
                                                                                                                       // 9311
	    var Encryptor = CTR.Encryptor = CTR.extend({                                                                      // 9312
	        processBlock: function (words, offset) {                                                                      // 9313
	            // Shortcuts                                                                                              // 9314
	            var cipher = this._cipher                                                                                 // 9315
	            var blockSize = cipher.blockSize;                                                                         // 9316
	            var iv = this._iv;                                                                                        // 9317
	            var counter = this._counter;                                                                              // 9318
                                                                                                                       // 9319
	            // Generate keystream                                                                                     // 9320
	            if (iv) {                                                                                                 // 9321
	                counter = this._counter = iv.slice(0);                                                                // 9322
                                                                                                                       // 9323
	                // Remove IV for subsequent blocks                                                                    // 9324
	                this._iv = undefined;                                                                                 // 9325
	            }                                                                                                         // 9326
	            var keystream = counter.slice(0);                                                                         // 9327
	            cipher.encryptBlock(keystream, 0);                                                                        // 9328
                                                                                                                       // 9329
	            // Increment counter                                                                                      // 9330
	            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0                                                 // 9331
                                                                                                                       // 9332
	            // Encrypt                                                                                                // 9333
	            for (var i = 0; i < blockSize; i++) {                                                                     // 9334
	                words[offset + i] ^= keystream[i];                                                                    // 9335
	            }                                                                                                         // 9336
	        }                                                                                                             // 9337
	    });                                                                                                               // 9338
                                                                                                                       // 9339
	    CTR.Decryptor = Encryptor;                                                                                        // 9340
                                                                                                                       // 9341
	    return CTR;                                                                                                       // 9342
	}());                                                                                                                 // 9343
                                                                                                                       // 9344
                                                                                                                       // 9345
	return CryptoJS.mode.CTR;                                                                                             // 9346
                                                                                                                       // 9347
}));                                                                                                                   // 9348
},{"./cipher-core":50,"./core":51}],63:[function(require,module,exports){                                              // 9349
;(function (root, factory, undef) {                                                                                    // 9350
	if (typeof exports === "object") {                                                                                    // 9351
		// CommonJS                                                                                                          // 9352
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9353
	}                                                                                                                     // 9354
	else if (typeof define === "function" && define.amd) {                                                                // 9355
		// AMD                                                                                                               // 9356
		define(["./core", "./cipher-core"], factory);                                                                        // 9357
	}                                                                                                                     // 9358
	else {                                                                                                                // 9359
		// Global (browser)                                                                                                  // 9360
		factory(root.CryptoJS);                                                                                              // 9361
	}                                                                                                                     // 9362
}(this, function (CryptoJS) {                                                                                          // 9363
                                                                                                                       // 9364
	/**                                                                                                                   // 9365
	 * Electronic Codebook block mode.                                                                                    // 9366
	 */                                                                                                                   // 9367
	CryptoJS.mode.ECB = (function () {                                                                                    // 9368
	    var ECB = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9369
                                                                                                                       // 9370
	    ECB.Encryptor = ECB.extend({                                                                                      // 9371
	        processBlock: function (words, offset) {                                                                      // 9372
	            this._cipher.encryptBlock(words, offset);                                                                 // 9373
	        }                                                                                                             // 9374
	    });                                                                                                               // 9375
                                                                                                                       // 9376
	    ECB.Decryptor = ECB.extend({                                                                                      // 9377
	        processBlock: function (words, offset) {                                                                      // 9378
	            this._cipher.decryptBlock(words, offset);                                                                 // 9379
	        }                                                                                                             // 9380
	    });                                                                                                               // 9381
                                                                                                                       // 9382
	    return ECB;                                                                                                       // 9383
	}());                                                                                                                 // 9384
                                                                                                                       // 9385
                                                                                                                       // 9386
	return CryptoJS.mode.ECB;                                                                                             // 9387
                                                                                                                       // 9388
}));                                                                                                                   // 9389
},{"./cipher-core":50,"./core":51}],64:[function(require,module,exports){                                              // 9390
;(function (root, factory, undef) {                                                                                    // 9391
	if (typeof exports === "object") {                                                                                    // 9392
		// CommonJS                                                                                                          // 9393
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9394
	}                                                                                                                     // 9395
	else if (typeof define === "function" && define.amd) {                                                                // 9396
		// AMD                                                                                                               // 9397
		define(["./core", "./cipher-core"], factory);                                                                        // 9398
	}                                                                                                                     // 9399
	else {                                                                                                                // 9400
		// Global (browser)                                                                                                  // 9401
		factory(root.CryptoJS);                                                                                              // 9402
	}                                                                                                                     // 9403
}(this, function (CryptoJS) {                                                                                          // 9404
                                                                                                                       // 9405
	/**                                                                                                                   // 9406
	 * Output Feedback block mode.                                                                                        // 9407
	 */                                                                                                                   // 9408
	CryptoJS.mode.OFB = (function () {                                                                                    // 9409
	    var OFB = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9410
                                                                                                                       // 9411
	    var Encryptor = OFB.Encryptor = OFB.extend({                                                                      // 9412
	        processBlock: function (words, offset) {                                                                      // 9413
	            // Shortcuts                                                                                              // 9414
	            var cipher = this._cipher                                                                                 // 9415
	            var blockSize = cipher.blockSize;                                                                         // 9416
	            var iv = this._iv;                                                                                        // 9417
	            var keystream = this._keystream;                                                                          // 9418
                                                                                                                       // 9419
	            // Generate keystream                                                                                     // 9420
	            if (iv) {                                                                                                 // 9421
	                keystream = this._keystream = iv.slice(0);                                                            // 9422
                                                                                                                       // 9423
	                // Remove IV for subsequent blocks                                                                    // 9424
	                this._iv = undefined;                                                                                 // 9425
	            }                                                                                                         // 9426
	            cipher.encryptBlock(keystream, 0);                                                                        // 9427
                                                                                                                       // 9428
	            // Encrypt                                                                                                // 9429
	            for (var i = 0; i < blockSize; i++) {                                                                     // 9430
	                words[offset + i] ^= keystream[i];                                                                    // 9431
	            }                                                                                                         // 9432
	        }                                                                                                             // 9433
	    });                                                                                                               // 9434
                                                                                                                       // 9435
	    OFB.Decryptor = Encryptor;                                                                                        // 9436
                                                                                                                       // 9437
	    return OFB;                                                                                                       // 9438
	}());                                                                                                                 // 9439
                                                                                                                       // 9440
                                                                                                                       // 9441
	return CryptoJS.mode.OFB;                                                                                             // 9442
                                                                                                                       // 9443
}));                                                                                                                   // 9444
},{"./cipher-core":50,"./core":51}],65:[function(require,module,exports){                                              // 9445
;(function (root, factory, undef) {                                                                                    // 9446
	if (typeof exports === "object") {                                                                                    // 9447
		// CommonJS                                                                                                          // 9448
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9449
	}                                                                                                                     // 9450
	else if (typeof define === "function" && define.amd) {                                                                // 9451
		// AMD                                                                                                               // 9452
		define(["./core", "./cipher-core"], factory);                                                                        // 9453
	}                                                                                                                     // 9454
	else {                                                                                                                // 9455
		// Global (browser)                                                                                                  // 9456
		factory(root.CryptoJS);                                                                                              // 9457
	}                                                                                                                     // 9458
}(this, function (CryptoJS) {                                                                                          // 9459
                                                                                                                       // 9460
	/**                                                                                                                   // 9461
	 * ANSI X.923 padding strategy.                                                                                       // 9462
	 */                                                                                                                   // 9463
	CryptoJS.pad.AnsiX923 = {                                                                                             // 9464
	    pad: function (data, blockSize) {                                                                                 // 9465
	        // Shortcuts                                                                                                  // 9466
	        var dataSigBytes = data.sigBytes;                                                                             // 9467
	        var blockSizeBytes = blockSize * 4;                                                                           // 9468
                                                                                                                       // 9469
	        // Count padding bytes                                                                                        // 9470
	        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;                                           // 9471
                                                                                                                       // 9472
	        // Compute last byte position                                                                                 // 9473
	        var lastBytePos = dataSigBytes + nPaddingBytes - 1;                                                           // 9474
                                                                                                                       // 9475
	        // Pad                                                                                                        // 9476
	        data.clamp();                                                                                                 // 9477
	        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);                               // 9478
	        data.sigBytes += nPaddingBytes;                                                                               // 9479
	    },                                                                                                                // 9480
                                                                                                                       // 9481
	    unpad: function (data) {                                                                                          // 9482
	        // Get number of padding bytes from last byte                                                                 // 9483
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                             // 9484
                                                                                                                       // 9485
	        // Remove padding                                                                                             // 9486
	        data.sigBytes -= nPaddingBytes;                                                                               // 9487
	    }                                                                                                                 // 9488
	};                                                                                                                    // 9489
                                                                                                                       // 9490
                                                                                                                       // 9491
	return CryptoJS.pad.Ansix923;                                                                                         // 9492
                                                                                                                       // 9493
}));                                                                                                                   // 9494
},{"./cipher-core":50,"./core":51}],66:[function(require,module,exports){                                              // 9495
;(function (root, factory, undef) {                                                                                    // 9496
	if (typeof exports === "object") {                                                                                    // 9497
		// CommonJS                                                                                                          // 9498
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9499
	}                                                                                                                     // 9500
	else if (typeof define === "function" && define.amd) {                                                                // 9501
		// AMD                                                                                                               // 9502
		define(["./core", "./cipher-core"], factory);                                                                        // 9503
	}                                                                                                                     // 9504
	else {                                                                                                                // 9505
		// Global (browser)                                                                                                  // 9506
		factory(root.CryptoJS);                                                                                              // 9507
	}                                                                                                                     // 9508
}(this, function (CryptoJS) {                                                                                          // 9509
                                                                                                                       // 9510
	/**                                                                                                                   // 9511
	 * ISO 10126 padding strategy.                                                                                        // 9512
	 */                                                                                                                   // 9513
	CryptoJS.pad.Iso10126 = {                                                                                             // 9514
	    pad: function (data, blockSize) {                                                                                 // 9515
	        // Shortcut                                                                                                   // 9516
	        var blockSizeBytes = blockSize * 4;                                                                           // 9517
                                                                                                                       // 9518
	        // Count padding bytes                                                                                        // 9519
	        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;                                          // 9520
                                                                                                                       // 9521
	        // Pad                                                                                                        // 9522
	        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).                                                // 9523
	             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));                                         // 9524
	    },                                                                                                                // 9525
                                                                                                                       // 9526
	    unpad: function (data) {                                                                                          // 9527
	        // Get number of padding bytes from last byte                                                                 // 9528
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                             // 9529
                                                                                                                       // 9530
	        // Remove padding                                                                                             // 9531
	        data.sigBytes -= nPaddingBytes;                                                                               // 9532
	    }                                                                                                                 // 9533
	};                                                                                                                    // 9534
                                                                                                                       // 9535
                                                                                                                       // 9536
	return CryptoJS.pad.Iso10126;                                                                                         // 9537
                                                                                                                       // 9538
}));                                                                                                                   // 9539
},{"./cipher-core":50,"./core":51}],67:[function(require,module,exports){                                              // 9540
;(function (root, factory, undef) {                                                                                    // 9541
	if (typeof exports === "object") {                                                                                    // 9542
		// CommonJS                                                                                                          // 9543
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9544
	}                                                                                                                     // 9545
	else if (typeof define === "function" && define.amd) {                                                                // 9546
		// AMD                                                                                                               // 9547
		define(["./core", "./cipher-core"], factory);                                                                        // 9548
	}                                                                                                                     // 9549
	else {                                                                                                                // 9550
		// Global (browser)                                                                                                  // 9551
		factory(root.CryptoJS);                                                                                              // 9552
	}                                                                                                                     // 9553
}(this, function (CryptoJS) {                                                                                          // 9554
                                                                                                                       // 9555
	/**                                                                                                                   // 9556
	 * ISO/IEC 9797-1 Padding Method 2.                                                                                   // 9557
	 */                                                                                                                   // 9558
	CryptoJS.pad.Iso97971 = {                                                                                             // 9559
	    pad: function (data, blockSize) {                                                                                 // 9560
	        // Add 0x80 byte                                                                                              // 9561
	        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));                                                  // 9562
                                                                                                                       // 9563
	        // Zero pad the rest                                                                                          // 9564
	        CryptoJS.pad.ZeroPadding.pad(data, blockSize);                                                                // 9565
	    },                                                                                                                // 9566
                                                                                                                       // 9567
	    unpad: function (data) {                                                                                          // 9568
	        // Remove zero padding                                                                                        // 9569
	        CryptoJS.pad.ZeroPadding.unpad(data);                                                                         // 9570
                                                                                                                       // 9571
	        // Remove one more byte -- the 0x80 byte                                                                      // 9572
	        data.sigBytes--;                                                                                              // 9573
	    }                                                                                                                 // 9574
	};                                                                                                                    // 9575
                                                                                                                       // 9576
                                                                                                                       // 9577
	return CryptoJS.pad.Iso97971;                                                                                         // 9578
                                                                                                                       // 9579
}));                                                                                                                   // 9580
},{"./cipher-core":50,"./core":51}],68:[function(require,module,exports){                                              // 9581
;(function (root, factory, undef) {                                                                                    // 9582
	if (typeof exports === "object") {                                                                                    // 9583
		// CommonJS                                                                                                          // 9584
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9585
	}                                                                                                                     // 9586
	else if (typeof define === "function" && define.amd) {                                                                // 9587
		// AMD                                                                                                               // 9588
		define(["./core", "./cipher-core"], factory);                                                                        // 9589
	}                                                                                                                     // 9590
	else {                                                                                                                // 9591
		// Global (browser)                                                                                                  // 9592
		factory(root.CryptoJS);                                                                                              // 9593
	}                                                                                                                     // 9594
}(this, function (CryptoJS) {                                                                                          // 9595
                                                                                                                       // 9596
	/**                                                                                                                   // 9597
	 * A noop padding strategy.                                                                                           // 9598
	 */                                                                                                                   // 9599
	CryptoJS.pad.NoPadding = {                                                                                            // 9600
	    pad: function () {                                                                                                // 9601
	    },                                                                                                                // 9602
                                                                                                                       // 9603
	    unpad: function () {                                                                                              // 9604
	    }                                                                                                                 // 9605
	};                                                                                                                    // 9606
                                                                                                                       // 9607
                                                                                                                       // 9608
	return CryptoJS.pad.NoPadding;                                                                                        // 9609
                                                                                                                       // 9610
}));                                                                                                                   // 9611
},{"./cipher-core":50,"./core":51}],69:[function(require,module,exports){                                              // 9612
;(function (root, factory, undef) {                                                                                    // 9613
	if (typeof exports === "object") {                                                                                    // 9614
		// CommonJS                                                                                                          // 9615
		module.exports = exports = factory(require("./core"), require("./cipher-core"));                                     // 9616
	}                                                                                                                     // 9617
	else if (typeof define === "function" && define.amd) {                                                                // 9618
		// AMD                                                                                                               // 9619
		define(["./core", "./cipher-core"], factory);                                                                        // 9620
	}                                                                                                                     // 9621
	else {                                                                                                                // 9622
		// Global (browser)                                                                                                  // 9623
		factory(root.CryptoJS);                                                                                              // 9624
	}                                                                                                                     // 9625
}(this, function (CryptoJS) {                                                                                          // 9626
                                                                                                                       // 9627
	/**                                                                                                                   // 9628
	 * Zero padding strategy.                                                                                             // 9629
	 */                                                                                                                   // 9630
	CryptoJS.pad.ZeroPadding = {                                                                                          // 9631
	    pad: function (data, blockSize) {                                                                                 // 9632
	        // Shortcut                                                                                                   // 9633
	        var blockSizeBytes = blockSize * 4;                                                                           // 9634
                                                                                                                       // 9635
	        // Pad                                                                                                        // 9636
	        data.clamp();                                                                                                 // 9637
	        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);                       // 9638
	    },                                                                                                                // 9639
                                                                                                                       // 9640
	    unpad: function (data) {                                                                                          // 9641
	        // Shortcut                                                                                                   // 9642
	        var dataWords = data.words;                                                                                   // 9643
                                                                                                                       // 9644
	        // Unpad                                                                                                      // 9645
	        var i = data.sigBytes - 1;                                                                                    // 9646
	        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {                                               // 9647
	            i--;                                                                                                      // 9648
	        }                                                                                                             // 9649
	        data.sigBytes = i + 1;                                                                                        // 9650
	    }                                                                                                                 // 9651
	};                                                                                                                    // 9652
                                                                                                                       // 9653
                                                                                                                       // 9654
	return CryptoJS.pad.ZeroPadding;                                                                                      // 9655
                                                                                                                       // 9656
}));                                                                                                                   // 9657
},{"./cipher-core":50,"./core":51}],70:[function(require,module,exports){                                              // 9658
;(function (root, factory, undef) {                                                                                    // 9659
	if (typeof exports === "object") {                                                                                    // 9660
		// CommonJS                                                                                                          // 9661
		module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));                         // 9662
	}                                                                                                                     // 9663
	else if (typeof define === "function" && define.amd) {                                                                // 9664
		// AMD                                                                                                               // 9665
		define(["./core", "./sha1", "./hmac"], factory);                                                                     // 9666
	}                                                                                                                     // 9667
	else {                                                                                                                // 9668
		// Global (browser)                                                                                                  // 9669
		factory(root.CryptoJS);                                                                                              // 9670
	}                                                                                                                     // 9671
}(this, function (CryptoJS) {                                                                                          // 9672
                                                                                                                       // 9673
	(function () {                                                                                                        // 9674
	    // Shortcuts                                                                                                      // 9675
	    var C = CryptoJS;                                                                                                 // 9676
	    var C_lib = C.lib;                                                                                                // 9677
	    var Base = C_lib.Base;                                                                                            // 9678
	    var WordArray = C_lib.WordArray;                                                                                  // 9679
	    var C_algo = C.algo;                                                                                              // 9680
	    var SHA1 = C_algo.SHA1;                                                                                           // 9681
	    var HMAC = C_algo.HMAC;                                                                                           // 9682
                                                                                                                       // 9683
	    /**                                                                                                               // 9684
	     * Password-Based Key Derivation Function 2 algorithm.                                                            // 9685
	     */                                                                                                               // 9686
	    var PBKDF2 = C_algo.PBKDF2 = Base.extend({                                                                        // 9687
	        /**                                                                                                           // 9688
	         * Configuration options.                                                                                     // 9689
	         *                                                                                                            // 9690
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)                        // 9691
	         * @property {Hasher} hasher The hasher to use. Default: SHA1                                                 // 9692
	         * @property {number} iterations The number of iterations to perform. Default: 1                              // 9693
	         */                                                                                                           // 9694
	        cfg: Base.extend({                                                                                            // 9695
	            keySize: 128/32,                                                                                          // 9696
	            hasher: SHA1,                                                                                             // 9697
	            iterations: 1                                                                                             // 9698
	        }),                                                                                                           // 9699
                                                                                                                       // 9700
	        /**                                                                                                           // 9701
	         * Initializes a newly created key derivation function.                                                       // 9702
	         *                                                                                                            // 9703
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.                        // 9704
	         *                                                                                                            // 9705
	         * @example                                                                                                   // 9706
	         *                                                                                                            // 9707
	         *     var kdf = CryptoJS.algo.PBKDF2.create();                                                               // 9708
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });                                                 // 9709
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });                               // 9710
	         */                                                                                                           // 9711
	        init: function (cfg) {                                                                                        // 9712
	            this.cfg = this.cfg.extend(cfg);                                                                          // 9713
	        },                                                                                                            // 9714
                                                                                                                       // 9715
	        /**                                                                                                           // 9716
	         * Computes the Password-Based Key Derivation Function 2.                                                     // 9717
	         *                                                                                                            // 9718
	         * @param {WordArray|string} password The password.                                                           // 9719
	         * @param {WordArray|string} salt A salt.                                                                     // 9720
	         *                                                                                                            // 9721
	         * @return {WordArray} The derived key.                                                                       // 9722
	         *                                                                                                            // 9723
	         * @example                                                                                                   // 9724
	         *                                                                                                            // 9725
	         *     var key = kdf.compute(password, salt);                                                                 // 9726
	         */                                                                                                           // 9727
	        compute: function (password, salt) {                                                                          // 9728
	            // Shortcut                                                                                               // 9729
	            var cfg = this.cfg;                                                                                       // 9730
                                                                                                                       // 9731
	            // Init HMAC                                                                                              // 9732
	            var hmac = HMAC.create(cfg.hasher, password);                                                             // 9733
                                                                                                                       // 9734
	            // Initial values                                                                                         // 9735
	            var derivedKey = WordArray.create();                                                                      // 9736
	            var blockIndex = WordArray.create([0x00000001]);                                                          // 9737
                                                                                                                       // 9738
	            // Shortcuts                                                                                              // 9739
	            var derivedKeyWords = derivedKey.words;                                                                   // 9740
	            var blockIndexWords = blockIndex.words;                                                                   // 9741
	            var keySize = cfg.keySize;                                                                                // 9742
	            var iterations = cfg.iterations;                                                                          // 9743
                                                                                                                       // 9744
	            // Generate key                                                                                           // 9745
	            while (derivedKeyWords.length < keySize) {                                                                // 9746
	                var block = hmac.update(salt).finalize(blockIndex);                                                   // 9747
	                hmac.reset();                                                                                         // 9748
                                                                                                                       // 9749
	                // Shortcuts                                                                                          // 9750
	                var blockWords = block.words;                                                                         // 9751
	                var blockWordsLength = blockWords.length;                                                             // 9752
                                                                                                                       // 9753
	                // Iterations                                                                                         // 9754
	                var intermediate = block;                                                                             // 9755
	                for (var i = 1; i < iterations; i++) {                                                                // 9756
	                    intermediate = hmac.finalize(intermediate);                                                       // 9757
	                    hmac.reset();                                                                                     // 9758
                                                                                                                       // 9759
	                    // Shortcut                                                                                       // 9760
	                    var intermediateWords = intermediate.words;                                                       // 9761
                                                                                                                       // 9762
	                    // XOR intermediate with block                                                                    // 9763
	                    for (var j = 0; j < blockWordsLength; j++) {                                                      // 9764
	                        blockWords[j] ^= intermediateWords[j];                                                        // 9765
	                    }                                                                                                 // 9766
	                }                                                                                                     // 9767
                                                                                                                       // 9768
	                derivedKey.concat(block);                                                                             // 9769
	                blockIndexWords[0]++;                                                                                 // 9770
	            }                                                                                                         // 9771
	            derivedKey.sigBytes = keySize * 4;                                                                        // 9772
                                                                                                                       // 9773
	            return derivedKey;                                                                                        // 9774
	        }                                                                                                             // 9775
	    });                                                                                                               // 9776
                                                                                                                       // 9777
	    /**                                                                                                               // 9778
	     * Computes the Password-Based Key Derivation Function 2.                                                         // 9779
	     *                                                                                                                // 9780
	     * @param {WordArray|string} password The password.                                                               // 9781
	     * @param {WordArray|string} salt A salt.                                                                         // 9782
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.                          // 9783
	     *                                                                                                                // 9784
	     * @return {WordArray} The derived key.                                                                           // 9785
	     *                                                                                                                // 9786
	     * @static                                                                                                        // 9787
	     *                                                                                                                // 9788
	     * @example                                                                                                       // 9789
	     *                                                                                                                // 9790
	     *     var key = CryptoJS.PBKDF2(password, salt);                                                                 // 9791
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });                                                 // 9792
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });                               // 9793
	     */                                                                                                               // 9794
	    C.PBKDF2 = function (password, salt, cfg) {                                                                       // 9795
	        return PBKDF2.create(cfg).compute(password, salt);                                                            // 9796
	    };                                                                                                                // 9797
	}());                                                                                                                 // 9798
                                                                                                                       // 9799
                                                                                                                       // 9800
	return CryptoJS.PBKDF2;                                                                                               // 9801
                                                                                                                       // 9802
}));                                                                                                                   // 9803
},{"./core":51,"./hmac":56,"./sha1":75}],71:[function(require,module,exports){                                         // 9804
;(function (root, factory, undef) {                                                                                    // 9805
	if (typeof exports === "object") {                                                                                    // 9806
		// CommonJS                                                                                                          // 9807
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 9809
	else if (typeof define === "function" && define.amd) {                                                                // 9810
		// AMD                                                                                                               // 9811
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 9812
	}                                                                                                                     // 9813
	else {                                                                                                                // 9814
		// Global (browser)                                                                                                  // 9815
		factory(root.CryptoJS);                                                                                              // 9816
	}                                                                                                                     // 9817
}(this, function (CryptoJS) {                                                                                          // 9818
                                                                                                                       // 9819
	(function () {                                                                                                        // 9820
	    // Shortcuts                                                                                                      // 9821
	    var C = CryptoJS;                                                                                                 // 9822
	    var C_lib = C.lib;                                                                                                // 9823
	    var StreamCipher = C_lib.StreamCipher;                                                                            // 9824
	    var C_algo = C.algo;                                                                                              // 9825
                                                                                                                       // 9826
	    // Reusable objects                                                                                               // 9827
	    var S  = [];                                                                                                      // 9828
	    var C_ = [];                                                                                                      // 9829
	    var G  = [];                                                                                                      // 9830
                                                                                                                       // 9831
	    /**                                                                                                               // 9832
	     * Rabbit stream cipher algorithm.                                                                                // 9833
	     *                                                                                                                // 9834
	     * This is a legacy version that neglected to convert the key to little-endian.                                   // 9835
	     * This error doesn't affect the cipher's security,                                                               // 9836
	     * but it does affect its compatibility with other implementations.                                               // 9837
	     */                                                                                                               // 9838
	    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({                                                    // 9839
	        _doReset: function () {                                                                                       // 9840
	            // Shortcuts                                                                                              // 9841
	            var K = this._key.words;                                                                                  // 9842
	            var iv = this.cfg.iv;                                                                                     // 9843
                                                                                                                       // 9844
	            // Generate initial state values                                                                          // 9845
	            var X = this._X = [                                                                                       // 9846
	                K[0], (K[3] << 16) | (K[2] >>> 16),                                                                   // 9847
	                K[1], (K[0] << 16) | (K[3] >>> 16),                                                                   // 9848
	                K[2], (K[1] << 16) | (K[0] >>> 16),                                                                   // 9849
	                K[3], (K[2] << 16) | (K[1] >>> 16)                                                                    // 9850
	            ];                                                                                                        // 9851
                                                                                                                       // 9852
	            // Generate initial counter values                                                                        // 9853
	            var C = this._C = [                                                                                       // 9854
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),                              // 9855
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),                              // 9856
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),                              // 9857
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)                               // 9858
	            ];                                                                                                        // 9859
                                                                                                                       // 9860
	            // Carry bit                                                                                              // 9861
	            this._b = 0;                                                                                              // 9862
                                                                                                                       // 9863
	            // Iterate the system four times                                                                          // 9864
	            for (var i = 0; i < 4; i++) {                                                                             // 9865
	                nextState.call(this);                                                                                 // 9866
	            }                                                                                                         // 9867
                                                                                                                       // 9868
	            // Modify the counters                                                                                    // 9869
	            for (var i = 0; i < 8; i++) {                                                                             // 9870
	                C[i] ^= X[(i + 4) & 7];                                                                               // 9871
	            }                                                                                                         // 9872
                                                                                                                       // 9873
	            // IV setup                                                                                               // 9874
	            if (iv) {                                                                                                 // 9875
	                // Shortcuts                                                                                          // 9876
	                var IV = iv.words;                                                                                    // 9877
	                var IV_0 = IV[0];                                                                                     // 9878
	                var IV_1 = IV[1];                                                                                     // 9879
                                                                                                                       // 9880
	                // Generate four subvectors                                                                           // 9881
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);                                                             // 9884
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);                                                             // 9885
                                                                                                                       // 9886
	                // Modify counter values                                                                              // 9887
	                C[0] ^= i0;                                                                                           // 9888
	                C[1] ^= i1;                                                                                           // 9889
	                C[2] ^= i2;                                                                                           // 9890
	                C[3] ^= i3;                                                                                           // 9891
	                C[4] ^= i0;                                                                                           // 9892
	                C[5] ^= i1;                                                                                           // 9893
	                C[6] ^= i2;                                                                                           // 9894
	                C[7] ^= i3;                                                                                           // 9895
                                                                                                                       // 9896
	                // Iterate the system four times                                                                      // 9897
	                for (var i = 0; i < 4; i++) {                                                                         // 9898
	                    nextState.call(this);                                                                             // 9899
	                }                                                                                                     // 9900
	            }                                                                                                         // 9901
	        },                                                                                                            // 9902
                                                                                                                       // 9903
	        _doProcessBlock: function (M, offset) {                                                                       // 9904
	            // Shortcut                                                                                               // 9905
	            var X = this._X;                                                                                          // 9906
                                                                                                                       // 9907
	            // Iterate the system                                                                                     // 9908
	            nextState.call(this);                                                                                     // 9909
                                                                                                                       // 9910
	            // Generate four keystream words                                                                          // 9911
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);                                                               // 9912
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);                                                               // 9913
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);                                                               // 9914
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);                                                               // 9915
                                                                                                                       // 9916
	            for (var i = 0; i < 4; i++) {                                                                             // 9917
	                // Swap endian                                                                                        // 9918
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |                                                // 9919
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);                                                 // 9920
                                                                                                                       // 9921
	                // Encrypt                                                                                            // 9922
	                M[offset + i] ^= S[i];                                                                                // 9923
	            }                                                                                                         // 9924
	        },                                                                                                            // 9925
                                                                                                                       // 9926
	        blockSize: 128/32,                                                                                            // 9927
                                                                                                                       // 9928
	        ivSize: 64/32                                                                                                 // 9929
	    });                                                                                                               // 9930
                                                                                                                       // 9931
	    function nextState() {                                                                                            // 9932
	        // Shortcuts                                                                                                  // 9933
	        var X = this._X;                                                                                              // 9934
	        var C = this._C;                                                                                              // 9935
                                                                                                                       // 9936
	        // Save old counter values                                                                                    // 9937
	        for (var i = 0; i < 8; i++) {                                                                                 // 9938
	            C_[i] = C[i];                                                                                             // 9939
	        }                                                                                                             // 9940
                                                                                                                       // 9941
	        // Calculate new counter values                                                                               // 9942
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;                                                                     // 9943
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;                                      // 9944
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;                                      // 9945
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;                                      // 9946
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;                                      // 9947
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;                                      // 9948
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;                                      // 9949
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;                                      // 9950
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;                                                               // 9951
                                                                                                                       // 9952
	        // Calculate the g-values                                                                                     // 9953
	        for (var i = 0; i < 8; i++) {                                                                                 // 9954
	            var gx = X[i] + C[i];                                                                                     // 9955
                                                                                                                       // 9956
	            // Construct high and low argument for squaring                                                           // 9957
	            var ga = gx & 0xffff;                                                                                     // 9958
	            var gb = gx >>> 16;                                                                                       // 9959
                                                                                                                       // 9960
	            // Calculate high and low result of squaring                                                              // 9961
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;                                               // 9962
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);                                 // 9963
                                                                                                                       // 9964
	            // High XOR low                                                                                           // 9965
	            G[i] = gh ^ gl;                                                                                           // 9966
	        }                                                                                                             // 9967
                                                                                                                       // 9968
	        // Calculate new state values                                                                                 // 9969
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;                          // 9970
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;                                                    // 9971
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;                          // 9972
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;                                                    // 9973
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;                          // 9974
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;                                                    // 9975
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;                          // 9976
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;                                                    // 9977
	    }                                                                                                                 // 9978
                                                                                                                       // 9979
	    /**                                                                                                               // 9980
	     * Shortcut functions to the cipher's object interface.                                                           // 9981
	     *                                                                                                                // 9982
	     * @example                                                                                                       // 9983
	     *                                                                                                                // 9984
	     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);                                         // 9985
	     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);                                      // 9986
	     */                                                                                                               // 9987
	    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);                                                        // 9988
	}());                                                                                                                 // 9989
                                                                                                                       // 9990
                                                                                                                       // 9991
	return CryptoJS.RabbitLegacy;                                                                                         // 9992
                                                                                                                       // 9993
}));                                                                                                                   // 9994
},{"./cipher-core":50,"./core":51,"./enc-base64":52,"./evpkdf":54,"./md5":59}],72:[function(require,module,exports){   // 9995
;(function (root, factory, undef) {                                                                                    // 9996
	if (typeof exports === "object") {                                                                                    // 9997
		// CommonJS                                                                                                          // 9998
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 10000
	else if (typeof define === "function" && define.amd) {                                                                // 10001
		// AMD                                                                                                               // 10002
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 10003
	}                                                                                                                     // 10004
	else {                                                                                                                // 10005
		// Global (browser)                                                                                                  // 10006
		factory(root.CryptoJS);                                                                                              // 10007
	}                                                                                                                     // 10008
}(this, function (CryptoJS) {                                                                                          // 10009
                                                                                                                       // 10010
	(function () {                                                                                                        // 10011
	    // Shortcuts                                                                                                      // 10012
	    var C = CryptoJS;                                                                                                 // 10013
	    var C_lib = C.lib;                                                                                                // 10014
	    var StreamCipher = C_lib.StreamCipher;                                                                            // 10015
	    var C_algo = C.algo;                                                                                              // 10016
                                                                                                                       // 10017
	    // Reusable objects                                                                                               // 10018
	    var S  = [];                                                                                                      // 10019
	    var C_ = [];                                                                                                      // 10020
	    var G  = [];                                                                                                      // 10021
                                                                                                                       // 10022
	    /**                                                                                                               // 10023
	     * Rabbit stream cipher algorithm                                                                                 // 10024
	     */                                                                                                               // 10025
	    var Rabbit = C_algo.Rabbit = StreamCipher.extend({                                                                // 10026
	        _doReset: function () {                                                                                       // 10027
	            // Shortcuts                                                                                              // 10028
	            var K = this._key.words;                                                                                  // 10029
	            var iv = this.cfg.iv;                                                                                     // 10030
                                                                                                                       // 10031
	            // Swap endian                                                                                            // 10032
	            for (var i = 0; i < 4; i++) {                                                                             // 10033
	                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |                                                // 10034
	                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);                                                 // 10035
	            }                                                                                                         // 10036
                                                                                                                       // 10037
	            // Generate initial state values                                                                          // 10038
	            var X = this._X = [                                                                                       // 10039
	                K[0], (K[3] << 16) | (K[2] >>> 16),                                                                   // 10040
	                K[1], (K[0] << 16) | (K[3] >>> 16),                                                                   // 10041
	                K[2], (K[1] << 16) | (K[0] >>> 16),                                                                   // 10042
	                K[3], (K[2] << 16) | (K[1] >>> 16)                                                                    // 10043
	            ];                                                                                                        // 10044
                                                                                                                       // 10045
	            // Generate initial counter values                                                                        // 10046
	            var C = this._C = [                                                                                       // 10047
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),                              // 10048
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),                              // 10049
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),                              // 10050
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)                               // 10051
	            ];                                                                                                        // 10052
                                                                                                                       // 10053
	            // Carry bit                                                                                              // 10054
	            this._b = 0;                                                                                              // 10055
                                                                                                                       // 10056
	            // Iterate the system four times                                                                          // 10057
	            for (var i = 0; i < 4; i++) {                                                                             // 10058
	                nextState.call(this);                                                                                 // 10059
	            }                                                                                                         // 10060
                                                                                                                       // 10061
	            // Modify the counters                                                                                    // 10062
	            for (var i = 0; i < 8; i++) {                                                                             // 10063
	                C[i] ^= X[(i + 4) & 7];                                                                               // 10064
	            }                                                                                                         // 10065
                                                                                                                       // 10066
	            // IV setup                                                                                               // 10067
	            if (iv) {                                                                                                 // 10068
	                // Shortcuts                                                                                          // 10069
	                var IV = iv.words;                                                                                    // 10070
	                var IV_0 = IV[0];                                                                                     // 10071
	                var IV_1 = IV[1];                                                                                     // 10072
                                                                                                                       // 10073
	                // Generate four subvectors                                                                           // 10074
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);                                                             // 10077
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);                                                             // 10078
                                                                                                                       // 10079
	                // Modify counter values                                                                              // 10080
	                C[0] ^= i0;                                                                                           // 10081
	                C[1] ^= i1;                                                                                           // 10082
	                C[2] ^= i2;                                                                                           // 10083
	                C[3] ^= i3;                                                                                           // 10084
	                C[4] ^= i0;                                                                                           // 10085
	                C[5] ^= i1;                                                                                           // 10086
	                C[6] ^= i2;                                                                                           // 10087
	                C[7] ^= i3;                                                                                           // 10088
                                                                                                                       // 10089
	                // Iterate the system four times                                                                      // 10090
	                for (var i = 0; i < 4; i++) {                                                                         // 10091
	                    nextState.call(this);                                                                             // 10092
	                }                                                                                                     // 10093
	            }                                                                                                         // 10094
	        },                                                                                                            // 10095
                                                                                                                       // 10096
	        _doProcessBlock: function (M, offset) {                                                                       // 10097
	            // Shortcut                                                                                               // 10098
	            var X = this._X;                                                                                          // 10099
                                                                                                                       // 10100
	            // Iterate the system                                                                                     // 10101
	            nextState.call(this);                                                                                     // 10102
                                                                                                                       // 10103
	            // Generate four keystream words                                                                          // 10104
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);                                                               // 10105
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);                                                               // 10106
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);                                                               // 10107
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);                                                               // 10108
                                                                                                                       // 10109
	            for (var i = 0; i < 4; i++) {                                                                             // 10110
	                // Swap endian                                                                                        // 10111
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |                                                // 10112
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);                                                 // 10113
                                                                                                                       // 10114
	                // Encrypt                                                                                            // 10115
	                M[offset + i] ^= S[i];                                                                                // 10116
	            }                                                                                                         // 10117
	        },                                                                                                            // 10118
                                                                                                                       // 10119
	        blockSize: 128/32,                                                                                            // 10120
                                                                                                                       // 10121
	        ivSize: 64/32                                                                                                 // 10122
	    });                                                                                                               // 10123
                                                                                                                       // 10124
	    function nextState() {                                                                                            // 10125
	        // Shortcuts                                                                                                  // 10126
	        var X = this._X;                                                                                              // 10127
	        var C = this._C;                                                                                              // 10128
                                                                                                                       // 10129
	        // Save old counter values                                                                                    // 10130
	        for (var i = 0; i < 8; i++) {                                                                                 // 10131
	            C_[i] = C[i];                                                                                             // 10132
	        }                                                                                                             // 10133
                                                                                                                       // 10134
	        // Calculate new counter values                                                                               // 10135
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;                                                                     // 10136
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;                                      // 10137
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;                                      // 10138
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;                                      // 10139
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;                                      // 10140
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;                                      // 10141
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;                                      // 10142
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;                                      // 10143
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;                                                               // 10144
                                                                                                                       // 10145
	        // Calculate the g-values                                                                                     // 10146
	        for (var i = 0; i < 8; i++) {                                                                                 // 10147
	            var gx = X[i] + C[i];                                                                                     // 10148
                                                                                                                       // 10149
	            // Construct high and low argument for squaring                                                           // 10150
	            var ga = gx & 0xffff;                                                                                     // 10151
	            var gb = gx >>> 16;                                                                                       // 10152
                                                                                                                       // 10153
	            // Calculate high and low result of squaring                                                              // 10154
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;                                               // 10155
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);                                 // 10156
                                                                                                                       // 10157
	            // High XOR low                                                                                           // 10158
	            G[i] = gh ^ gl;                                                                                           // 10159
	        }                                                                                                             // 10160
                                                                                                                       // 10161
	        // Calculate new state values                                                                                 // 10162
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;                          // 10163
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;                                                    // 10164
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;                          // 10165
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;                                                    // 10166
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;                          // 10167
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;                                                    // 10168
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;                          // 10169
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;                                                    // 10170
	    }                                                                                                                 // 10171
                                                                                                                       // 10172
	    /**                                                                                                               // 10173
	     * Shortcut functions to the cipher's object interface.                                                           // 10174
	     *                                                                                                                // 10175
	     * @example                                                                                                       // 10176
	     *                                                                                                                // 10177
	     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);                                               // 10178
	     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);                                            // 10179
	     */                                                                                                               // 10180
	    C.Rabbit = StreamCipher._createHelper(Rabbit);                                                                    // 10181
	}());                                                                                                                 // 10182
                                                                                                                       // 10183
                                                                                                                       // 10184
	return CryptoJS.Rabbit;                                                                                               // 10185
                                                                                                                       // 10186
}));                                                                                                                   // 10187
},{"./cipher-core":50,"./core":51,"./enc-base64":52,"./evpkdf":54,"./md5":59}],73:[function(require,module,exports){   // 10188
;(function (root, factory, undef) {                                                                                    // 10189
	if (typeof exports === "object") {                                                                                    // 10190
		// CommonJS                                                                                                          // 10191
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 10193
	else if (typeof define === "function" && define.amd) {                                                                // 10194
		// AMD                                                                                                               // 10195
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 10196
	}                                                                                                                     // 10197
	else {                                                                                                                // 10198
		// Global (browser)                                                                                                  // 10199
		factory(root.CryptoJS);                                                                                              // 10200
	}                                                                                                                     // 10201
}(this, function (CryptoJS) {                                                                                          // 10202
                                                                                                                       // 10203
	(function () {                                                                                                        // 10204
	    // Shortcuts                                                                                                      // 10205
	    var C = CryptoJS;                                                                                                 // 10206
	    var C_lib = C.lib;                                                                                                // 10207
	    var StreamCipher = C_lib.StreamCipher;                                                                            // 10208
	    var C_algo = C.algo;                                                                                              // 10209
                                                                                                                       // 10210
	    /**                                                                                                               // 10211
	     * RC4 stream cipher algorithm.                                                                                   // 10212
	     */                                                                                                               // 10213
	    var RC4 = C_algo.RC4 = StreamCipher.extend({                                                                      // 10214
	        _doReset: function () {                                                                                       // 10215
	            // Shortcuts                                                                                              // 10216
	            var key = this._key;                                                                                      // 10217
	            var keyWords = key.words;                                                                                 // 10218
	            var keySigBytes = key.sigBytes;                                                                           // 10219
                                                                                                                       // 10220
	            // Init sbox                                                                                              // 10221
	            var S = this._S = [];                                                                                     // 10222
	            for (var i = 0; i < 256; i++) {                                                                           // 10223
	                S[i] = i;                                                                                             // 10224
	            }                                                                                                         // 10225
                                                                                                                       // 10226
	            // Key setup                                                                                              // 10227
	            for (var i = 0, j = 0; i < 256; i++) {                                                                    // 10228
	                var keyByteIndex = i % keySigBytes;                                                                   // 10229
	                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;                // 10230
                                                                                                                       // 10231
	                j = (j + S[i] + keyByte) % 256;                                                                       // 10232
                                                                                                                       // 10233
	                // Swap                                                                                               // 10234
	                var t = S[i];                                                                                         // 10235
	                S[i] = S[j];                                                                                          // 10236
	                S[j] = t;                                                                                             // 10237
	            }                                                                                                         // 10238
                                                                                                                       // 10239
	            // Counters                                                                                               // 10240
	            this._i = this._j = 0;                                                                                    // 10241
	        },                                                                                                            // 10242
                                                                                                                       // 10243
	        _doProcessBlock: function (M, offset) {                                                                       // 10244
	            M[offset] ^= generateKeystreamWord.call(this);                                                            // 10245
	        },                                                                                                            // 10246
                                                                                                                       // 10247
	        keySize: 256/32,                                                                                              // 10248
                                                                                                                       // 10249
	        ivSize: 0                                                                                                     // 10250
	    });                                                                                                               // 10251
                                                                                                                       // 10252
	    function generateKeystreamWord() {                                                                                // 10253
	        // Shortcuts                                                                                                  // 10254
	        var S = this._S;                                                                                              // 10255
	        var i = this._i;                                                                                              // 10256
	        var j = this._j;                                                                                              // 10257
                                                                                                                       // 10258
	        // Generate keystream word                                                                                    // 10259
	        var keystreamWord = 0;                                                                                        // 10260
	        for (var n = 0; n < 4; n++) {                                                                                 // 10261
	            i = (i + 1) % 256;                                                                                        // 10262
	            j = (j + S[i]) % 256;                                                                                     // 10263
                                                                                                                       // 10264
	            // Swap                                                                                                   // 10265
	            var t = S[i];                                                                                             // 10266
	            S[i] = S[j];                                                                                              // 10267
	            S[j] = t;                                                                                                 // 10268
                                                                                                                       // 10269
	            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);                                                  // 10270
	        }                                                                                                             // 10271
                                                                                                                       // 10272
	        // Update counters                                                                                            // 10273
	        this._i = i;                                                                                                  // 10274
	        this._j = j;                                                                                                  // 10275
                                                                                                                       // 10276
	        return keystreamWord;                                                                                         // 10277
	    }                                                                                                                 // 10278
                                                                                                                       // 10279
	    /**                                                                                                               // 10280
	     * Shortcut functions to the cipher's object interface.                                                           // 10281
	     *                                                                                                                // 10282
	     * @example                                                                                                       // 10283
	     *                                                                                                                // 10284
	     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);                                                  // 10285
	     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);                                               // 10286
	     */                                                                                                               // 10287
	    C.RC4 = StreamCipher._createHelper(RC4);                                                                          // 10288
                                                                                                                       // 10289
	    /**                                                                                                               // 10290
	     * Modified RC4 stream cipher algorithm.                                                                          // 10291
	     */                                                                                                               // 10292
	    var RC4Drop = C_algo.RC4Drop = RC4.extend({                                                                       // 10293
	        /**                                                                                                           // 10294
	         * Configuration options.                                                                                     // 10295
	         *                                                                                                            // 10296
	         * @property {number} drop The number of keystream words to drop. Default 192                                 // 10297
	         */                                                                                                           // 10298
	        cfg: RC4.cfg.extend({                                                                                         // 10299
	            drop: 192                                                                                                 // 10300
	        }),                                                                                                           // 10301
                                                                                                                       // 10302
	        _doReset: function () {                                                                                       // 10303
	            RC4._doReset.call(this);                                                                                  // 10304
                                                                                                                       // 10305
	            // Drop                                                                                                   // 10306
	            for (var i = this.cfg.drop; i > 0; i--) {                                                                 // 10307
	                generateKeystreamWord.call(this);                                                                     // 10308
	            }                                                                                                         // 10309
	        }                                                                                                             // 10310
	    });                                                                                                               // 10311
                                                                                                                       // 10312
	    /**                                                                                                               // 10313
	     * Shortcut functions to the cipher's object interface.                                                           // 10314
	     *                                                                                                                // 10315
	     * @example                                                                                                       // 10316
	     *                                                                                                                // 10317
	     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);                                              // 10318
	     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);                                           // 10319
	     */                                                                                                               // 10320
	    C.RC4Drop = StreamCipher._createHelper(RC4Drop);                                                                  // 10321
	}());                                                                                                                 // 10322
                                                                                                                       // 10323
                                                                                                                       // 10324
	return CryptoJS.RC4;                                                                                                  // 10325
                                                                                                                       // 10326
}));                                                                                                                   // 10327
},{"./cipher-core":50,"./core":51,"./enc-base64":52,"./evpkdf":54,"./md5":59}],74:[function(require,module,exports){   // 10328
;(function (root, factory) {                                                                                           // 10329
	if (typeof exports === "object") {                                                                                    // 10330
		// CommonJS                                                                                                          // 10331
		module.exports = exports = factory(require("./core"));                                                               // 10332
	}                                                                                                                     // 10333
	else if (typeof define === "function" && define.amd) {                                                                // 10334
		// AMD                                                                                                               // 10335
		define(["./core"], factory);                                                                                         // 10336
	}                                                                                                                     // 10337
	else {                                                                                                                // 10338
		// Global (browser)                                                                                                  // 10339
		factory(root.CryptoJS);                                                                                              // 10340
	}                                                                                                                     // 10341
}(this, function (CryptoJS) {                                                                                          // 10342
                                                                                                                       // 10343
	/** @preserve                                                                                                         // 10344
	(c) 2012 by Cédric Mesnil. All rights reserved.                                                                       // 10345
                                                                                                                       // 10346
	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
                                                                                                                       // 10348
	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
                                                                                                                       // 10351
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/                                                                                                                    // 10353
                                                                                                                       // 10354
	(function (Math) {                                                                                                    // 10355
	    // Shortcuts                                                                                                      // 10356
	    var C = CryptoJS;                                                                                                 // 10357
	    var C_lib = C.lib;                                                                                                // 10358
	    var WordArray = C_lib.WordArray;                                                                                  // 10359
	    var Hasher = C_lib.Hasher;                                                                                        // 10360
	    var C_algo = C.algo;                                                                                              // 10361
                                                                                                                       // 10362
	    // Constants table                                                                                                // 10363
	    var _zl = WordArray.create([                                                                                      // 10364
	        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,                                                // 10365
	        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,                                                // 10366
	        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,                                                // 10367
	        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,                                                // 10368
	        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);                                              // 10369
	    var _zr = WordArray.create([                                                                                      // 10370
	        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,                                                // 10371
	        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,                                                // 10372
	        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,                                               // 10373
	        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,                                                // 10374
	        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);                                             // 10375
	    var _sl = WordArray.create([                                                                                      // 10376
	         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,                                              // 10377
	        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,                                                // 10378
	        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,                                               // 10379
	          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,                                             // 10380
	        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);                                             // 10381
	    var _sr = WordArray.create([                                                                                      // 10382
	        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,                                                // 10383
	        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,                                                // 10384
	        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,                                                // 10385
	        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,                                               // 10386
	        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);                                             // 10387
                                                                                                                       // 10388
	    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);                       // 10389
	    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);                       // 10390
                                                                                                                       // 10391
	    /**                                                                                                               // 10392
	     * RIPEMD160 hash algorithm.                                                                                      // 10393
	     */                                                                                                               // 10394
	    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({                                                                // 10395
	        _doReset: function () {                                                                                       // 10396
	            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);             // 10397
	        },                                                                                                            // 10398
                                                                                                                       // 10399
	        _doProcessBlock: function (M, offset) {                                                                       // 10400
                                                                                                                       // 10401
	            // Swap endian                                                                                            // 10402
	            for (var i = 0; i < 16; i++) {                                                                            // 10403
	                // Shortcuts                                                                                          // 10404
	                var offset_i = offset + i;                                                                            // 10405
	                var M_offset_i = M[offset_i];                                                                         // 10406
                                                                                                                       // 10407
	                // Swap                                                                                               // 10408
	                M[offset_i] = (                                                                                       // 10409
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |                                       // 10410
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)                                         // 10411
	                );                                                                                                    // 10412
	            }                                                                                                         // 10413
	            // Shortcut                                                                                               // 10414
	            var H  = this._hash.words;                                                                                // 10415
	            var hl = _hl.words;                                                                                       // 10416
	            var hr = _hr.words;                                                                                       // 10417
	            var zl = _zl.words;                                                                                       // 10418
	            var zr = _zr.words;                                                                                       // 10419
	            var sl = _sl.words;                                                                                       // 10420
	            var sr = _sr.words;                                                                                       // 10421
                                                                                                                       // 10422
	            // Working variables                                                                                      // 10423
	            var al, bl, cl, dl, el;                                                                                   // 10424
	            var ar, br, cr, dr, er;                                                                                   // 10425
                                                                                                                       // 10426
	            ar = al = H[0];                                                                                           // 10427
	            br = bl = H[1];                                                                                           // 10428
	            cr = cl = H[2];                                                                                           // 10429
	            dr = dl = H[3];                                                                                           // 10430
	            er = el = H[4];                                                                                           // 10431
	            // Computation                                                                                            // 10432
	            var t;                                                                                                    // 10433
	            for (var i = 0; i < 80; i += 1) {                                                                         // 10434
	                t = (al +  M[offset+zl[i]])|0;                                                                        // 10435
	                if (i<16){                                                                                            // 10436
		            t +=  f1(bl,cl,dl) + hl[0];                                                                              // 10437
	                } else if (i<32) {                                                                                    // 10438
		            t +=  f2(bl,cl,dl) + hl[1];                                                                              // 10439
	                } else if (i<48) {                                                                                    // 10440
		            t +=  f3(bl,cl,dl) + hl[2];                                                                              // 10441
	                } else if (i<64) {                                                                                    // 10442
		            t +=  f4(bl,cl,dl) + hl[3];                                                                              // 10443
	                } else {// if (i<80) {                                                                                // 10444
		            t +=  f5(bl,cl,dl) + hl[4];                                                                              // 10445
	                }                                                                                                     // 10446
	                t = t|0;                                                                                              // 10447
	                t =  rotl(t,sl[i]);                                                                                   // 10448
	                t = (t+el)|0;                                                                                         // 10449
	                al = el;                                                                                              // 10450
	                el = dl;                                                                                              // 10451
	                dl = rotl(cl, 10);                                                                                    // 10452
	                cl = bl;                                                                                              // 10453
	                bl = t;                                                                                               // 10454
                                                                                                                       // 10455
	                t = (ar + M[offset+zr[i]])|0;                                                                         // 10456
	                if (i<16){                                                                                            // 10457
		            t +=  f5(br,cr,dr) + hr[0];                                                                              // 10458
	                } else if (i<32) {                                                                                    // 10459
		            t +=  f4(br,cr,dr) + hr[1];                                                                              // 10460
	                } else if (i<48) {                                                                                    // 10461
		            t +=  f3(br,cr,dr) + hr[2];                                                                              // 10462
	                } else if (i<64) {                                                                                    // 10463
		            t +=  f2(br,cr,dr) + hr[3];                                                                              // 10464
	                } else {// if (i<80) {                                                                                // 10465
		            t +=  f1(br,cr,dr) + hr[4];                                                                              // 10466
	                }                                                                                                     // 10467
	                t = t|0;                                                                                              // 10468
	                t =  rotl(t,sr[i]) ;                                                                                  // 10469
	                t = (t+er)|0;                                                                                         // 10470
	                ar = er;                                                                                              // 10471
	                er = dr;                                                                                              // 10472
	                dr = rotl(cr, 10);                                                                                    // 10473
	                cr = br;                                                                                              // 10474
	                br = t;                                                                                               // 10475
	            }                                                                                                         // 10476
	            // Intermediate hash value                                                                                // 10477
	            t    = (H[1] + cl + dr)|0;                                                                                // 10478
	            H[1] = (H[2] + dl + er)|0;                                                                                // 10479
	            H[2] = (H[3] + el + ar)|0;                                                                                // 10480
	            H[3] = (H[4] + al + br)|0;                                                                                // 10481
	            H[4] = (H[0] + bl + cr)|0;                                                                                // 10482
	            H[0] =  t;                                                                                                // 10483
	        },                                                                                                            // 10484
                                                                                                                       // 10485
	        _doFinalize: function () {                                                                                    // 10486
	            // Shortcuts                                                                                              // 10487
	            var data = this._data;                                                                                    // 10488
	            var dataWords = data.words;                                                                               // 10489
                                                                                                                       // 10490
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 10491
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 10492
                                                                                                                       // 10493
	            // Add padding                                                                                            // 10494
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 10495
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (                                                       // 10496
	                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |                                           // 10497
	                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)                                             // 10498
	            );                                                                                                        // 10499
	            data.sigBytes = (dataWords.length + 1) * 4;                                                               // 10500
                                                                                                                       // 10501
	            // Hash final blocks                                                                                      // 10502
	            this._process();                                                                                          // 10503
                                                                                                                       // 10504
	            // Shortcuts                                                                                              // 10505
	            var hash = this._hash;                                                                                    // 10506
	            var H = hash.words;                                                                                       // 10507
                                                                                                                       // 10508
	            // Swap endian                                                                                            // 10509
	            for (var i = 0; i < 5; i++) {                                                                             // 10510
	                // Shortcut                                                                                           // 10511
	                var H_i = H[i];                                                                                       // 10512
                                                                                                                       // 10513
	                // Swap                                                                                               // 10514
	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |                                                  // 10515
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);                                                   // 10516
	            }                                                                                                         // 10517
                                                                                                                       // 10518
	            // Return final computed hash                                                                             // 10519
	            return hash;                                                                                              // 10520
	        },                                                                                                            // 10521
                                                                                                                       // 10522
	        clone: function () {                                                                                          // 10523
	            var clone = Hasher.clone.call(this);                                                                      // 10524
	            clone._hash = this._hash.clone();                                                                         // 10525
                                                                                                                       // 10526
	            return clone;                                                                                             // 10527
	        }                                                                                                             // 10528
	    });                                                                                                               // 10529
                                                                                                                       // 10530
                                                                                                                       // 10531
	    function f1(x, y, z) {                                                                                            // 10532
	        return ((x) ^ (y) ^ (z));                                                                                     // 10533
                                                                                                                       // 10534
	    }                                                                                                                 // 10535
                                                                                                                       // 10536
	    function f2(x, y, z) {                                                                                            // 10537
	        return (((x)&(y)) | ((~x)&(z)));                                                                              // 10538
	    }                                                                                                                 // 10539
                                                                                                                       // 10540
	    function f3(x, y, z) {                                                                                            // 10541
	        return (((x) | (~(y))) ^ (z));                                                                                // 10542
	    }                                                                                                                 // 10543
                                                                                                                       // 10544
	    function f4(x, y, z) {                                                                                            // 10545
	        return (((x) & (z)) | ((y)&(~(z))));                                                                          // 10546
	    }                                                                                                                 // 10547
                                                                                                                       // 10548
	    function f5(x, y, z) {                                                                                            // 10549
	        return ((x) ^ ((y) |(~(z))));                                                                                 // 10550
                                                                                                                       // 10551
	    }                                                                                                                 // 10552
                                                                                                                       // 10553
	    function rotl(x,n) {                                                                                              // 10554
	        return (x<<n) | (x>>>(32-n));                                                                                 // 10555
	    }                                                                                                                 // 10556
                                                                                                                       // 10557
                                                                                                                       // 10558
	    /**                                                                                                               // 10559
	     * Shortcut function to the hasher's object interface.                                                            // 10560
	     *                                                                                                                // 10561
	     * @param {WordArray|string} message The message to hash.                                                         // 10562
	     *                                                                                                                // 10563
	     * @return {WordArray} The hash.                                                                                  // 10564
	     *                                                                                                                // 10565
	     * @static                                                                                                        // 10566
	     *                                                                                                                // 10567
	     * @example                                                                                                       // 10568
	     *                                                                                                                // 10569
	     *     var hash = CryptoJS.RIPEMD160('message');                                                                  // 10570
	     *     var hash = CryptoJS.RIPEMD160(wordArray);                                                                  // 10571
	     */                                                                                                               // 10572
	    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);                                                                    // 10573
                                                                                                                       // 10574
	    /**                                                                                                               // 10575
	     * Shortcut function to the HMAC's object interface.                                                              // 10576
	     *                                                                                                                // 10577
	     * @param {WordArray|string} message The message to hash.                                                         // 10578
	     * @param {WordArray|string} key The secret key.                                                                  // 10579
	     *                                                                                                                // 10580
	     * @return {WordArray} The HMAC.                                                                                  // 10581
	     *                                                                                                                // 10582
	     * @static                                                                                                        // 10583
	     *                                                                                                                // 10584
	     * @example                                                                                                       // 10585
	     *                                                                                                                // 10586
	     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);                                                           // 10587
	     */                                                                                                               // 10588
	    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);                                                            // 10589
	}(Math));                                                                                                             // 10590
                                                                                                                       // 10591
                                                                                                                       // 10592
	return CryptoJS.RIPEMD160;                                                                                            // 10593
                                                                                                                       // 10594
}));                                                                                                                   // 10595
},{"./core":51}],75:[function(require,module,exports){                                                                 // 10596
;(function (root, factory) {                                                                                           // 10597
	if (typeof exports === "object") {                                                                                    // 10598
		// CommonJS                                                                                                          // 10599
		module.exports = exports = factory(require("./core"));                                                               // 10600
	}                                                                                                                     // 10601
	else if (typeof define === "function" && define.amd) {                                                                // 10602
		// AMD                                                                                                               // 10603
		define(["./core"], factory);                                                                                         // 10604
	}                                                                                                                     // 10605
	else {                                                                                                                // 10606
		// Global (browser)                                                                                                  // 10607
		factory(root.CryptoJS);                                                                                              // 10608
	}                                                                                                                     // 10609
}(this, function (CryptoJS) {                                                                                          // 10610
                                                                                                                       // 10611
	(function () {                                                                                                        // 10612
	    // Shortcuts                                                                                                      // 10613
	    var C = CryptoJS;                                                                                                 // 10614
	    var C_lib = C.lib;                                                                                                // 10615
	    var WordArray = C_lib.WordArray;                                                                                  // 10616
	    var Hasher = C_lib.Hasher;                                                                                        // 10617
	    var C_algo = C.algo;                                                                                              // 10618
                                                                                                                       // 10619
	    // Reusable object                                                                                                // 10620
	    var W = [];                                                                                                       // 10621
                                                                                                                       // 10622
	    /**                                                                                                               // 10623
	     * SHA-1 hash algorithm.                                                                                          // 10624
	     */                                                                                                               // 10625
	    var SHA1 = C_algo.SHA1 = Hasher.extend({                                                                          // 10626
	        _doReset: function () {                                                                                       // 10627
	            this._hash = new WordArray.init([                                                                         // 10628
	                0x67452301, 0xefcdab89,                                                                               // 10629
	                0x98badcfe, 0x10325476,                                                                               // 10630
	                0xc3d2e1f0                                                                                            // 10631
	            ]);                                                                                                       // 10632
	        },                                                                                                            // 10633
                                                                                                                       // 10634
	        _doProcessBlock: function (M, offset) {                                                                       // 10635
	            // Shortcut                                                                                               // 10636
	            var H = this._hash.words;                                                                                 // 10637
                                                                                                                       // 10638
	            // Working variables                                                                                      // 10639
	            var a = H[0];                                                                                             // 10640
	            var b = H[1];                                                                                             // 10641
	            var c = H[2];                                                                                             // 10642
	            var d = H[3];                                                                                             // 10643
	            var e = H[4];                                                                                             // 10644
                                                                                                                       // 10645
	            // Computation                                                                                            // 10646
	            for (var i = 0; i < 80; i++) {                                                                            // 10647
	                if (i < 16) {                                                                                         // 10648
	                    W[i] = M[offset + i] | 0;                                                                         // 10649
	                } else {                                                                                              // 10650
	                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];                                              // 10651
	                    W[i] = (n << 1) | (n >>> 31);                                                                     // 10652
	                }                                                                                                     // 10653
                                                                                                                       // 10654
	                var t = ((a << 5) | (a >>> 27)) + e + W[i];                                                           // 10655
	                if (i < 20) {                                                                                         // 10656
	                    t += ((b & c) | (~b & d)) + 0x5a827999;                                                           // 10657
	                } else if (i < 40) {                                                                                  // 10658
	                    t += (b ^ c ^ d) + 0x6ed9eba1;                                                                    // 10659
	                } else if (i < 60) {                                                                                  // 10660
	                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;                                                  // 10661
	                } else /* if (i < 80) */ {                                                                            // 10662
	                    t += (b ^ c ^ d) - 0x359d3e2a;                                                                    // 10663
	                }                                                                                                     // 10664
                                                                                                                       // 10665
	                e = d;                                                                                                // 10666
	                d = c;                                                                                                // 10667
	                c = (b << 30) | (b >>> 2);                                                                            // 10668
	                b = a;                                                                                                // 10669
	                a = t;                                                                                                // 10670
	            }                                                                                                         // 10671
                                                                                                                       // 10672
	            // Intermediate hash value                                                                                // 10673
	            H[0] = (H[0] + a) | 0;                                                                                    // 10674
	            H[1] = (H[1] + b) | 0;                                                                                    // 10675
	            H[2] = (H[2] + c) | 0;                                                                                    // 10676
	            H[3] = (H[3] + d) | 0;                                                                                    // 10677
	            H[4] = (H[4] + e) | 0;                                                                                    // 10678
	        },                                                                                                            // 10679
                                                                                                                       // 10680
	        _doFinalize: function () {                                                                                    // 10681
	            // Shortcuts                                                                                              // 10682
	            var data = this._data;                                                                                    // 10683
	            var dataWords = data.words;                                                                               // 10684
                                                                                                                       // 10685
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 10686
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 10687
                                                                                                                       // 10688
	            // Add padding                                                                                            // 10689
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 10690
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);                   // 10691
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;                                             // 10692
	            data.sigBytes = dataWords.length * 4;                                                                     // 10693
                                                                                                                       // 10694
	            // Hash final blocks                                                                                      // 10695
	            this._process();                                                                                          // 10696
                                                                                                                       // 10697
	            // Return final computed hash                                                                             // 10698
	            return this._hash;                                                                                        // 10699
	        },                                                                                                            // 10700
                                                                                                                       // 10701
	        clone: function () {                                                                                          // 10702
	            var clone = Hasher.clone.call(this);                                                                      // 10703
	            clone._hash = this._hash.clone();                                                                         // 10704
                                                                                                                       // 10705
	            return clone;                                                                                             // 10706
	        }                                                                                                             // 10707
	    });                                                                                                               // 10708
                                                                                                                       // 10709
	    /**                                                                                                               // 10710
	     * Shortcut function to the hasher's object interface.                                                            // 10711
	     *                                                                                                                // 10712
	     * @param {WordArray|string} message The message to hash.                                                         // 10713
	     *                                                                                                                // 10714
	     * @return {WordArray} The hash.                                                                                  // 10715
	     *                                                                                                                // 10716
	     * @static                                                                                                        // 10717
	     *                                                                                                                // 10718
	     * @example                                                                                                       // 10719
	     *                                                                                                                // 10720
	     *     var hash = CryptoJS.SHA1('message');                                                                       // 10721
	     *     var hash = CryptoJS.SHA1(wordArray);                                                                       // 10722
	     */                                                                                                               // 10723
	    C.SHA1 = Hasher._createHelper(SHA1);                                                                              // 10724
                                                                                                                       // 10725
	    /**                                                                                                               // 10726
	     * Shortcut function to the HMAC's object interface.                                                              // 10727
	     *                                                                                                                // 10728
	     * @param {WordArray|string} message The message to hash.                                                         // 10729
	     * @param {WordArray|string} key The secret key.                                                                  // 10730
	     *                                                                                                                // 10731
	     * @return {WordArray} The HMAC.                                                                                  // 10732
	     *                                                                                                                // 10733
	     * @static                                                                                                        // 10734
	     *                                                                                                                // 10735
	     * @example                                                                                                       // 10736
	     *                                                                                                                // 10737
	     *     var hmac = CryptoJS.HmacSHA1(message, key);                                                                // 10738
	     */                                                                                                               // 10739
	    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);                                                                      // 10740
	}());                                                                                                                 // 10741
                                                                                                                       // 10742
                                                                                                                       // 10743
	return CryptoJS.SHA1;                                                                                                 // 10744
                                                                                                                       // 10745
}));                                                                                                                   // 10746
},{"./core":51}],76:[function(require,module,exports){                                                                 // 10747
;(function (root, factory, undef) {                                                                                    // 10748
	if (typeof exports === "object") {                                                                                    // 10749
		// CommonJS                                                                                                          // 10750
		module.exports = exports = factory(require("./core"), require("./sha256"));                                          // 10751
	}                                                                                                                     // 10752
	else if (typeof define === "function" && define.amd) {                                                                // 10753
		// AMD                                                                                                               // 10754
		define(["./core", "./sha256"], factory);                                                                             // 10755
	}                                                                                                                     // 10756
	else {                                                                                                                // 10757
		// Global (browser)                                                                                                  // 10758
		factory(root.CryptoJS);                                                                                              // 10759
	}                                                                                                                     // 10760
}(this, function (CryptoJS) {                                                                                          // 10761
                                                                                                                       // 10762
	(function () {                                                                                                        // 10763
	    // Shortcuts                                                                                                      // 10764
	    var C = CryptoJS;                                                                                                 // 10765
	    var C_lib = C.lib;                                                                                                // 10766
	    var WordArray = C_lib.WordArray;                                                                                  // 10767
	    var C_algo = C.algo;                                                                                              // 10768
	    var SHA256 = C_algo.SHA256;                                                                                       // 10769
                                                                                                                       // 10770
	    /**                                                                                                               // 10771
	     * SHA-224 hash algorithm.                                                                                        // 10772
	     */                                                                                                               // 10773
	    var SHA224 = C_algo.SHA224 = SHA256.extend({                                                                      // 10774
	        _doReset: function () {                                                                                       // 10775
	            this._hash = new WordArray.init([                                                                         // 10776
	                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,                                                       // 10777
	                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4                                                        // 10778
	            ]);                                                                                                       // 10779
	        },                                                                                                            // 10780
                                                                                                                       // 10781
	        _doFinalize: function () {                                                                                    // 10782
	            var hash = SHA256._doFinalize.call(this);                                                                 // 10783
                                                                                                                       // 10784
	            hash.sigBytes -= 4;                                                                                       // 10785
                                                                                                                       // 10786
	            return hash;                                                                                              // 10787
	        }                                                                                                             // 10788
	    });                                                                                                               // 10789
                                                                                                                       // 10790
	    /**                                                                                                               // 10791
	     * Shortcut function to the hasher's object interface.                                                            // 10792
	     *                                                                                                                // 10793
	     * @param {WordArray|string} message The message to hash.                                                         // 10794
	     *                                                                                                                // 10795
	     * @return {WordArray} The hash.                                                                                  // 10796
	     *                                                                                                                // 10797
	     * @static                                                                                                        // 10798
	     *                                                                                                                // 10799
	     * @example                                                                                                       // 10800
	     *                                                                                                                // 10801
	     *     var hash = CryptoJS.SHA224('message');                                                                     // 10802
	     *     var hash = CryptoJS.SHA224(wordArray);                                                                     // 10803
	     */                                                                                                               // 10804
	    C.SHA224 = SHA256._createHelper(SHA224);                                                                          // 10805
                                                                                                                       // 10806
	    /**                                                                                                               // 10807
	     * Shortcut function to the HMAC's object interface.                                                              // 10808
	     *                                                                                                                // 10809
	     * @param {WordArray|string} message The message to hash.                                                         // 10810
	     * @param {WordArray|string} key The secret key.                                                                  // 10811
	     *                                                                                                                // 10812
	     * @return {WordArray} The HMAC.                                                                                  // 10813
	     *                                                                                                                // 10814
	     * @static                                                                                                        // 10815
	     *                                                                                                                // 10816
	     * @example                                                                                                       // 10817
	     *                                                                                                                // 10818
	     *     var hmac = CryptoJS.HmacSHA224(message, key);                                                              // 10819
	     */                                                                                                               // 10820
	    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);                                                                  // 10821
	}());                                                                                                                 // 10822
                                                                                                                       // 10823
                                                                                                                       // 10824
	return CryptoJS.SHA224;                                                                                               // 10825
                                                                                                                       // 10826
}));                                                                                                                   // 10827
},{"./core":51,"./sha256":77}],77:[function(require,module,exports){                                                   // 10828
;(function (root, factory) {                                                                                           // 10829
	if (typeof exports === "object") {                                                                                    // 10830
		// CommonJS                                                                                                          // 10831
		module.exports = exports = factory(require("./core"));                                                               // 10832
	}                                                                                                                     // 10833
	else if (typeof define === "function" && define.amd) {                                                                // 10834
		// AMD                                                                                                               // 10835
		define(["./core"], factory);                                                                                         // 10836
	}                                                                                                                     // 10837
	else {                                                                                                                // 10838
		// Global (browser)                                                                                                  // 10839
		factory(root.CryptoJS);                                                                                              // 10840
	}                                                                                                                     // 10841
}(this, function (CryptoJS) {                                                                                          // 10842
                                                                                                                       // 10843
	(function (Math) {                                                                                                    // 10844
	    // Shortcuts                                                                                                      // 10845
	    var C = CryptoJS;                                                                                                 // 10846
	    var C_lib = C.lib;                                                                                                // 10847
	    var WordArray = C_lib.WordArray;                                                                                  // 10848
	    var Hasher = C_lib.Hasher;                                                                                        // 10849
	    var C_algo = C.algo;                                                                                              // 10850
                                                                                                                       // 10851
	    // Initialization and round constants tables                                                                      // 10852
	    var H = [];                                                                                                       // 10853
	    var K = [];                                                                                                       // 10854
                                                                                                                       // 10855
	    // Compute constants                                                                                              // 10856
	    (function () {                                                                                                    // 10857
	        function isPrime(n) {                                                                                         // 10858
	            var sqrtN = Math.sqrt(n);                                                                                 // 10859
	            for (var factor = 2; factor <= sqrtN; factor++) {                                                         // 10860
	                if (!(n % factor)) {                                                                                  // 10861
	                    return false;                                                                                     // 10862
	                }                                                                                                     // 10863
	            }                                                                                                         // 10864
                                                                                                                       // 10865
	            return true;                                                                                              // 10866
	        }                                                                                                             // 10867
                                                                                                                       // 10868
	        function getFractionalBits(n) {                                                                               // 10869
	            return ((n - (n | 0)) * 0x100000000) | 0;                                                                 // 10870
	        }                                                                                                             // 10871
                                                                                                                       // 10872
	        var n = 2;                                                                                                    // 10873
	        var nPrime = 0;                                                                                               // 10874
	        while (nPrime < 64) {                                                                                         // 10875
	            if (isPrime(n)) {                                                                                         // 10876
	                if (nPrime < 8) {                                                                                     // 10877
	                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));                                                // 10878
	                }                                                                                                     // 10879
	                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));                                                    // 10880
                                                                                                                       // 10881
	                nPrime++;                                                                                             // 10882
	            }                                                                                                         // 10883
                                                                                                                       // 10884
	            n++;                                                                                                      // 10885
	        }                                                                                                             // 10886
	    }());                                                                                                             // 10887
                                                                                                                       // 10888
	    // Reusable object                                                                                                // 10889
	    var W = [];                                                                                                       // 10890
                                                                                                                       // 10891
	    /**                                                                                                               // 10892
	     * SHA-256 hash algorithm.                                                                                        // 10893
	     */                                                                                                               // 10894
	    var SHA256 = C_algo.SHA256 = Hasher.extend({                                                                      // 10895
	        _doReset: function () {                                                                                       // 10896
	            this._hash = new WordArray.init(H.slice(0));                                                              // 10897
	        },                                                                                                            // 10898
                                                                                                                       // 10899
	        _doProcessBlock: function (M, offset) {                                                                       // 10900
	            // Shortcut                                                                                               // 10901
	            var H = this._hash.words;                                                                                 // 10902
                                                                                                                       // 10903
	            // Working variables                                                                                      // 10904
	            var a = H[0];                                                                                             // 10905
	            var b = H[1];                                                                                             // 10906
	            var c = H[2];                                                                                             // 10907
	            var d = H[3];                                                                                             // 10908
	            var e = H[4];                                                                                             // 10909
	            var f = H[5];                                                                                             // 10910
	            var g = H[6];                                                                                             // 10911
	            var h = H[7];                                                                                             // 10912
                                                                                                                       // 10913
	            // Computation                                                                                            // 10914
	            for (var i = 0; i < 64; i++) {                                                                            // 10915
	                if (i < 16) {                                                                                         // 10916
	                    W[i] = M[offset + i] | 0;                                                                         // 10917
	                } else {                                                                                              // 10918
	                    var gamma0x = W[i - 15];                                                                          // 10919
	                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^                                              // 10920
	                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^                                              // 10921
	                                   (gamma0x >>> 3);                                                                   // 10922
                                                                                                                       // 10923
	                    var gamma1x = W[i - 2];                                                                           // 10924
	                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^                                              // 10925
	                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^                                              // 10926
	                                   (gamma1x >>> 10);                                                                  // 10927
                                                                                                                       // 10928
	                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];                                                    // 10929
	                }                                                                                                     // 10930
                                                                                                                       // 10931
	                var ch  = (e & f) ^ (~e & g);                                                                         // 10932
	                var maj = (a & b) ^ (a & c) ^ (b & c);                                                                // 10933
                                                                                                                       // 10934
	                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));           // 10935
	                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));           // 10936
                                                                                                                       // 10937
	                var t1 = h + sigma1 + ch + K[i] + W[i];                                                               // 10938
	                var t2 = sigma0 + maj;                                                                                // 10939
                                                                                                                       // 10940
	                h = g;                                                                                                // 10941
	                g = f;                                                                                                // 10942
	                f = e;                                                                                                // 10943
	                e = (d + t1) | 0;                                                                                     // 10944
	                d = c;                                                                                                // 10945
	                c = b;                                                                                                // 10946
	                b = a;                                                                                                // 10947
	                a = (t1 + t2) | 0;                                                                                    // 10948
	            }                                                                                                         // 10949
                                                                                                                       // 10950
	            // Intermediate hash value                                                                                // 10951
	            H[0] = (H[0] + a) | 0;                                                                                    // 10952
	            H[1] = (H[1] + b) | 0;                                                                                    // 10953
	            H[2] = (H[2] + c) | 0;                                                                                    // 10954
	            H[3] = (H[3] + d) | 0;                                                                                    // 10955
	            H[4] = (H[4] + e) | 0;                                                                                    // 10956
	            H[5] = (H[5] + f) | 0;                                                                                    // 10957
	            H[6] = (H[6] + g) | 0;                                                                                    // 10958
	            H[7] = (H[7] + h) | 0;                                                                                    // 10959
	        },                                                                                                            // 10960
                                                                                                                       // 10961
	        _doFinalize: function () {                                                                                    // 10962
	            // Shortcuts                                                                                              // 10963
	            var data = this._data;                                                                                    // 10964
	            var dataWords = data.words;                                                                               // 10965
                                                                                                                       // 10966
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 10967
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 10968
                                                                                                                       // 10969
	            // Add padding                                                                                            // 10970
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 10971
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);                   // 10972
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;                                             // 10973
	            data.sigBytes = dataWords.length * 4;                                                                     // 10974
                                                                                                                       // 10975
	            // Hash final blocks                                                                                      // 10976
	            this._process();                                                                                          // 10977
                                                                                                                       // 10978
	            // Return final computed hash                                                                             // 10979
	            return this._hash;                                                                                        // 10980
	        },                                                                                                            // 10981
                                                                                                                       // 10982
	        clone: function () {                                                                                          // 10983
	            var clone = Hasher.clone.call(this);                                                                      // 10984
	            clone._hash = this._hash.clone();                                                                         // 10985
                                                                                                                       // 10986
	            return clone;                                                                                             // 10987
	        }                                                                                                             // 10988
	    });                                                                                                               // 10989
                                                                                                                       // 10990
	    /**                                                                                                               // 10991
	     * Shortcut function to the hasher's object interface.                                                            // 10992
	     *                                                                                                                // 10993
	     * @param {WordArray|string} message The message to hash.                                                         // 10994
	     *                                                                                                                // 10995
	     * @return {WordArray} The hash.                                                                                  // 10996
	     *                                                                                                                // 10997
	     * @static                                                                                                        // 10998
	     *                                                                                                                // 10999
	     * @example                                                                                                       // 11000
	     *                                                                                                                // 11001
	     *     var hash = CryptoJS.SHA256('message');                                                                     // 11002
	     *     var hash = CryptoJS.SHA256(wordArray);                                                                     // 11003
	     */                                                                                                               // 11004
	    C.SHA256 = Hasher._createHelper(SHA256);                                                                          // 11005
                                                                                                                       // 11006
	    /**                                                                                                               // 11007
	     * Shortcut function to the HMAC's object interface.                                                              // 11008
	     *                                                                                                                // 11009
	     * @param {WordArray|string} message The message to hash.                                                         // 11010
	     * @param {WordArray|string} key The secret key.                                                                  // 11011
	     *                                                                                                                // 11012
	     * @return {WordArray} The HMAC.                                                                                  // 11013
	     *                                                                                                                // 11014
	     * @static                                                                                                        // 11015
	     *                                                                                                                // 11016
	     * @example                                                                                                       // 11017
	     *                                                                                                                // 11018
	     *     var hmac = CryptoJS.HmacSHA256(message, key);                                                              // 11019
	     */                                                                                                               // 11020
	    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);                                                                  // 11021
	}(Math));                                                                                                             // 11022
                                                                                                                       // 11023
                                                                                                                       // 11024
	return CryptoJS.SHA256;                                                                                               // 11025
                                                                                                                       // 11026
}));                                                                                                                   // 11027
},{"./core":51}],78:[function(require,module,exports){                                                                 // 11028
;(function (root, factory, undef) {                                                                                    // 11029
	if (typeof exports === "object") {                                                                                    // 11030
		// CommonJS                                                                                                          // 11031
		module.exports = exports = factory(require("./core"), require("./x64-core"));                                        // 11032
	}                                                                                                                     // 11033
	else if (typeof define === "function" && define.amd) {                                                                // 11034
		// AMD                                                                                                               // 11035
		define(["./core", "./x64-core"], factory);                                                                           // 11036
	}                                                                                                                     // 11037
	else {                                                                                                                // 11038
		// Global (browser)                                                                                                  // 11039
		factory(root.CryptoJS);                                                                                              // 11040
	}                                                                                                                     // 11041
}(this, function (CryptoJS) {                                                                                          // 11042
                                                                                                                       // 11043
	(function (Math) {                                                                                                    // 11044
	    // Shortcuts                                                                                                      // 11045
	    var C = CryptoJS;                                                                                                 // 11046
	    var C_lib = C.lib;                                                                                                // 11047
	    var WordArray = C_lib.WordArray;                                                                                  // 11048
	    var Hasher = C_lib.Hasher;                                                                                        // 11049
	    var C_x64 = C.x64;                                                                                                // 11050
	    var X64Word = C_x64.Word;                                                                                         // 11051
	    var C_algo = C.algo;                                                                                              // 11052
                                                                                                                       // 11053
	    // Constants tables                                                                                               // 11054
	    var RHO_OFFSETS = [];                                                                                             // 11055
	    var PI_INDEXES  = [];                                                                                             // 11056
	    var ROUND_CONSTANTS = [];                                                                                         // 11057
                                                                                                                       // 11058
	    // Compute Constants                                                                                              // 11059
	    (function () {                                                                                                    // 11060
	        // Compute rho offset constants                                                                               // 11061
	        var x = 1, y = 0;                                                                                             // 11062
	        for (var t = 0; t < 24; t++) {                                                                                // 11063
	            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;                                                    // 11064
                                                                                                                       // 11065
	            var newX = y % 5;                                                                                         // 11066
	            var newY = (2 * x + 3 * y) % 5;                                                                           // 11067
	            x = newX;                                                                                                 // 11068
	            y = newY;                                                                                                 // 11069
	        }                                                                                                             // 11070
                                                                                                                       // 11071
	        // Compute pi index constants                                                                                 // 11072
	        for (var x = 0; x < 5; x++) {                                                                                 // 11073
	            for (var y = 0; y < 5; y++) {                                                                             // 11074
	                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;                                                // 11075
	            }                                                                                                         // 11076
	        }                                                                                                             // 11077
                                                                                                                       // 11078
	        // Compute round constants                                                                                    // 11079
	        var LFSR = 0x01;                                                                                              // 11080
	        for (var i = 0; i < 24; i++) {                                                                                // 11081
	            var roundConstantMsw = 0;                                                                                 // 11082
	            var roundConstantLsw = 0;                                                                                 // 11083
                                                                                                                       // 11084
	            for (var j = 0; j < 7; j++) {                                                                             // 11085
	                if (LFSR & 0x01) {                                                                                    // 11086
	                    var bitPosition = (1 << j) - 1;                                                                   // 11087
	                    if (bitPosition < 32) {                                                                           // 11088
	                        roundConstantLsw ^= 1 << bitPosition;                                                         // 11089
	                    } else /* if (bitPosition >= 32) */ {                                                             // 11090
	                        roundConstantMsw ^= 1 << (bitPosition - 32);                                                  // 11091
	                    }                                                                                                 // 11092
	                }                                                                                                     // 11093
                                                                                                                       // 11094
	                // Compute next LFSR                                                                                  // 11095
	                if (LFSR & 0x80) {                                                                                    // 11096
	                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1                                     // 11097
	                    LFSR = (LFSR << 1) ^ 0x71;                                                                        // 11098
	                } else {                                                                                              // 11099
	                    LFSR <<= 1;                                                                                       // 11100
	                }                                                                                                     // 11101
	            }                                                                                                         // 11102
                                                                                                                       // 11103
	            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);                                  // 11104
	        }                                                                                                             // 11105
	    }());                                                                                                             // 11106
                                                                                                                       // 11107
	    // Reusable objects for temporary values                                                                          // 11108
	    var T = [];                                                                                                       // 11109
	    (function () {                                                                                                    // 11110
	        for (var i = 0; i < 25; i++) {                                                                                // 11111
	            T[i] = X64Word.create();                                                                                  // 11112
	        }                                                                                                             // 11113
	    }());                                                                                                             // 11114
                                                                                                                       // 11115
	    /**                                                                                                               // 11116
	     * SHA-3 hash algorithm.                                                                                          // 11117
	     */                                                                                                               // 11118
	    var SHA3 = C_algo.SHA3 = Hasher.extend({                                                                          // 11119
	        /**                                                                                                           // 11120
	         * Configuration options.                                                                                     // 11121
	         *                                                                                                            // 11122
	         * @property {number} outputLength                                                                            // 11123
	         *   The desired number of bits in the output hash.                                                           // 11124
	         *   Only values permitted are: 224, 256, 384, 512.                                                           // 11125
	         *   Default: 512                                                                                             // 11126
	         */                                                                                                           // 11127
	        cfg: Hasher.cfg.extend({                                                                                      // 11128
	            outputLength: 512                                                                                         // 11129
	        }),                                                                                                           // 11130
                                                                                                                       // 11131
	        _doReset: function () {                                                                                       // 11132
	            var state = this._state = []                                                                              // 11133
	            for (var i = 0; i < 25; i++) {                                                                            // 11134
	                state[i] = new X64Word.init();                                                                        // 11135
	            }                                                                                                         // 11136
                                                                                                                       // 11137
	            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;                                                 // 11138
	        },                                                                                                            // 11139
                                                                                                                       // 11140
	        _doProcessBlock: function (M, offset) {                                                                       // 11141
	            // Shortcuts                                                                                              // 11142
	            var state = this._state;                                                                                  // 11143
	            var nBlockSizeLanes = this.blockSize / 2;                                                                 // 11144
                                                                                                                       // 11145
	            // Absorb                                                                                                 // 11146
	            for (var i = 0; i < nBlockSizeLanes; i++) {                                                               // 11147
	                // Shortcuts                                                                                          // 11148
	                var M2i  = M[offset + 2 * i];                                                                         // 11149
	                var M2i1 = M[offset + 2 * i + 1];                                                                     // 11150
                                                                                                                       // 11151
	                // Swap endian                                                                                        // 11152
	                M2i = (                                                                                               // 11153
	                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |                                                     // 11154
	                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)                                                       // 11155
	                );                                                                                                    // 11156
	                M2i1 = (                                                                                              // 11157
	                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |                                                   // 11158
	                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)                                                     // 11159
	                );                                                                                                    // 11160
                                                                                                                       // 11161
	                // Absorb message into state                                                                          // 11162
	                var lane = state[i];                                                                                  // 11163
	                lane.high ^= M2i1;                                                                                    // 11164
	                lane.low  ^= M2i;                                                                                     // 11165
	            }                                                                                                         // 11166
                                                                                                                       // 11167
	            // Rounds                                                                                                 // 11168
	            for (var round = 0; round < 24; round++) {                                                                // 11169
	                // Theta                                                                                              // 11170
	                for (var x = 0; x < 5; x++) {                                                                         // 11171
	                    // Mix column lanes                                                                               // 11172
	                    var tMsw = 0, tLsw = 0;                                                                           // 11173
	                    for (var y = 0; y < 5; y++) {                                                                     // 11174
	                        var lane = state[x + 5 * y];                                                                  // 11175
	                        tMsw ^= lane.high;                                                                            // 11176
	                        tLsw ^= lane.low;                                                                             // 11177
	                    }                                                                                                 // 11178
                                                                                                                       // 11179
	                    // Temporary values                                                                               // 11180
	                    var Tx = T[x];                                                                                    // 11181
	                    Tx.high = tMsw;                                                                                   // 11182
	                    Tx.low  = tLsw;                                                                                   // 11183
	                }                                                                                                     // 11184
	                for (var x = 0; x < 5; x++) {                                                                         // 11185
	                    // Shortcuts                                                                                      // 11186
	                    var Tx4 = T[(x + 4) % 5];                                                                         // 11187
	                    var Tx1 = T[(x + 1) % 5];                                                                         // 11188
	                    var Tx1Msw = Tx1.high;                                                                            // 11189
	                    var Tx1Lsw = Tx1.low;                                                                             // 11190
                                                                                                                       // 11191
	                    // Mix surrounding columns                                                                        // 11192
	                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));                                          // 11193
	                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));                                          // 11194
	                    for (var y = 0; y < 5; y++) {                                                                     // 11195
	                        var lane = state[x + 5 * y];                                                                  // 11196
	                        lane.high ^= tMsw;                                                                            // 11197
	                        lane.low  ^= tLsw;                                                                            // 11198
	                    }                                                                                                 // 11199
	                }                                                                                                     // 11200
                                                                                                                       // 11201
	                // Rho Pi                                                                                             // 11202
	                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {                                                // 11203
	                    // Shortcuts                                                                                      // 11204
	                    var lane = state[laneIndex];                                                                      // 11205
	                    var laneMsw = lane.high;                                                                          // 11206
	                    var laneLsw = lane.low;                                                                           // 11207
	                    var rhoOffset = RHO_OFFSETS[laneIndex];                                                           // 11208
                                                                                                                       // 11209
	                    // Rotate lanes                                                                                   // 11210
	                    if (rhoOffset < 32) {                                                                             // 11211
	                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));                           // 11212
	                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));                           // 11213
	                    } else /* if (rhoOffset >= 32) */ {                                                               // 11214
	                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));                    // 11215
	                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));                    // 11216
	                    }                                                                                                 // 11217
                                                                                                                       // 11218
	                    // Transpose lanes                                                                                // 11219
	                    var TPiLane = T[PI_INDEXES[laneIndex]];                                                           // 11220
	                    TPiLane.high = tMsw;                                                                              // 11221
	                    TPiLane.low  = tLsw;                                                                              // 11222
	                }                                                                                                     // 11223
                                                                                                                       // 11224
	                // Rho pi at x = y = 0                                                                                // 11225
	                var T0 = T[0];                                                                                        // 11226
	                var state0 = state[0];                                                                                // 11227
	                T0.high = state0.high;                                                                                // 11228
	                T0.low  = state0.low;                                                                                 // 11229
                                                                                                                       // 11230
	                // Chi                                                                                                // 11231
	                for (var x = 0; x < 5; x++) {                                                                         // 11232
	                    for (var y = 0; y < 5; y++) {                                                                     // 11233
	                        // Shortcuts                                                                                  // 11234
	                        var laneIndex = x + 5 * y;                                                                    // 11235
	                        var lane = state[laneIndex];                                                                  // 11236
	                        var TLane = T[laneIndex];                                                                     // 11237
	                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];                                                       // 11238
	                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];                                                       // 11239
                                                                                                                       // 11240
	                        // Mix rows                                                                                   // 11241
	                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);                                      // 11242
	                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);                                       // 11243
	                    }                                                                                                 // 11244
	                }                                                                                                     // 11245
                                                                                                                       // 11246
	                // Iota                                                                                               // 11247
	                var lane = state[0];                                                                                  // 11248
	                var roundConstant = ROUND_CONSTANTS[round];                                                           // 11249
	                lane.high ^= roundConstant.high;                                                                      // 11250
	                lane.low  ^= roundConstant.low;;                                                                      // 11251
	            }                                                                                                         // 11252
	        },                                                                                                            // 11253
                                                                                                                       // 11254
	        _doFinalize: function () {                                                                                    // 11255
	            // Shortcuts                                                                                              // 11256
	            var data = this._data;                                                                                    // 11257
	            var dataWords = data.words;                                                                               // 11258
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 11259
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 11260
	            var blockSizeBits = this.blockSize * 32;                                                                  // 11261
                                                                                                                       // 11262
	            // Add padding                                                                                            // 11263
	            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);                                               // 11264
	            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;              // 11265
	            data.sigBytes = dataWords.length * 4;                                                                     // 11266
                                                                                                                       // 11267
	            // Hash final blocks                                                                                      // 11268
	            this._process();                                                                                          // 11269
                                                                                                                       // 11270
	            // Shortcuts                                                                                              // 11271
	            var state = this._state;                                                                                  // 11272
	            var outputLengthBytes = this.cfg.outputLength / 8;                                                        // 11273
	            var outputLengthLanes = outputLengthBytes / 8;                                                            // 11274
                                                                                                                       // 11275
	            // Squeeze                                                                                                // 11276
	            var hashWords = [];                                                                                       // 11277
	            for (var i = 0; i < outputLengthLanes; i++) {                                                             // 11278
	                // Shortcuts                                                                                          // 11279
	                var lane = state[i];                                                                                  // 11280
	                var laneMsw = lane.high;                                                                              // 11281
	                var laneLsw = lane.low;                                                                               // 11282
                                                                                                                       // 11283
	                // Swap endian                                                                                        // 11284
	                laneMsw = (                                                                                           // 11285
	                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |                                             // 11286
	                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)                                               // 11287
	                );                                                                                                    // 11288
	                laneLsw = (                                                                                           // 11289
	                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |                                             // 11290
	                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)                                               // 11291
	                );                                                                                                    // 11292
                                                                                                                       // 11293
	                // Squeeze state to retrieve hash                                                                     // 11294
	                hashWords.push(laneLsw);                                                                              // 11295
	                hashWords.push(laneMsw);                                                                              // 11296
	            }                                                                                                         // 11297
                                                                                                                       // 11298
	            // Return final computed hash                                                                             // 11299
	            return new WordArray.init(hashWords, outputLengthBytes);                                                  // 11300
	        },                                                                                                            // 11301
                                                                                                                       // 11302
	        clone: function () {                                                                                          // 11303
	            var clone = Hasher.clone.call(this);                                                                      // 11304
                                                                                                                       // 11305
	            var state = clone._state = this._state.slice(0);                                                          // 11306
	            for (var i = 0; i < 25; i++) {                                                                            // 11307
	                state[i] = state[i].clone();                                                                          // 11308
	            }                                                                                                         // 11309
                                                                                                                       // 11310
	            return clone;                                                                                             // 11311
	        }                                                                                                             // 11312
	    });                                                                                                               // 11313
                                                                                                                       // 11314
	    /**                                                                                                               // 11315
	     * Shortcut function to the hasher's object interface.                                                            // 11316
	     *                                                                                                                // 11317
	     * @param {WordArray|string} message The message to hash.                                                         // 11318
	     *                                                                                                                // 11319
	     * @return {WordArray} The hash.                                                                                  // 11320
	     *                                                                                                                // 11321
	     * @static                                                                                                        // 11322
	     *                                                                                                                // 11323
	     * @example                                                                                                       // 11324
	     *                                                                                                                // 11325
	     *     var hash = CryptoJS.SHA3('message');                                                                       // 11326
	     *     var hash = CryptoJS.SHA3(wordArray);                                                                       // 11327
	     */                                                                                                               // 11328
	    C.SHA3 = Hasher._createHelper(SHA3);                                                                              // 11329
                                                                                                                       // 11330
	    /**                                                                                                               // 11331
	     * Shortcut function to the HMAC's object interface.                                                              // 11332
	     *                                                                                                                // 11333
	     * @param {WordArray|string} message The message to hash.                                                         // 11334
	     * @param {WordArray|string} key The secret key.                                                                  // 11335
	     *                                                                                                                // 11336
	     * @return {WordArray} The HMAC.                                                                                  // 11337
	     *                                                                                                                // 11338
	     * @static                                                                                                        // 11339
	     *                                                                                                                // 11340
	     * @example                                                                                                       // 11341
	     *                                                                                                                // 11342
	     *     var hmac = CryptoJS.HmacSHA3(message, key);                                                                // 11343
	     */                                                                                                               // 11344
	    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);                                                                      // 11345
	}(Math));                                                                                                             // 11346
                                                                                                                       // 11347
                                                                                                                       // 11348
	return CryptoJS.SHA3;                                                                                                 // 11349
                                                                                                                       // 11350
}));                                                                                                                   // 11351
},{"./core":51,"./x64-core":82}],79:[function(require,module,exports){                                                 // 11352
;(function (root, factory, undef) {                                                                                    // 11353
	if (typeof exports === "object") {                                                                                    // 11354
		// CommonJS                                                                                                          // 11355
		module.exports = exports = factory(require("./core"), require("./x64-core"), require("./sha512"));                   // 11356
	}                                                                                                                     // 11357
	else if (typeof define === "function" && define.amd) {                                                                // 11358
		// AMD                                                                                                               // 11359
		define(["./core", "./x64-core", "./sha512"], factory);                                                               // 11360
	}                                                                                                                     // 11361
	else {                                                                                                                // 11362
		// Global (browser)                                                                                                  // 11363
		factory(root.CryptoJS);                                                                                              // 11364
	}                                                                                                                     // 11365
}(this, function (CryptoJS) {                                                                                          // 11366
                                                                                                                       // 11367
	(function () {                                                                                                        // 11368
	    // Shortcuts                                                                                                      // 11369
	    var C = CryptoJS;                                                                                                 // 11370
	    var C_x64 = C.x64;                                                                                                // 11371
	    var X64Word = C_x64.Word;                                                                                         // 11372
	    var X64WordArray = C_x64.WordArray;                                                                               // 11373
	    var C_algo = C.algo;                                                                                              // 11374
	    var SHA512 = C_algo.SHA512;                                                                                       // 11375
                                                                                                                       // 11376
	    /**                                                                                                               // 11377
	     * SHA-384 hash algorithm.                                                                                        // 11378
	     */                                                                                                               // 11379
	    var SHA384 = C_algo.SHA384 = SHA512.extend({                                                                      // 11380
	        _doReset: function () {                                                                                       // 11381
	            this._hash = new X64WordArray.init([                                                                      // 11382
	                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),                   // 11383
	                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),                   // 11384
	                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),                   // 11385
	                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)                    // 11386
	            ]);                                                                                                       // 11387
	        },                                                                                                            // 11388
                                                                                                                       // 11389
	        _doFinalize: function () {                                                                                    // 11390
	            var hash = SHA512._doFinalize.call(this);                                                                 // 11391
                                                                                                                       // 11392
	            hash.sigBytes -= 16;                                                                                      // 11393
                                                                                                                       // 11394
	            return hash;                                                                                              // 11395
	        }                                                                                                             // 11396
	    });                                                                                                               // 11397
                                                                                                                       // 11398
	    /**                                                                                                               // 11399
	     * Shortcut function to the hasher's object interface.                                                            // 11400
	     *                                                                                                                // 11401
	     * @param {WordArray|string} message The message to hash.                                                         // 11402
	     *                                                                                                                // 11403
	     * @return {WordArray} The hash.                                                                                  // 11404
	     *                                                                                                                // 11405
	     * @static                                                                                                        // 11406
	     *                                                                                                                // 11407
	     * @example                                                                                                       // 11408
	     *                                                                                                                // 11409
	     *     var hash = CryptoJS.SHA384('message');                                                                     // 11410
	     *     var hash = CryptoJS.SHA384(wordArray);                                                                     // 11411
	     */                                                                                                               // 11412
	    C.SHA384 = SHA512._createHelper(SHA384);                                                                          // 11413
                                                                                                                       // 11414
	    /**                                                                                                               // 11415
	     * Shortcut function to the HMAC's object interface.                                                              // 11416
	     *                                                                                                                // 11417
	     * @param {WordArray|string} message The message to hash.                                                         // 11418
	     * @param {WordArray|string} key The secret key.                                                                  // 11419
	     *                                                                                                                // 11420
	     * @return {WordArray} The HMAC.                                                                                  // 11421
	     *                                                                                                                // 11422
	     * @static                                                                                                        // 11423
	     *                                                                                                                // 11424
	     * @example                                                                                                       // 11425
	     *                                                                                                                // 11426
	     *     var hmac = CryptoJS.HmacSHA384(message, key);                                                              // 11427
	     */                                                                                                               // 11428
	    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);                                                                  // 11429
	}());                                                                                                                 // 11430
                                                                                                                       // 11431
                                                                                                                       // 11432
	return CryptoJS.SHA384;                                                                                               // 11433
                                                                                                                       // 11434
}));                                                                                                                   // 11435
},{"./core":51,"./sha512":80,"./x64-core":82}],80:[function(require,module,exports){                                   // 11436
;(function (root, factory, undef) {                                                                                    // 11437
	if (typeof exports === "object") {                                                                                    // 11438
		// CommonJS                                                                                                          // 11439
		module.exports = exports = factory(require("./core"), require("./x64-core"));                                        // 11440
	}                                                                                                                     // 11441
	else if (typeof define === "function" && define.amd) {                                                                // 11442
		// AMD                                                                                                               // 11443
		define(["./core", "./x64-core"], factory);                                                                           // 11444
	}                                                                                                                     // 11445
	else {                                                                                                                // 11446
		// Global (browser)                                                                                                  // 11447
		factory(root.CryptoJS);                                                                                              // 11448
	}                                                                                                                     // 11449
}(this, function (CryptoJS) {                                                                                          // 11450
                                                                                                                       // 11451
	(function () {                                                                                                        // 11452
	    // Shortcuts                                                                                                      // 11453
	    var C = CryptoJS;                                                                                                 // 11454
	    var C_lib = C.lib;                                                                                                // 11455
	    var Hasher = C_lib.Hasher;                                                                                        // 11456
	    var C_x64 = C.x64;                                                                                                // 11457
	    var X64Word = C_x64.Word;                                                                                         // 11458
	    var X64WordArray = C_x64.WordArray;                                                                               // 11459
	    var C_algo = C.algo;                                                                                              // 11460
                                                                                                                       // 11461
	    function X64Word_create() {                                                                                       // 11462
	        return X64Word.create.apply(X64Word, arguments);                                                              // 11463
	    }                                                                                                                 // 11464
                                                                                                                       // 11465
	    // Constants                                                                                                      // 11466
	    var K = [                                                                                                         // 11467
	        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),                               // 11468
	        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),                               // 11469
	        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),                               // 11470
	        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),                               // 11471
	        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),                               // 11472
	        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),                               // 11473
	        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),                               // 11474
	        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),                               // 11475
	        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),                               // 11476
	        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),                               // 11477
	        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),                               // 11478
	        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),                               // 11479
	        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),                               // 11480
	        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),                               // 11481
	        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),                               // 11482
	        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),                               // 11483
	        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),                               // 11484
	        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),                               // 11485
	        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),                               // 11486
	        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),                               // 11487
	        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),                               // 11488
	        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),                               // 11489
	        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),                               // 11490
	        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),                               // 11491
	        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),                               // 11492
	        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),                               // 11493
	        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),                               // 11494
	        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),                               // 11495
	        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),                               // 11496
	        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),                               // 11497
	        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),                               // 11498
	        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),                               // 11499
	        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),                               // 11500
	        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),                               // 11501
	        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),                               // 11502
	        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),                               // 11503
	        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),                               // 11504
	        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),                               // 11505
	        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),                               // 11506
	        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)                                // 11507
	    ];                                                                                                                // 11508
                                                                                                                       // 11509
	    // Reusable objects                                                                                               // 11510
	    var W = [];                                                                                                       // 11511
	    (function () {                                                                                                    // 11512
	        for (var i = 0; i < 80; i++) {                                                                                // 11513
	            W[i] = X64Word_create();                                                                                  // 11514
	        }                                                                                                             // 11515
	    }());                                                                                                             // 11516
                                                                                                                       // 11517
	    /**                                                                                                               // 11518
	     * SHA-512 hash algorithm.                                                                                        // 11519
	     */                                                                                                               // 11520
	    var SHA512 = C_algo.SHA512 = Hasher.extend({                                                                      // 11521
	        _doReset: function () {                                                                                       // 11522
	            this._hash = new X64WordArray.init([                                                                      // 11523
	                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),                   // 11524
	                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),                   // 11525
	                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),                   // 11526
	                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)                    // 11527
	            ]);                                                                                                       // 11528
	        },                                                                                                            // 11529
                                                                                                                       // 11530
	        _doProcessBlock: function (M, offset) {                                                                       // 11531
	            // Shortcuts                                                                                              // 11532
	            var H = this._hash.words;                                                                                 // 11533
                                                                                                                       // 11534
	            var H0 = H[0];                                                                                            // 11535
	            var H1 = H[1];                                                                                            // 11536
	            var H2 = H[2];                                                                                            // 11537
	            var H3 = H[3];                                                                                            // 11538
	            var H4 = H[4];                                                                                            // 11539
	            var H5 = H[5];                                                                                            // 11540
	            var H6 = H[6];                                                                                            // 11541
	            var H7 = H[7];                                                                                            // 11542
                                                                                                                       // 11543
	            var H0h = H0.high;                                                                                        // 11544
	            var H0l = H0.low;                                                                                         // 11545
	            var H1h = H1.high;                                                                                        // 11546
	            var H1l = H1.low;                                                                                         // 11547
	            var H2h = H2.high;                                                                                        // 11548
	            var H2l = H2.low;                                                                                         // 11549
	            var H3h = H3.high;                                                                                        // 11550
	            var H3l = H3.low;                                                                                         // 11551
	            var H4h = H4.high;                                                                                        // 11552
	            var H4l = H4.low;                                                                                         // 11553
	            var H5h = H5.high;                                                                                        // 11554
	            var H5l = H5.low;                                                                                         // 11555
	            var H6h = H6.high;                                                                                        // 11556
	            var H6l = H6.low;                                                                                         // 11557
	            var H7h = H7.high;                                                                                        // 11558
	            var H7l = H7.low;                                                                                         // 11559
                                                                                                                       // 11560
	            // Working variables                                                                                      // 11561
	            var ah = H0h;                                                                                             // 11562
	            var al = H0l;                                                                                             // 11563
	            var bh = H1h;                                                                                             // 11564
	            var bl = H1l;                                                                                             // 11565
	            var ch = H2h;                                                                                             // 11566
	            var cl = H2l;                                                                                             // 11567
	            var dh = H3h;                                                                                             // 11568
	            var dl = H3l;                                                                                             // 11569
	            var eh = H4h;                                                                                             // 11570
	            var el = H4l;                                                                                             // 11571
	            var fh = H5h;                                                                                             // 11572
	            var fl = H5l;                                                                                             // 11573
	            var gh = H6h;                                                                                             // 11574
	            var gl = H6l;                                                                                             // 11575
	            var hh = H7h;                                                                                             // 11576
	            var hl = H7l;                                                                                             // 11577
                                                                                                                       // 11578
	            // Rounds                                                                                                 // 11579
	            for (var i = 0; i < 80; i++) {                                                                            // 11580
	                // Shortcut                                                                                           // 11581
	                var Wi = W[i];                                                                                        // 11582
                                                                                                                       // 11583
	                // Extend message                                                                                     // 11584
	                if (i < 16) {                                                                                         // 11585
	                    var Wih = Wi.high = M[offset + i * 2]     | 0;                                                    // 11586
	                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;                                                    // 11587
	                } else {                                                                                              // 11588
	                    // Gamma0                                                                                         // 11589
	                    var gamma0x  = W[i - 15];                                                                         // 11590
	                    var gamma0xh = gamma0x.high;                                                                      // 11591
	                    var gamma0xl = gamma0x.low;                                                                       // 11592
	                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
	                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));
                                                                                                                       // 11595
	                    // Gamma1                                                                                         // 11596
	                    var gamma1x  = W[i - 2];                                                                          // 11597
	                    var gamma1xh = gamma1x.high;                                                                      // 11598
	                    var gamma1xl = gamma1x.low;                                                                       // 11599
	                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
	                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));
                                                                                                                       // 11602
	                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]                                                  // 11603
	                    var Wi7  = W[i - 7];                                                                              // 11604
	                    var Wi7h = Wi7.high;                                                                              // 11605
	                    var Wi7l = Wi7.low;                                                                               // 11606
                                                                                                                       // 11607
	                    var Wi16  = W[i - 16];                                                                            // 11608
	                    var Wi16h = Wi16.high;                                                                            // 11609
	                    var Wi16l = Wi16.low;                                                                             // 11610
                                                                                                                       // 11611
	                    var Wil = gamma0l + Wi7l;                                                                         // 11612
	                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);                               // 11613
	                    var Wil = Wil + gamma1l;                                                                          // 11614
	                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);                                // 11615
	                    var Wil = Wil + Wi16l;                                                                            // 11616
	                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);                                    // 11617
                                                                                                                       // 11618
	                    Wi.high = Wih;                                                                                    // 11619
	                    Wi.low  = Wil;                                                                                    // 11620
	                }                                                                                                     // 11621
                                                                                                                       // 11622
	                var chh  = (eh & fh) ^ (~eh & gh);                                                                    // 11623
	                var chl  = (el & fl) ^ (~el & gl);                                                                    // 11624
	                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);                                                         // 11625
	                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);                                                         // 11626
                                                                                                                       // 11627
	                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));    // 11628
	                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));    // 11629
	                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));    // 11630
	                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));    // 11631
                                                                                                                       // 11632
	                // t1 = h + sigma1 + ch + K[i] + W[i]                                                                 // 11633
	                var Ki  = K[i];                                                                                       // 11634
	                var Kih = Ki.high;                                                                                    // 11635
	                var Kil = Ki.low;                                                                                     // 11636
                                                                                                                       // 11637
	                var t1l = hl + sigma1l;                                                                               // 11638
	                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);                                          // 11639
	                var t1l = t1l + chl;                                                                                  // 11640
	                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);                                            // 11641
	                var t1l = t1l + Kil;                                                                                  // 11642
	                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);                                            // 11643
	                var t1l = t1l + Wil;                                                                                  // 11644
	                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);                                            // 11645
                                                                                                                       // 11646
	                // t2 = sigma0 + maj                                                                                  // 11647
	                var t2l = sigma0l + majl;                                                                             // 11648
	                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);                                   // 11649
                                                                                                                       // 11650
	                // Update working variables                                                                           // 11651
	                hh = gh;                                                                                              // 11652
	                hl = gl;                                                                                              // 11653
	                gh = fh;                                                                                              // 11654
	                gl = fl;                                                                                              // 11655
	                fh = eh;                                                                                              // 11656
	                fl = el;                                                                                              // 11657
	                el = (dl + t1l) | 0;                                                                                  // 11658
	                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;                                              // 11659
	                dh = ch;                                                                                              // 11660
	                dl = cl;                                                                                              // 11661
	                ch = bh;                                                                                              // 11662
	                cl = bl;                                                                                              // 11663
	                bh = ah;                                                                                              // 11664
	                bl = al;                                                                                              // 11665
	                al = (t1l + t2l) | 0;                                                                                 // 11666
	                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;                                            // 11667
	            }                                                                                                         // 11668
                                                                                                                       // 11669
	            // Intermediate hash value                                                                                // 11670
	            H0l = H0.low  = (H0l + al);                                                                               // 11671
	            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));                                                // 11672
	            H1l = H1.low  = (H1l + bl);                                                                               // 11673
	            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));                                                // 11674
	            H2l = H2.low  = (H2l + cl);                                                                               // 11675
	            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));                                                // 11676
	            H3l = H3.low  = (H3l + dl);                                                                               // 11677
	            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));                                                // 11678
	            H4l = H4.low  = (H4l + el);                                                                               // 11679
	            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));                                                // 11680
	            H5l = H5.low  = (H5l + fl);                                                                               // 11681
	            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));                                                // 11682
	            H6l = H6.low  = (H6l + gl);                                                                               // 11683
	            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));                                                // 11684
	            H7l = H7.low  = (H7l + hl);                                                                               // 11685
	            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));                                                // 11686
	        },                                                                                                            // 11687
                                                                                                                       // 11688
	        _doFinalize: function () {                                                                                    // 11689
	            // Shortcuts                                                                                              // 11690
	            var data = this._data;                                                                                    // 11691
	            var dataWords = data.words;                                                                               // 11692
                                                                                                                       // 11693
	            var nBitsTotal = this._nDataBytes * 8;                                                                    // 11694
	            var nBitsLeft = data.sigBytes * 8;                                                                        // 11695
                                                                                                                       // 11696
	            // Add padding                                                                                            // 11697
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 11698
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);                 // 11699
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;                                           // 11700
	            data.sigBytes = dataWords.length * 4;                                                                     // 11701
                                                                                                                       // 11702
	            // Hash final blocks                                                                                      // 11703
	            this._process();                                                                                          // 11704
                                                                                                                       // 11705
	            // Convert hash to 32-bit word array before returning                                                     // 11706
	            var hash = this._hash.toX32();                                                                            // 11707
                                                                                                                       // 11708
	            // Return final computed hash                                                                             // 11709
	            return hash;                                                                                              // 11710
	        },                                                                                                            // 11711
                                                                                                                       // 11712
	        clone: function () {                                                                                          // 11713
	            var clone = Hasher.clone.call(this);                                                                      // 11714
	            clone._hash = this._hash.clone();                                                                         // 11715
                                                                                                                       // 11716
	            return clone;                                                                                             // 11717
	        },                                                                                                            // 11718
                                                                                                                       // 11719
	        blockSize: 1024/32                                                                                            // 11720
	    });                                                                                                               // 11721
                                                                                                                       // 11722
	    /**                                                                                                               // 11723
	     * Shortcut function to the hasher's object interface.                                                            // 11724
	     *                                                                                                                // 11725
	     * @param {WordArray|string} message The message to hash.                                                         // 11726
	     *                                                                                                                // 11727
	     * @return {WordArray} The hash.                                                                                  // 11728
	     *                                                                                                                // 11729
	     * @static                                                                                                        // 11730
	     *                                                                                                                // 11731
	     * @example                                                                                                       // 11732
	     *                                                                                                                // 11733
	     *     var hash = CryptoJS.SHA512('message');                                                                     // 11734
	     *     var hash = CryptoJS.SHA512(wordArray);                                                                     // 11735
	     */                                                                                                               // 11736
	    C.SHA512 = Hasher._createHelper(SHA512);                                                                          // 11737
                                                                                                                       // 11738
	    /**                                                                                                               // 11739
	     * Shortcut function to the HMAC's object interface.                                                              // 11740
	     *                                                                                                                // 11741
	     * @param {WordArray|string} message The message to hash.                                                         // 11742
	     * @param {WordArray|string} key The secret key.                                                                  // 11743
	     *                                                                                                                // 11744
	     * @return {WordArray} The HMAC.                                                                                  // 11745
	     *                                                                                                                // 11746
	     * @static                                                                                                        // 11747
	     *                                                                                                                // 11748
	     * @example                                                                                                       // 11749
	     *                                                                                                                // 11750
	     *     var hmac = CryptoJS.HmacSHA512(message, key);                                                              // 11751
	     */                                                                                                               // 11752
	    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);                                                                  // 11753
	}());                                                                                                                 // 11754
                                                                                                                       // 11755
                                                                                                                       // 11756
	return CryptoJS.SHA512;                                                                                               // 11757
                                                                                                                       // 11758
}));                                                                                                                   // 11759
},{"./core":51,"./x64-core":82}],81:[function(require,module,exports){                                                 // 11760
;(function (root, factory, undef) {                                                                                    // 11761
	if (typeof exports === "object") {                                                                                    // 11762
		// CommonJS                                                                                                          // 11763
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}                                                                                                                     // 11765
	else if (typeof define === "function" && define.amd) {                                                                // 11766
		// AMD                                                                                                               // 11767
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);                                   // 11768
	}                                                                                                                     // 11769
	else {                                                                                                                // 11770
		// Global (browser)                                                                                                  // 11771
		factory(root.CryptoJS);                                                                                              // 11772
	}                                                                                                                     // 11773
}(this, function (CryptoJS) {                                                                                          // 11774
                                                                                                                       // 11775
	(function () {                                                                                                        // 11776
	    // Shortcuts                                                                                                      // 11777
	    var C = CryptoJS;                                                                                                 // 11778
	    var C_lib = C.lib;                                                                                                // 11779
	    var WordArray = C_lib.WordArray;                                                                                  // 11780
	    var BlockCipher = C_lib.BlockCipher;                                                                              // 11781
	    var C_algo = C.algo;                                                                                              // 11782
                                                                                                                       // 11783
	    // Permuted Choice 1 constants                                                                                    // 11784
	    var PC1 = [                                                                                                       // 11785
	        57, 49, 41, 33, 25, 17, 9,  1,                                                                                // 11786
	        58, 50, 42, 34, 26, 18, 10, 2,                                                                                // 11787
	        59, 51, 43, 35, 27, 19, 11, 3,                                                                                // 11788
	        60, 52, 44, 36, 63, 55, 47, 39,                                                                               // 11789
	        31, 23, 15, 7,  62, 54, 46, 38,                                                                               // 11790
	        30, 22, 14, 6,  61, 53, 45, 37,                                                                               // 11791
	        29, 21, 13, 5,  28, 20, 12, 4                                                                                 // 11792
	    ];                                                                                                                // 11793
                                                                                                                       // 11794
	    // Permuted Choice 2 constants                                                                                    // 11795
	    var PC2 = [                                                                                                       // 11796
	        14, 17, 11, 24, 1,  5,                                                                                        // 11797
	        3,  28, 15, 6,  21, 10,                                                                                       // 11798
	        23, 19, 12, 4,  26, 8,                                                                                        // 11799
	        16, 7,  27, 20, 13, 2,                                                                                        // 11800
	        41, 52, 31, 37, 47, 55,                                                                                       // 11801
	        30, 40, 51, 45, 33, 48,                                                                                       // 11802
	        44, 49, 39, 56, 34, 53,                                                                                       // 11803
	        46, 42, 50, 36, 29, 32                                                                                        // 11804
	    ];                                                                                                                // 11805
                                                                                                                       // 11806
	    // Cumulative bit shift constants                                                                                 // 11807
	    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];                                // 11808
                                                                                                                       // 11809
	    // SBOXes and round permutation constants                                                                         // 11810
	    var SBOX_P = [                                                                                                    // 11811
	        {                                                                                                             // 11812
	            0x0: 0x808200,                                                                                            // 11813
	            0x10000000: 0x8000,                                                                                       // 11814
	            0x20000000: 0x808002,                                                                                     // 11815
	            0x30000000: 0x2,                                                                                          // 11816
	            0x40000000: 0x200,                                                                                        // 11817
	            0x50000000: 0x808202,                                                                                     // 11818
	            0x60000000: 0x800202,                                                                                     // 11819
	            0x70000000: 0x800000,                                                                                     // 11820
	            0x80000000: 0x202,                                                                                        // 11821
	            0x90000000: 0x800200,                                                                                     // 11822
	            0xa0000000: 0x8200,                                                                                       // 11823
	            0xb0000000: 0x808000,                                                                                     // 11824
	            0xc0000000: 0x8002,                                                                                       // 11825
	            0xd0000000: 0x800002,                                                                                     // 11826
	            0xe0000000: 0x0,                                                                                          // 11827
	            0xf0000000: 0x8202,                                                                                       // 11828
	            0x8000000: 0x0,                                                                                           // 11829
	            0x18000000: 0x808202,                                                                                     // 11830
	            0x28000000: 0x8202,                                                                                       // 11831
	            0x38000000: 0x8000,                                                                                       // 11832
	            0x48000000: 0x808200,                                                                                     // 11833
	            0x58000000: 0x200,                                                                                        // 11834
	            0x68000000: 0x808002,                                                                                     // 11835
	            0x78000000: 0x2,                                                                                          // 11836
	            0x88000000: 0x800200,                                                                                     // 11837
	            0x98000000: 0x8200,                                                                                       // 11838
	            0xa8000000: 0x808000,                                                                                     // 11839
	            0xb8000000: 0x800202,                                                                                     // 11840
	            0xc8000000: 0x800002,                                                                                     // 11841
	            0xd8000000: 0x8002,                                                                                       // 11842
	            0xe8000000: 0x202,                                                                                        // 11843
	            0xf8000000: 0x800000,                                                                                     // 11844
	            0x1: 0x8000,                                                                                              // 11845
	            0x10000001: 0x2,                                                                                          // 11846
	            0x20000001: 0x808200,                                                                                     // 11847
	            0x30000001: 0x800000,                                                                                     // 11848
	            0x40000001: 0x808002,                                                                                     // 11849
	            0x50000001: 0x8200,                                                                                       // 11850
	            0x60000001: 0x200,                                                                                        // 11851
	            0x70000001: 0x800202,                                                                                     // 11852
	            0x80000001: 0x808202,                                                                                     // 11853
	            0x90000001: 0x808000,                                                                                     // 11854
	            0xa0000001: 0x800002,                                                                                     // 11855
	            0xb0000001: 0x8202,                                                                                       // 11856
	            0xc0000001: 0x202,                                                                                        // 11857
	            0xd0000001: 0x800200,                                                                                     // 11858
	            0xe0000001: 0x8002,                                                                                       // 11859
	            0xf0000001: 0x0,                                                                                          // 11860
	            0x8000001: 0x808202,                                                                                      // 11861
	            0x18000001: 0x808000,                                                                                     // 11862
	            0x28000001: 0x800000,                                                                                     // 11863
	            0x38000001: 0x200,                                                                                        // 11864
	            0x48000001: 0x8000,                                                                                       // 11865
	            0x58000001: 0x800002,                                                                                     // 11866
	            0x68000001: 0x2,                                                                                          // 11867
	            0x78000001: 0x8202,                                                                                       // 11868
	            0x88000001: 0x8002,                                                                                       // 11869
	            0x98000001: 0x800202,                                                                                     // 11870
	            0xa8000001: 0x202,                                                                                        // 11871
	            0xb8000001: 0x808200,                                                                                     // 11872
	            0xc8000001: 0x800200,                                                                                     // 11873
	            0xd8000001: 0x0,                                                                                          // 11874
	            0xe8000001: 0x8200,                                                                                       // 11875
	            0xf8000001: 0x808002                                                                                      // 11876
	        },                                                                                                            // 11877
	        {                                                                                                             // 11878
	            0x0: 0x40084010,                                                                                          // 11879
	            0x1000000: 0x4000,                                                                                        // 11880
	            0x2000000: 0x80000,                                                                                       // 11881
	            0x3000000: 0x40080010,                                                                                    // 11882
	            0x4000000: 0x40000010,                                                                                    // 11883
	            0x5000000: 0x40084000,                                                                                    // 11884
	            0x6000000: 0x40004000,                                                                                    // 11885
	            0x7000000: 0x10,                                                                                          // 11886
	            0x8000000: 0x84000,                                                                                       // 11887
	            0x9000000: 0x40004010,                                                                                    // 11888
	            0xa000000: 0x40000000,                                                                                    // 11889
	            0xb000000: 0x84010,                                                                                       // 11890
	            0xc000000: 0x80010,                                                                                       // 11891
	            0xd000000: 0x0,                                                                                           // 11892
	            0xe000000: 0x4010,                                                                                        // 11893
	            0xf000000: 0x40080000,                                                                                    // 11894
	            0x800000: 0x40004000,                                                                                     // 11895
	            0x1800000: 0x84010,                                                                                       // 11896
	            0x2800000: 0x10,                                                                                          // 11897
	            0x3800000: 0x40004010,                                                                                    // 11898
	            0x4800000: 0x40084010,                                                                                    // 11899
	            0x5800000: 0x40000000,                                                                                    // 11900
	            0x6800000: 0x80000,                                                                                       // 11901
	            0x7800000: 0x40080010,                                                                                    // 11902
	            0x8800000: 0x80010,                                                                                       // 11903
	            0x9800000: 0x0,                                                                                           // 11904
	            0xa800000: 0x4000,                                                                                        // 11905
	            0xb800000: 0x40080000,                                                                                    // 11906
	            0xc800000: 0x40000010,                                                                                    // 11907
	            0xd800000: 0x84000,                                                                                       // 11908
	            0xe800000: 0x40084000,                                                                                    // 11909
	            0xf800000: 0x4010,                                                                                        // 11910
	            0x10000000: 0x0,                                                                                          // 11911
	            0x11000000: 0x40080010,                                                                                   // 11912
	            0x12000000: 0x40004010,                                                                                   // 11913
	            0x13000000: 0x40084000,                                                                                   // 11914
	            0x14000000: 0x40080000,                                                                                   // 11915
	            0x15000000: 0x10,                                                                                         // 11916
	            0x16000000: 0x84010,                                                                                      // 11917
	            0x17000000: 0x4000,                                                                                       // 11918
	            0x18000000: 0x4010,                                                                                       // 11919
	            0x19000000: 0x80000,                                                                                      // 11920
	            0x1a000000: 0x80010,                                                                                      // 11921
	            0x1b000000: 0x40000010,                                                                                   // 11922
	            0x1c000000: 0x84000,                                                                                      // 11923
	            0x1d000000: 0x40004000,                                                                                   // 11924
	            0x1e000000: 0x40000000,                                                                                   // 11925
	            0x1f000000: 0x40084010,                                                                                   // 11926
	            0x10800000: 0x84010,                                                                                      // 11927
	            0x11800000: 0x80000,                                                                                      // 11928
	            0x12800000: 0x40080000,                                                                                   // 11929
	            0x13800000: 0x4000,                                                                                       // 11930
	            0x14800000: 0x40004000,                                                                                   // 11931
	            0x15800000: 0x40084010,                                                                                   // 11932
	            0x16800000: 0x10,                                                                                         // 11933
	            0x17800000: 0x40000000,                                                                                   // 11934
	            0x18800000: 0x40084000,                                                                                   // 11935
	            0x19800000: 0x40000010,                                                                                   // 11936
	            0x1a800000: 0x40004010,                                                                                   // 11937
	            0x1b800000: 0x80010,                                                                                      // 11938
	            0x1c800000: 0x0,                                                                                          // 11939
	            0x1d800000: 0x4010,                                                                                       // 11940
	            0x1e800000: 0x40080010,                                                                                   // 11941
	            0x1f800000: 0x84000                                                                                       // 11942
	        },                                                                                                            // 11943
	        {                                                                                                             // 11944
	            0x0: 0x104,                                                                                               // 11945
	            0x100000: 0x0,                                                                                            // 11946
	            0x200000: 0x4000100,                                                                                      // 11947
	            0x300000: 0x10104,                                                                                        // 11948
	            0x400000: 0x10004,                                                                                        // 11949
	            0x500000: 0x4000004,                                                                                      // 11950
	            0x600000: 0x4010104,                                                                                      // 11951
	            0x700000: 0x4010000,                                                                                      // 11952
	            0x800000: 0x4000000,                                                                                      // 11953
	            0x900000: 0x4010100,                                                                                      // 11954
	            0xa00000: 0x10100,                                                                                        // 11955
	            0xb00000: 0x4010004,                                                                                      // 11956
	            0xc00000: 0x4000104,                                                                                      // 11957
	            0xd00000: 0x10000,                                                                                        // 11958
	            0xe00000: 0x4,                                                                                            // 11959
	            0xf00000: 0x100,                                                                                          // 11960
	            0x80000: 0x4010100,                                                                                       // 11961
	            0x180000: 0x4010004,                                                                                      // 11962
	            0x280000: 0x0,                                                                                            // 11963
	            0x380000: 0x4000100,                                                                                      // 11964
	            0x480000: 0x4000004,                                                                                      // 11965
	            0x580000: 0x10000,                                                                                        // 11966
	            0x680000: 0x10004,                                                                                        // 11967
	            0x780000: 0x104,                                                                                          // 11968
	            0x880000: 0x4,                                                                                            // 11969
	            0x980000: 0x100,                                                                                          // 11970
	            0xa80000: 0x4010000,                                                                                      // 11971
	            0xb80000: 0x10104,                                                                                        // 11972
	            0xc80000: 0x10100,                                                                                        // 11973
	            0xd80000: 0x4000104,                                                                                      // 11974
	            0xe80000: 0x4010104,                                                                                      // 11975
	            0xf80000: 0x4000000,                                                                                      // 11976
	            0x1000000: 0x4010100,                                                                                     // 11977
	            0x1100000: 0x10004,                                                                                       // 11978
	            0x1200000: 0x10000,                                                                                       // 11979
	            0x1300000: 0x4000100,                                                                                     // 11980
	            0x1400000: 0x100,                                                                                         // 11981
	            0x1500000: 0x4010104,                                                                                     // 11982
	            0x1600000: 0x4000004,                                                                                     // 11983
	            0x1700000: 0x0,                                                                                           // 11984
	            0x1800000: 0x4000104,                                                                                     // 11985
	            0x1900000: 0x4000000,                                                                                     // 11986
	            0x1a00000: 0x4,                                                                                           // 11987
	            0x1b00000: 0x10100,                                                                                       // 11988
	            0x1c00000: 0x4010000,                                                                                     // 11989
	            0x1d00000: 0x104,                                                                                         // 11990
	            0x1e00000: 0x10104,                                                                                       // 11991
	            0x1f00000: 0x4010004,                                                                                     // 11992
	            0x1080000: 0x4000000,                                                                                     // 11993
	            0x1180000: 0x104,                                                                                         // 11994
	            0x1280000: 0x4010100,                                                                                     // 11995
	            0x1380000: 0x0,                                                                                           // 11996
	            0x1480000: 0x10004,                                                                                       // 11997
	            0x1580000: 0x4000100,                                                                                     // 11998
	            0x1680000: 0x100,                                                                                         // 11999
	            0x1780000: 0x4010004,                                                                                     // 12000
	            0x1880000: 0x10000,                                                                                       // 12001
	            0x1980000: 0x4010104,                                                                                     // 12002
	            0x1a80000: 0x10104,                                                                                       // 12003
	            0x1b80000: 0x4000004,                                                                                     // 12004
	            0x1c80000: 0x4000104,                                                                                     // 12005
	            0x1d80000: 0x4010000,                                                                                     // 12006
	            0x1e80000: 0x4,                                                                                           // 12007
	            0x1f80000: 0x10100                                                                                        // 12008
	        },                                                                                                            // 12009
	        {                                                                                                             // 12010
	            0x0: 0x80401000,                                                                                          // 12011
	            0x10000: 0x80001040,                                                                                      // 12012
	            0x20000: 0x401040,                                                                                        // 12013
	            0x30000: 0x80400000,                                                                                      // 12014
	            0x40000: 0x0,                                                                                             // 12015
	            0x50000: 0x401000,                                                                                        // 12016
	            0x60000: 0x80000040,                                                                                      // 12017
	            0x70000: 0x400040,                                                                                        // 12018
	            0x80000: 0x80000000,                                                                                      // 12019
	            0x90000: 0x400000,                                                                                        // 12020
	            0xa0000: 0x40,                                                                                            // 12021
	            0xb0000: 0x80001000,                                                                                      // 12022
	            0xc0000: 0x80400040,                                                                                      // 12023
	            0xd0000: 0x1040,                                                                                          // 12024
	            0xe0000: 0x1000,                                                                                          // 12025
	            0xf0000: 0x80401040,                                                                                      // 12026
	            0x8000: 0x80001040,                                                                                       // 12027
	            0x18000: 0x40,                                                                                            // 12028
	            0x28000: 0x80400040,                                                                                      // 12029
	            0x38000: 0x80001000,                                                                                      // 12030
	            0x48000: 0x401000,                                                                                        // 12031
	            0x58000: 0x80401040,                                                                                      // 12032
	            0x68000: 0x0,                                                                                             // 12033
	            0x78000: 0x80400000,                                                                                      // 12034
	            0x88000: 0x1000,                                                                                          // 12035
	            0x98000: 0x80401000,                                                                                      // 12036
	            0xa8000: 0x400000,                                                                                        // 12037
	            0xb8000: 0x1040,                                                                                          // 12038
	            0xc8000: 0x80000000,                                                                                      // 12039
	            0xd8000: 0x400040,                                                                                        // 12040
	            0xe8000: 0x401040,                                                                                        // 12041
	            0xf8000: 0x80000040,                                                                                      // 12042
	            0x100000: 0x400040,                                                                                       // 12043
	            0x110000: 0x401000,                                                                                       // 12044
	            0x120000: 0x80000040,                                                                                     // 12045
	            0x130000: 0x0,                                                                                            // 12046
	            0x140000: 0x1040,                                                                                         // 12047
	            0x150000: 0x80400040,                                                                                     // 12048
	            0x160000: 0x80401000,                                                                                     // 12049
	            0x170000: 0x80001040,                                                                                     // 12050
	            0x180000: 0x80401040,                                                                                     // 12051
	            0x190000: 0x80000000,                                                                                     // 12052
	            0x1a0000: 0x80400000,                                                                                     // 12053
	            0x1b0000: 0x401040,                                                                                       // 12054
	            0x1c0000: 0x80001000,                                                                                     // 12055
	            0x1d0000: 0x400000,                                                                                       // 12056
	            0x1e0000: 0x40,                                                                                           // 12057
	            0x1f0000: 0x1000,                                                                                         // 12058
	            0x108000: 0x80400000,                                                                                     // 12059
	            0x118000: 0x80401040,                                                                                     // 12060
	            0x128000: 0x0,                                                                                            // 12061
	            0x138000: 0x401000,                                                                                       // 12062
	            0x148000: 0x400040,                                                                                       // 12063
	            0x158000: 0x80000000,                                                                                     // 12064
	            0x168000: 0x80001040,                                                                                     // 12065
	            0x178000: 0x40,                                                                                           // 12066
	            0x188000: 0x80000040,                                                                                     // 12067
	            0x198000: 0x1000,                                                                                         // 12068
	            0x1a8000: 0x80001000,                                                                                     // 12069
	            0x1b8000: 0x80400040,                                                                                     // 12070
	            0x1c8000: 0x1040,                                                                                         // 12071
	            0x1d8000: 0x80401000,                                                                                     // 12072
	            0x1e8000: 0x400000,                                                                                       // 12073
	            0x1f8000: 0x401040                                                                                        // 12074
	        },                                                                                                            // 12075
	        {                                                                                                             // 12076
	            0x0: 0x80,                                                                                                // 12077
	            0x1000: 0x1040000,                                                                                        // 12078
	            0x2000: 0x40000,                                                                                          // 12079
	            0x3000: 0x20000000,                                                                                       // 12080
	            0x4000: 0x20040080,                                                                                       // 12081
	            0x5000: 0x1000080,                                                                                        // 12082
	            0x6000: 0x21000080,                                                                                       // 12083
	            0x7000: 0x40080,                                                                                          // 12084
	            0x8000: 0x1000000,                                                                                        // 12085
	            0x9000: 0x20040000,                                                                                       // 12086
	            0xa000: 0x20000080,                                                                                       // 12087
	            0xb000: 0x21040080,                                                                                       // 12088
	            0xc000: 0x21040000,                                                                                       // 12089
	            0xd000: 0x0,                                                                                              // 12090
	            0xe000: 0x1040080,                                                                                        // 12091
	            0xf000: 0x21000000,                                                                                       // 12092
	            0x800: 0x1040080,                                                                                         // 12093
	            0x1800: 0x21000080,                                                                                       // 12094
	            0x2800: 0x80,                                                                                             // 12095
	            0x3800: 0x1040000,                                                                                        // 12096
	            0x4800: 0x40000,                                                                                          // 12097
	            0x5800: 0x20040080,                                                                                       // 12098
	            0x6800: 0x21040000,                                                                                       // 12099
	            0x7800: 0x20000000,                                                                                       // 12100
	            0x8800: 0x20040000,                                                                                       // 12101
	            0x9800: 0x0,                                                                                              // 12102
	            0xa800: 0x21040080,                                                                                       // 12103
	            0xb800: 0x1000080,                                                                                        // 12104
	            0xc800: 0x20000080,                                                                                       // 12105
	            0xd800: 0x21000000,                                                                                       // 12106
	            0xe800: 0x1000000,                                                                                        // 12107
	            0xf800: 0x40080,                                                                                          // 12108
	            0x10000: 0x40000,                                                                                         // 12109
	            0x11000: 0x80,                                                                                            // 12110
	            0x12000: 0x20000000,                                                                                      // 12111
	            0x13000: 0x21000080,                                                                                      // 12112
	            0x14000: 0x1000080,                                                                                       // 12113
	            0x15000: 0x21040000,                                                                                      // 12114
	            0x16000: 0x20040080,                                                                                      // 12115
	            0x17000: 0x1000000,                                                                                       // 12116
	            0x18000: 0x21040080,                                                                                      // 12117
	            0x19000: 0x21000000,                                                                                      // 12118
	            0x1a000: 0x1040000,                                                                                       // 12119
	            0x1b000: 0x20040000,                                                                                      // 12120
	            0x1c000: 0x40080,                                                                                         // 12121
	            0x1d000: 0x20000080,                                                                                      // 12122
	            0x1e000: 0x0,                                                                                             // 12123
	            0x1f000: 0x1040080,                                                                                       // 12124
	            0x10800: 0x21000080,                                                                                      // 12125
	            0x11800: 0x1000000,                                                                                       // 12126
	            0x12800: 0x1040000,                                                                                       // 12127
	            0x13800: 0x20040080,                                                                                      // 12128
	            0x14800: 0x20000000,                                                                                      // 12129
	            0x15800: 0x1040080,                                                                                       // 12130
	            0x16800: 0x80,                                                                                            // 12131
	            0x17800: 0x21040000,                                                                                      // 12132
	            0x18800: 0x40080,                                                                                         // 12133
	            0x19800: 0x21040080,                                                                                      // 12134
	            0x1a800: 0x0,                                                                                             // 12135
	            0x1b800: 0x21000000,                                                                                      // 12136
	            0x1c800: 0x1000080,                                                                                       // 12137
	            0x1d800: 0x40000,                                                                                         // 12138
	            0x1e800: 0x20040000,                                                                                      // 12139
	            0x1f800: 0x20000080                                                                                       // 12140
	        },                                                                                                            // 12141
	        {                                                                                                             // 12142
	            0x0: 0x10000008,                                                                                          // 12143
	            0x100: 0x2000,                                                                                            // 12144
	            0x200: 0x10200000,                                                                                        // 12145
	            0x300: 0x10202008,                                                                                        // 12146
	            0x400: 0x10002000,                                                                                        // 12147
	            0x500: 0x200000,                                                                                          // 12148
	            0x600: 0x200008,                                                                                          // 12149
	            0x700: 0x10000000,                                                                                        // 12150
	            0x800: 0x0,                                                                                               // 12151
	            0x900: 0x10002008,                                                                                        // 12152
	            0xa00: 0x202000,                                                                                          // 12153
	            0xb00: 0x8,                                                                                               // 12154
	            0xc00: 0x10200008,                                                                                        // 12155
	            0xd00: 0x202008,                                                                                          // 12156
	            0xe00: 0x2008,                                                                                            // 12157
	            0xf00: 0x10202000,                                                                                        // 12158
	            0x80: 0x10200000,                                                                                         // 12159
	            0x180: 0x10202008,                                                                                        // 12160
	            0x280: 0x8,                                                                                               // 12161
	            0x380: 0x200000,                                                                                          // 12162
	            0x480: 0x202008,                                                                                          // 12163
	            0x580: 0x10000008,                                                                                        // 12164
	            0x680: 0x10002000,                                                                                        // 12165
	            0x780: 0x2008,                                                                                            // 12166
	            0x880: 0x200008,                                                                                          // 12167
	            0x980: 0x2000,                                                                                            // 12168
	            0xa80: 0x10002008,                                                                                        // 12169
	            0xb80: 0x10200008,                                                                                        // 12170
	            0xc80: 0x0,                                                                                               // 12171
	            0xd80: 0x10202000,                                                                                        // 12172
	            0xe80: 0x202000,                                                                                          // 12173
	            0xf80: 0x10000000,                                                                                        // 12174
	            0x1000: 0x10002000,                                                                                       // 12175
	            0x1100: 0x10200008,                                                                                       // 12176
	            0x1200: 0x10202008,                                                                                       // 12177
	            0x1300: 0x2008,                                                                                           // 12178
	            0x1400: 0x200000,                                                                                         // 12179
	            0x1500: 0x10000000,                                                                                       // 12180
	            0x1600: 0x10000008,                                                                                       // 12181
	            0x1700: 0x202000,                                                                                         // 12182
	            0x1800: 0x202008,                                                                                         // 12183
	            0x1900: 0x0,                                                                                              // 12184
	            0x1a00: 0x8,                                                                                              // 12185
	            0x1b00: 0x10200000,                                                                                       // 12186
	            0x1c00: 0x2000,                                                                                           // 12187
	            0x1d00: 0x10002008,                                                                                       // 12188
	            0x1e00: 0x10202000,                                                                                       // 12189
	            0x1f00: 0x200008,                                                                                         // 12190
	            0x1080: 0x8,                                                                                              // 12191
	            0x1180: 0x202000,                                                                                         // 12192
	            0x1280: 0x200000,                                                                                         // 12193
	            0x1380: 0x10000008,                                                                                       // 12194
	            0x1480: 0x10002000,                                                                                       // 12195
	            0x1580: 0x2008,                                                                                           // 12196
	            0x1680: 0x10202008,                                                                                       // 12197
	            0x1780: 0x10200000,                                                                                       // 12198
	            0x1880: 0x10202000,                                                                                       // 12199
	            0x1980: 0x10200008,                                                                                       // 12200
	            0x1a80: 0x2000,                                                                                           // 12201
	            0x1b80: 0x202008,                                                                                         // 12202
	            0x1c80: 0x200008,                                                                                         // 12203
	            0x1d80: 0x0,                                                                                              // 12204
	            0x1e80: 0x10000000,                                                                                       // 12205
	            0x1f80: 0x10002008                                                                                        // 12206
	        },                                                                                                            // 12207
	        {                                                                                                             // 12208
	            0x0: 0x100000,                                                                                            // 12209
	            0x10: 0x2000401,                                                                                          // 12210
	            0x20: 0x400,                                                                                              // 12211
	            0x30: 0x100401,                                                                                           // 12212
	            0x40: 0x2100401,                                                                                          // 12213
	            0x50: 0x0,                                                                                                // 12214
	            0x60: 0x1,                                                                                                // 12215
	            0x70: 0x2100001,                                                                                          // 12216
	            0x80: 0x2000400,                                                                                          // 12217
	            0x90: 0x100001,                                                                                           // 12218
	            0xa0: 0x2000001,                                                                                          // 12219
	            0xb0: 0x2100400,                                                                                          // 12220
	            0xc0: 0x2100000,                                                                                          // 12221
	            0xd0: 0x401,                                                                                              // 12222
	            0xe0: 0x100400,                                                                                           // 12223
	            0xf0: 0x2000000,                                                                                          // 12224
	            0x8: 0x2100001,                                                                                           // 12225
	            0x18: 0x0,                                                                                                // 12226
	            0x28: 0x2000401,                                                                                          // 12227
	            0x38: 0x2100400,                                                                                          // 12228
	            0x48: 0x100000,                                                                                           // 12229
	            0x58: 0x2000001,                                                                                          // 12230
	            0x68: 0x2000000,                                                                                          // 12231
	            0x78: 0x401,                                                                                              // 12232
	            0x88: 0x100401,                                                                                           // 12233
	            0x98: 0x2000400,                                                                                          // 12234
	            0xa8: 0x2100000,                                                                                          // 12235
	            0xb8: 0x100001,                                                                                           // 12236
	            0xc8: 0x400,                                                                                              // 12237
	            0xd8: 0x2100401,                                                                                          // 12238
	            0xe8: 0x1,                                                                                                // 12239
	            0xf8: 0x100400,                                                                                           // 12240
	            0x100: 0x2000000,                                                                                         // 12241
	            0x110: 0x100000,                                                                                          // 12242
	            0x120: 0x2000401,                                                                                         // 12243
	            0x130: 0x2100001,                                                                                         // 12244
	            0x140: 0x100001,                                                                                          // 12245
	            0x150: 0x2000400,                                                                                         // 12246
	            0x160: 0x2100400,                                                                                         // 12247
	            0x170: 0x100401,                                                                                          // 12248
	            0x180: 0x401,                                                                                             // 12249
	            0x190: 0x2100401,                                                                                         // 12250
	            0x1a0: 0x100400,                                                                                          // 12251
	            0x1b0: 0x1,                                                                                               // 12252
	            0x1c0: 0x0,                                                                                               // 12253
	            0x1d0: 0x2100000,                                                                                         // 12254
	            0x1e0: 0x2000001,                                                                                         // 12255
	            0x1f0: 0x400,                                                                                             // 12256
	            0x108: 0x100400,                                                                                          // 12257
	            0x118: 0x2000401,                                                                                         // 12258
	            0x128: 0x2100001,                                                                                         // 12259
	            0x138: 0x1,                                                                                               // 12260
	            0x148: 0x2000000,                                                                                         // 12261
	            0x158: 0x100000,                                                                                          // 12262
	            0x168: 0x401,                                                                                             // 12263
	            0x178: 0x2100400,                                                                                         // 12264
	            0x188: 0x2000001,                                                                                         // 12265
	            0x198: 0x2100000,                                                                                         // 12266
	            0x1a8: 0x0,                                                                                               // 12267
	            0x1b8: 0x2100401,                                                                                         // 12268
	            0x1c8: 0x100401,                                                                                          // 12269
	            0x1d8: 0x400,                                                                                             // 12270
	            0x1e8: 0x2000400,                                                                                         // 12271
	            0x1f8: 0x100001                                                                                           // 12272
	        },                                                                                                            // 12273
	        {                                                                                                             // 12274
	            0x0: 0x8000820,                                                                                           // 12275
	            0x1: 0x20000,                                                                                             // 12276
	            0x2: 0x8000000,                                                                                           // 12277
	            0x3: 0x20,                                                                                                // 12278
	            0x4: 0x20020,                                                                                             // 12279
	            0x5: 0x8020820,                                                                                           // 12280
	            0x6: 0x8020800,                                                                                           // 12281
	            0x7: 0x800,                                                                                               // 12282
	            0x8: 0x8020000,                                                                                           // 12283
	            0x9: 0x8000800,                                                                                           // 12284
	            0xa: 0x20800,                                                                                             // 12285
	            0xb: 0x8020020,                                                                                           // 12286
	            0xc: 0x820,                                                                                               // 12287
	            0xd: 0x0,                                                                                                 // 12288
	            0xe: 0x8000020,                                                                                           // 12289
	            0xf: 0x20820,                                                                                             // 12290
	            0x80000000: 0x800,                                                                                        // 12291
	            0x80000001: 0x8020820,                                                                                    // 12292
	            0x80000002: 0x8000820,                                                                                    // 12293
	            0x80000003: 0x8000000,                                                                                    // 12294
	            0x80000004: 0x8020000,                                                                                    // 12295
	            0x80000005: 0x20800,                                                                                      // 12296
	            0x80000006: 0x20820,                                                                                      // 12297
	            0x80000007: 0x20,                                                                                         // 12298
	            0x80000008: 0x8000020,                                                                                    // 12299
	            0x80000009: 0x820,                                                                                        // 12300
	            0x8000000a: 0x20020,                                                                                      // 12301
	            0x8000000b: 0x8020800,                                                                                    // 12302
	            0x8000000c: 0x0,                                                                                          // 12303
	            0x8000000d: 0x8020020,                                                                                    // 12304
	            0x8000000e: 0x8000800,                                                                                    // 12305
	            0x8000000f: 0x20000,                                                                                      // 12306
	            0x10: 0x20820,                                                                                            // 12307
	            0x11: 0x8020800,                                                                                          // 12308
	            0x12: 0x20,                                                                                               // 12309
	            0x13: 0x800,                                                                                              // 12310
	            0x14: 0x8000800,                                                                                          // 12311
	            0x15: 0x8000020,                                                                                          // 12312
	            0x16: 0x8020020,                                                                                          // 12313
	            0x17: 0x20000,                                                                                            // 12314
	            0x18: 0x0,                                                                                                // 12315
	            0x19: 0x20020,                                                                                            // 12316
	            0x1a: 0x8020000,                                                                                          // 12317
	            0x1b: 0x8000820,                                                                                          // 12318
	            0x1c: 0x8020820,                                                                                          // 12319
	            0x1d: 0x20800,                                                                                            // 12320
	            0x1e: 0x820,                                                                                              // 12321
	            0x1f: 0x8000000,                                                                                          // 12322
	            0x80000010: 0x20000,                                                                                      // 12323
	            0x80000011: 0x800,                                                                                        // 12324
	            0x80000012: 0x8020020,                                                                                    // 12325
	            0x80000013: 0x20820,                                                                                      // 12326
	            0x80000014: 0x20,                                                                                         // 12327
	            0x80000015: 0x8020000,                                                                                    // 12328
	            0x80000016: 0x8000000,                                                                                    // 12329
	            0x80000017: 0x8000820,                                                                                    // 12330
	            0x80000018: 0x8020820,                                                                                    // 12331
	            0x80000019: 0x8000020,                                                                                    // 12332
	            0x8000001a: 0x8000800,                                                                                    // 12333
	            0x8000001b: 0x0,                                                                                          // 12334
	            0x8000001c: 0x20800,                                                                                      // 12335
	            0x8000001d: 0x820,                                                                                        // 12336
	            0x8000001e: 0x20020,                                                                                      // 12337
	            0x8000001f: 0x8020800                                                                                     // 12338
	        }                                                                                                             // 12339
	    ];                                                                                                                // 12340
                                                                                                                       // 12341
	    // Masks that select the SBOX input                                                                               // 12342
	    var SBOX_MASK = [                                                                                                 // 12343
	        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,                                                               // 12344
	        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f                                                                // 12345
	    ];                                                                                                                // 12346
                                                                                                                       // 12347
	    /**                                                                                                               // 12348
	     * DES block cipher algorithm.                                                                                    // 12349
	     */                                                                                                               // 12350
	    var DES = C_algo.DES = BlockCipher.extend({                                                                       // 12351
	        _doReset: function () {                                                                                       // 12352
	            // Shortcuts                                                                                              // 12353
	            var key = this._key;                                                                                      // 12354
	            var keyWords = key.words;                                                                                 // 12355
                                                                                                                       // 12356
	            // Select 56 bits according to PC1                                                                        // 12357
	            var keyBits = [];                                                                                         // 12358
	            for (var i = 0; i < 56; i++) {                                                                            // 12359
	                var keyBitPos = PC1[i] - 1;                                                                           // 12360
	                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;                               // 12361
	            }                                                                                                         // 12362
                                                                                                                       // 12363
	            // Assemble 16 subkeys                                                                                    // 12364
	            var subKeys = this._subKeys = [];                                                                         // 12365
	            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {                                                          // 12366
	                // Create subkey                                                                                      // 12367
	                var subKey = subKeys[nSubKey] = [];                                                                   // 12368
                                                                                                                       // 12369
	                // Shortcut                                                                                           // 12370
	                var bitShift = BIT_SHIFTS[nSubKey];                                                                   // 12371
                                                                                                                       // 12372
	                // Select 48 bits according to PC2                                                                    // 12373
	                for (var i = 0; i < 24; i++) {                                                                        // 12374
	                    // Select from the left 28 key bits                                                               // 12375
	                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);                   // 12376
                                                                                                                       // 12377
	                    // Select from the right 28 key bits                                                              // 12378
	                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
	                }                                                                                                     // 12380
                                                                                                                       // 12381
	                // Since each subkey is applied to an expanded 32-bit input,                                          // 12382
	                // the subkey can be broken into 8 values scaled to 32-bits,                                          // 12383
	                // which allows the key to be used without expansion                                                  // 12384
	                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);                                                    // 12385
	                for (var i = 1; i < 7; i++) {                                                                         // 12386
	                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);                                                      // 12387
	                }                                                                                                     // 12388
	                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);                                                    // 12389
	            }                                                                                                         // 12390
                                                                                                                       // 12391
	            // Compute inverse subkeys                                                                                // 12392
	            var invSubKeys = this._invSubKeys = [];                                                                   // 12393
	            for (var i = 0; i < 16; i++) {                                                                            // 12394
	                invSubKeys[i] = subKeys[15 - i];                                                                      // 12395
	            }                                                                                                         // 12396
	        },                                                                                                            // 12397
                                                                                                                       // 12398
	        encryptBlock: function (M, offset) {                                                                          // 12399
	            this._doCryptBlock(M, offset, this._subKeys);                                                             // 12400
	        },                                                                                                            // 12401
                                                                                                                       // 12402
	        decryptBlock: function (M, offset) {                                                                          // 12403
	            this._doCryptBlock(M, offset, this._invSubKeys);                                                          // 12404
	        },                                                                                                            // 12405
                                                                                                                       // 12406
	        _doCryptBlock: function (M, offset, subKeys) {                                                                // 12407
	            // Get input                                                                                              // 12408
	            this._lBlock = M[offset];                                                                                 // 12409
	            this._rBlock = M[offset + 1];                                                                             // 12410
                                                                                                                       // 12411
	            // Initial permutation                                                                                    // 12412
	            exchangeLR.call(this, 4,  0x0f0f0f0f);                                                                    // 12413
	            exchangeLR.call(this, 16, 0x0000ffff);                                                                    // 12414
	            exchangeRL.call(this, 2,  0x33333333);                                                                    // 12415
	            exchangeRL.call(this, 8,  0x00ff00ff);                                                                    // 12416
	            exchangeLR.call(this, 1,  0x55555555);                                                                    // 12417
                                                                                                                       // 12418
	            // Rounds                                                                                                 // 12419
	            for (var round = 0; round < 16; round++) {                                                                // 12420
	                // Shortcuts                                                                                          // 12421
	                var subKey = subKeys[round];                                                                          // 12422
	                var lBlock = this._lBlock;                                                                            // 12423
	                var rBlock = this._rBlock;                                                                            // 12424
                                                                                                                       // 12425
	                // Feistel function                                                                                   // 12426
	                var f = 0;                                                                                            // 12427
	                for (var i = 0; i < 8; i++) {                                                                         // 12428
	                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];                                      // 12429
	                }                                                                                                     // 12430
	                this._lBlock = rBlock;                                                                                // 12431
	                this._rBlock = lBlock ^ f;                                                                            // 12432
	            }                                                                                                         // 12433
                                                                                                                       // 12434
	            // Undo swap from last round                                                                              // 12435
	            var t = this._lBlock;                                                                                     // 12436
	            this._lBlock = this._rBlock;                                                                              // 12437
	            this._rBlock = t;                                                                                         // 12438
                                                                                                                       // 12439
	            // Final permutation                                                                                      // 12440
	            exchangeLR.call(this, 1,  0x55555555);                                                                    // 12441
	            exchangeRL.call(this, 8,  0x00ff00ff);                                                                    // 12442
	            exchangeRL.call(this, 2,  0x33333333);                                                                    // 12443
	            exchangeLR.call(this, 16, 0x0000ffff);                                                                    // 12444
	            exchangeLR.call(this, 4,  0x0f0f0f0f);                                                                    // 12445
                                                                                                                       // 12446
	            // Set output                                                                                             // 12447
	            M[offset] = this._lBlock;                                                                                 // 12448
	            M[offset + 1] = this._rBlock;                                                                             // 12449
	        },                                                                                                            // 12450
                                                                                                                       // 12451
	        keySize: 64/32,                                                                                               // 12452
                                                                                                                       // 12453
	        ivSize: 64/32,                                                                                                // 12454
                                                                                                                       // 12455
	        blockSize: 64/32                                                                                              // 12456
	    });                                                                                                               // 12457
                                                                                                                       // 12458
	    // Swap bits across the left and right words                                                                      // 12459
	    function exchangeLR(offset, mask) {                                                                               // 12460
	        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;                                                    // 12461
	        this._rBlock ^= t;                                                                                            // 12462
	        this._lBlock ^= t << offset;                                                                                  // 12463
	    }                                                                                                                 // 12464
                                                                                                                       // 12465
	    function exchangeRL(offset, mask) {                                                                               // 12466
	        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;                                                    // 12467
	        this._lBlock ^= t;                                                                                            // 12468
	        this._rBlock ^= t << offset;                                                                                  // 12469
	    }                                                                                                                 // 12470
                                                                                                                       // 12471
	    /**                                                                                                               // 12472
	     * Shortcut functions to the cipher's object interface.                                                           // 12473
	     *                                                                                                                // 12474
	     * @example                                                                                                       // 12475
	     *                                                                                                                // 12476
	     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);                                                  // 12477
	     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);                                               // 12478
	     */                                                                                                               // 12479
	    C.DES = BlockCipher._createHelper(DES);                                                                           // 12480
                                                                                                                       // 12481
	    /**                                                                                                               // 12482
	     * Triple-DES block cipher algorithm.                                                                             // 12483
	     */                                                                                                               // 12484
	    var TripleDES = C_algo.TripleDES = BlockCipher.extend({                                                           // 12485
	        _doReset: function () {                                                                                       // 12486
	            // Shortcuts                                                                                              // 12487
	            var key = this._key;                                                                                      // 12488
	            var keyWords = key.words;                                                                                 // 12489
                                                                                                                       // 12490
	            // Create DES instances                                                                                   // 12491
	            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));                                 // 12492
	            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));                                 // 12493
	            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));                                 // 12494
	        },                                                                                                            // 12495
                                                                                                                       // 12496
	        encryptBlock: function (M, offset) {                                                                          // 12497
	            this._des1.encryptBlock(M, offset);                                                                       // 12498
	            this._des2.decryptBlock(M, offset);                                                                       // 12499
	            this._des3.encryptBlock(M, offset);                                                                       // 12500
	        },                                                                                                            // 12501
                                                                                                                       // 12502
	        decryptBlock: function (M, offset) {                                                                          // 12503
	            this._des3.decryptBlock(M, offset);                                                                       // 12504
	            this._des2.encryptBlock(M, offset);                                                                       // 12505
	            this._des1.decryptBlock(M, offset);                                                                       // 12506
	        },                                                                                                            // 12507
                                                                                                                       // 12508
	        keySize: 192/32,                                                                                              // 12509
                                                                                                                       // 12510
	        ivSize: 64/32,                                                                                                // 12511
                                                                                                                       // 12512
	        blockSize: 64/32                                                                                              // 12513
	    });                                                                                                               // 12514
                                                                                                                       // 12515
	    /**                                                                                                               // 12516
	     * Shortcut functions to the cipher's object interface.                                                           // 12517
	     *                                                                                                                // 12518
	     * @example                                                                                                       // 12519
	     *                                                                                                                // 12520
	     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);                                            // 12521
	     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);                                         // 12522
	     */                                                                                                               // 12523
	    C.TripleDES = BlockCipher._createHelper(TripleDES);                                                               // 12524
	}());                                                                                                                 // 12525
                                                                                                                       // 12526
                                                                                                                       // 12527
	return CryptoJS.TripleDES;                                                                                            // 12528
                                                                                                                       // 12529
}));                                                                                                                   // 12530
},{"./cipher-core":50,"./core":51,"./enc-base64":52,"./evpkdf":54,"./md5":59}],82:[function(require,module,exports){   // 12531
;(function (root, factory) {                                                                                           // 12532
	if (typeof exports === "object") {                                                                                    // 12533
		// CommonJS                                                                                                          // 12534
		module.exports = exports = factory(require("./core"));                                                               // 12535
	}                                                                                                                     // 12536
	else if (typeof define === "function" && define.amd) {                                                                // 12537
		// AMD                                                                                                               // 12538
		define(["./core"], factory);                                                                                         // 12539
	}                                                                                                                     // 12540
	else {                                                                                                                // 12541
		// Global (browser)                                                                                                  // 12542
		factory(root.CryptoJS);                                                                                              // 12543
	}                                                                                                                     // 12544
}(this, function (CryptoJS) {                                                                                          // 12545
                                                                                                                       // 12546
	(function (undefined) {                                                                                               // 12547
	    // Shortcuts                                                                                                      // 12548
	    var C = CryptoJS;                                                                                                 // 12549
	    var C_lib = C.lib;                                                                                                // 12550
	    var Base = C_lib.Base;                                                                                            // 12551
	    var X32WordArray = C_lib.WordArray;                                                                               // 12552
                                                                                                                       // 12553
	    /**                                                                                                               // 12554
	     * x64 namespace.                                                                                                 // 12555
	     */                                                                                                               // 12556
	    var C_x64 = C.x64 = {};                                                                                           // 12557
                                                                                                                       // 12558
	    /**                                                                                                               // 12559
	     * A 64-bit word.                                                                                                 // 12560
	     */                                                                                                               // 12561
	    var X64Word = C_x64.Word = Base.extend({                                                                          // 12562
	        /**                                                                                                           // 12563
	         * Initializes a newly created 64-bit word.                                                                   // 12564
	         *                                                                                                            // 12565
	         * @param {number} high The high 32 bits.                                                                     // 12566
	         * @param {number} low The low 32 bits.                                                                       // 12567
	         *                                                                                                            // 12568
	         * @example                                                                                                   // 12569
	         *                                                                                                            // 12570
	         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);                                        // 12571
	         */                                                                                                           // 12572
	        init: function (high, low) {                                                                                  // 12573
	            this.high = high;                                                                                         // 12574
	            this.low = low;                                                                                           // 12575
	        }                                                                                                             // 12576
                                                                                                                       // 12577
	        /**                                                                                                           // 12578
	         * Bitwise NOTs this word.                                                                                    // 12579
	         *                                                                                                            // 12580
	         * @return {X64Word} A new x64-Word object after negating.                                                    // 12581
	         *                                                                                                            // 12582
	         * @example                                                                                                   // 12583
	         *                                                                                                            // 12584
	         *     var negated = x64Word.not();                                                                           // 12585
	         */                                                                                                           // 12586
	        // not: function () {                                                                                         // 12587
	            // var high = ~this.high;                                                                                 // 12588
	            // var low = ~this.low;                                                                                   // 12589
                                                                                                                       // 12590
	            // return X64Word.create(high, low);                                                                      // 12591
	        // },                                                                                                         // 12592
                                                                                                                       // 12593
	        /**                                                                                                           // 12594
	         * Bitwise ANDs this word with the passed word.                                                               // 12595
	         *                                                                                                            // 12596
	         * @param {X64Word} word The x64-Word to AND with this word.                                                  // 12597
	         *                                                                                                            // 12598
	         * @return {X64Word} A new x64-Word object after ANDing.                                                      // 12599
	         *                                                                                                            // 12600
	         * @example                                                                                                   // 12601
	         *                                                                                                            // 12602
	         *     var anded = x64Word.and(anotherX64Word);                                                               // 12603
	         */                                                                                                           // 12604
	        // and: function (word) {                                                                                     // 12605
	            // var high = this.high & word.high;                                                                      // 12606
	            // var low = this.low & word.low;                                                                         // 12607
                                                                                                                       // 12608
	            // return X64Word.create(high, low);                                                                      // 12609
	        // },                                                                                                         // 12610
                                                                                                                       // 12611
	        /**                                                                                                           // 12612
	         * Bitwise ORs this word with the passed word.                                                                // 12613
	         *                                                                                                            // 12614
	         * @param {X64Word} word The x64-Word to OR with this word.                                                   // 12615
	         *                                                                                                            // 12616
	         * @return {X64Word} A new x64-Word object after ORing.                                                       // 12617
	         *                                                                                                            // 12618
	         * @example                                                                                                   // 12619
	         *                                                                                                            // 12620
	         *     var ored = x64Word.or(anotherX64Word);                                                                 // 12621
	         */                                                                                                           // 12622
	        // or: function (word) {                                                                                      // 12623
	            // var high = this.high | word.high;                                                                      // 12624
	            // var low = this.low | word.low;                                                                         // 12625
                                                                                                                       // 12626
	            // return X64Word.create(high, low);                                                                      // 12627
	        // },                                                                                                         // 12628
                                                                                                                       // 12629
	        /**                                                                                                           // 12630
	         * Bitwise XORs this word with the passed word.                                                               // 12631
	         *                                                                                                            // 12632
	         * @param {X64Word} word The x64-Word to XOR with this word.                                                  // 12633
	         *                                                                                                            // 12634
	         * @return {X64Word} A new x64-Word object after XORing.                                                      // 12635
	         *                                                                                                            // 12636
	         * @example                                                                                                   // 12637
	         *                                                                                                            // 12638
	         *     var xored = x64Word.xor(anotherX64Word);                                                               // 12639
	         */                                                                                                           // 12640
	        // xor: function (word) {                                                                                     // 12641
	            // var high = this.high ^ word.high;                                                                      // 12642
	            // var low = this.low ^ word.low;                                                                         // 12643
                                                                                                                       // 12644
	            // return X64Word.create(high, low);                                                                      // 12645
	        // },                                                                                                         // 12646
                                                                                                                       // 12647
	        /**                                                                                                           // 12648
	         * Shifts this word n bits to the left.                                                                       // 12649
	         *                                                                                                            // 12650
	         * @param {number} n The number of bits to shift.                                                             // 12651
	         *                                                                                                            // 12652
	         * @return {X64Word} A new x64-Word object after shifting.                                                    // 12653
	         *                                                                                                            // 12654
	         * @example                                                                                                   // 12655
	         *                                                                                                            // 12656
	         *     var shifted = x64Word.shiftL(25);                                                                      // 12657
	         */                                                                                                           // 12658
	        // shiftL: function (n) {                                                                                     // 12659
	            // if (n < 32) {                                                                                          // 12660
	                // var high = (this.high << n) | (this.low >>> (32 - n));                                             // 12661
	                // var low = this.low << n;                                                                           // 12662
	            // } else {                                                                                               // 12663
	                // var high = this.low << (n - 32);                                                                   // 12664
	                // var low = 0;                                                                                       // 12665
	            // }                                                                                                      // 12666
                                                                                                                       // 12667
	            // return X64Word.create(high, low);                                                                      // 12668
	        // },                                                                                                         // 12669
                                                                                                                       // 12670
	        /**                                                                                                           // 12671
	         * Shifts this word n bits to the right.                                                                      // 12672
	         *                                                                                                            // 12673
	         * @param {number} n The number of bits to shift.                                                             // 12674
	         *                                                                                                            // 12675
	         * @return {X64Word} A new x64-Word object after shifting.                                                    // 12676
	         *                                                                                                            // 12677
	         * @example                                                                                                   // 12678
	         *                                                                                                            // 12679
	         *     var shifted = x64Word.shiftR(7);                                                                       // 12680
	         */                                                                                                           // 12681
	        // shiftR: function (n) {                                                                                     // 12682
	            // if (n < 32) {                                                                                          // 12683
	                // var low = (this.low >>> n) | (this.high << (32 - n));                                              // 12684
	                // var high = this.high >>> n;                                                                        // 12685
	            // } else {                                                                                               // 12686
	                // var low = this.high >>> (n - 32);                                                                  // 12687
	                // var high = 0;                                                                                      // 12688
	            // }                                                                                                      // 12689
                                                                                                                       // 12690
	            // return X64Word.create(high, low);                                                                      // 12691
	        // },                                                                                                         // 12692
                                                                                                                       // 12693
	        /**                                                                                                           // 12694
	         * Rotates this word n bits to the left.                                                                      // 12695
	         *                                                                                                            // 12696
	         * @param {number} n The number of bits to rotate.                                                            // 12697
	         *                                                                                                            // 12698
	         * @return {X64Word} A new x64-Word object after rotating.                                                    // 12699
	         *                                                                                                            // 12700
	         * @example                                                                                                   // 12701
	         *                                                                                                            // 12702
	         *     var rotated = x64Word.rotL(25);                                                                        // 12703
	         */                                                                                                           // 12704
	        // rotL: function (n) {                                                                                       // 12705
	            // return this.shiftL(n).or(this.shiftR(64 - n));                                                         // 12706
	        // },                                                                                                         // 12707
                                                                                                                       // 12708
	        /**                                                                                                           // 12709
	         * Rotates this word n bits to the right.                                                                     // 12710
	         *                                                                                                            // 12711
	         * @param {number} n The number of bits to rotate.                                                            // 12712
	         *                                                                                                            // 12713
	         * @return {X64Word} A new x64-Word object after rotating.                                                    // 12714
	         *                                                                                                            // 12715
	         * @example                                                                                                   // 12716
	         *                                                                                                            // 12717
	         *     var rotated = x64Word.rotR(7);                                                                         // 12718
	         */                                                                                                           // 12719
	        // rotR: function (n) {                                                                                       // 12720
	            // return this.shiftR(n).or(this.shiftL(64 - n));                                                         // 12721
	        // },                                                                                                         // 12722
                                                                                                                       // 12723
	        /**                                                                                                           // 12724
	         * Adds this word with the passed word.                                                                       // 12725
	         *                                                                                                            // 12726
	         * @param {X64Word} word The x64-Word to add with this word.                                                  // 12727
	         *                                                                                                            // 12728
	         * @return {X64Word} A new x64-Word object after adding.                                                      // 12729
	         *                                                                                                            // 12730
	         * @example                                                                                                   // 12731
	         *                                                                                                            // 12732
	         *     var added = x64Word.add(anotherX64Word);                                                               // 12733
	         */                                                                                                           // 12734
	        // add: function (word) {                                                                                     // 12735
	            // var low = (this.low + word.low) | 0;                                                                   // 12736
	            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;                                                    // 12737
	            // var high = (this.high + word.high + carry) | 0;                                                        // 12738
                                                                                                                       // 12739
	            // return X64Word.create(high, low);                                                                      // 12740
	        // }                                                                                                          // 12741
	    });                                                                                                               // 12742
                                                                                                                       // 12743
	    /**                                                                                                               // 12744
	     * An array of 64-bit words.                                                                                      // 12745
	     *                                                                                                                // 12746
	     * @property {Array} words The array of CryptoJS.x64.Word objects.                                                // 12747
	     * @property {number} sigBytes The number of significant bytes in this word array.                                // 12748
	     */                                                                                                               // 12749
	    var X64WordArray = C_x64.WordArray = Base.extend({                                                                // 12750
	        /**                                                                                                           // 12751
	         * Initializes a newly created word array.                                                                    // 12752
	         *                                                                                                            // 12753
	         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.                                     // 12754
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.                          // 12755
	         *                                                                                                            // 12756
	         * @example                                                                                                   // 12757
	         *                                                                                                            // 12758
	         *     var wordArray = CryptoJS.x64.WordArray.create();                                                       // 12759
	         *                                                                                                            // 12760
	         *     var wordArray = CryptoJS.x64.WordArray.create([                                                        // 12761
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),                                                  // 12762
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)                                                   // 12763
	         *     ]);                                                                                                    // 12764
	         *                                                                                                            // 12765
	         *     var wordArray = CryptoJS.x64.WordArray.create([                                                        // 12766
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),                                                  // 12767
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)                                                   // 12768
	         *     ], 10);                                                                                                // 12769
	         */                                                                                                           // 12770
	        init: function (words, sigBytes) {                                                                            // 12771
	            words = this.words = words || [];                                                                         // 12772
                                                                                                                       // 12773
	            if (sigBytes != undefined) {                                                                              // 12774
	                this.sigBytes = sigBytes;                                                                             // 12775
	            } else {                                                                                                  // 12776
	                this.sigBytes = words.length * 8;                                                                     // 12777
	            }                                                                                                         // 12778
	        },                                                                                                            // 12779
                                                                                                                       // 12780
	        /**                                                                                                           // 12781
	         * Converts this 64-bit word array to a 32-bit word array.                                                    // 12782
	         *                                                                                                            // 12783
	         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.                            // 12784
	         *                                                                                                            // 12785
	         * @example                                                                                                   // 12786
	         *                                                                                                            // 12787
	         *     var x32WordArray = x64WordArray.toX32();                                                               // 12788
	         */                                                                                                           // 12789
	        toX32: function () {                                                                                          // 12790
	            // Shortcuts                                                                                              // 12791
	            var x64Words = this.words;                                                                                // 12792
	            var x64WordsLength = x64Words.length;                                                                     // 12793
                                                                                                                       // 12794
	            // Convert                                                                                                // 12795
	            var x32Words = [];                                                                                        // 12796
	            for (var i = 0; i < x64WordsLength; i++) {                                                                // 12797
	                var x64Word = x64Words[i];                                                                            // 12798
	                x32Words.push(x64Word.high);                                                                          // 12799
	                x32Words.push(x64Word.low);                                                                           // 12800
	            }                                                                                                         // 12801
                                                                                                                       // 12802
	            return X32WordArray.create(x32Words, this.sigBytes);                                                      // 12803
	        },                                                                                                            // 12804
                                                                                                                       // 12805
	        /**                                                                                                           // 12806
	         * Creates a copy of this word array.                                                                         // 12807
	         *                                                                                                            // 12808
	         * @return {X64WordArray} The clone.                                                                          // 12809
	         *                                                                                                            // 12810
	         * @example                                                                                                   // 12811
	         *                                                                                                            // 12812
	         *     var clone = x64WordArray.clone();                                                                      // 12813
	         */                                                                                                           // 12814
	        clone: function () {                                                                                          // 12815
	            var clone = Base.clone.call(this);                                                                        // 12816
                                                                                                                       // 12817
	            // Clone "words" array                                                                                    // 12818
	            var words = clone.words = this.words.slice(0);                                                            // 12819
                                                                                                                       // 12820
	            // Clone each X64Word object                                                                              // 12821
	            var wordsLength = words.length;                                                                           // 12822
	            for (var i = 0; i < wordsLength; i++) {                                                                   // 12823
	                words[i] = words[i].clone();                                                                          // 12824
	            }                                                                                                         // 12825
                                                                                                                       // 12826
	            return clone;                                                                                             // 12827
	        }                                                                                                             // 12828
	    });                                                                                                               // 12829
	}());                                                                                                                 // 12830
                                                                                                                       // 12831
                                                                                                                       // 12832
	return CryptoJS;                                                                                                      // 12833
                                                                                                                       // 12834
}));                                                                                                                   // 12835
},{"./core":51}],83:[function(require,module,exports){                                                                 // 12836
/*! https://mths.be/utf8js v2.0.0 by @mathias */                                                                       // 12837
;(function(root) {                                                                                                     // 12838
                                                                                                                       // 12839
	// Detect free variables `exports`                                                                                    // 12840
	var freeExports = typeof exports == 'object' && exports;                                                              // 12841
                                                                                                                       // 12842
	// Detect free variable `module`                                                                                      // 12843
	var freeModule = typeof module == 'object' && module &&                                                               // 12844
		module.exports == freeExports && module;                                                                             // 12845
                                                                                                                       // 12846
	// Detect free variable `global`, from Node.js or Browserified code,                                                  // 12847
	// and use it as `root`                                                                                               // 12848
	var freeGlobal = typeof global == 'object' && global;                                                                 // 12849
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {                                           // 12850
		root = freeGlobal;                                                                                                   // 12851
	}                                                                                                                     // 12852
                                                                                                                       // 12853
	/*--------------------------------------------------------------------------*/                                        // 12854
                                                                                                                       // 12855
	var stringFromCharCode = String.fromCharCode;                                                                         // 12856
                                                                                                                       // 12857
	// Taken from https://mths.be/punycode                                                                                // 12858
	function ucs2decode(string) {                                                                                         // 12859
		var output = [];                                                                                                     // 12860
		var counter = 0;                                                                                                     // 12861
		var length = string.length;                                                                                          // 12862
		var value;                                                                                                           // 12863
		var extra;                                                                                                           // 12864
		while (counter < length) {                                                                                           // 12865
			value = string.charCodeAt(counter++);                                                                               // 12866
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {                                                       // 12867
				// high surrogate, and there is a next character                                                                   // 12868
				extra = string.charCodeAt(counter++);                                                                              // 12869
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate                                                                 // 12870
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);                                                 // 12871
				} else {                                                                                                           // 12872
					// unmatched surrogate; only append this code unit, in case the next                                              // 12873
					// code unit is the high surrogate of a surrogate pair                                                            // 12874
					output.push(value);                                                                                               // 12875
					counter--;                                                                                                        // 12876
				}                                                                                                                  // 12877
			} else {                                                                                                            // 12878
				output.push(value);                                                                                                // 12879
			}                                                                                                                   // 12880
		}                                                                                                                    // 12881
		return output;                                                                                                       // 12882
	}                                                                                                                     // 12883
                                                                                                                       // 12884
	// Taken from https://mths.be/punycode                                                                                // 12885
	function ucs2encode(array) {                                                                                          // 12886
		var length = array.length;                                                                                           // 12887
		var index = -1;                                                                                                      // 12888
		var value;                                                                                                           // 12889
		var output = '';                                                                                                     // 12890
		while (++index < length) {                                                                                           // 12891
			value = array[index];                                                                                               // 12892
			if (value > 0xFFFF) {                                                                                               // 12893
				value -= 0x10000;                                                                                                  // 12894
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);                                                       // 12895
				value = 0xDC00 | value & 0x3FF;                                                                                    // 12896
			}                                                                                                                   // 12897
			output += stringFromCharCode(value);                                                                                // 12898
		}                                                                                                                    // 12899
		return output;                                                                                                       // 12900
	}                                                                                                                     // 12901
                                                                                                                       // 12902
	function checkScalarValue(codePoint) {                                                                                // 12903
		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {                                                                    // 12904
			throw Error(                                                                                                        // 12905
				'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +                                                       // 12906
				' is not a scalar value'                                                                                           // 12907
			);                                                                                                                  // 12908
		}                                                                                                                    // 12909
	}                                                                                                                     // 12910
	/*--------------------------------------------------------------------------*/                                        // 12911
                                                                                                                       // 12912
	function createByte(codePoint, shift) {                                                                               // 12913
		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);                                                     // 12914
	}                                                                                                                     // 12915
                                                                                                                       // 12916
	function encodeCodePoint(codePoint) {                                                                                 // 12917
		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence                                                              // 12918
			return stringFromCharCode(codePoint);                                                                               // 12919
		}                                                                                                                    // 12920
		var symbol = '';                                                                                                     // 12921
		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence                                                              // 12922
			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);                                                      // 12923
		}                                                                                                                    // 12924
		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence                                                         // 12925
			checkScalarValue(codePoint);                                                                                        // 12926
			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);                                                     // 12927
			symbol += createByte(codePoint, 6);                                                                                 // 12928
		}                                                                                                                    // 12929
		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence                                                         // 12930
			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);                                                     // 12931
			symbol += createByte(codePoint, 12);                                                                                // 12932
			symbol += createByte(codePoint, 6);                                                                                 // 12933
		}                                                                                                                    // 12934
		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);                                                             // 12935
		return symbol;                                                                                                       // 12936
	}                                                                                                                     // 12937
                                                                                                                       // 12938
	function utf8encode(string) {                                                                                         // 12939
		var codePoints = ucs2decode(string);                                                                                 // 12940
		var length = codePoints.length;                                                                                      // 12941
		var index = -1;                                                                                                      // 12942
		var codePoint;                                                                                                       // 12943
		var byteString = '';                                                                                                 // 12944
		while (++index < length) {                                                                                           // 12945
			codePoint = codePoints[index];                                                                                      // 12946
			byteString += encodeCodePoint(codePoint);                                                                           // 12947
		}                                                                                                                    // 12948
		return byteString;                                                                                                   // 12949
	}                                                                                                                     // 12950
                                                                                                                       // 12951
	/*--------------------------------------------------------------------------*/                                        // 12952
                                                                                                                       // 12953
	function readContinuationByte() {                                                                                     // 12954
		if (byteIndex >= byteCount) {                                                                                        // 12955
			throw Error('Invalid byte index');                                                                                  // 12956
		}                                                                                                                    // 12957
                                                                                                                       // 12958
		var continuationByte = byteArray[byteIndex] & 0xFF;                                                                  // 12959
		byteIndex++;                                                                                                         // 12960
                                                                                                                       // 12961
		if ((continuationByte & 0xC0) == 0x80) {                                                                             // 12962
			return continuationByte & 0x3F;                                                                                     // 12963
		}                                                                                                                    // 12964
                                                                                                                       // 12965
		// If we end up here, it’s not a continuation byte                                                                   // 12966
		throw Error('Invalid continuation byte');                                                                            // 12967
	}                                                                                                                     // 12968
                                                                                                                       // 12969
	function decodeSymbol() {                                                                                             // 12970
		var byte1;                                                                                                           // 12971
		var byte2;                                                                                                           // 12972
		var byte3;                                                                                                           // 12973
		var byte4;                                                                                                           // 12974
		var codePoint;                                                                                                       // 12975
                                                                                                                       // 12976
		if (byteIndex > byteCount) {                                                                                         // 12977
			throw Error('Invalid byte index');                                                                                  // 12978
		}                                                                                                                    // 12979
                                                                                                                       // 12980
		if (byteIndex == byteCount) {                                                                                        // 12981
			return false;                                                                                                       // 12982
		}                                                                                                                    // 12983
                                                                                                                       // 12984
		// Read first byte                                                                                                   // 12985
		byte1 = byteArray[byteIndex] & 0xFF;                                                                                 // 12986
		byteIndex++;                                                                                                         // 12987
                                                                                                                       // 12988
		// 1-byte sequence (no continuation bytes)                                                                           // 12989
		if ((byte1 & 0x80) == 0) {                                                                                           // 12990
			return byte1;                                                                                                       // 12991
		}                                                                                                                    // 12992
                                                                                                                       // 12993
		// 2-byte sequence                                                                                                   // 12994
		if ((byte1 & 0xE0) == 0xC0) {                                                                                        // 12995
			var byte2 = readContinuationByte();                                                                                 // 12996
			codePoint = ((byte1 & 0x1F) << 6) | byte2;                                                                          // 12997
			if (codePoint >= 0x80) {                                                                                            // 12998
				return codePoint;                                                                                                  // 12999
			} else {                                                                                                            // 13000
				throw Error('Invalid continuation byte');                                                                          // 13001
			}                                                                                                                   // 13002
		}                                                                                                                    // 13003
                                                                                                                       // 13004
		// 3-byte sequence (may include unpaired surrogates)                                                                 // 13005
		if ((byte1 & 0xF0) == 0xE0) {                                                                                        // 13006
			byte2 = readContinuationByte();                                                                                     // 13007
			byte3 = readContinuationByte();                                                                                     // 13008
			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;                                                          // 13009
			if (codePoint >= 0x0800) {                                                                                          // 13010
				checkScalarValue(codePoint);                                                                                       // 13011
				return codePoint;                                                                                                  // 13012
			} else {                                                                                                            // 13013
				throw Error('Invalid continuation byte');                                                                          // 13014
			}                                                                                                                   // 13015
		}                                                                                                                    // 13016
                                                                                                                       // 13017
		// 4-byte sequence                                                                                                   // 13018
		if ((byte1 & 0xF8) == 0xF0) {                                                                                        // 13019
			byte2 = readContinuationByte();                                                                                     // 13020
			byte3 = readContinuationByte();                                                                                     // 13021
			byte4 = readContinuationByte();                                                                                     // 13022
			codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |                                                            // 13023
				(byte3 << 0x06) | byte4;                                                                                           // 13024
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {                                                               // 13025
				return codePoint;                                                                                                  // 13026
			}                                                                                                                   // 13027
		}                                                                                                                    // 13028
                                                                                                                       // 13029
		throw Error('Invalid UTF-8 detected');                                                                               // 13030
	}                                                                                                                     // 13031
                                                                                                                       // 13032
	var byteArray;                                                                                                        // 13033
	var byteCount;                                                                                                        // 13034
	var byteIndex;                                                                                                        // 13035
	function utf8decode(byteString) {                                                                                     // 13036
		byteArray = ucs2decode(byteString);                                                                                  // 13037
		byteCount = byteArray.length;                                                                                        // 13038
		byteIndex = 0;                                                                                                       // 13039
		var codePoints = [];                                                                                                 // 13040
		var tmp;                                                                                                             // 13041
		while ((tmp = decodeSymbol()) !== false) {                                                                           // 13042
			codePoints.push(tmp);                                                                                               // 13043
		}                                                                                                                    // 13044
		return ucs2encode(codePoints);                                                                                       // 13045
	}                                                                                                                     // 13046
                                                                                                                       // 13047
	/*--------------------------------------------------------------------------*/                                        // 13048
                                                                                                                       // 13049
	var utf8 = {                                                                                                          // 13050
		'version': '2.0.0',                                                                                                  // 13051
		'encode': utf8encode,                                                                                                // 13052
		'decode': utf8decode                                                                                                 // 13053
	};                                                                                                                    // 13054
                                                                                                                       // 13055
	// Some AMD build optimizers, like r.js, check for specific condition patterns                                        // 13056
	// like the following:                                                                                                // 13057
	if (                                                                                                                  // 13058
		typeof define == 'function' &&                                                                                       // 13059
		typeof define.amd == 'object' &&                                                                                     // 13060
		define.amd                                                                                                           // 13061
	) {                                                                                                                   // 13062
		define(function() {                                                                                                  // 13063
			return utf8;                                                                                                        // 13064
		});                                                                                                                  // 13065
	}	else if (freeExports && !freeExports.nodeType) {                                                                    // 13066
		if (freeModule) { // in Node.js or RingoJS v0.8.0+                                                                   // 13067
			freeModule.exports = utf8;                                                                                          // 13068
		} else { // in Narwhal or RingoJS v0.7.0-                                                                            // 13069
			var object = {};                                                                                                    // 13070
			var hasOwnProperty = object.hasOwnProperty;                                                                         // 13071
			for (var key in utf8) {                                                                                             // 13072
				hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);                                                  // 13073
			}                                                                                                                   // 13074
		}                                                                                                                    // 13075
	} else { // in Rhino or a web browser                                                                                 // 13076
		root.utf8 = utf8;                                                                                                    // 13077
	}                                                                                                                     // 13078
                                                                                                                       // 13079
}(this));                                                                                                              // 13080
                                                                                                                       // 13081
},{}],"bignumber.js":[function(require,module,exports){                                                                // 13082
/*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */                                             // 13083
                                                                                                                       // 13084
;(function (global) {                                                                                                  // 13085
    'use strict';                                                                                                      // 13086
                                                                                                                       // 13087
    /*                                                                                                                 // 13088
      bignumber.js v2.0.7                                                                                              // 13089
      A JavaScript library for arbitrary-precision arithmetic.                                                         // 13090
      https://github.com/MikeMcl/bignumber.js                                                                          // 13091
      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>                                                        // 13092
      MIT Expat Licence                                                                                                // 13093
    */                                                                                                                 // 13094
                                                                                                                       // 13095
                                                                                                                       // 13096
    var BigNumber, crypto, parseNumeric,                                                                               // 13097
        isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,                                                            // 13098
        mathceil = Math.ceil,                                                                                          // 13099
        mathfloor = Math.floor,                                                                                        // 13100
        notBool = ' not a boolean or binary digit',                                                                    // 13101
        roundingMode = 'rounding mode',                                                                                // 13102
        tooManyDigits = 'number type has more than 15 significant digits',                                             // 13103
        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',                                 // 13104
        BASE = 1e14,                                                                                                   // 13105
        LOG_BASE = 14,                                                                                                 // 13106
        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1                                                       // 13107
        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1                                                       // 13108
        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],                            // 13109
        SQRT_BASE = 1e7,                                                                                               // 13110
                                                                                                                       // 13111
        /*                                                                                                             // 13112
         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and                     // 13113
         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an                         // 13114
         * exception is thrown (if ERRORS is true).                                                                    // 13115
         */                                                                                                            // 13116
        MAX = 1E9;                                   // 0 to MAX_INT32                                                 // 13117
                                                                                                                       // 13118
                                                                                                                       // 13119
    /*                                                                                                                 // 13120
     * Create and return a BigNumber constructor.                                                                      // 13121
     */                                                                                                                // 13122
    function another(configObj) {                                                                                      // 13123
        var div,                                                                                                       // 13124
                                                                                                                       // 13125
            // id tracks the caller function, so its name can be included in error messages.                           // 13126
            id = 0,                                                                                                    // 13127
            P = BigNumber.prototype,                                                                                   // 13128
            ONE = new BigNumber(1),                                                                                    // 13129
                                                                                                                       // 13130
                                                                                                                       // 13131
            /********************************* EDITABLE DEFAULTS **********************************/                   // 13132
                                                                                                                       // 13133
                                                                                                                       // 13134
            /*                                                                                                         // 13135
             * The default values below must be integers within the inclusive ranges stated.                           // 13136
             * The values can also be changed at run-time using BigNumber.config.                                      // 13137
             */                                                                                                        // 13138
                                                                                                                       // 13139
            // The maximum number of decimal places for operations involving division.                                 // 13140
            DECIMAL_PLACES = 20,                     // 0 to MAX                                                       // 13141
                                                                                                                       // 13142
            /*                                                                                                         // 13143
             * The rounding mode used when rounding to the above decimal places, and when using                        // 13144
             * toExponential, toFixed, toFormat and toPrecision, and round (default value).                            // 13145
             * UP         0 Away from zero.                                                                            // 13146
             * DOWN       1 Towards zero.                                                                              // 13147
             * CEIL       2 Towards +Infinity.                                                                         // 13148
             * FLOOR      3 Towards -Infinity.                                                                         // 13149
             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.                                             // 13150
             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.                                           // 13151
             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.                         // 13152
             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.                              // 13153
             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.                              // 13154
             */                                                                                                        // 13155
            ROUNDING_MODE = 4,                       // 0 to 8                                                         // 13156
                                                                                                                       // 13157
            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]                                                              // 13158
                                                                                                                       // 13159
            // The exponent value at and beneath which toString returns exponential notation.                          // 13160
            // Number type: -7                                                                                         // 13161
            TO_EXP_NEG = -7,                         // 0 to -MAX                                                      // 13162
                                                                                                                       // 13163
            // The exponent value at and above which toString returns exponential notation.                            // 13164
            // Number type: 21                                                                                         // 13165
            TO_EXP_POS = 21,                         // 0 to MAX                                                       // 13166
                                                                                                                       // 13167
            // RANGE : [MIN_EXP, MAX_EXP]                                                                              // 13168
                                                                                                                       // 13169
            // The minimum exponent value, beneath which underflow to zero occurs.                                     // 13170
            // Number type: -324  (5e-324)                                                                             // 13171
            MIN_EXP = -1e7,                          // -1 to -MAX                                                     // 13172
                                                                                                                       // 13173
            // The maximum exponent value, above which overflow to Infinity occurs.                                    // 13174
            // Number type:  308  (1.7976931348623157e+308)                                                            // 13175
            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.                               // 13176
            MAX_EXP = 1e7,                           // 1 to MAX                                                       // 13177
                                                                                                                       // 13178
            // Whether BigNumber Errors are ever thrown.                                                               // 13179
            ERRORS = true,                           // true or false                                                  // 13180
                                                                                                                       // 13181
            // Change to intValidatorNoErrors if ERRORS is false.                                                      // 13182
            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors                    // 13183
                                                                                                                       // 13184
            // Whether to use cryptographically-secure random number generation, if available.                         // 13185
            CRYPTO = false,                          // true or false                                                  // 13186
                                                                                                                       // 13187
            /*                                                                                                         // 13188
             * The modulo mode used when calculating the modulus: a mod n.                                             // 13189
             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.                    // 13190
             * The remainder (r) is calculated as: r = a - n * q.                                                      // 13191
             *                                                                                                         // 13192
             * UP        0 The remainder is positive if the dividend is negative, else is negative.                    // 13193
             * DOWN      1 The remainder has the same sign as the dividend.                                            // 13194
             *             This modulo mode is commonly known as 'truncated division' and is                           // 13195
             *             equivalent to (a % n) in JavaScript.                                                        // 13196
             * FLOOR     3 The remainder has the same sign as the divisor (Python %).                                  // 13197
             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.                                // 13198
             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).                                        // 13199
             *             The remainder is always positive.                                                           // 13200
             *                                                                                                         // 13201
             * The truncated division, floored division, Euclidian division and IEEE 754 remainder                     // 13202
             * modes are commonly used for the modulus operation.                                                      // 13203
             * Although the other rounding modes can also be used, they may not give useful results.                   // 13204
             */                                                                                                        // 13205
            MODULO_MODE = 1,                         // 0 to 9                                                         // 13206
                                                                                                                       // 13207
            // The maximum number of significant digits of the result of the toPower operation.                        // 13208
            // If POW_PRECISION is 0, there will be unlimited significant digits.                                      // 13209
            POW_PRECISION = 100,                     // 0 to MAX                                                       // 13210
                                                                                                                       // 13211
            // The format specification used by the BigNumber.prototype.toFormat method.                               // 13212
            FORMAT = {                                                                                                 // 13213
                decimalSeparator: '.',                                                                                 // 13214
                groupSeparator: ',',                                                                                   // 13215
                groupSize: 3,                                                                                          // 13216
                secondaryGroupSize: 0,                                                                                 // 13217
                fractionGroupSeparator: '\xA0',      // non-breaking space                                             // 13218
                fractionGroupSize: 0                                                                                   // 13219
            };                                                                                                         // 13220
                                                                                                                       // 13221
                                                                                                                       // 13222
        /******************************************************************************************/                   // 13223
                                                                                                                       // 13224
                                                                                                                       // 13225
        // CONSTRUCTOR                                                                                                 // 13226
                                                                                                                       // 13227
                                                                                                                       // 13228
        /*                                                                                                             // 13229
         * The BigNumber constructor and exported function.                                                            // 13230
         * Create and return a new instance of a BigNumber object.                                                     // 13231
         *                                                                                                             // 13232
         * n {number|string|BigNumber} A numeric value.                                                                // 13233
         * [b] {number} The base of n. Integer, 2 to 64 inclusive.                                                     // 13234
         */                                                                                                            // 13235
        function BigNumber( n, b ) {                                                                                   // 13236
            var c, e, i, num, len, str,                                                                                // 13237
                x = this;                                                                                              // 13238
                                                                                                                       // 13239
            // Enable constructor usage without new.                                                                   // 13240
            if ( !( x instanceof BigNumber ) ) {                                                                       // 13241
                                                                                                                       // 13242
                // 'BigNumber() constructor call without new: {n}'                                                     // 13243
                if (ERRORS) raise( 26, 'constructor call without new', n );                                            // 13244
                return new BigNumber( n, b );                                                                          // 13245
            }                                                                                                          // 13246
                                                                                                                       // 13247
            // 'new BigNumber() base not an integer: {b}'                                                              // 13248
            // 'new BigNumber() base out of range: {b}'                                                                // 13249
            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {                                                  // 13250
                                                                                                                       // 13251
                // Duplicate.                                                                                          // 13252
                if ( n instanceof BigNumber ) {                                                                        // 13253
                    x.s = n.s;                                                                                         // 13254
                    x.e = n.e;                                                                                         // 13255
                    x.c = ( n = n.c ) ? n.slice() : n;                                                                 // 13256
                    id = 0;                                                                                            // 13257
                    return;                                                                                            // 13258
                }                                                                                                      // 13259
                                                                                                                       // 13260
                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {                                                  // 13261
                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;                                                              // 13262
                                                                                                                       // 13263
                    // Fast path for integers.                                                                         // 13264
                    if ( n === ~~n ) {                                                                                 // 13265
                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );                                                   // 13266
                        x.e = e;                                                                                       // 13267
                        x.c = [n];                                                                                     // 13268
                        id = 0;                                                                                        // 13269
                        return;                                                                                        // 13270
                    }                                                                                                  // 13271
                                                                                                                       // 13272
                    str = n + '';                                                                                      // 13273
                } else {                                                                                               // 13274
                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );                         // 13275
                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                   // 13276
                }                                                                                                      // 13277
            } else {                                                                                                   // 13278
                b = b | 0;                                                                                             // 13279
                str = n + '';                                                                                          // 13280
                                                                                                                       // 13281
                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.                               // 13282
                // Allow exponential notation to be used with base 10 argument.                                        // 13283
                if ( b == 10 ) {                                                                                       // 13284
                    x = new BigNumber( n instanceof BigNumber ? n : str );                                             // 13285
                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );                                        // 13286
                }                                                                                                      // 13287
                                                                                                                       // 13288
                // Avoid potential interpretation of Infinity and NaN as base 44+ values.                              // 13289
                // Any number in exponential form will fail due to the [Ee][+-].                                       // 13290
                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||                                                   // 13291
                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +                                 // 13292
                    '(?:\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {                                           // 13293
                    return parseNumeric( x, str, num, b );                                                             // 13294
                }                                                                                                      // 13295
                                                                                                                       // 13296
                if (num) {                                                                                             // 13297
                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;                                                  // 13298
                                                                                                                       // 13299
                    if ( ERRORS && str.replace( /^0\.0*|\./, '' ).length > 15 ) {                                      // 13300
                                                                                                                       // 13301
                        // 'new BigNumber() number type has more than 15 significant digits: {n}'                      // 13302
                        raise( id, tooManyDigits, n );                                                                 // 13303
                    }                                                                                                  // 13304
                                                                                                                       // 13305
                    // Prevent later check for length on converted number.                                             // 13306
                    num = false;                                                                                       // 13307
                } else {                                                                                               // 13308
                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                   // 13309
                }                                                                                                      // 13310
                                                                                                                       // 13311
                str = convertBase( str, 10, b, x.s );                                                                  // 13312
            }                                                                                                          // 13313
                                                                                                                       // 13314
            // Decimal point?                                                                                          // 13315
            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );                                         // 13316
                                                                                                                       // 13317
            // Exponential form?                                                                                       // 13318
            if ( ( i = str.search( /e/i ) ) > 0 ) {                                                                    // 13319
                                                                                                                       // 13320
                // Determine exponent.                                                                                 // 13321
                if ( e < 0 ) e = i;                                                                                    // 13322
                e += +str.slice( i + 1 );                                                                              // 13323
                str = str.substring( 0, i );                                                                           // 13324
            } else if ( e < 0 ) {                                                                                      // 13325
                                                                                                                       // 13326
                // Integer.                                                                                            // 13327
                e = str.length;                                                                                        // 13328
            }                                                                                                          // 13329
                                                                                                                       // 13330
            // Determine leading zeros.                                                                                // 13331
            for ( i = 0; str.charCodeAt(i) === 48; i++ );                                                              // 13332
                                                                                                                       // 13333
            // Determine trailing zeros.                                                                               // 13334
            for ( len = str.length; str.charCodeAt(--len) === 48; );                                                   // 13335
            str = str.slice( i, len + 1 );                                                                             // 13336
                                                                                                                       // 13337
            if (str) {                                                                                                 // 13338
                len = str.length;                                                                                      // 13339
                                                                                                                       // 13340
                // Disallow numbers with over 15 significant digits if number type.                                    // 13341
                // 'new BigNumber() number type has more than 15 significant digits: {n}'                              // 13342
                if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );                                  // 13343
                                                                                                                       // 13344
                e = e - i - 1;                                                                                         // 13345
                                                                                                                       // 13346
                 // Overflow?                                                                                          // 13347
                if ( e > MAX_EXP ) {                                                                                   // 13348
                                                                                                                       // 13349
                    // Infinity.                                                                                       // 13350
                    x.c = x.e = null;                                                                                  // 13351
                                                                                                                       // 13352
                // Underflow?                                                                                          // 13353
                } else if ( e < MIN_EXP ) {                                                                            // 13354
                                                                                                                       // 13355
                    // Zero.                                                                                           // 13356
                    x.c = [ x.e = 0 ];                                                                                 // 13357
                } else {                                                                                               // 13358
                    x.e = e;                                                                                           // 13359
                    x.c = [];                                                                                          // 13360
                                                                                                                       // 13361
                    // Transform base                                                                                  // 13362
                                                                                                                       // 13363
                    // e is the base 10 exponent.                                                                      // 13364
                    // i is where to slice str to get the first element of the coefficient array.                      // 13365
                    i = ( e + 1 ) % LOG_BASE;                                                                          // 13366
                    if ( e < 0 ) i += LOG_BASE;                                                                        // 13367
                                                                                                                       // 13368
                    if ( i < len ) {                                                                                   // 13369
                        if (i) x.c.push( +str.slice( 0, i ) );                                                         // 13370
                                                                                                                       // 13371
                        for ( len -= LOG_BASE; i < len; ) {                                                            // 13372
                            x.c.push( +str.slice( i, i += LOG_BASE ) );                                                // 13373
                        }                                                                                              // 13374
                                                                                                                       // 13375
                        str = str.slice(i);                                                                            // 13376
                        i = LOG_BASE - str.length;                                                                     // 13377
                    } else {                                                                                           // 13378
                        i -= len;                                                                                      // 13379
                    }                                                                                                  // 13380
                                                                                                                       // 13381
                    for ( ; i--; str += '0' );                                                                         // 13382
                    x.c.push( +str );                                                                                  // 13383
                }                                                                                                      // 13384
            } else {                                                                                                   // 13385
                                                                                                                       // 13386
                // Zero.                                                                                               // 13387
                x.c = [ x.e = 0 ];                                                                                     // 13388
            }                                                                                                          // 13389
                                                                                                                       // 13390
            id = 0;                                                                                                    // 13391
        }                                                                                                              // 13392
                                                                                                                       // 13393
                                                                                                                       // 13394
        // CONSTRUCTOR PROPERTIES                                                                                      // 13395
                                                                                                                       // 13396
                                                                                                                       // 13397
        BigNumber.another = another;                                                                                   // 13398
                                                                                                                       // 13399
        BigNumber.ROUND_UP = 0;                                                                                        // 13400
        BigNumber.ROUND_DOWN = 1;                                                                                      // 13401
        BigNumber.ROUND_CEIL = 2;                                                                                      // 13402
        BigNumber.ROUND_FLOOR = 3;                                                                                     // 13403
        BigNumber.ROUND_HALF_UP = 4;                                                                                   // 13404
        BigNumber.ROUND_HALF_DOWN = 5;                                                                                 // 13405
        BigNumber.ROUND_HALF_EVEN = 6;                                                                                 // 13406
        BigNumber.ROUND_HALF_CEIL = 7;                                                                                 // 13407
        BigNumber.ROUND_HALF_FLOOR = 8;                                                                                // 13408
        BigNumber.EUCLID = 9;                                                                                          // 13409
                                                                                                                       // 13410
                                                                                                                       // 13411
        /*                                                                                                             // 13412
         * Configure infrequently-changing library-wide settings.                                                      // 13413
         *                                                                                                             // 13414
         * Accept an object or an argument list, with one or many of the following properties or                       // 13415
         * parameters respectively:                                                                                    // 13416
         *                                                                                                             // 13417
         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive                                                     // 13418
         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive                                                       // 13419
         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or                                      // 13420
         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]                              // 13421
         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or                             // 13422
         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]                     // 13423
         *   ERRORS          {boolean|number}   true, false, 1 or 0                                                    // 13424
         *   CRYPTO          {boolean|number}   true, false, 1 or 0                                                    // 13425
         *   MODULO_MODE     {number}           0 to 9 inclusive                                                       // 13426
         *   POW_PRECISION   {number}           0 to MAX inclusive                                                     // 13427
         *   FORMAT          {object}           See BigNumber.prototype.toFormat                                       // 13428
         *      decimalSeparator       {string}                                                                        // 13429
         *      groupSeparator         {string}                                                                        // 13430
         *      groupSize              {number}                                                                        // 13431
         *      secondaryGroupSize     {number}                                                                        // 13432
         *      fractionGroupSeparator {string}                                                                        // 13433
         *      fractionGroupSize      {number}                                                                        // 13434
         *                                                                                                             // 13435
         * (The values assigned to the above FORMAT object properties are not checked for validity.)                   // 13436
         *                                                                                                             // 13437
         * E.g.                                                                                                        // 13438
         * BigNumber.config(20, 4) is equivalent to                                                                    // 13439
         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })                                                // 13440
         *                                                                                                             // 13441
         * Ignore properties/parameters set to null or undefined.                                                      // 13442
         * Return an object with the properties current values.                                                        // 13443
         */                                                                                                            // 13444
        BigNumber.config = function () {                                                                               // 13445
            var v, p,                                                                                                  // 13446
                i = 0,                                                                                                 // 13447
                r = {},                                                                                                // 13448
                a = arguments,                                                                                         // 13449
                o = a[0],                                                                                              // 13450
                has = o && typeof o == 'object'                                                                        // 13451
                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }                            // 13452
                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };                                // 13453
                                                                                                                       // 13454
            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.                                                    // 13455
            // 'config() DECIMAL_PLACES not an integer: {v}'                                                           // 13456
            // 'config() DECIMAL_PLACES out of range: {v}'                                                             // 13457
            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                      // 13458
                DECIMAL_PLACES = v | 0;                                                                                // 13459
            }                                                                                                          // 13460
            r[p] = DECIMAL_PLACES;                                                                                     // 13461
                                                                                                                       // 13462
            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.                                                       // 13463
            // 'config() ROUNDING_MODE not an integer: {v}'                                                            // 13464
            // 'config() ROUNDING_MODE out of range: {v}'                                                              // 13465
            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {                                         // 13466
                ROUNDING_MODE = v | 0;                                                                                 // 13467
            }                                                                                                          // 13468
            r[p] = ROUNDING_MODE;                                                                                      // 13469
                                                                                                                       // 13470
            // EXPONENTIAL_AT {number|number[]}                                                                        // 13471
            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].                    // 13472
            // 'config() EXPONENTIAL_AT not an integer: {v}'                                                           // 13473
            // 'config() EXPONENTIAL_AT out of range: {v}'                                                             // 13474
            if ( has( p = 'EXPONENTIAL_AT' ) ) {                                                                       // 13475
                                                                                                                       // 13476
                if ( isArray(v) ) {                                                                                    // 13477
                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {                     // 13478
                        TO_EXP_NEG = v[0] | 0;                                                                         // 13479
                        TO_EXP_POS = v[1] | 0;                                                                         // 13480
                    }                                                                                                  // 13481
                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                       // 13482
                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );                                             // 13483
                }                                                                                                      // 13484
            }                                                                                                          // 13485
            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];                                                                         // 13486
                                                                                                                       // 13487
            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or                                      // 13488
            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].                                             // 13489
            // 'config() RANGE not an integer: {v}'                                                                    // 13490
            // 'config() RANGE cannot be zero: {v}'                                                                    // 13491
            // 'config() RANGE out of range: {v}'                                                                      // 13492
            if ( has( p = 'RANGE' ) ) {                                                                                // 13493
                                                                                                                       // 13494
                if ( isArray(v) ) {                                                                                    // 13495
                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {                    // 13496
                        MIN_EXP = v[0] | 0;                                                                            // 13497
                        MAX_EXP = v[1] | 0;                                                                            // 13498
                    }                                                                                                  // 13499
                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                       // 13500
                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );                                      // 13501
                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );                                             // 13502
                }                                                                                                      // 13503
            }                                                                                                          // 13504
            r[p] = [ MIN_EXP, MAX_EXP ];                                                                               // 13505
                                                                                                                       // 13506
            // ERRORS {boolean|number} true, false, 1 or 0.                                                            // 13507
            // 'config() ERRORS not a boolean or binary digit: {v}'                                                    // 13508
            if ( has( p = 'ERRORS' ) ) {                                                                               // 13509
                                                                                                                       // 13510
                if ( v === !!v || v === 1 || v === 0 ) {                                                               // 13511
                    id = 0;                                                                                            // 13512
                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;                     // 13513
                } else if (ERRORS) {                                                                                   // 13514
                    raise( 2, p + notBool, v );                                                                        // 13515
                }                                                                                                      // 13516
            }                                                                                                          // 13517
            r[p] = ERRORS;                                                                                             // 13518
                                                                                                                       // 13519
            // CRYPTO {boolean|number} true, false, 1 or 0.                                                            // 13520
            // 'config() CRYPTO not a boolean or binary digit: {v}'                                                    // 13521
            // 'config() crypto unavailable: {crypto}'                                                                 // 13522
            if ( has( p = 'CRYPTO' ) ) {                                                                               // 13523
                                                                                                                       // 13524
                if ( v === !!v || v === 1 || v === 0 ) {                                                               // 13525
                    CRYPTO = !!( v && crypto && typeof crypto == 'object' );                                           // 13526
                    if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', crypto );                            // 13527
                } else if (ERRORS) {                                                                                   // 13528
                    raise( 2, p + notBool, v );                                                                        // 13529
                }                                                                                                      // 13530
            }                                                                                                          // 13531
            r[p] = CRYPTO;                                                                                             // 13532
                                                                                                                       // 13533
            // MODULO_MODE {number} Integer, 0 to 9 inclusive.                                                         // 13534
            // 'config() MODULO_MODE not an integer: {v}'                                                              // 13535
            // 'config() MODULO_MODE out of range: {v}'                                                                // 13536
            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {                                           // 13537
                MODULO_MODE = v | 0;                                                                                   // 13538
            }                                                                                                          // 13539
            r[p] = MODULO_MODE;                                                                                        // 13540
                                                                                                                       // 13541
            // POW_PRECISION {number} Integer, 0 to MAX inclusive.                                                     // 13542
            // 'config() POW_PRECISION not an integer: {v}'                                                            // 13543
            // 'config() POW_PRECISION out of range: {v}'                                                              // 13544
            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                       // 13545
                POW_PRECISION = v | 0;                                                                                 // 13546
            }                                                                                                          // 13547
            r[p] = POW_PRECISION;                                                                                      // 13548
                                                                                                                       // 13549
            // FORMAT {object}                                                                                         // 13550
            // 'config() FORMAT not an object: {v}'                                                                    // 13551
            if ( has( p = 'FORMAT' ) ) {                                                                               // 13552
                                                                                                                       // 13553
                if ( typeof v == 'object' ) {                                                                          // 13554
                    FORMAT = v;                                                                                        // 13555
                } else if (ERRORS) {                                                                                   // 13556
                    raise( 2, p + ' not an object', v );                                                               // 13557
                }                                                                                                      // 13558
            }                                                                                                          // 13559
            r[p] = FORMAT;                                                                                             // 13560
                                                                                                                       // 13561
            return r;                                                                                                  // 13562
        };                                                                                                             // 13563
                                                                                                                       // 13564
                                                                                                                       // 13565
        /*                                                                                                             // 13566
         * Return a new BigNumber whose value is the maximum of the arguments.                                         // 13567
         *                                                                                                             // 13568
         * arguments {number|string|BigNumber}                                                                         // 13569
         */                                                                                                            // 13570
        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };                                           // 13571
                                                                                                                       // 13572
                                                                                                                       // 13573
        /*                                                                                                             // 13574
         * Return a new BigNumber whose value is the minimum of the arguments.                                         // 13575
         *                                                                                                             // 13576
         * arguments {number|string|BigNumber}                                                                         // 13577
         */                                                                                                            // 13578
        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };                                           // 13579
                                                                                                                       // 13580
                                                                                                                       // 13581
        /*                                                                                                             // 13582
         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,                      // 13583
         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing                        // 13584
         * zeros are produced).                                                                                        // 13585
         *                                                                                                             // 13586
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 13587
         *                                                                                                             // 13588
         * 'random() decimal places not an integer: {dp}'                                                              // 13589
         * 'random() decimal places out of range: {dp}'                                                                // 13590
         * 'random() crypto unavailable: {crypto}'                                                                     // 13591
         */                                                                                                            // 13592
        BigNumber.random = (function () {                                                                              // 13593
            var pow2_53 = 0x20000000000000;                                                                            // 13594
                                                                                                                       // 13595
            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.                                             // 13596
            // Check if Math.random() produces more than 32 bits of randomness.                                        // 13597
            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.                    // 13598
            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.                                             // 13599
            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff                                                  // 13600
              ? function () { return mathfloor( Math.random() * pow2_53 ); }                                           // 13601
              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +                                   // 13602
                  (Math.random() * 0x800000 | 0); };                                                                   // 13603
                                                                                                                       // 13604
            return function (dp) {                                                                                     // 13605
                var a, b, e, k, v,                                                                                     // 13606
                    i = 0,                                                                                             // 13607
                    c = [],                                                                                            // 13608
                    rand = new BigNumber(ONE);                                                                         // 13609
                                                                                                                       // 13610
                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;                            // 13611
                k = mathceil( dp / LOG_BASE );                                                                         // 13612
                                                                                                                       // 13613
                if (CRYPTO) {                                                                                          // 13614
                                                                                                                       // 13615
                    // Browsers supporting crypto.getRandomValues.                                                     // 13616
                    if ( crypto && crypto.getRandomValues ) {                                                          // 13617
                                                                                                                       // 13618
                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );                                       // 13619
                                                                                                                       // 13620
                        for ( ; i < k; ) {                                                                             // 13621
                                                                                                                       // 13622
                            // 53 bits:                                                                                // 13623
                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)                                   // 13624
                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000                             // 13625
                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)                                              // 13626
                            //                                     11111 11111111 11111111                             // 13627
                            // 0x20000 is 2^21.                                                                        // 13628
                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);                                                    // 13629
                                                                                                                       // 13630
                            // Rejection sampling:                                                                     // 13631
                            // 0 <= v < 9007199254740992                                                               // 13632
                            // Probability that v >= 9e15, is                                                          // 13633
                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251                              // 13634
                            if ( v >= 9e15 ) {                                                                         // 13635
                                b = crypto.getRandomValues( new Uint32Array(2) );                                      // 13636
                                a[i] = b[0];                                                                           // 13637
                                a[i + 1] = b[1];                                                                       // 13638
                            } else {                                                                                   // 13639
                                                                                                                       // 13640
                                // 0 <= v <= 8999999999999999                                                          // 13641
                                // 0 <= (v % 1e14) <= 99999999999999                                                   // 13642
                                c.push( v % 1e14 );                                                                    // 13643
                                i += 2;                                                                                // 13644
                            }                                                                                          // 13645
                        }                                                                                              // 13646
                        i = k / 2;                                                                                     // 13647
                                                                                                                       // 13648
                    // Node.js supporting crypto.randomBytes.                                                          // 13649
                    } else if ( crypto && crypto.randomBytes ) {                                                       // 13650
                                                                                                                       // 13651
                        // buffer                                                                                      // 13652
                        a = crypto.randomBytes( k *= 7 );                                                              // 13653
                                                                                                                       // 13654
                        for ( ; i < k; ) {                                                                             // 13655
                                                                                                                       // 13656
                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40                                          // 13657
                            // 0x100000000 is 2^32, 0x1000000 is 2^24                                                  // 13658
                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111                             // 13659
                            // 0 <= v < 9007199254740992                                                               // 13660
                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +                   // 13661
                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +                              // 13662
                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];                                   // 13663
                                                                                                                       // 13664
                            if ( v >= 9e15 ) {                                                                         // 13665
                                crypto.randomBytes(7).copy( a, i );                                                    // 13666
                            } else {                                                                                   // 13667
                                                                                                                       // 13668
                                // 0 <= (v % 1e14) <= 99999999999999                                                   // 13669
                                c.push( v % 1e14 );                                                                    // 13670
                                i += 7;                                                                                // 13671
                            }                                                                                          // 13672
                        }                                                                                              // 13673
                        i = k / 7;                                                                                     // 13674
                    } else if (ERRORS) {                                                                               // 13675
                        raise( 14, 'crypto unavailable', crypto );                                                     // 13676
                    }                                                                                                  // 13677
                }                                                                                                      // 13678
                                                                                                                       // 13679
                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.                      // 13680
                if (!i) {                                                                                              // 13681
                                                                                                                       // 13682
                    for ( ; i < k; ) {                                                                                 // 13683
                        v = random53bitInt();                                                                          // 13684
                        if ( v < 9e15 ) c[i++] = v % 1e14;                                                             // 13685
                    }                                                                                                  // 13686
                }                                                                                                      // 13687
                                                                                                                       // 13688
                k = c[--i];                                                                                            // 13689
                dp %= LOG_BASE;                                                                                        // 13690
                                                                                                                       // 13691
                // Convert trailing digits to zeros according to dp.                                                   // 13692
                if ( k && dp ) {                                                                                       // 13693
                    v = POWS_TEN[LOG_BASE - dp];                                                                       // 13694
                    c[i] = mathfloor( k / v ) * v;                                                                     // 13695
                }                                                                                                      // 13696
                                                                                                                       // 13697
                // Remove trailing elements which are zero.                                                            // 13698
                for ( ; c[i] === 0; c.pop(), i-- );                                                                    // 13699
                                                                                                                       // 13700
                // Zero?                                                                                               // 13701
                if ( i < 0 ) {                                                                                         // 13702
                    c = [ e = 0 ];                                                                                     // 13703
                } else {                                                                                               // 13704
                                                                                                                       // 13705
                    // Remove leading elements which are zero and adjust exponent accordingly.                         // 13706
                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);                                              // 13707
                                                                                                                       // 13708
                    // Count the digits of the first element of c to determine leading zeros, and...                   // 13709
                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);                                                     // 13710
                                                                                                                       // 13711
                    // adjust the exponent accordingly.                                                                // 13712
                    if ( i < LOG_BASE ) e -= LOG_BASE - i;                                                             // 13713
                }                                                                                                      // 13714
                                                                                                                       // 13715
                rand.e = e;                                                                                            // 13716
                rand.c = c;                                                                                            // 13717
                return rand;                                                                                           // 13718
            };                                                                                                         // 13719
        })();                                                                                                          // 13720
                                                                                                                       // 13721
                                                                                                                       // 13722
        // PRIVATE FUNCTIONS                                                                                           // 13723
                                                                                                                       // 13724
                                                                                                                       // 13725
        // Convert a numeric string of baseIn to a numeric string of baseOut.                                          // 13726
        function convertBase( str, baseOut, baseIn, sign ) {                                                           // 13727
            var d, e, k, r, x, xc, y,                                                                                  // 13728
                i = str.indexOf( '.' ),                                                                                // 13729
                dp = DECIMAL_PLACES,                                                                                   // 13730
                rm = ROUNDING_MODE;                                                                                    // 13731
                                                                                                                       // 13732
            if ( baseIn < 37 ) str = str.toLowerCase();                                                                // 13733
                                                                                                                       // 13734
            // Non-integer.                                                                                            // 13735
            if ( i >= 0 ) {                                                                                            // 13736
                k = POW_PRECISION;                                                                                     // 13737
                                                                                                                       // 13738
                // Unlimited precision.                                                                                // 13739
                POW_PRECISION = 0;                                                                                     // 13740
                str = str.replace( '.', '' );                                                                          // 13741
                y = new BigNumber(baseIn);                                                                             // 13742
                x = y.pow( str.length - i );                                                                           // 13743
                POW_PRECISION = k;                                                                                     // 13744
                                                                                                                       // 13745
                // Convert str as if an integer, then restore the fraction part by dividing the                        // 13746
                // result by its base raised to a power.                                                               // 13747
                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );                             // 13748
                y.e = y.c.length;                                                                                      // 13749
            }                                                                                                          // 13750
                                                                                                                       // 13751
            // Convert the number as integer.                                                                          // 13752
            xc = toBaseOut( str, baseIn, baseOut );                                                                    // 13753
            e = k = xc.length;                                                                                         // 13754
                                                                                                                       // 13755
            // Remove trailing zeros.                                                                                  // 13756
            for ( ; xc[--k] == 0; xc.pop() );                                                                          // 13757
            if ( !xc[0] ) return '0';                                                                                  // 13758
                                                                                                                       // 13759
            if ( i < 0 ) {                                                                                             // 13760
                --e;                                                                                                   // 13761
            } else {                                                                                                   // 13762
                x.c = xc;                                                                                              // 13763
                x.e = e;                                                                                               // 13764
                                                                                                                       // 13765
                // sign is needed for correct rounding.                                                                // 13766
                x.s = sign;                                                                                            // 13767
                x = div( x, y, dp, rm, baseOut );                                                                      // 13768
                xc = x.c;                                                                                              // 13769
                r = x.r;                                                                                               // 13770
                e = x.e;                                                                                               // 13771
            }                                                                                                          // 13772
                                                                                                                       // 13773
            d = e + dp + 1;                                                                                            // 13774
                                                                                                                       // 13775
            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.                    // 13776
            i = xc[d];                                                                                                 // 13777
            k = baseOut / 2;                                                                                           // 13778
            r = r || d < 0 || xc[d + 1] != null;                                                                       // 13779
                                                                                                                       // 13780
            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                                // 13781
                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||                               // 13782
                         rm == ( x.s < 0 ? 8 : 7 ) );                                                                  // 13783
                                                                                                                       // 13784
            if ( d < 1 || !xc[0] ) {                                                                                   // 13785
                                                                                                                       // 13786
                // 1^-dp or 0.                                                                                         // 13787
                str = r ? toFixedPoint( '1', -dp ) : '0';                                                              // 13788
            } else {                                                                                                   // 13789
                xc.length = d;                                                                                         // 13790
                                                                                                                       // 13791
                if (r) {                                                                                               // 13792
                                                                                                                       // 13793
                    // Rounding up may mean the previous digit has to be rounded up and so on.                         // 13794
                    for ( --baseOut; ++xc[--d] > baseOut; ) {                                                          // 13795
                        xc[d] = 0;                                                                                     // 13796
                                                                                                                       // 13797
                        if ( !d ) {                                                                                    // 13798
                            ++e;                                                                                       // 13799
                            xc.unshift(1);                                                                             // 13800
                        }                                                                                              // 13801
                    }                                                                                                  // 13802
                }                                                                                                      // 13803
                                                                                                                       // 13804
                // Determine trailing zeros.                                                                           // 13805
                for ( k = xc.length; !xc[--k]; );                                                                      // 13806
                                                                                                                       // 13807
                // E.g. [4, 11, 15] becomes 4bf.                                                                       // 13808
                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );                                    // 13809
                str = toFixedPoint( str, e );                                                                          // 13810
            }                                                                                                          // 13811
                                                                                                                       // 13812
            // The caller will add the sign.                                                                           // 13813
            return str;                                                                                                // 13814
        }                                                                                                              // 13815
                                                                                                                       // 13816
                                                                                                                       // 13817
        // Perform division in the specified base. Called by div and convertBase.                                      // 13818
        div = (function () {                                                                                           // 13819
                                                                                                                       // 13820
            // Assume non-zero x and k.                                                                                // 13821
            function multiply( x, k, base ) {                                                                          // 13822
                var m, temp, xlo, xhi,                                                                                 // 13823
                    carry = 0,                                                                                         // 13824
                    i = x.length,                                                                                      // 13825
                    klo = k % SQRT_BASE,                                                                               // 13826
                    khi = k / SQRT_BASE | 0;                                                                           // 13827
                                                                                                                       // 13828
                for ( x = x.slice(); i--; ) {                                                                          // 13829
                    xlo = x[i] % SQRT_BASE;                                                                            // 13830
                    xhi = x[i] / SQRT_BASE | 0;                                                                        // 13831
                    m = khi * xlo + xhi * klo;                                                                         // 13832
                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;                                      // 13833
                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;                                   // 13834
                    x[i] = temp % base;                                                                                // 13835
                }                                                                                                      // 13836
                                                                                                                       // 13837
                if (carry) x.unshift(carry);                                                                           // 13838
                                                                                                                       // 13839
                return x;                                                                                              // 13840
            }                                                                                                          // 13841
                                                                                                                       // 13842
            function compare( a, b, aL, bL ) {                                                                         // 13843
                var i, cmp;                                                                                            // 13844
                                                                                                                       // 13845
                if ( aL != bL ) {                                                                                      // 13846
                    cmp = aL > bL ? 1 : -1;                                                                            // 13847
                } else {                                                                                               // 13848
                                                                                                                       // 13849
                    for ( i = cmp = 0; i < aL; i++ ) {                                                                 // 13850
                                                                                                                       // 13851
                        if ( a[i] != b[i] ) {                                                                          // 13852
                            cmp = a[i] > b[i] ? 1 : -1;                                                                // 13853
                            break;                                                                                     // 13854
                        }                                                                                              // 13855
                    }                                                                                                  // 13856
                }                                                                                                      // 13857
                return cmp;                                                                                            // 13858
            }                                                                                                          // 13859
                                                                                                                       // 13860
            function subtract( a, b, aL, base ) {                                                                      // 13861
                var i = 0;                                                                                             // 13862
                                                                                                                       // 13863
                // Subtract b from a.                                                                                  // 13864
                for ( ; aL--; ) {                                                                                      // 13865
                    a[aL] -= i;                                                                                        // 13866
                    i = a[aL] < b[aL] ? 1 : 0;                                                                         // 13867
                    a[aL] = i * base + a[aL] - b[aL];                                                                  // 13868
                }                                                                                                      // 13869
                                                                                                                       // 13870
                // Remove leading zeros.                                                                               // 13871
                for ( ; !a[0] && a.length > 1; a.shift() );                                                            // 13872
            }                                                                                                          // 13873
                                                                                                                       // 13874
            // x: dividend, y: divisor.                                                                                // 13875
            return function ( x, y, dp, rm, base ) {                                                                   // 13876
                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,                              // 13877
                    yL, yz,                                                                                            // 13878
                    s = x.s == y.s ? 1 : -1,                                                                           // 13879
                    xc = x.c,                                                                                          // 13880
                    yc = y.c;                                                                                          // 13881
                                                                                                                       // 13882
                // Either NaN, Infinity or 0?                                                                          // 13883
                if ( !xc || !xc[0] || !yc || !yc[0] ) {                                                                // 13884
                                                                                                                       // 13885
                    return new BigNumber(                                                                              // 13886
                                                                                                                       // 13887
                      // Return NaN if either NaN, or both Infinity or 0.                                              // 13888
                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :                                      // 13889
                                                                                                                       // 13890
                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.                     // 13891
                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0                                                        // 13892
                    );                                                                                                 // 13893
                }                                                                                                      // 13894
                                                                                                                       // 13895
                q = new BigNumber(s);                                                                                  // 13896
                qc = q.c = [];                                                                                         // 13897
                e = x.e - y.e;                                                                                         // 13898
                s = dp + e + 1;                                                                                        // 13899
                                                                                                                       // 13900
                if ( !base ) {                                                                                         // 13901
                    base = BASE;                                                                                       // 13902
                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );                                       // 13903
                    s = s / LOG_BASE | 0;                                                                              // 13904
                }                                                                                                      // 13905
                                                                                                                       // 13906
                // Result exponent may be one less then the current value of e.                                        // 13907
                // The coefficients of the BigNumbers from convertBase may have trailing zeros.                        // 13908
                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );                                                           // 13909
                if ( yc[i] > ( xc[i] || 0 ) ) e--;                                                                     // 13910
                                                                                                                       // 13911
                if ( s < 0 ) {                                                                                         // 13912
                    qc.push(1);                                                                                        // 13913
                    more = true;                                                                                       // 13914
                } else {                                                                                               // 13915
                    xL = xc.length;                                                                                    // 13916
                    yL = yc.length;                                                                                    // 13917
                    i = 0;                                                                                             // 13918
                    s += 2;                                                                                            // 13919
                                                                                                                       // 13920
                    // Normalise xc and yc so highest order digit of yc is >= base / 2.                                // 13921
                                                                                                                       // 13922
                    n = mathfloor( base / ( yc[0] + 1 ) );                                                             // 13923
                                                                                                                       // 13924
                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.                         // 13925
                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {                                                  // 13926
                    if ( n > 1 ) {                                                                                     // 13927
                        yc = multiply( yc, n, base );                                                                  // 13928
                        xc = multiply( xc, n, base );                                                                  // 13929
                        yL = yc.length;                                                                                // 13930
                        xL = xc.length;                                                                                // 13931
                    }                                                                                                  // 13932
                                                                                                                       // 13933
                    xi = yL;                                                                                           // 13934
                    rem = xc.slice( 0, yL );                                                                           // 13935
                    remL = rem.length;                                                                                 // 13936
                                                                                                                       // 13937
                    // Add zeros to make remainder as long as divisor.                                                 // 13938
                    for ( ; remL < yL; rem[remL++] = 0 );                                                              // 13939
                    yz = yc.slice();                                                                                   // 13940
                    yz.unshift(0);                                                                                     // 13941
                    yc0 = yc[0];                                                                                       // 13942
                    if ( yc[1] >= base / 2 ) yc0++;                                                                    // 13943
                    // Not necessary, but to prevent trial digit n > base, when using base 3.                          // 13944
                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;                                              // 13945
                                                                                                                       // 13946
                    do {                                                                                               // 13947
                        n = 0;                                                                                         // 13948
                                                                                                                       // 13949
                        // Compare divisor and remainder.                                                              // 13950
                        cmp = compare( yc, rem, yL, remL );                                                            // 13951
                                                                                                                       // 13952
                        // If divisor < remainder.                                                                     // 13953
                        if ( cmp < 0 ) {                                                                               // 13954
                                                                                                                       // 13955
                            // Calculate trial digit, n.                                                               // 13956
                                                                                                                       // 13957
                            rem0 = rem[0];                                                                             // 13958
                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );                                    // 13959
                                                                                                                       // 13960
                            // n is how many times the divisor goes into the current remainder.                        // 13961
                            n = mathfloor( rem0 / yc0 );                                                               // 13962
                                                                                                                       // 13963
                            //  Algorithm:                                                                             // 13964
                            //  1. product = divisor * trial digit (n)                                                 // 13965
                            //  2. if product > remainder: product -= divisor, n--                                     // 13966
                            //  3. remainder -= product                                                                // 13967
                            //  4. if product was < remainder at 2:                                                    // 13968
                            //    5. compare new remainder and divisor                                                 // 13969
                            //    6. If remainder > divisor: remainder -= divisor, n++                                 // 13970
                                                                                                                       // 13971
                            if ( n > 1 ) {                                                                             // 13972
                                                                                                                       // 13973
                                // n may be > base only when base is 3.                                                // 13974
                                if (n >= base) n = base - 1;                                                           // 13975
                                                                                                                       // 13976
                                // product = divisor * trial digit.                                                    // 13977
                                prod = multiply( yc, n, base );                                                        // 13978
                                prodL = prod.length;                                                                   // 13979
                                remL = rem.length;                                                                     // 13980
                                                                                                                       // 13981
                                // Compare product and remainder.                                                      // 13982
                                // If product > remainder.                                                             // 13983
                                // Trial digit n too high.                                                             // 13984
                                // n is 1 too high about 5% of the time, and is not known to have                      // 13985
                                // ever been more than 1 too high.                                                     // 13986
                                while ( compare( prod, rem, prodL, remL ) == 1 ) {                                     // 13987
                                    n--;                                                                               // 13988
                                                                                                                       // 13989
                                    // Subtract divisor from product.                                                  // 13990
                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );                               // 13991
                                    prodL = prod.length;                                                               // 13992
                                    cmp = 1;                                                                           // 13993
                                }                                                                                      // 13994
                            } else {                                                                                   // 13995
                                                                                                                       // 13996
                                // n is 0 or 1, cmp is -1.                                                             // 13997
                                // If n is 0, there is no need to compare yc and rem again below,                      // 13998
                                // so change cmp to 1 to avoid it.                                                     // 13999
                                // If n is 1, leave cmp as -1, so yc and rem are compared again.                       // 14000
                                if ( n == 0 ) {                                                                        // 14001
                                                                                                                       // 14002
                                    // divisor < remainder, so n must be at least 1.                                   // 14003
                                    cmp = n = 1;                                                                       // 14004
                                }                                                                                      // 14005
                                                                                                                       // 14006
                                // product = divisor                                                                   // 14007
                                prod = yc.slice();                                                                     // 14008
                                prodL = prod.length;                                                                   // 14009
                            }                                                                                          // 14010
                                                                                                                       // 14011
                            if ( prodL < remL ) prod.unshift(0);                                                       // 14012
                                                                                                                       // 14013
                            // Subtract product from remainder.                                                        // 14014
                            subtract( rem, prod, remL, base );                                                         // 14015
                            remL = rem.length;                                                                         // 14016
                                                                                                                       // 14017
                             // If product was < remainder.                                                            // 14018
                            if ( cmp == -1 ) {                                                                         // 14019
                                                                                                                       // 14020
                                // Compare divisor and new remainder.                                                  // 14021
                                // If divisor < new remainder, subtract divisor from remainder.                        // 14022
                                // Trial digit n too low.                                                              // 14023
                                // n is 1 too low about 5% of the time, and very rarely 2 too low.                     // 14024
                                while ( compare( yc, rem, yL, remL ) < 1 ) {                                           // 14025
                                    n++;                                                                               // 14026
                                                                                                                       // 14027
                                    // Subtract divisor from remainder.                                                // 14028
                                    subtract( rem, yL < remL ? yz : yc, remL, base );                                  // 14029
                                    remL = rem.length;                                                                 // 14030
                                }                                                                                      // 14031
                            }                                                                                          // 14032
                        } else if ( cmp === 0 ) {                                                                      // 14033
                            n++;                                                                                       // 14034
                            rem = [0];                                                                                 // 14035
                        } // else cmp === 1 and n will be 0                                                            // 14036
                                                                                                                       // 14037
                        // Add the next digit, n, to the result array.                                                 // 14038
                        qc[i++] = n;                                                                                   // 14039
                                                                                                                       // 14040
                        // Update the remainder.                                                                       // 14041
                        if ( rem[0] ) {                                                                                // 14042
                            rem[remL++] = xc[xi] || 0;                                                                 // 14043
                        } else {                                                                                       // 14044
                            rem = [ xc[xi] ];                                                                          // 14045
                            remL = 1;                                                                                  // 14046
                        }                                                                                              // 14047
                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );                                                // 14048
                                                                                                                       // 14049
                    more = rem[0] != null;                                                                             // 14050
                                                                                                                       // 14051
                    // Leading zero?                                                                                   // 14052
                    if ( !qc[0] ) qc.shift();                                                                          // 14053
                }                                                                                                      // 14054
                                                                                                                       // 14055
                if ( base == BASE ) {                                                                                  // 14056
                                                                                                                       // 14057
                    // To calculate q.e, first get the number of digits of qc[0].                                      // 14058
                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );                                                   // 14059
                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );                                     // 14060
                                                                                                                       // 14061
                // Caller is convertBase.                                                                              // 14062
                } else {                                                                                               // 14063
                    q.e = e;                                                                                           // 14064
                    q.r = +more;                                                                                       // 14065
                }                                                                                                      // 14066
                                                                                                                       // 14067
                return q;                                                                                              // 14068
            };                                                                                                         // 14069
        })();                                                                                                          // 14070
                                                                                                                       // 14071
                                                                                                                       // 14072
        /*                                                                                                             // 14073
         * Return a string representing the value of BigNumber n in fixed-point or exponential                         // 14074
         * notation rounded to the specified decimal places or significant digits.                                     // 14075
         *                                                                                                             // 14076
         * n is a BigNumber.                                                                                           // 14077
         * i is the index of the last digit required (i.e. the digit that may be rounded up).                          // 14078
         * rm is the rounding mode.                                                                                    // 14079
         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.                             // 14080
         */                                                                                                            // 14081
        function format( n, i, rm, caller ) {                                                                          // 14082
            var c0, e, ne, len, str;                                                                                   // 14083
                                                                                                                       // 14084
            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )                                            // 14085
              ? rm | 0 : ROUNDING_MODE;                                                                                // 14086
                                                                                                                       // 14087
            if ( !n.c ) return n.toString();                                                                           // 14088
            c0 = n.c[0];                                                                                               // 14089
            ne = n.e;                                                                                                  // 14090
                                                                                                                       // 14091
            if ( i == null ) {                                                                                         // 14092
                str = coeffToString( n.c );                                                                            // 14093
                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG                                                 // 14094
                  ? toExponential( str, ne )                                                                           // 14095
                  : toFixedPoint( str, ne );                                                                           // 14096
            } else {                                                                                                   // 14097
                n = round( new BigNumber(n), i, rm );                                                                  // 14098
                                                                                                                       // 14099
                // n.e may have changed if the value was rounded up.                                                   // 14100
                e = n.e;                                                                                               // 14101
                                                                                                                       // 14102
                str = coeffToString( n.c );                                                                            // 14103
                len = str.length;                                                                                      // 14104
                                                                                                                       // 14105
                // toPrecision returns exponential notation if the number of significant digits                        // 14106
                // specified is less than the number of digits necessary to represent the integer                      // 14107
                // part of the value in fixed-point notation.                                                          // 14108
                                                                                                                       // 14109
                // Exponential notation.                                                                               // 14110
                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {                                 // 14111
                                                                                                                       // 14112
                    // Append zeros?                                                                                   // 14113
                    for ( ; len < i; str += '0', len++ );                                                              // 14114
                    str = toExponential( str, e );                                                                     // 14115
                                                                                                                       // 14116
                // Fixed-point notation.                                                                               // 14117
                } else {                                                                                               // 14118
                    i -= ne;                                                                                           // 14119
                    str = toFixedPoint( str, e );                                                                      // 14120
                                                                                                                       // 14121
                    // Append zeros?                                                                                   // 14122
                    if ( e + 1 > len ) {                                                                               // 14123
                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );                                            // 14124
                    } else {                                                                                           // 14125
                        i += e - len;                                                                                  // 14126
                        if ( i > 0 ) {                                                                                 // 14127
                            if ( e + 1 == len ) str += '.';                                                            // 14128
                            for ( ; i--; str += '0' );                                                                 // 14129
                        }                                                                                              // 14130
                    }                                                                                                  // 14131
                }                                                                                                      // 14132
            }                                                                                                          // 14133
                                                                                                                       // 14134
            return n.s < 0 && c0 ? '-' + str : str;                                                                    // 14135
        }                                                                                                              // 14136
                                                                                                                       // 14137
                                                                                                                       // 14138
        // Handle BigNumber.max and BigNumber.min.                                                                     // 14139
        function maxOrMin( args, method ) {                                                                            // 14140
            var m, n,                                                                                                  // 14141
                i = 0;                                                                                                 // 14142
                                                                                                                       // 14143
            if ( isArray( args[0] ) ) args = args[0];                                                                  // 14144
            m = new BigNumber( args[0] );                                                                              // 14145
                                                                                                                       // 14146
            for ( ; ++i < args.length; ) {                                                                             // 14147
                n = new BigNumber( args[i] );                                                                          // 14148
                                                                                                                       // 14149
                // If any number is NaN, return NaN.                                                                   // 14150
                if ( !n.s ) {                                                                                          // 14151
                    m = n;                                                                                             // 14152
                    break;                                                                                             // 14153
                } else if ( method.call( m, n ) ) {                                                                    // 14154
                    m = n;                                                                                             // 14155
                }                                                                                                      // 14156
            }                                                                                                          // 14157
                                                                                                                       // 14158
            return m;                                                                                                  // 14159
        }                                                                                                              // 14160
                                                                                                                       // 14161
                                                                                                                       // 14162
        /*                                                                                                             // 14163
         * Return true if n is an integer in range, otherwise throw.                                                   // 14164
         * Use for argument validation when ERRORS is true.                                                            // 14165
         */                                                                                                            // 14166
        function intValidatorWithErrors( n, min, max, caller, name ) {                                                 // 14167
            if ( n < min || n > max || n != truncate(n) ) {                                                            // 14168
                raise( caller, ( name || 'decimal places' ) +                                                          // 14169
                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );                                   // 14170
            }                                                                                                          // 14171
                                                                                                                       // 14172
            return true;                                                                                               // 14173
        }                                                                                                              // 14174
                                                                                                                       // 14175
                                                                                                                       // 14176
        /*                                                                                                             // 14177
         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.                     // 14178
         * Called by minus, plus and times.                                                                            // 14179
         */                                                                                                            // 14180
        function normalise( n, c, e ) {                                                                                // 14181
            var i = 1,                                                                                                 // 14182
                j = c.length;                                                                                          // 14183
                                                                                                                       // 14184
             // Remove trailing zeros.                                                                                 // 14185
            for ( ; !c[--j]; c.pop() );                                                                                // 14186
                                                                                                                       // 14187
            // Calculate the base 10 exponent. First get the number of digits of c[0].                                 // 14188
            for ( j = c[0]; j >= 10; j /= 10, i++ );                                                                   // 14189
                                                                                                                       // 14190
            // Overflow?                                                                                               // 14191
            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {                                                            // 14192
                                                                                                                       // 14193
                // Infinity.                                                                                           // 14194
                n.c = n.e = null;                                                                                      // 14195
                                                                                                                       // 14196
            // Underflow?                                                                                              // 14197
            } else if ( e < MIN_EXP ) {                                                                                // 14198
                                                                                                                       // 14199
                // Zero.                                                                                               // 14200
                n.c = [ n.e = 0 ];                                                                                     // 14201
            } else {                                                                                                   // 14202
                n.e = e;                                                                                               // 14203
                n.c = c;                                                                                               // 14204
            }                                                                                                          // 14205
                                                                                                                       // 14206
            return n;                                                                                                  // 14207
        }                                                                                                              // 14208
                                                                                                                       // 14209
                                                                                                                       // 14210
        // Handle values that fail the validity test in BigNumber.                                                     // 14211
        parseNumeric = (function () {                                                                                  // 14212
            var basePrefix = /^(-?)0([xbo])/i,                                                                         // 14213
                dotAfter = /^([^.]+)\.$/,                                                                              // 14214
                dotBefore = /^\.([^.]+)$/,                                                                             // 14215
                isInfinityOrNaN = /^-?(Infinity|NaN)$/,                                                                // 14216
                whitespaceOrPlus = /^\s*\+|^\s+|\s+$/g;                                                                // 14217
                                                                                                                       // 14218
            return function ( x, str, num, b ) {                                                                       // 14219
                var base,                                                                                              // 14220
                    s = num ? str : str.replace( whitespaceOrPlus, '' );                                               // 14221
                                                                                                                       // 14222
                // No exception on ±Infinity or NaN.                                                                   // 14223
                if ( isInfinityOrNaN.test(s) ) {                                                                       // 14224
                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;                                                            // 14225
                } else {                                                                                               // 14226
                    if ( !num ) {                                                                                      // 14227
                                                                                                                       // 14228
                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i                                                  // 14229
                        s = s.replace( basePrefix, function ( m, p1, p2 ) {                                            // 14230
                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;                          // 14231
                            return !b || b == base ? p1 : m;                                                           // 14232
                        });                                                                                            // 14233
                                                                                                                       // 14234
                        if (b) {                                                                                       // 14235
                            base = b;                                                                                  // 14236
                                                                                                                       // 14237
                            // E.g. '1.' to '1', '.1' to '0.1'                                                         // 14238
                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );                              // 14239
                        }                                                                                              // 14240
                                                                                                                       // 14241
                        if ( str != s ) return new BigNumber( s, base );                                               // 14242
                    }                                                                                                  // 14243
                                                                                                                       // 14244
                    // 'new BigNumber() not a number: {n}'                                                             // 14245
                    // 'new BigNumber() not a base {b} number: {n}'                                                    // 14246
                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );                     // 14247
                    x.s = null;                                                                                        // 14248
                }                                                                                                      // 14249
                                                                                                                       // 14250
                x.c = x.e = null;                                                                                      // 14251
                id = 0;                                                                                                // 14252
            }                                                                                                          // 14253
        })();                                                                                                          // 14254
                                                                                                                       // 14255
                                                                                                                       // 14256
        // Throw a BigNumber Error.                                                                                    // 14257
        function raise( caller, msg, val ) {                                                                           // 14258
            var error = new Error( [                                                                                   // 14259
                'new BigNumber',     // 0                                                                              // 14260
                'cmp',               // 1                                                                              // 14261
                'config',            // 2                                                                              // 14262
                'div',               // 3                                                                              // 14263
                'divToInt',          // 4                                                                              // 14264
                'eq',                // 5                                                                              // 14265
                'gt',                // 6                                                                              // 14266
                'gte',               // 7                                                                              // 14267
                'lt',                // 8                                                                              // 14268
                'lte',               // 9                                                                              // 14269
                'minus',             // 10                                                                             // 14270
                'mod',               // 11                                                                             // 14271
                'plus',              // 12                                                                             // 14272
                'precision',         // 13                                                                             // 14273
                'random',            // 14                                                                             // 14274
                'round',             // 15                                                                             // 14275
                'shift',             // 16                                                                             // 14276
                'times',             // 17                                                                             // 14277
                'toDigits',          // 18                                                                             // 14278
                'toExponential',     // 19                                                                             // 14279
                'toFixed',           // 20                                                                             // 14280
                'toFormat',          // 21                                                                             // 14281
                'toFraction',        // 22                                                                             // 14282
                'pow',               // 23                                                                             // 14283
                'toPrecision',       // 24                                                                             // 14284
                'toString',          // 25                                                                             // 14285
                'BigNumber'          // 26                                                                             // 14286
            ][caller] + '() ' + msg + ': ' + val );                                                                    // 14287
                                                                                                                       // 14288
            error.name = 'BigNumber Error';                                                                            // 14289
            id = 0;                                                                                                    // 14290
            throw error;                                                                                               // 14291
        }                                                                                                              // 14292
                                                                                                                       // 14293
                                                                                                                       // 14294
        /*                                                                                                             // 14295
         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.                         // 14296
         * If r is truthy, it is known that there are more digits after the rounding digit.                            // 14297
         */                                                                                                            // 14298
        function round( x, sd, rm, r ) {                                                                               // 14299
            var d, i, j, k, n, ni, rd,                                                                                 // 14300
                xc = x.c,                                                                                              // 14301
                pows10 = POWS_TEN;                                                                                     // 14302
                                                                                                                       // 14303
            // if x is not Infinity or NaN...                                                                          // 14304
            if (xc) {                                                                                                  // 14305
                                                                                                                       // 14306
                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.                    // 14307
                // n is a base 1e14 number, the value of the element of array x.c containing rd.                       // 14308
                // ni is the index of n within x.c.                                                                    // 14309
                // d is the number of digits of n.                                                                     // 14310
                // i is the index of rd within n including leading zeros.                                              // 14311
                // j is the actual index of rd within n (if < 0, rd is a leading zero).                                // 14312
                out: {                                                                                                 // 14313
                                                                                                                       // 14314
                    // Get the number of digits of the first element of xc.                                            // 14315
                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );                                                   // 14316
                    i = sd - d;                                                                                        // 14317
                                                                                                                       // 14318
                    // If the rounding digit is in the first element of xc...                                          // 14319
                    if ( i < 0 ) {                                                                                     // 14320
                        i += LOG_BASE;                                                                                 // 14321
                        j = sd;                                                                                        // 14322
                        n = xc[ ni = 0 ];                                                                              // 14323
                                                                                                                       // 14324
                        // Get the rounding digit at index j of n.                                                     // 14325
                        rd = n / pows10[ d - j - 1 ] % 10 | 0;                                                         // 14326
                    } else {                                                                                           // 14327
                        ni = mathceil( ( i + 1 ) / LOG_BASE );                                                         // 14328
                                                                                                                       // 14329
                        if ( ni >= xc.length ) {                                                                       // 14330
                                                                                                                       // 14331
                            if (r) {                                                                                   // 14332
                                                                                                                       // 14333
                                // Needed by sqrt.                                                                     // 14334
                                for ( ; xc.length <= ni; xc.push(0) );                                                 // 14335
                                n = rd = 0;                                                                            // 14336
                                d = 1;                                                                                 // 14337
                                i %= LOG_BASE;                                                                         // 14338
                                j = i - LOG_BASE + 1;                                                                  // 14339
                            } else {                                                                                   // 14340
                                break out;                                                                             // 14341
                            }                                                                                          // 14342
                        } else {                                                                                       // 14343
                            n = k = xc[ni];                                                                            // 14344
                                                                                                                       // 14345
                            // Get the number of digits of n.                                                          // 14346
                            for ( d = 1; k >= 10; k /= 10, d++ );                                                      // 14347
                                                                                                                       // 14348
                            // Get the index of rd within n.                                                           // 14349
                            i %= LOG_BASE;                                                                             // 14350
                                                                                                                       // 14351
                            // Get the index of rd within n, adjusted for leading zeros.                               // 14352
                            // The number of leading zeros of n is given by LOG_BASE - d.                              // 14353
                            j = i - LOG_BASE + d;                                                                      // 14354
                                                                                                                       // 14355
                            // Get the rounding digit at index j of n.                                                 // 14356
                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;                                         // 14357
                        }                                                                                              // 14358
                    }                                                                                                  // 14359
                                                                                                                       // 14360
                    r = r || sd < 0 ||                                                                                 // 14361
                                                                                                                       // 14362
                    // Are there any non-zero digits after the rounding digit?                                         // 14363
                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right                   // 14364
                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.                    // 14365
                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );                                   // 14366
                                                                                                                       // 14367
                    r = rm < 4                                                                                         // 14368
                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                                        // 14369
                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&                                              // 14370
                                                                                                                       // 14371
                        // Check whether the digit to the left of the rounding digit is odd.                           // 14372
                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||                       // 14373
                          rm == ( x.s < 0 ? 8 : 7 ) );                                                                 // 14374
                                                                                                                       // 14375
                    if ( sd < 1 || !xc[0] ) {                                                                          // 14376
                        xc.length = 0;                                                                                 // 14377
                                                                                                                       // 14378
                        if (r) {                                                                                       // 14379
                                                                                                                       // 14380
                            // Convert sd to decimal places.                                                           // 14381
                            sd -= x.e + 1;                                                                             // 14382
                                                                                                                       // 14383
                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.                                                        // 14384
                            xc[0] = pows10[ sd % LOG_BASE ];                                                           // 14385
                            x.e = -sd || 0;                                                                            // 14386
                        } else {                                                                                       // 14387
                                                                                                                       // 14388
                            // Zero.                                                                                   // 14389
                            xc[0] = x.e = 0;                                                                           // 14390
                        }                                                                                              // 14391
                                                                                                                       // 14392
                        return x;                                                                                      // 14393
                    }                                                                                                  // 14394
                                                                                                                       // 14395
                    // Remove excess digits.                                                                           // 14396
                    if ( i == 0 ) {                                                                                    // 14397
                        xc.length = ni;                                                                                // 14398
                        k = 1;                                                                                         // 14399
                        ni--;                                                                                          // 14400
                    } else {                                                                                           // 14401
                        xc.length = ni + 1;                                                                            // 14402
                        k = pows10[ LOG_BASE - i ];                                                                    // 14403
                                                                                                                       // 14404
                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.                                        // 14405
                        // j > 0 means i > number of leading zeros of n.                                               // 14406
                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;                         // 14407
                    }                                                                                                  // 14408
                                                                                                                       // 14409
                    // Round up?                                                                                       // 14410
                    if (r) {                                                                                           // 14411
                                                                                                                       // 14412
                        for ( ; ; ) {                                                                                  // 14413
                                                                                                                       // 14414
                            // If the digit to be rounded up is in the first element of xc...                          // 14415
                            if ( ni == 0 ) {                                                                           // 14416
                                                                                                                       // 14417
                                // i will be the length of xc[0] before k is added.                                    // 14418
                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );                                       // 14419
                                j = xc[0] += k;                                                                        // 14420
                                for ( k = 1; j >= 10; j /= 10, k++ );                                                  // 14421
                                                                                                                       // 14422
                                // if i != k the length has increased.                                                 // 14423
                                if ( i != k ) {                                                                        // 14424
                                    x.e++;                                                                             // 14425
                                    if ( xc[0] == BASE ) xc[0] = 1;                                                    // 14426
                                }                                                                                      // 14427
                                                                                                                       // 14428
                                break;                                                                                 // 14429
                            } else {                                                                                   // 14430
                                xc[ni] += k;                                                                           // 14431
                                if ( xc[ni] != BASE ) break;                                                           // 14432
                                xc[ni--] = 0;                                                                          // 14433
                                k = 1;                                                                                 // 14434
                            }                                                                                          // 14435
                        }                                                                                              // 14436
                    }                                                                                                  // 14437
                                                                                                                       // 14438
                    // Remove trailing zeros.                                                                          // 14439
                    for ( i = xc.length; xc[--i] === 0; xc.pop() );                                                    // 14440
                }                                                                                                      // 14441
                                                                                                                       // 14442
                // Overflow? Infinity.                                                                                 // 14443
                if ( x.e > MAX_EXP ) {                                                                                 // 14444
                    x.c = x.e = null;                                                                                  // 14445
                                                                                                                       // 14446
                // Underflow? Zero.                                                                                    // 14447
                } else if ( x.e < MIN_EXP ) {                                                                          // 14448
                    x.c = [ x.e = 0 ];                                                                                 // 14449
                }                                                                                                      // 14450
            }                                                                                                          // 14451
                                                                                                                       // 14452
            return x;                                                                                                  // 14453
        }                                                                                                              // 14454
                                                                                                                       // 14455
                                                                                                                       // 14456
        // PROTOTYPE/INSTANCE METHODS                                                                                  // 14457
                                                                                                                       // 14458
                                                                                                                       // 14459
        /*                                                                                                             // 14460
         * Return a new BigNumber whose value is the absolute value of this BigNumber.                                 // 14461
         */                                                                                                            // 14462
        P.absoluteValue = P.abs = function () {                                                                        // 14463
            var x = new BigNumber(this);                                                                               // 14464
            if ( x.s < 0 ) x.s = 1;                                                                                    // 14465
            return x;                                                                                                  // 14466
        };                                                                                                             // 14467
                                                                                                                       // 14468
                                                                                                                       // 14469
        /*                                                                                                             // 14470
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                        // 14471
         * number in the direction of Infinity.                                                                        // 14472
         */                                                                                                            // 14473
        P.ceil = function () {                                                                                         // 14474
            return round( new BigNumber(this), this.e + 1, 2 );                                                        // 14475
        };                                                                                                             // 14476
                                                                                                                       // 14477
                                                                                                                       // 14478
        /*                                                                                                             // 14479
         * Return                                                                                                      // 14480
         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),                              // 14481
         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),                                // 14482
         * 0 if they have the same value,                                                                              // 14483
         * or null if the value of either is NaN.                                                                      // 14484
         */                                                                                                            // 14485
        P.comparedTo = P.cmp = function ( y, b ) {                                                                     // 14486
            id = 1;                                                                                                    // 14487
            return compare( this, new BigNumber( y, b ) );                                                             // 14488
        };                                                                                                             // 14489
                                                                                                                       // 14490
                                                                                                                       // 14491
        /*                                                                                                             // 14492
         * Return the number of decimal places of the value of this BigNumber, or null if the value                    // 14493
         * of this BigNumber is ±Infinity or NaN.                                                                      // 14494
         */                                                                                                            // 14495
        P.decimalPlaces = P.dp = function () {                                                                         // 14496
            var n, v,                                                                                                  // 14497
                c = this.c;                                                                                            // 14498
                                                                                                                       // 14499
            if ( !c ) return null;                                                                                     // 14500
            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;                                   // 14501
                                                                                                                       // 14502
            // Subtract the number of trailing zeros of the last number.                                               // 14503
            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );                                                       // 14504
            if ( n < 0 ) n = 0;                                                                                        // 14505
                                                                                                                       // 14506
            return n;                                                                                                  // 14507
        };                                                                                                             // 14508
                                                                                                                       // 14509
                                                                                                                       // 14510
        /*                                                                                                             // 14511
         *  n / 0 = I                                                                                                  // 14512
         *  n / N = N                                                                                                  // 14513
         *  n / I = 0                                                                                                  // 14514
         *  0 / n = 0                                                                                                  // 14515
         *  0 / 0 = N                                                                                                  // 14516
         *  0 / N = N                                                                                                  // 14517
         *  0 / I = 0                                                                                                  // 14518
         *  N / n = N                                                                                                  // 14519
         *  N / 0 = N                                                                                                  // 14520
         *  N / N = N                                                                                                  // 14521
         *  N / I = N                                                                                                  // 14522
         *  I / n = I                                                                                                  // 14523
         *  I / 0 = I                                                                                                  // 14524
         *  I / N = N                                                                                                  // 14525
         *  I / I = N                                                                                                  // 14526
         *                                                                                                             // 14527
         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of                   // 14528
         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                     // 14529
         */                                                                                                            // 14530
        P.dividedBy = P.div = function ( y, b ) {                                                                      // 14531
            id = 3;                                                                                                    // 14532
            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );                                  // 14533
        };                                                                                                             // 14534
                                                                                                                       // 14535
                                                                                                                       // 14536
        /*                                                                                                             // 14537
         * Return a new BigNumber whose value is the integer part of dividing the value of this                        // 14538
         * BigNumber by the value of BigNumber(y, b).                                                                  // 14539
         */                                                                                                            // 14540
        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {                                                        // 14541
            id = 4;                                                                                                    // 14542
            return div( this, new BigNumber( y, b ), 0, 1 );                                                           // 14543
        };                                                                                                             // 14544
                                                                                                                       // 14545
                                                                                                                       // 14546
        /*                                                                                                             // 14547
         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),                        // 14548
         * otherwise returns false.                                                                                    // 14549
         */                                                                                                            // 14550
        P.equals = P.eq = function ( y, b ) {                                                                          // 14551
            id = 5;                                                                                                    // 14552
            return compare( this, new BigNumber( y, b ) ) === 0;                                                       // 14553
        };                                                                                                             // 14554
                                                                                                                       // 14555
                                                                                                                       // 14556
        /*                                                                                                             // 14557
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                        // 14558
         * number in the direction of -Infinity.                                                                       // 14559
         */                                                                                                            // 14560
        P.floor = function () {                                                                                        // 14561
            return round( new BigNumber(this), this.e + 1, 3 );                                                        // 14562
        };                                                                                                             // 14563
                                                                                                                       // 14564
                                                                                                                       // 14565
        /*                                                                                                             // 14566
         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),                    // 14567
         * otherwise returns false.                                                                                    // 14568
         */                                                                                                            // 14569
        P.greaterThan = P.gt = function ( y, b ) {                                                                     // 14570
            id = 6;                                                                                                    // 14571
            return compare( this, new BigNumber( y, b ) ) > 0;                                                         // 14572
        };                                                                                                             // 14573
                                                                                                                       // 14574
                                                                                                                       // 14575
        /*                                                                                                             // 14576
         * Return true if the value of this BigNumber is greater than or equal to the value of                         // 14577
         * BigNumber(y, b), otherwise returns false.                                                                   // 14578
         */                                                                                                            // 14579
        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {                                                           // 14580
            id = 7;                                                                                                    // 14581
            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;                                    // 14582
                                                                                                                       // 14583
        };                                                                                                             // 14584
                                                                                                                       // 14585
                                                                                                                       // 14586
        /*                                                                                                             // 14587
         * Return true if the value of this BigNumber is a finite number, otherwise returns false.                     // 14588
         */                                                                                                            // 14589
        P.isFinite = function () {                                                                                     // 14590
            return !!this.c;                                                                                           // 14591
        };                                                                                                             // 14592
                                                                                                                       // 14593
                                                                                                                       // 14594
        /*                                                                                                             // 14595
         * Return true if the value of this BigNumber is an integer, otherwise return false.                           // 14596
         */                                                                                                            // 14597
        P.isInteger = P.isInt = function () {                                                                          // 14598
            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;                                      // 14599
        };                                                                                                             // 14600
                                                                                                                       // 14601
                                                                                                                       // 14602
        /*                                                                                                             // 14603
         * Return true if the value of this BigNumber is NaN, otherwise returns false.                                 // 14604
         */                                                                                                            // 14605
        P.isNaN = function () {                                                                                        // 14606
            return !this.s;                                                                                            // 14607
        };                                                                                                             // 14608
                                                                                                                       // 14609
                                                                                                                       // 14610
        /*                                                                                                             // 14611
         * Return true if the value of this BigNumber is negative, otherwise returns false.                            // 14612
         */                                                                                                            // 14613
        P.isNegative = P.isNeg = function () {                                                                         // 14614
            return this.s < 0;                                                                                         // 14615
        };                                                                                                             // 14616
                                                                                                                       // 14617
                                                                                                                       // 14618
        /*                                                                                                             // 14619
         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.                             // 14620
         */                                                                                                            // 14621
        P.isZero = function () {                                                                                       // 14622
            return !!this.c && this.c[0] == 0;                                                                         // 14623
        };                                                                                                             // 14624
                                                                                                                       // 14625
                                                                                                                       // 14626
        /*                                                                                                             // 14627
         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),                       // 14628
         * otherwise returns false.                                                                                    // 14629
         */                                                                                                            // 14630
        P.lessThan = P.lt = function ( y, b ) {                                                                        // 14631
            id = 8;                                                                                                    // 14632
            return compare( this, new BigNumber( y, b ) ) < 0;                                                         // 14633
        };                                                                                                             // 14634
                                                                                                                       // 14635
                                                                                                                       // 14636
        /*                                                                                                             // 14637
         * Return true if the value of this BigNumber is less than or equal to the value of                            // 14638
         * BigNumber(y, b), otherwise returns false.                                                                   // 14639
         */                                                                                                            // 14640
        P.lessThanOrEqualTo = P.lte = function ( y, b ) {                                                              // 14641
            id = 9;                                                                                                    // 14642
            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;                                   // 14643
        };                                                                                                             // 14644
                                                                                                                       // 14645
                                                                                                                       // 14646
        /*                                                                                                             // 14647
         *  n - 0 = n                                                                                                  // 14648
         *  n - N = N                                                                                                  // 14649
         *  n - I = -I                                                                                                 // 14650
         *  0 - n = -n                                                                                                 // 14651
         *  0 - 0 = 0                                                                                                  // 14652
         *  0 - N = N                                                                                                  // 14653
         *  0 - I = -I                                                                                                 // 14654
         *  N - n = N                                                                                                  // 14655
         *  N - 0 = N                                                                                                  // 14656
         *  N - N = N                                                                                                  // 14657
         *  N - I = N                                                                                                  // 14658
         *  I - n = I                                                                                                  // 14659
         *  I - 0 = I                                                                                                  // 14660
         *  I - N = N                                                                                                  // 14661
         *  I - I = N                                                                                                  // 14662
         *                                                                                                             // 14663
         * Return a new BigNumber whose value is the value of this BigNumber minus the value of                        // 14664
         * BigNumber(y, b).                                                                                            // 14665
         */                                                                                                            // 14666
        P.minus = P.sub = function ( y, b ) {                                                                          // 14667
            var i, j, t, xLTy,                                                                                         // 14668
                x = this,                                                                                              // 14669
                a = x.s;                                                                                               // 14670
                                                                                                                       // 14671
            id = 10;                                                                                                   // 14672
            y = new BigNumber( y, b );                                                                                 // 14673
            b = y.s;                                                                                                   // 14674
                                                                                                                       // 14675
            // Either NaN?                                                                                             // 14676
            if ( !a || !b ) return new BigNumber(NaN);                                                                 // 14677
                                                                                                                       // 14678
            // Signs differ?                                                                                           // 14679
            if ( a != b ) {                                                                                            // 14680
                y.s = -b;                                                                                              // 14681
                return x.plus(y);                                                                                      // 14682
            }                                                                                                          // 14683
                                                                                                                       // 14684
            var xe = x.e / LOG_BASE,                                                                                   // 14685
                ye = y.e / LOG_BASE,                                                                                   // 14686
                xc = x.c,                                                                                              // 14687
                yc = y.c;                                                                                              // 14688
                                                                                                                       // 14689
            if ( !xe || !ye ) {                                                                                        // 14690
                                                                                                                       // 14691
                // Either Infinity?                                                                                    // 14692
                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );                         // 14693
                                                                                                                       // 14694
                // Either zero?                                                                                        // 14695
                if ( !xc[0] || !yc[0] ) {                                                                              // 14696
                                                                                                                       // 14697
                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                        // 14698
                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :                                        // 14699
                                                                                                                       // 14700
                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity                                    // 14701
                      ROUNDING_MODE == 3 ? -0 : 0 );                                                                   // 14702
                }                                                                                                      // 14703
            }                                                                                                          // 14704
                                                                                                                       // 14705
            xe = bitFloor(xe);                                                                                         // 14706
            ye = bitFloor(ye);                                                                                         // 14707
            xc = xc.slice();                                                                                           // 14708
                                                                                                                       // 14709
            // Determine which is the bigger number.                                                                   // 14710
            if ( a = xe - ye ) {                                                                                       // 14711
                                                                                                                       // 14712
                if ( xLTy = a < 0 ) {                                                                                  // 14713
                    a = -a;                                                                                            // 14714
                    t = xc;                                                                                            // 14715
                } else {                                                                                               // 14716
                    ye = xe;                                                                                           // 14717
                    t = yc;                                                                                            // 14718
                }                                                                                                      // 14719
                                                                                                                       // 14720
                t.reverse();                                                                                           // 14721
                                                                                                                       // 14722
                // Prepend zeros to equalise exponents.                                                                // 14723
                for ( b = a; b--; t.push(0) );                                                                         // 14724
                t.reverse();                                                                                           // 14725
            } else {                                                                                                   // 14726
                                                                                                                       // 14727
                // Exponents equal. Check digit by digit.                                                              // 14728
                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;                                          // 14729
                                                                                                                       // 14730
                for ( a = b = 0; b < j; b++ ) {                                                                        // 14731
                                                                                                                       // 14732
                    if ( xc[b] != yc[b] ) {                                                                            // 14733
                        xLTy = xc[b] < yc[b];                                                                          // 14734
                        break;                                                                                         // 14735
                    }                                                                                                  // 14736
                }                                                                                                      // 14737
            }                                                                                                          // 14738
                                                                                                                       // 14739
            // x < y? Point xc to the array of the bigger number.                                                      // 14740
            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;                                                             // 14741
                                                                                                                       // 14742
            b = ( j = yc.length ) - ( i = xc.length );                                                                 // 14743
                                                                                                                       // 14744
            // Append zeros to xc if shorter.                                                                          // 14745
            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.                     // 14746
            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );                                                                   // 14747
            b = BASE - 1;                                                                                              // 14748
                                                                                                                       // 14749
            // Subtract yc from xc.                                                                                    // 14750
            for ( ; j > a; ) {                                                                                         // 14751
                                                                                                                       // 14752
                if ( xc[--j] < yc[j] ) {                                                                               // 14753
                    for ( i = j; i && !xc[--i]; xc[i] = b );                                                           // 14754
                    --xc[i];                                                                                           // 14755
                    xc[j] += BASE;                                                                                     // 14756
                }                                                                                                      // 14757
                                                                                                                       // 14758
                xc[j] -= yc[j];                                                                                        // 14759
            }                                                                                                          // 14760
                                                                                                                       // 14761
            // Remove leading zeros and adjust exponent accordingly.                                                   // 14762
            for ( ; xc[0] == 0; xc.shift(), --ye );                                                                    // 14763
                                                                                                                       // 14764
            // Zero?                                                                                                   // 14765
            if ( !xc[0] ) {                                                                                            // 14766
                                                                                                                       // 14767
                // Following IEEE 754 (2008) 6.3,                                                                      // 14768
                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.                                       // 14769
                y.s = ROUNDING_MODE == 3 ? -1 : 1;                                                                     // 14770
                y.c = [ y.e = 0 ];                                                                                     // 14771
                return y;                                                                                              // 14772
            }                                                                                                          // 14773
                                                                                                                       // 14774
            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity                             // 14775
            // for finite x and y.                                                                                     // 14776
            return normalise( y, xc, ye );                                                                             // 14777
        };                                                                                                             // 14778
                                                                                                                       // 14779
                                                                                                                       // 14780
        /*                                                                                                             // 14781
         *   n % 0 =  N                                                                                                // 14782
         *   n % N =  N                                                                                                // 14783
         *   n % I =  n                                                                                                // 14784
         *   0 % n =  0                                                                                                // 14785
         *  -0 % n = -0                                                                                                // 14786
         *   0 % 0 =  N                                                                                                // 14787
         *   0 % N =  N                                                                                                // 14788
         *   0 % I =  0                                                                                                // 14789
         *   N % n =  N                                                                                                // 14790
         *   N % 0 =  N                                                                                                // 14791
         *   N % N =  N                                                                                                // 14792
         *   N % I =  N                                                                                                // 14793
         *   I % n =  N                                                                                                // 14794
         *   I % 0 =  N                                                                                                // 14795
         *   I % N =  N                                                                                                // 14796
         *   I % I =  N                                                                                                // 14797
         *                                                                                                             // 14798
         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of                       // 14799
         * BigNumber(y, b). The result depends on the value of MODULO_MODE.                                            // 14800
         */                                                                                                            // 14801
        P.modulo = P.mod = function ( y, b ) {                                                                         // 14802
            var q, s,                                                                                                  // 14803
                x = this;                                                                                              // 14804
                                                                                                                       // 14805
            id = 11;                                                                                                   // 14806
            y = new BigNumber( y, b );                                                                                 // 14807
                                                                                                                       // 14808
            // Return NaN if x is Infinity or NaN, or y is NaN or zero.                                                // 14809
            if ( !x.c || !y.s || y.c && !y.c[0] ) {                                                                    // 14810
                return new BigNumber(NaN);                                                                             // 14811
                                                                                                                       // 14812
            // Return x if y is Infinity or x is zero.                                                                 // 14813
            } else if ( !y.c || x.c && !x.c[0] ) {                                                                     // 14814
                return new BigNumber(x);                                                                               // 14815
            }                                                                                                          // 14816
                                                                                                                       // 14817
            if ( MODULO_MODE == 9 ) {                                                                                  // 14818
                                                                                                                       // 14819
                // Euclidian division: q = sign(y) * floor(x / abs(y))                                                 // 14820
                // r = x - qy    where  0 <= r < abs(y)                                                                // 14821
                s = y.s;                                                                                               // 14822
                y.s = 1;                                                                                               // 14823
                q = div( x, y, 0, 3 );                                                                                 // 14824
                y.s = s;                                                                                               // 14825
                q.s *= s;                                                                                              // 14826
            } else {                                                                                                   // 14827
                q = div( x, y, 0, MODULO_MODE );                                                                       // 14828
            }                                                                                                          // 14829
                                                                                                                       // 14830
            return x.minus( q.times(y) );                                                                              // 14831
        };                                                                                                             // 14832
                                                                                                                       // 14833
                                                                                                                       // 14834
        /*                                                                                                             // 14835
         * Return a new BigNumber whose value is the value of this BigNumber negated,                                  // 14836
         * i.e. multiplied by -1.                                                                                      // 14837
         */                                                                                                            // 14838
        P.negated = P.neg = function () {                                                                              // 14839
            var x = new BigNumber(this);                                                                               // 14840
            x.s = -x.s || null;                                                                                        // 14841
            return x;                                                                                                  // 14842
        };                                                                                                             // 14843
                                                                                                                       // 14844
                                                                                                                       // 14845
        /*                                                                                                             // 14846
         *  n + 0 = n                                                                                                  // 14847
         *  n + N = N                                                                                                  // 14848
         *  n + I = I                                                                                                  // 14849
         *  0 + n = n                                                                                                  // 14850
         *  0 + 0 = 0                                                                                                  // 14851
         *  0 + N = N                                                                                                  // 14852
         *  0 + I = I                                                                                                  // 14853
         *  N + n = N                                                                                                  // 14854
         *  N + 0 = N                                                                                                  // 14855
         *  N + N = N                                                                                                  // 14856
         *  N + I = N                                                                                                  // 14857
         *  I + n = I                                                                                                  // 14858
         *  I + 0 = I                                                                                                  // 14859
         *  I + N = N                                                                                                  // 14860
         *  I + I = I                                                                                                  // 14861
         *                                                                                                             // 14862
         * Return a new BigNumber whose value is the value of this BigNumber plus the value of                         // 14863
         * BigNumber(y, b).                                                                                            // 14864
         */                                                                                                            // 14865
        P.plus = P.add = function ( y, b ) {                                                                           // 14866
            var t,                                                                                                     // 14867
                x = this,                                                                                              // 14868
                a = x.s;                                                                                               // 14869
                                                                                                                       // 14870
            id = 12;                                                                                                   // 14871
            y = new BigNumber( y, b );                                                                                 // 14872
            b = y.s;                                                                                                   // 14873
                                                                                                                       // 14874
            // Either NaN?                                                                                             // 14875
            if ( !a || !b ) return new BigNumber(NaN);                                                                 // 14876
                                                                                                                       // 14877
            // Signs differ?                                                                                           // 14878
             if ( a != b ) {                                                                                           // 14879
                y.s = -b;                                                                                              // 14880
                return x.minus(y);                                                                                     // 14881
            }                                                                                                          // 14882
                                                                                                                       // 14883
            var xe = x.e / LOG_BASE,                                                                                   // 14884
                ye = y.e / LOG_BASE,                                                                                   // 14885
                xc = x.c,                                                                                              // 14886
                yc = y.c;                                                                                              // 14887
                                                                                                                       // 14888
            if ( !xe || !ye ) {                                                                                        // 14889
                                                                                                                       // 14890
                // Return ±Infinity if either ±Infinity.                                                               // 14891
                if ( !xc || !yc ) return new BigNumber( a / 0 );                                                       // 14892
                                                                                                                       // 14893
                // Either zero?                                                                                        // 14894
                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                            // 14895
                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );                         // 14896
            }                                                                                                          // 14897
                                                                                                                       // 14898
            xe = bitFloor(xe);                                                                                         // 14899
            ye = bitFloor(ye);                                                                                         // 14900
            xc = xc.slice();                                                                                           // 14901
                                                                                                                       // 14902
            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.                            // 14903
            if ( a = xe - ye ) {                                                                                       // 14904
                if ( a > 0 ) {                                                                                         // 14905
                    ye = xe;                                                                                           // 14906
                    t = yc;                                                                                            // 14907
                } else {                                                                                               // 14908
                    a = -a;                                                                                            // 14909
                    t = xc;                                                                                            // 14910
                }                                                                                                      // 14911
                                                                                                                       // 14912
                t.reverse();                                                                                           // 14913
                for ( ; a--; t.push(0) );                                                                              // 14914
                t.reverse();                                                                                           // 14915
            }                                                                                                          // 14916
                                                                                                                       // 14917
            a = xc.length;                                                                                             // 14918
            b = yc.length;                                                                                             // 14919
                                                                                                                       // 14920
            // Point xc to the longer array, and b to the shorter length.                                              // 14921
            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;                                                           // 14922
                                                                                                                       // 14923
            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.                          // 14924
            for ( a = 0; b; ) {                                                                                        // 14925
                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;                                                        // 14926
                xc[b] %= BASE;                                                                                         // 14927
            }                                                                                                          // 14928
                                                                                                                       // 14929
            if (a) {                                                                                                   // 14930
                xc.unshift(a);                                                                                         // 14931
                ++ye;                                                                                                  // 14932
            }                                                                                                          // 14933
                                                                                                                       // 14934
            // No need to check for zero, as +x + +y != 0 && -x + -y != 0                                              // 14935
            // ye = MAX_EXP + 1 possible                                                                               // 14936
            return normalise( y, xc, ye );                                                                             // 14937
        };                                                                                                             // 14938
                                                                                                                       // 14939
                                                                                                                       // 14940
        /*                                                                                                             // 14941
         * Return the number of significant digits of the value of this BigNumber.                                     // 14942
         *                                                                                                             // 14943
         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.                     // 14944
         */                                                                                                            // 14945
        P.precision = P.sd = function (z) {                                                                            // 14946
            var n, v,                                                                                                  // 14947
                x = this,                                                                                              // 14948
                c = x.c;                                                                                               // 14949
                                                                                                                       // 14950
            // 'precision() argument not a boolean or binary digit: {z}'                                               // 14951
            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {                                                      // 14952
                if (ERRORS) raise( 13, 'argument' + notBool, z );                                                      // 14953
                if ( z != !!z ) z = null;                                                                              // 14954
            }                                                                                                          // 14955
                                                                                                                       // 14956
            if ( !c ) return null;                                                                                     // 14957
            v = c.length - 1;                                                                                          // 14958
            n = v * LOG_BASE + 1;                                                                                      // 14959
                                                                                                                       // 14960
            if ( v = c[v] ) {                                                                                          // 14961
                                                                                                                       // 14962
                // Subtract the number of trailing zeros of the last element.                                          // 14963
                for ( ; v % 10 == 0; v /= 10, n-- );                                                                   // 14964
                                                                                                                       // 14965
                // Add the number of digits of the first element.                                                      // 14966
                for ( v = c[0]; v >= 10; v /= 10, n++ );                                                               // 14967
            }                                                                                                          // 14968
                                                                                                                       // 14969
            if ( z && x.e + 1 > n ) n = x.e + 1;                                                                       // 14970
                                                                                                                       // 14971
            return n;                                                                                                  // 14972
        };                                                                                                             // 14973
                                                                                                                       // 14974
                                                                                                                       // 14975
        /*                                                                                                             // 14976
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                   // 14977
         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if                         // 14978
         * omitted.                                                                                                    // 14979
         *                                                                                                             // 14980
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 14981
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 14982
         *                                                                                                             // 14983
         * 'round() decimal places out of range: {dp}'                                                                 // 14984
         * 'round() decimal places not an integer: {dp}'                                                               // 14985
         * 'round() rounding mode not an integer: {rm}'                                                                // 14986
         * 'round() rounding mode out of range: {rm}'                                                                  // 14987
         */                                                                                                            // 14988
        P.round = function ( dp, rm ) {                                                                                // 14989
            var n = new BigNumber(this);                                                                               // 14990
                                                                                                                       // 14991
            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {                                                        // 14992
                round( n, ~~dp + this.e + 1, rm == null ||                                                             // 14993
                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );                                // 14994
            }                                                                                                          // 14995
                                                                                                                       // 14996
            return n;                                                                                                  // 14997
        };                                                                                                             // 14998
                                                                                                                       // 14999
                                                                                                                       // 15000
        /*                                                                                                             // 15001
         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places                       // 15002
         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.                                      // 15003
         *                                                                                                             // 15004
         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.                                        // 15005
         *                                                                                                             // 15006
         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity                      // 15007
         * otherwise.                                                                                                  // 15008
         *                                                                                                             // 15009
         * 'shift() argument not an integer: {k}'                                                                      // 15010
         * 'shift() argument out of range: {k}'                                                                        // 15011
         */                                                                                                            // 15012
        P.shift = function (k) {                                                                                       // 15013
            var n = this;                                                                                              // 15014
            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )                                // 15015
                                                                                                                       // 15016
              // k < 1e+21, or truncate(k) will produce exponential notation.                                          // 15017
              ? n.times( '1e' + truncate(k) )                                                                          // 15018
              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )                      // 15019
                ? n.s * ( k < 0 ? 0 : 1 / 0 )                                                                          // 15020
                : n );                                                                                                 // 15021
        };                                                                                                             // 15022
                                                                                                                       // 15023
                                                                                                                       // 15024
        /*                                                                                                             // 15025
         *  sqrt(-n) =  N                                                                                              // 15026
         *  sqrt( N) =  N                                                                                              // 15027
         *  sqrt(-I) =  N                                                                                              // 15028
         *  sqrt( I) =  I                                                                                              // 15029
         *  sqrt( 0) =  0                                                                                              // 15030
         *  sqrt(-0) = -0                                                                                              // 15031
         *                                                                                                             // 15032
         * Return a new BigNumber whose value is the square root of the value of this BigNumber,                       // 15033
         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                                      // 15034
         */                                                                                                            // 15035
        P.squareRoot = P.sqrt = function () {                                                                          // 15036
            var m, n, r, rep, t,                                                                                       // 15037
                x = this,                                                                                              // 15038
                c = x.c,                                                                                               // 15039
                s = x.s,                                                                                               // 15040
                e = x.e,                                                                                               // 15041
                dp = DECIMAL_PLACES + 4,                                                                               // 15042
                half = new BigNumber('0.5');                                                                           // 15043
                                                                                                                       // 15044
            // Negative/NaN/Infinity/zero?                                                                             // 15045
            if ( s !== 1 || !c || !c[0] ) {                                                                            // 15046
                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );                           // 15047
            }                                                                                                          // 15048
                                                                                                                       // 15049
            // Initial estimate.                                                                                       // 15050
            s = Math.sqrt( +x );                                                                                       // 15051
                                                                                                                       // 15052
            // Math.sqrt underflow/overflow?                                                                           // 15053
            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.                                 // 15054
            if ( s == 0 || s == 1 / 0 ) {                                                                              // 15055
                n = coeffToString(c);                                                                                  // 15056
                if ( ( n.length + e ) % 2 == 0 ) n += '0';                                                             // 15057
                s = Math.sqrt(n);                                                                                      // 15058
                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );                                                    // 15059
                                                                                                                       // 15060
                if ( s == 1 / 0 ) {                                                                                    // 15061
                    n = '1e' + e;                                                                                      // 15062
                } else {                                                                                               // 15063
                    n = s.toExponential();                                                                             // 15064
                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;                                                          // 15065
                }                                                                                                      // 15066
                                                                                                                       // 15067
                r = new BigNumber(n);                                                                                  // 15068
            } else {                                                                                                   // 15069
                r = new BigNumber( s + '' );                                                                           // 15070
            }                                                                                                          // 15071
                                                                                                                       // 15072
            // Check for zero.                                                                                         // 15073
            // r could be zero if MIN_EXP is changed after the this value was created.                                 // 15074
            // This would cause a division by zero (x/t) and hence Infinity below, which would cause                   // 15075
            // coeffToString to throw.                                                                                 // 15076
            if ( r.c[0] ) {                                                                                            // 15077
                e = r.e;                                                                                               // 15078
                s = e + dp;                                                                                            // 15079
                if ( s < 3 ) s = 0;                                                                                    // 15080
                                                                                                                       // 15081
                // Newton-Raphson iteration.                                                                           // 15082
                for ( ; ; ) {                                                                                          // 15083
                    t = r;                                                                                             // 15084
                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );                                                    // 15085
                                                                                                                       // 15086
                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =                                                // 15087
                         coeffToString( r.c ) ).slice( 0, s ) ) {                                                      // 15088
                                                                                                                       // 15089
                        // The exponent of r may here be one less than the final result exponent,                      // 15090
                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits                     // 15091
                        // are indexed correctly.                                                                      // 15092
                        if ( r.e < e ) --s;                                                                            // 15093
                        n = n.slice( s - 3, s + 1 );                                                                   // 15094
                                                                                                                       // 15095
                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits                    // 15096
                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the                        // 15097
                        // iteration.                                                                                  // 15098
                        if ( n == '9999' || !rep && n == '4999' ) {                                                    // 15099
                                                                                                                       // 15100
                            // On the first iteration only, check to see if rounding up gives the                      // 15101
                            // exact result as the nines may infinitely repeat.                                        // 15102
                            if ( !rep ) {                                                                              // 15103
                                round( t, t.e + DECIMAL_PLACES + 2, 0 );                                               // 15104
                                                                                                                       // 15105
                                if ( t.times(t).eq(x) ) {                                                              // 15106
                                    r = t;                                                                             // 15107
                                    break;                                                                             // 15108
                                }                                                                                      // 15109
                            }                                                                                          // 15110
                                                                                                                       // 15111
                            dp += 4;                                                                                   // 15112
                            s += 4;                                                                                    // 15113
                            rep = 1;                                                                                   // 15114
                        } else {                                                                                       // 15115
                                                                                                                       // 15116
                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact                         // 15117
                            // result. If not, then there are further digits and m will be truthy.                     // 15118
                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {                                         // 15119
                                                                                                                       // 15120
                                // Truncate to the first rounding digit.                                               // 15121
                                round( r, r.e + DECIMAL_PLACES + 2, 1 );                                               // 15122
                                m = !r.times(r).eq(x);                                                                 // 15123
                            }                                                                                          // 15124
                                                                                                                       // 15125
                            break;                                                                                     // 15126
                        }                                                                                              // 15127
                    }                                                                                                  // 15128
                }                                                                                                      // 15129
            }                                                                                                          // 15130
                                                                                                                       // 15131
            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );                                             // 15132
        };                                                                                                             // 15133
                                                                                                                       // 15134
                                                                                                                       // 15135
        /*                                                                                                             // 15136
         *  n * 0 = 0                                                                                                  // 15137
         *  n * N = N                                                                                                  // 15138
         *  n * I = I                                                                                                  // 15139
         *  0 * n = 0                                                                                                  // 15140
         *  0 * 0 = 0                                                                                                  // 15141
         *  0 * N = N                                                                                                  // 15142
         *  0 * I = N                                                                                                  // 15143
         *  N * n = N                                                                                                  // 15144
         *  N * 0 = N                                                                                                  // 15145
         *  N * N = N                                                                                                  // 15146
         *  N * I = N                                                                                                  // 15147
         *  I * n = I                                                                                                  // 15148
         *  I * 0 = N                                                                                                  // 15149
         *  I * N = N                                                                                                  // 15150
         *  I * I = I                                                                                                  // 15151
         *                                                                                                             // 15152
         * Return a new BigNumber whose value is the value of this BigNumber times the value of                        // 15153
         * BigNumber(y, b).                                                                                            // 15154
         */                                                                                                            // 15155
        P.times = P.mul = function ( y, b ) {                                                                          // 15156
            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,                                                    // 15157
                base, sqrtBase,                                                                                        // 15158
                x = this,                                                                                              // 15159
                xc = x.c,                                                                                              // 15160
                yc = ( id = 17, y = new BigNumber( y, b ) ).c;                                                         // 15161
                                                                                                                       // 15162
            // Either NaN, ±Infinity or ±0?                                                                            // 15163
            if ( !xc || !yc || !xc[0] || !yc[0] ) {                                                                    // 15164
                                                                                                                       // 15165
                // Return NaN if either is NaN, or one is 0 and the other is Infinity.                                 // 15166
                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {                                    // 15167
                    y.c = y.e = y.s = null;                                                                            // 15168
                } else {                                                                                               // 15169
                    y.s *= x.s;                                                                                        // 15170
                                                                                                                       // 15171
                    // Return ±Infinity if either is ±Infinity.                                                        // 15172
                    if ( !xc || !yc ) {                                                                                // 15173
                        y.c = y.e = null;                                                                              // 15174
                                                                                                                       // 15175
                    // Return ±0 if either is ±0.                                                                      // 15176
                    } else {                                                                                           // 15177
                        y.c = [0];                                                                                     // 15178
                        y.e = 0;                                                                                       // 15179
                    }                                                                                                  // 15180
                }                                                                                                      // 15181
                                                                                                                       // 15182
                return y;                                                                                              // 15183
            }                                                                                                          // 15184
                                                                                                                       // 15185
            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );                                               // 15186
            y.s *= x.s;                                                                                                // 15187
            xcL = xc.length;                                                                                           // 15188
            ycL = yc.length;                                                                                           // 15189
                                                                                                                       // 15190
            // Ensure xc points to longer array and xcL to its length.                                                 // 15191
            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;                                   // 15192
                                                                                                                       // 15193
            // Initialise the result array with zeros.                                                                 // 15194
            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );                                                           // 15195
                                                                                                                       // 15196
            base = BASE;                                                                                               // 15197
            sqrtBase = SQRT_BASE;                                                                                      // 15198
                                                                                                                       // 15199
            for ( i = ycL; --i >= 0; ) {                                                                               // 15200
                c = 0;                                                                                                 // 15201
                ylo = yc[i] % sqrtBase;                                                                                // 15202
                yhi = yc[i] / sqrtBase | 0;                                                                            // 15203
                                                                                                                       // 15204
                for ( k = xcL, j = i + k; j > i; ) {                                                                   // 15205
                    xlo = xc[--k] % sqrtBase;                                                                          // 15206
                    xhi = xc[k] / sqrtBase | 0;                                                                        // 15207
                    m = yhi * xlo + xhi * ylo;                                                                         // 15208
                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;                                     // 15209
                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;                                         // 15210
                    zc[j--] = xlo % base;                                                                              // 15211
                }                                                                                                      // 15212
                                                                                                                       // 15213
                zc[j] = c;                                                                                             // 15214
            }                                                                                                          // 15215
                                                                                                                       // 15216
            if (c) {                                                                                                   // 15217
                ++e;                                                                                                   // 15218
            } else {                                                                                                   // 15219
                zc.shift();                                                                                            // 15220
            }                                                                                                          // 15221
                                                                                                                       // 15222
            return normalise( y, zc, e );                                                                              // 15223
        };                                                                                                             // 15224
                                                                                                                       // 15225
                                                                                                                       // 15226
        /*                                                                                                             // 15227
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                   // 15228
         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.                            // 15229
         *                                                                                                             // 15230
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                              // 15231
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15232
         *                                                                                                             // 15233
         * 'toDigits() precision out of range: {sd}'                                                                   // 15234
         * 'toDigits() precision not an integer: {sd}'                                                                 // 15235
         * 'toDigits() rounding mode not an integer: {rm}'                                                             // 15236
         * 'toDigits() rounding mode out of range: {rm}'                                                               // 15237
         */                                                                                                            // 15238
        P.toDigits = function ( sd, rm ) {                                                                             // 15239
            var n = new BigNumber(this);                                                                               // 15240
            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;                             // 15241
            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;                     // 15242
            return sd ? round( n, sd, rm ) : n;                                                                        // 15243
        };                                                                                                             // 15244
                                                                                                                       // 15245
                                                                                                                       // 15246
        /*                                                                                                             // 15247
         * Return a string representing the value of this BigNumber in exponential notation and                        // 15248
         * rounded using ROUNDING_MODE to dp fixed decimal places.                                                     // 15249
         *                                                                                                             // 15250
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 15251
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15252
         *                                                                                                             // 15253
         * 'toExponential() decimal places not an integer: {dp}'                                                       // 15254
         * 'toExponential() decimal places out of range: {dp}'                                                         // 15255
         * 'toExponential() rounding mode not an integer: {rm}'                                                        // 15256
         * 'toExponential() rounding mode out of range: {rm}'                                                          // 15257
         */                                                                                                            // 15258
        P.toExponential = function ( dp, rm ) {                                                                        // 15259
            return format( this,                                                                                       // 15260
              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );                                  // 15261
        };                                                                                                             // 15262
                                                                                                                       // 15263
                                                                                                                       // 15264
        /*                                                                                                             // 15265
         * Return a string representing the value of this BigNumber in fixed-point notation rounding                   // 15266
         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.                       // 15267
         *                                                                                                             // 15268
         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',                                             // 15269
         * but e.g. (-0.00001).toFixed(0) is '-0'.                                                                     // 15270
         *                                                                                                             // 15271
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 15272
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15273
         *                                                                                                             // 15274
         * 'toFixed() decimal places not an integer: {dp}'                                                             // 15275
         * 'toFixed() decimal places out of range: {dp}'                                                               // 15276
         * 'toFixed() rounding mode not an integer: {rm}'                                                              // 15277
         * 'toFixed() rounding mode out of range: {rm}'                                                                // 15278
         */                                                                                                            // 15279
        P.toFixed = function ( dp, rm ) {                                                                              // 15280
            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )                                            // 15281
              ? ~~dp + this.e + 1 : null, rm, 20 );                                                                    // 15282
        };                                                                                                             // 15283
                                                                                                                       // 15284
                                                                                                                       // 15285
        /*                                                                                                             // 15286
         * Return a string representing the value of this BigNumber in fixed-point notation rounded                    // 15287
         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties                   // 15288
         * of the FORMAT object (see BigNumber.config).                                                                // 15289
         *                                                                                                             // 15290
         * FORMAT = {                                                                                                  // 15291
         *      decimalSeparator : '.',                                                                                // 15292
         *      groupSeparator : ',',                                                                                  // 15293
         *      groupSize : 3,                                                                                         // 15294
         *      secondaryGroupSize : 0,                                                                                // 15295
         *      fractionGroupSeparator : '\xA0',    // non-breaking space                                              // 15296
         *      fractionGroupSize : 0                                                                                  // 15297
         * };                                                                                                          // 15298
         *                                                                                                             // 15299
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 15300
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15301
         *                                                                                                             // 15302
         * 'toFormat() decimal places not an integer: {dp}'                                                            // 15303
         * 'toFormat() decimal places out of range: {dp}'                                                              // 15304
         * 'toFormat() rounding mode not an integer: {rm}'                                                             // 15305
         * 'toFormat() rounding mode out of range: {rm}'                                                               // 15306
         */                                                                                                            // 15307
        P.toFormat = function ( dp, rm ) {                                                                             // 15308
            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )                                         // 15309
              ? ~~dp + this.e + 1 : null, rm, 21 );                                                                    // 15310
                                                                                                                       // 15311
            if ( this.c ) {                                                                                            // 15312
                var i,                                                                                                 // 15313
                    arr = str.split('.'),                                                                              // 15314
                    g1 = +FORMAT.groupSize,                                                                            // 15315
                    g2 = +FORMAT.secondaryGroupSize,                                                                   // 15316
                    groupSeparator = FORMAT.groupSeparator,                                                            // 15317
                    intPart = arr[0],                                                                                  // 15318
                    fractionPart = arr[1],                                                                             // 15319
                    isNeg = this.s < 0,                                                                                // 15320
                    intDigits = isNeg ? intPart.slice(1) : intPart,                                                    // 15321
                    len = intDigits.length;                                                                            // 15322
                                                                                                                       // 15323
                if (g2) i = g1, g1 = g2, g2 = i, len -= i;                                                             // 15324
                                                                                                                       // 15325
                if ( g1 > 0 && len > 0 ) {                                                                             // 15326
                    i = len % g1 || g1;                                                                                // 15327
                    intPart = intDigits.substr( 0, i );                                                                // 15328
                                                                                                                       // 15329
                    for ( ; i < len; i += g1 ) {                                                                       // 15330
                        intPart += groupSeparator + intDigits.substr( i, g1 );                                         // 15331
                    }                                                                                                  // 15332
                                                                                                                       // 15333
                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);                                      // 15334
                    if (isNeg) intPart = '-' + intPart;                                                                // 15335
                }                                                                                                      // 15336
                                                                                                                       // 15337
                str = fractionPart                                                                                     // 15338
                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )                           // 15339
                    ? fractionPart.replace( new RegExp( '\\d{' + g2 + '}\\B', 'g' ),                                   // 15340
                      '$&' + FORMAT.fractionGroupSeparator )                                                           // 15341
                    : fractionPart )                                                                                   // 15342
                  : intPart;                                                                                           // 15343
            }                                                                                                          // 15344
                                                                                                                       // 15345
            return str;                                                                                                // 15346
        };                                                                                                             // 15347
                                                                                                                       // 15348
                                                                                                                       // 15349
        /*                                                                                                             // 15350
         * Return a string array representing the value of this BigNumber as a simple fraction with                    // 15351
         * an integer numerator and an integer denominator. The denominator will be a positive                         // 15352
         * non-zero value less than or equal to the specified maximum denominator. If a maximum                        // 15353
         * denominator is not specified, the denominator will be the lowest value necessary to                         // 15354
         * represent the number exactly.                                                                               // 15355
         *                                                                                                             // 15356
         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.                        // 15357
         *                                                                                                             // 15358
         * 'toFraction() max denominator not an integer: {md}'                                                         // 15359
         * 'toFraction() max denominator out of range: {md}'                                                           // 15360
         */                                                                                                            // 15361
        P.toFraction = function (md) {                                                                                 // 15362
            var arr, d0, d2, e, exp, n, n0, q, s,                                                                      // 15363
                k = ERRORS,                                                                                            // 15364
                x = this,                                                                                              // 15365
                xc = x.c,                                                                                              // 15366
                d = new BigNumber(ONE),                                                                                // 15367
                n1 = d0 = new BigNumber(ONE),                                                                          // 15368
                d1 = n0 = new BigNumber(ONE);                                                                          // 15369
                                                                                                                       // 15370
            if ( md != null ) {                                                                                        // 15371
                ERRORS = false;                                                                                        // 15372
                n = new BigNumber(md);                                                                                 // 15373
                ERRORS = k;                                                                                            // 15374
                                                                                                                       // 15375
                if ( !( k = n.isInt() ) || n.lt(ONE) ) {                                                               // 15376
                                                                                                                       // 15377
                    if (ERRORS) {                                                                                      // 15378
                        raise( 22,                                                                                     // 15379
                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );                        // 15380
                    }                                                                                                  // 15381
                                                                                                                       // 15382
                    // ERRORS is false:                                                                                // 15383
                    // If md is a finite non-integer >= 1, round it to an integer and use it.                          // 15384
                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;                                      // 15385
                }                                                                                                      // 15386
            }                                                                                                          // 15387
                                                                                                                       // 15388
            if ( !xc ) return x.toString();                                                                            // 15389
            s = coeffToString(xc);                                                                                     // 15390
                                                                                                                       // 15391
            // Determine initial denominator.                                                                          // 15392
            // d is a power of 10 and the minimum max denominator that specifies the value exactly.                    // 15393
            e = d.e = s.length - x.e - 1;                                                                              // 15394
            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];                                    // 15395
            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;                                                         // 15396
                                                                                                                       // 15397
            exp = MAX_EXP;                                                                                             // 15398
            MAX_EXP = 1 / 0;                                                                                           // 15399
            n = new BigNumber(s);                                                                                      // 15400
                                                                                                                       // 15401
            // n0 = d1 = 0                                                                                             // 15402
            n0.c[0] = 0;                                                                                               // 15403
                                                                                                                       // 15404
            for ( ; ; )  {                                                                                             // 15405
                q = div( n, d, 0, 1 );                                                                                 // 15406
                d2 = d0.plus( q.times(d1) );                                                                           // 15407
                if ( d2.cmp(md) == 1 ) break;                                                                          // 15408
                d0 = d1;                                                                                               // 15409
                d1 = d2;                                                                                               // 15410
                n1 = n0.plus( q.times( d2 = n1 ) );                                                                    // 15411
                n0 = d2;                                                                                               // 15412
                d = n.minus( q.times( d2 = d ) );                                                                      // 15413
                n = d2;                                                                                                // 15414
            }                                                                                                          // 15415
                                                                                                                       // 15416
            d2 = div( md.minus(d0), d1, 0, 1 );                                                                        // 15417
            n0 = n0.plus( d2.times(n1) );                                                                              // 15418
            d0 = d0.plus( d2.times(d1) );                                                                              // 15419
            n0.s = n1.s = x.s;                                                                                         // 15420
            e *= 2;                                                                                                    // 15421
                                                                                                                       // 15422
            // Determine which fraction is closer to x, n0/d0 or n1/d1                                                 // 15423
            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(                                                  // 15424
                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1                                                 // 15425
                    ? [ n1.toString(), d1.toString() ]                                                                 // 15426
                    : [ n0.toString(), d0.toString() ];                                                                // 15427
                                                                                                                       // 15428
            MAX_EXP = exp;                                                                                             // 15429
            return arr;                                                                                                // 15430
        };                                                                                                             // 15431
                                                                                                                       // 15432
                                                                                                                       // 15433
        /*                                                                                                             // 15434
         * Return the value of this BigNumber converted to a number primitive.                                         // 15435
         */                                                                                                            // 15436
        P.toNumber = function () {                                                                                     // 15437
            var x = this;                                                                                              // 15438
                                                                                                                       // 15439
            // Ensure zero has correct sign.                                                                           // 15440
            return +x || ( x.s ? x.s * 0 : NaN );                                                                      // 15441
        };                                                                                                             // 15442
                                                                                                                       // 15443
                                                                                                                       // 15444
        /*                                                                                                             // 15445
         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.                        // 15446
         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.                                       // 15447
         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.                                      // 15448
         *                                                                                                             // 15449
         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.                                        // 15450
         * (Performs 54 loop iterations for n of 9007199254740992.)                                                    // 15451
         *                                                                                                             // 15452
         * 'pow() exponent not an integer: {n}'                                                                        // 15453
         * 'pow() exponent out of range: {n}'                                                                          // 15454
         */                                                                                                            // 15455
        P.toPower = P.pow = function (n) {                                                                             // 15456
            var k, y,                                                                                                  // 15457
                i = mathfloor( n < 0 ? -n : +n ),                                                                      // 15458
                x = this;                                                                                              // 15459
                                                                                                                       // 15460
            // Pass ±Infinity to Math.pow if exponent is out of range.                                                 // 15461
            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&                              // 15462
              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||                                                  // 15463
                parseFloat(n) != n && !( n = NaN ) ) ) {                                                               // 15464
                return new BigNumber( Math.pow( +x, n ) );                                                             // 15465
            }                                                                                                          // 15466
                                                                                                                       // 15467
            // Truncating each coefficient array to a length of k after each multiplication equates                    // 15468
            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a                      // 15469
            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)                     // 15470
            k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;                                          // 15471
            y = new BigNumber(ONE);                                                                                    // 15472
                                                                                                                       // 15473
            for ( ; ; ) {                                                                                              // 15474
                                                                                                                       // 15475
                if ( i % 2 ) {                                                                                         // 15476
                    y = y.times(x);                                                                                    // 15477
                    if ( !y.c ) break;                                                                                 // 15478
                    if ( k && y.c.length > k ) y.c.length = k;                                                         // 15479
                }                                                                                                      // 15480
                                                                                                                       // 15481
                i = mathfloor( i / 2 );                                                                                // 15482
                if ( !i ) break;                                                                                       // 15483
                                                                                                                       // 15484
                x = x.times(x);                                                                                        // 15485
                if ( k && x.c && x.c.length > k ) x.c.length = k;                                                      // 15486
            }                                                                                                          // 15487
                                                                                                                       // 15488
            if ( n < 0 ) y = ONE.div(y);                                                                               // 15489
            return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;                                                   // 15490
        };                                                                                                             // 15491
                                                                                                                       // 15492
                                                                                                                       // 15493
        /*                                                                                                             // 15494
         * Return a string representing the value of this BigNumber rounded to sd significant digits                   // 15495
         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits                            // 15496
         * necessary to represent the integer part of the value in fixed-point notation, then use                      // 15497
         * exponential notation.                                                                                       // 15498
         *                                                                                                             // 15499
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                              // 15500
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15501
         *                                                                                                             // 15502
         * 'toPrecision() precision not an integer: {sd}'                                                              // 15503
         * 'toPrecision() precision out of range: {sd}'                                                                // 15504
         * 'toPrecision() rounding mode not an integer: {rm}'                                                          // 15505
         * 'toPrecision() rounding mode out of range: {rm}'                                                            // 15506
         */                                                                                                            // 15507
        P.toPrecision = function ( sd, rm ) {                                                                          // 15508
            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )                               // 15509
              ? sd | 0 : null, rm, 24 );                                                                               // 15510
        };                                                                                                             // 15511
                                                                                                                       // 15512
                                                                                                                       // 15513
        /*                                                                                                             // 15514
         * Return a string representing the value of this BigNumber in base b, or base 10 if b is                      // 15515
         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and                   // 15516
         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent                       // 15517
         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than                   // 15518
         * TO_EXP_NEG, return exponential notation.                                                                    // 15519
         *                                                                                                             // 15520
         * [b] {number} Integer, 2 to 64 inclusive.                                                                    // 15521
         *                                                                                                             // 15522
         * 'toString() base not an integer: {b}'                                                                       // 15523
         * 'toString() base out of range: {b}'                                                                         // 15524
         */                                                                                                            // 15525
        P.toString = function (b) {                                                                                    // 15526
            var str,                                                                                                   // 15527
                n = this,                                                                                              // 15528
                s = n.s,                                                                                               // 15529
                e = n.e;                                                                                               // 15530
                                                                                                                       // 15531
            // Infinity or NaN?                                                                                        // 15532
            if ( e === null ) {                                                                                        // 15533
                                                                                                                       // 15534
                if (s) {                                                                                               // 15535
                    str = 'Infinity';                                                                                  // 15536
                    if ( s < 0 ) str = '-' + str;                                                                      // 15537
                } else {                                                                                               // 15538
                    str = 'NaN';                                                                                       // 15539
                }                                                                                                      // 15540
            } else {                                                                                                   // 15541
                str = coeffToString( n.c );                                                                            // 15542
                                                                                                                       // 15543
                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {                                              // 15544
                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS                                                           // 15545
                      ? toExponential( str, e )                                                                        // 15546
                      : toFixedPoint( str, e );                                                                        // 15547
                } else {                                                                                               // 15548
                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );                                         // 15549
                }                                                                                                      // 15550
                                                                                                                       // 15551
                if ( s < 0 && n.c[0] ) str = '-' + str;                                                                // 15552
            }                                                                                                          // 15553
                                                                                                                       // 15554
            return str;                                                                                                // 15555
        };                                                                                                             // 15556
                                                                                                                       // 15557
                                                                                                                       // 15558
        /*                                                                                                             // 15559
         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole                      // 15560
         * number.                                                                                                     // 15561
         */                                                                                                            // 15562
        P.truncated = P.trunc = function () {                                                                          // 15563
            return round( new BigNumber(this), this.e + 1, 1 );                                                        // 15564
        };                                                                                                             // 15565
                                                                                                                       // 15566
                                                                                                                       // 15567
                                                                                                                       // 15568
        /*                                                                                                             // 15569
         * Return as toString, but do not accept a base argument.                                                      // 15570
         */                                                                                                            // 15571
        P.valueOf = P.toJSON = function () {                                                                           // 15572
            return this.toString();                                                                                    // 15573
        };                                                                                                             // 15574
                                                                                                                       // 15575
                                                                                                                       // 15576
        // Aliases for BigDecimal methods.                                                                             // 15577
        //P.add = P.plus;         // P.add included above                                                              // 15578
        //P.subtract = P.minus;   // P.sub included above                                                              // 15579
        //P.multiply = P.times;   // P.mul included above                                                              // 15580
        //P.divide = P.div;                                                                                            // 15581
        //P.remainder = P.mod;                                                                                         // 15582
        //P.compareTo = P.cmp;                                                                                         // 15583
        //P.negate = P.neg;                                                                                            // 15584
                                                                                                                       // 15585
                                                                                                                       // 15586
        if ( configObj != null ) BigNumber.config(configObj);                                                          // 15587
                                                                                                                       // 15588
        return BigNumber;                                                                                              // 15589
    }                                                                                                                  // 15590
                                                                                                                       // 15591
                                                                                                                       // 15592
    // PRIVATE HELPER FUNCTIONS                                                                                        // 15593
                                                                                                                       // 15594
                                                                                                                       // 15595
    function bitFloor(n) {                                                                                             // 15596
        var i = n | 0;                                                                                                 // 15597
        return n > 0 || n === i ? i : i - 1;                                                                           // 15598
    }                                                                                                                  // 15599
                                                                                                                       // 15600
                                                                                                                       // 15601
    // Return a coefficient array as a string of base 10 digits.                                                       // 15602
    function coeffToString(a) {                                                                                        // 15603
        var s, z,                                                                                                      // 15604
            i = 1,                                                                                                     // 15605
            j = a.length,                                                                                              // 15606
            r = a[0] + '';                                                                                             // 15607
                                                                                                                       // 15608
        for ( ; i < j; ) {                                                                                             // 15609
            s = a[i++] + '';                                                                                           // 15610
            z = LOG_BASE - s.length;                                                                                   // 15611
            for ( ; z--; s = '0' + s );                                                                                // 15612
            r += s;                                                                                                    // 15613
        }                                                                                                              // 15614
                                                                                                                       // 15615
        // Determine trailing zeros.                                                                                   // 15616
        for ( j = r.length; r.charCodeAt(--j) === 48; );                                                               // 15617
        return r.slice( 0, j + 1 || 1 );                                                                               // 15618
    }                                                                                                                  // 15619
                                                                                                                       // 15620
                                                                                                                       // 15621
    // Compare the value of BigNumbers x and y.                                                                        // 15622
    function compare( x, y ) {                                                                                         // 15623
        var a, b,                                                                                                      // 15624
            xc = x.c,                                                                                                  // 15625
            yc = y.c,                                                                                                  // 15626
            i = x.s,                                                                                                   // 15627
            j = y.s,                                                                                                   // 15628
            k = x.e,                                                                                                   // 15629
            l = y.e;                                                                                                   // 15630
                                                                                                                       // 15631
        // Either NaN?                                                                                                 // 15632
        if ( !i || !j ) return null;                                                                                   // 15633
                                                                                                                       // 15634
        a = xc && !xc[0];                                                                                              // 15635
        b = yc && !yc[0];                                                                                              // 15636
                                                                                                                       // 15637
        // Either zero?                                                                                                // 15638
        if ( a || b ) return a ? b ? 0 : -j : i;                                                                       // 15639
                                                                                                                       // 15640
        // Signs differ?                                                                                               // 15641
        if ( i != j ) return i;                                                                                        // 15642
                                                                                                                       // 15643
        a = i < 0;                                                                                                     // 15644
        b = k == l;                                                                                                    // 15645
                                                                                                                       // 15646
        // Either Infinity?                                                                                            // 15647
        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;                                                             // 15648
                                                                                                                       // 15649
        // Compare exponents.                                                                                          // 15650
        if ( !b ) return k > l ^ a ? 1 : -1;                                                                           // 15651
                                                                                                                       // 15652
        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;                                                             // 15653
                                                                                                                       // 15654
        // Compare digit by digit.                                                                                     // 15655
        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;                             // 15656
                                                                                                                       // 15657
        // Compare lengths.                                                                                            // 15658
        return k == l ? 0 : k > l ^ a ? 1 : -1;                                                                        // 15659
    }                                                                                                                  // 15660
                                                                                                                       // 15661
                                                                                                                       // 15662
    /*                                                                                                                 // 15663
     * Return true if n is a valid number in range, otherwise false.                                                   // 15664
     * Use for argument validation when ERRORS is false.                                                               // 15665
     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.                                                       // 15666
     */                                                                                                                // 15667
    function intValidatorNoErrors( n, min, max ) {                                                                     // 15668
        return ( n = truncate(n) ) >= min && n <= max;                                                                 // 15669
    }                                                                                                                  // 15670
                                                                                                                       // 15671
                                                                                                                       // 15672
    function isArray(obj) {                                                                                            // 15673
        return Object.prototype.toString.call(obj) == '[object Array]';                                                // 15674
    }                                                                                                                  // 15675
                                                                                                                       // 15676
                                                                                                                       // 15677
    /*                                                                                                                 // 15678
     * Convert string of baseIn to an array of numbers of baseOut.                                                     // 15679
     * Eg. convertBase('255', 10, 16) returns [15, 15].                                                                // 15680
     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].                                                                // 15681
     */                                                                                                                // 15682
    function toBaseOut( str, baseIn, baseOut ) {                                                                       // 15683
        var j,                                                                                                         // 15684
            arr = [0],                                                                                                 // 15685
            arrL,                                                                                                      // 15686
            i = 0,                                                                                                     // 15687
            len = str.length;                                                                                          // 15688
                                                                                                                       // 15689
        for ( ; i < len; ) {                                                                                           // 15690
            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );                                                    // 15691
            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );                                                     // 15692
                                                                                                                       // 15693
            for ( ; j < arr.length; j++ ) {                                                                            // 15694
                                                                                                                       // 15695
                if ( arr[j] > baseOut - 1 ) {                                                                          // 15696
                    if ( arr[j + 1] == null ) arr[j + 1] = 0;                                                          // 15697
                    arr[j + 1] += arr[j] / baseOut | 0;                                                                // 15698
                    arr[j] %= baseOut;                                                                                 // 15699
                }                                                                                                      // 15700
            }                                                                                                          // 15701
        }                                                                                                              // 15702
                                                                                                                       // 15703
        return arr.reverse();                                                                                          // 15704
    }                                                                                                                  // 15705
                                                                                                                       // 15706
                                                                                                                       // 15707
    function toExponential( str, e ) {                                                                                 // 15708
        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +                                         // 15709
          ( e < 0 ? 'e' : 'e+' ) + e;                                                                                  // 15710
    }                                                                                                                  // 15711
                                                                                                                       // 15712
                                                                                                                       // 15713
    function toFixedPoint( str, e ) {                                                                                  // 15714
        var len, z;                                                                                                    // 15715
                                                                                                                       // 15716
        // Negative exponent?                                                                                          // 15717
        if ( e < 0 ) {                                                                                                 // 15718
                                                                                                                       // 15719
            // Prepend zeros.                                                                                          // 15720
            for ( z = '0.'; ++e; z += '0' );                                                                           // 15721
            str = z + str;                                                                                             // 15722
                                                                                                                       // 15723
        // Positive exponent                                                                                           // 15724
        } else {                                                                                                       // 15725
            len = str.length;                                                                                          // 15726
                                                                                                                       // 15727
            // Append zeros.                                                                                           // 15728
            if ( ++e > len ) {                                                                                         // 15729
                for ( z = '0', e -= len; --e; z += '0' );                                                              // 15730
                str += z;                                                                                              // 15731
            } else if ( e < len ) {                                                                                    // 15732
                str = str.slice( 0, e ) + '.' + str.slice(e);                                                          // 15733
            }                                                                                                          // 15734
        }                                                                                                              // 15735
                                                                                                                       // 15736
        return str;                                                                                                    // 15737
    }                                                                                                                  // 15738
                                                                                                                       // 15739
                                                                                                                       // 15740
    function truncate(n) {                                                                                             // 15741
        n = parseFloat(n);                                                                                             // 15742
        return n < 0 ? mathceil(n) : mathfloor(n);                                                                     // 15743
    }                                                                                                                  // 15744
                                                                                                                       // 15745
                                                                                                                       // 15746
    // EXPORT                                                                                                          // 15747
                                                                                                                       // 15748
                                                                                                                       // 15749
    BigNumber = another();                                                                                             // 15750
                                                                                                                       // 15751
    // AMD.                                                                                                            // 15752
    if ( typeof define == 'function' && define.amd ) {                                                                 // 15753
        define( function () { return BigNumber; } );                                                                   // 15754
                                                                                                                       // 15755
    // Node and other environments that support module.exports.                                                        // 15756
    } else if ( typeof module != 'undefined' && module.exports ) {                                                     // 15757
        module.exports = BigNumber;                                                                                    // 15758
        if ( !crypto ) try { crypto = require('crypto'); } catch (e) {}                                                // 15759
                                                                                                                       // 15760
    // Browser.                                                                                                        // 15761
    } else {                                                                                                           // 15762
        global.BigNumber = BigNumber;                                                                                  // 15763
    }                                                                                                                  // 15764
})(this);                                                                                                              // 15765
                                                                                                                       // 15766
},{"crypto":48}],"web3":[function(require,module,exports){                                                             // 15767
var Web3 = require('./lib/web3');                                                                                      // 15768
                                                                                                                       // 15769
// dont override global variable                                                                                       // 15770
if (typeof window !== 'undefined' && typeof window.Web3 === 'undefined') {                                             // 15771
    window.Web3 = Web3;                                                                                                // 15772
}                                                                                                                      // 15773
                                                                                                                       // 15774
module.exports = Web3;                                                                                                 // 15775
                                                                                                                       // 15776
},{"./lib/web3":22}]},{},["web3"])                                                                                     // 15777
//# sourceMappingURL=web3.js.map                                                                                       // 15778
                                                                                                                       // 15779
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/ethereum_web3/package-init.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* jshint ignore:start */                                                                                              // 1
                                                                                                                       // 2
                                                                                                                       // 3
// Browser environment                                                                                                 // 4
if(typeof window !== 'undefined') {                                                                                    // 5
    Web3 = (typeof window.Web3 !== 'undefined') ? window.Web3 : require('web3');                                       // 6
    BigNumber = (typeof window.BigNumber !== 'undefined') ? window.BigNumber : require('bignumber.js');                // 7
}                                                                                                                      // 8
                                                                                                                       // 9
                                                                                                                       // 10
// Node environment                                                                                                    // 11
if(typeof global !== 'undefined') {                                                                                    // 12
    Web3 = (typeof global.Web3 !== 'undefined') ? global.Web3 : require('web3');                                       // 13
    BigNumber = (typeof global.BigNumber !== 'undefined') ? global.BigNumber : require('bignumber.js');                // 14
}                                                                                                                      // 15
                                                                                                                       // 16
/* jshint ignore:end */                                                                                                // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['ethereum:web3'] = {
  Web3: Web3,
  BigNumber: BigNumber
};

})();

//# sourceMappingURL=ethereum_web3.js.map
