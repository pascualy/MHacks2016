[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\n\n/* Package-scope variables */\nvar require, Web3, BigNumber;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ethereum_web3/dist/web3.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports=[                                                                                                       // 2\n  {                                                                                                                    // 3\n    \"constant\": true,                                                                                                  // 4\n    \"inputs\": [                                                                                                        // 5\n      {                                                                                                                // 6\n        \"name\": \"_owner\",                                                                                              // 7\n        \"type\": \"address\"                                                                                              // 8\n      }                                                                                                                // 9\n    ],                                                                                                                 // 10\n    \"name\": \"name\",                                                                                                    // 11\n    \"outputs\": [                                                                                                       // 12\n      {                                                                                                                // 13\n        \"name\": \"o_name\",                                                                                              // 14\n        \"type\": \"bytes32\"                                                                                              // 15\n      }                                                                                                                // 16\n    ],                                                                                                                 // 17\n    \"type\": \"function\"                                                                                                 // 18\n  },                                                                                                                   // 19\n  {                                                                                                                    // 20\n    \"constant\": true,                                                                                                  // 21\n    \"inputs\": [                                                                                                        // 22\n      {                                                                                                                // 23\n        \"name\": \"_name\",                                                                                               // 24\n        \"type\": \"bytes32\"                                                                                              // 25\n      }                                                                                                                // 26\n    ],                                                                                                                 // 27\n    \"name\": \"owner\",                                                                                                   // 28\n    \"outputs\": [                                                                                                       // 29\n      {                                                                                                                // 30\n        \"name\": \"\",                                                                                                    // 31\n        \"type\": \"address\"                                                                                              // 32\n      }                                                                                                                // 33\n    ],                                                                                                                 // 34\n    \"type\": \"function\"                                                                                                 // 35\n  },                                                                                                                   // 36\n  {                                                                                                                    // 37\n    \"constant\": true,                                                                                                  // 38\n    \"inputs\": [                                                                                                        // 39\n      {                                                                                                                // 40\n        \"name\": \"_name\",                                                                                               // 41\n        \"type\": \"bytes32\"                                                                                              // 42\n      }                                                                                                                // 43\n    ],                                                                                                                 // 44\n    \"name\": \"content\",                                                                                                 // 45\n    \"outputs\": [                                                                                                       // 46\n      {                                                                                                                // 47\n        \"name\": \"\",                                                                                                    // 48\n        \"type\": \"bytes32\"                                                                                              // 49\n      }                                                                                                                // 50\n    ],                                                                                                                 // 51\n    \"type\": \"function\"                                                                                                 // 52\n  },                                                                                                                   // 53\n  {                                                                                                                    // 54\n    \"constant\": true,                                                                                                  // 55\n    \"inputs\": [                                                                                                        // 56\n      {                                                                                                                // 57\n        \"name\": \"_name\",                                                                                               // 58\n        \"type\": \"bytes32\"                                                                                              // 59\n      }                                                                                                                // 60\n    ],                                                                                                                 // 61\n    \"name\": \"addr\",                                                                                                    // 62\n    \"outputs\": [                                                                                                       // 63\n      {                                                                                                                // 64\n        \"name\": \"\",                                                                                                    // 65\n        \"type\": \"address\"                                                                                              // 66\n      }                                                                                                                // 67\n    ],                                                                                                                 // 68\n    \"type\": \"function\"                                                                                                 // 69\n  },                                                                                                                   // 70\n  {                                                                                                                    // 71\n    \"constant\": false,                                                                                                 // 72\n    \"inputs\": [                                                                                                        // 73\n      {                                                                                                                // 74\n        \"name\": \"_name\",                                                                                               // 75\n        \"type\": \"bytes32\"                                                                                              // 76\n      }                                                                                                                // 77\n    ],                                                                                                                 // 78\n    \"name\": \"reserve\",                                                                                                 // 79\n    \"outputs\": [],                                                                                                     // 80\n    \"type\": \"function\"                                                                                                 // 81\n  },                                                                                                                   // 82\n  {                                                                                                                    // 83\n    \"constant\": true,                                                                                                  // 84\n    \"inputs\": [                                                                                                        // 85\n      {                                                                                                                // 86\n        \"name\": \"_name\",                                                                                               // 87\n        \"type\": \"bytes32\"                                                                                              // 88\n      }                                                                                                                // 89\n    ],                                                                                                                 // 90\n    \"name\": \"subRegistrar\",                                                                                            // 91\n    \"outputs\": [                                                                                                       // 92\n      {                                                                                                                // 93\n        \"name\": \"\",                                                                                                    // 94\n        \"type\": \"address\"                                                                                              // 95\n      }                                                                                                                // 96\n    ],                                                                                                                 // 97\n    \"type\": \"function\"                                                                                                 // 98\n  },                                                                                                                   // 99\n  {                                                                                                                    // 100\n    \"constant\": false,                                                                                                 // 101\n    \"inputs\": [                                                                                                        // 102\n      {                                                                                                                // 103\n        \"name\": \"_name\",                                                                                               // 104\n        \"type\": \"bytes32\"                                                                                              // 105\n      },                                                                                                               // 106\n      {                                                                                                                // 107\n        \"name\": \"_newOwner\",                                                                                           // 108\n        \"type\": \"address\"                                                                                              // 109\n      }                                                                                                                // 110\n    ],                                                                                                                 // 111\n    \"name\": \"transfer\",                                                                                                // 112\n    \"outputs\": [],                                                                                                     // 113\n    \"type\": \"function\"                                                                                                 // 114\n  },                                                                                                                   // 115\n  {                                                                                                                    // 116\n    \"constant\": false,                                                                                                 // 117\n    \"inputs\": [                                                                                                        // 118\n      {                                                                                                                // 119\n        \"name\": \"_name\",                                                                                               // 120\n        \"type\": \"bytes32\"                                                                                              // 121\n      },                                                                                                               // 122\n      {                                                                                                                // 123\n        \"name\": \"_registrar\",                                                                                          // 124\n        \"type\": \"address\"                                                                                              // 125\n      }                                                                                                                // 126\n    ],                                                                                                                 // 127\n    \"name\": \"setSubRegistrar\",                                                                                         // 128\n    \"outputs\": [],                                                                                                     // 129\n    \"type\": \"function\"                                                                                                 // 130\n  },                                                                                                                   // 131\n  {                                                                                                                    // 132\n    \"constant\": false,                                                                                                 // 133\n    \"inputs\": [],                                                                                                      // 134\n    \"name\": \"Registrar\",                                                                                               // 135\n    \"outputs\": [],                                                                                                     // 136\n    \"type\": \"function\"                                                                                                 // 137\n  },                                                                                                                   // 138\n  {                                                                                                                    // 139\n    \"constant\": false,                                                                                                 // 140\n    \"inputs\": [                                                                                                        // 141\n      {                                                                                                                // 142\n        \"name\": \"_name\",                                                                                               // 143\n        \"type\": \"bytes32\"                                                                                              // 144\n      },                                                                                                               // 145\n      {                                                                                                                // 146\n        \"name\": \"_a\",                                                                                                  // 147\n        \"type\": \"address\"                                                                                              // 148\n      },                                                                                                               // 149\n      {                                                                                                                // 150\n        \"name\": \"_primary\",                                                                                            // 151\n        \"type\": \"bool\"                                                                                                 // 152\n      }                                                                                                                // 153\n    ],                                                                                                                 // 154\n    \"name\": \"setAddress\",                                                                                              // 155\n    \"outputs\": [],                                                                                                     // 156\n    \"type\": \"function\"                                                                                                 // 157\n  },                                                                                                                   // 158\n  {                                                                                                                    // 159\n    \"constant\": false,                                                                                                 // 160\n    \"inputs\": [                                                                                                        // 161\n      {                                                                                                                // 162\n        \"name\": \"_name\",                                                                                               // 163\n        \"type\": \"bytes32\"                                                                                              // 164\n      },                                                                                                               // 165\n      {                                                                                                                // 166\n        \"name\": \"_content\",                                                                                            // 167\n        \"type\": \"bytes32\"                                                                                              // 168\n      }                                                                                                                // 169\n    ],                                                                                                                 // 170\n    \"name\": \"setContent\",                                                                                              // 171\n    \"outputs\": [],                                                                                                     // 172\n    \"type\": \"function\"                                                                                                 // 173\n  },                                                                                                                   // 174\n  {                                                                                                                    // 175\n    \"constant\": false,                                                                                                 // 176\n    \"inputs\": [                                                                                                        // 177\n      {                                                                                                                // 178\n        \"name\": \"_name\",                                                                                               // 179\n        \"type\": \"bytes32\"                                                                                              // 180\n      }                                                                                                                // 181\n    ],                                                                                                                 // 182\n    \"name\": \"disown\",                                                                                                  // 183\n    \"outputs\": [],                                                                                                     // 184\n    \"type\": \"function\"                                                                                                 // 185\n  },                                                                                                                   // 186\n  {                                                                                                                    // 187\n    \"anonymous\": false,                                                                                                // 188\n    \"inputs\": [                                                                                                        // 189\n      {                                                                                                                // 190\n        \"indexed\": true,                                                                                               // 191\n        \"name\": \"_name\",                                                                                               // 192\n        \"type\": \"bytes32\"                                                                                              // 193\n      },                                                                                                               // 194\n      {                                                                                                                // 195\n        \"indexed\": false,                                                                                              // 196\n        \"name\": \"_winner\",                                                                                             // 197\n        \"type\": \"address\"                                                                                              // 198\n      }                                                                                                                // 199\n    ],                                                                                                                 // 200\n    \"name\": \"AuctionEnded\",                                                                                            // 201\n    \"type\": \"event\"                                                                                                    // 202\n  },                                                                                                                   // 203\n  {                                                                                                                    // 204\n    \"anonymous\": false,                                                                                                // 205\n    \"inputs\": [                                                                                                        // 206\n      {                                                                                                                // 207\n        \"indexed\": true,                                                                                               // 208\n        \"name\": \"_name\",                                                                                               // 209\n        \"type\": \"bytes32\"                                                                                              // 210\n      },                                                                                                               // 211\n      {                                                                                                                // 212\n        \"indexed\": false,                                                                                              // 213\n        \"name\": \"_bidder\",                                                                                             // 214\n        \"type\": \"address\"                                                                                              // 215\n      },                                                                                                               // 216\n      {                                                                                                                // 217\n        \"indexed\": false,                                                                                              // 218\n        \"name\": \"_value\",                                                                                              // 219\n        \"type\": \"uint256\"                                                                                              // 220\n      }                                                                                                                // 221\n    ],                                                                                                                 // 222\n    \"name\": \"NewBid\",                                                                                                  // 223\n    \"type\": \"event\"                                                                                                    // 224\n  },                                                                                                                   // 225\n  {                                                                                                                    // 226\n    \"anonymous\": false,                                                                                                // 227\n    \"inputs\": [                                                                                                        // 228\n      {                                                                                                                // 229\n        \"indexed\": true,                                                                                               // 230\n        \"name\": \"name\",                                                                                                // 231\n        \"type\": \"bytes32\"                                                                                              // 232\n      }                                                                                                                // 233\n    ],                                                                                                                 // 234\n    \"name\": \"Changed\",                                                                                                 // 235\n    \"type\": \"event\"                                                                                                    // 236\n  },                                                                                                                   // 237\n  {                                                                                                                    // 238\n    \"anonymous\": false,                                                                                                // 239\n    \"inputs\": [                                                                                                        // 240\n      {                                                                                                                // 241\n        \"indexed\": true,                                                                                               // 242\n        \"name\": \"name\",                                                                                                // 243\n        \"type\": \"bytes32\"                                                                                              // 244\n      },                                                                                                               // 245\n      {                                                                                                                // 246\n        \"indexed\": true,                                                                                               // 247\n        \"name\": \"addr\",                                                                                                // 248\n        \"type\": \"address\"                                                                                              // 249\n      }                                                                                                                // 250\n    ],                                                                                                                 // 251\n    \"name\": \"PrimaryChanged\",                                                                                          // 252\n    \"type\": \"event\"                                                                                                    // 253\n  }                                                                                                                    // 254\n]                                                                                                                      // 255\n                                                                                                                       // 256\n},{}],2:[function(require,module,exports){                                                                             // 257\nmodule.exports=[                                                                                                       // 258\n  {                                                                                                                    // 259\n    \"constant\": true,                                                                                                  // 260\n    \"inputs\": [                                                                                                        // 261\n      {                                                                                                                // 262\n        \"name\": \"_name\",                                                                                               // 263\n        \"type\": \"bytes32\"                                                                                              // 264\n      }                                                                                                                // 265\n    ],                                                                                                                 // 266\n    \"name\": \"owner\",                                                                                                   // 267\n    \"outputs\": [                                                                                                       // 268\n      {                                                                                                                // 269\n        \"name\": \"\",                                                                                                    // 270\n        \"type\": \"address\"                                                                                              // 271\n      }                                                                                                                // 272\n    ],                                                                                                                 // 273\n    \"type\": \"function\"                                                                                                 // 274\n  },                                                                                                                   // 275\n  {                                                                                                                    // 276\n    \"constant\": false,                                                                                                 // 277\n    \"inputs\": [                                                                                                        // 278\n      {                                                                                                                // 279\n        \"name\": \"_name\",                                                                                               // 280\n        \"type\": \"bytes32\"                                                                                              // 281\n      },                                                                                                               // 282\n      {                                                                                                                // 283\n        \"name\": \"_refund\",                                                                                             // 284\n        \"type\": \"address\"                                                                                              // 285\n      }                                                                                                                // 286\n    ],                                                                                                                 // 287\n    \"name\": \"disown\",                                                                                                  // 288\n    \"outputs\": [],                                                                                                     // 289\n    \"type\": \"function\"                                                                                                 // 290\n  },                                                                                                                   // 291\n  {                                                                                                                    // 292\n    \"constant\": true,                                                                                                  // 293\n    \"inputs\": [                                                                                                        // 294\n      {                                                                                                                // 295\n        \"name\": \"_name\",                                                                                               // 296\n        \"type\": \"bytes32\"                                                                                              // 297\n      }                                                                                                                // 298\n    ],                                                                                                                 // 299\n    \"name\": \"addr\",                                                                                                    // 300\n    \"outputs\": [                                                                                                       // 301\n      {                                                                                                                // 302\n        \"name\": \"\",                                                                                                    // 303\n        \"type\": \"address\"                                                                                              // 304\n      }                                                                                                                // 305\n    ],                                                                                                                 // 306\n    \"type\": \"function\"                                                                                                 // 307\n  },                                                                                                                   // 308\n  {                                                                                                                    // 309\n    \"constant\": false,                                                                                                 // 310\n    \"inputs\": [                                                                                                        // 311\n      {                                                                                                                // 312\n        \"name\": \"_name\",                                                                                               // 313\n        \"type\": \"bytes32\"                                                                                              // 314\n      }                                                                                                                // 315\n    ],                                                                                                                 // 316\n    \"name\": \"reserve\",                                                                                                 // 317\n    \"outputs\": [],                                                                                                     // 318\n    \"type\": \"function\"                                                                                                 // 319\n  },                                                                                                                   // 320\n  {                                                                                                                    // 321\n    \"constant\": false,                                                                                                 // 322\n    \"inputs\": [                                                                                                        // 323\n      {                                                                                                                // 324\n        \"name\": \"_name\",                                                                                               // 325\n        \"type\": \"bytes32\"                                                                                              // 326\n      },                                                                                                               // 327\n      {                                                                                                                // 328\n        \"name\": \"_newOwner\",                                                                                           // 329\n        \"type\": \"address\"                                                                                              // 330\n      }                                                                                                                // 331\n    ],                                                                                                                 // 332\n    \"name\": \"transfer\",                                                                                                // 333\n    \"outputs\": [],                                                                                                     // 334\n    \"type\": \"function\"                                                                                                 // 335\n  },                                                                                                                   // 336\n  {                                                                                                                    // 337\n    \"constant\": false,                                                                                                 // 338\n    \"inputs\": [                                                                                                        // 339\n      {                                                                                                                // 340\n        \"name\": \"_name\",                                                                                               // 341\n        \"type\": \"bytes32\"                                                                                              // 342\n      },                                                                                                               // 343\n      {                                                                                                                // 344\n        \"name\": \"_a\",                                                                                                  // 345\n        \"type\": \"address\"                                                                                              // 346\n      }                                                                                                                // 347\n    ],                                                                                                                 // 348\n    \"name\": \"setAddr\",                                                                                                 // 349\n    \"outputs\": [],                                                                                                     // 350\n    \"type\": \"function\"                                                                                                 // 351\n  },                                                                                                                   // 352\n  {                                                                                                                    // 353\n    \"anonymous\": false,                                                                                                // 354\n    \"inputs\": [                                                                                                        // 355\n      {                                                                                                                // 356\n        \"indexed\": true,                                                                                               // 357\n        \"name\": \"name\",                                                                                                // 358\n        \"type\": \"bytes32\"                                                                                              // 359\n      }                                                                                                                // 360\n    ],                                                                                                                 // 361\n    \"name\": \"Changed\",                                                                                                 // 362\n    \"type\": \"event\"                                                                                                    // 363\n  }                                                                                                                    // 364\n]                                                                                                                      // 365\n                                                                                                                       // 366\n},{}],3:[function(require,module,exports){                                                                             // 367\nmodule.exports=[                                                                                                       // 368\n  {                                                                                                                    // 369\n    \"constant\": false,                                                                                                 // 370\n    \"inputs\": [                                                                                                        // 371\n      {                                                                                                                // 372\n        \"name\": \"from\",                                                                                                // 373\n        \"type\": \"bytes32\"                                                                                              // 374\n      },                                                                                                               // 375\n      {                                                                                                                // 376\n        \"name\": \"to\",                                                                                                  // 377\n        \"type\": \"address\"                                                                                              // 378\n      },                                                                                                               // 379\n      {                                                                                                                // 380\n        \"name\": \"value\",                                                                                               // 381\n        \"type\": \"uint256\"                                                                                              // 382\n      }                                                                                                                // 383\n    ],                                                                                                                 // 384\n    \"name\": \"transfer\",                                                                                                // 385\n    \"outputs\": [],                                                                                                     // 386\n    \"type\": \"function\"                                                                                                 // 387\n  },                                                                                                                   // 388\n  {                                                                                                                    // 389\n    \"constant\": false,                                                                                                 // 390\n    \"inputs\": [                                                                                                        // 391\n      {                                                                                                                // 392\n        \"name\": \"from\",                                                                                                // 393\n        \"type\": \"bytes32\"                                                                                              // 394\n      },                                                                                                               // 395\n      {                                                                                                                // 396\n        \"name\": \"to\",                                                                                                  // 397\n        \"type\": \"address\"                                                                                              // 398\n      },                                                                                                               // 399\n      {                                                                                                                // 400\n        \"name\": \"indirectId\",                                                                                          // 401\n        \"type\": \"bytes32\"                                                                                              // 402\n      },                                                                                                               // 403\n      {                                                                                                                // 404\n        \"name\": \"value\",                                                                                               // 405\n        \"type\": \"uint256\"                                                                                              // 406\n      }                                                                                                                // 407\n    ],                                                                                                                 // 408\n    \"name\": \"icapTransfer\",                                                                                            // 409\n    \"outputs\": [],                                                                                                     // 410\n    \"type\": \"function\"                                                                                                 // 411\n  },                                                                                                                   // 412\n  {                                                                                                                    // 413\n    \"constant\": false,                                                                                                 // 414\n    \"inputs\": [                                                                                                        // 415\n      {                                                                                                                // 416\n        \"name\": \"to\",                                                                                                  // 417\n        \"type\": \"bytes32\"                                                                                              // 418\n      }                                                                                                                // 419\n    ],                                                                                                                 // 420\n    \"name\": \"deposit\",                                                                                                 // 421\n    \"outputs\": [],                                                                                                     // 422\n    \"type\": \"function\"                                                                                                 // 423\n  },                                                                                                                   // 424\n  {                                                                                                                    // 425\n    \"anonymous\": false,                                                                                                // 426\n    \"inputs\": [                                                                                                        // 427\n      {                                                                                                                // 428\n        \"indexed\": true,                                                                                               // 429\n        \"name\": \"from\",                                                                                                // 430\n        \"type\": \"address\"                                                                                              // 431\n      },                                                                                                               // 432\n      {                                                                                                                // 433\n        \"indexed\": false,                                                                                              // 434\n        \"name\": \"value\",                                                                                               // 435\n        \"type\": \"uint256\"                                                                                              // 436\n      }                                                                                                                // 437\n    ],                                                                                                                 // 438\n    \"name\": \"AnonymousDeposit\",                                                                                        // 439\n    \"type\": \"event\"                                                                                                    // 440\n  },                                                                                                                   // 441\n  {                                                                                                                    // 442\n    \"anonymous\": false,                                                                                                // 443\n    \"inputs\": [                                                                                                        // 444\n      {                                                                                                                // 445\n        \"indexed\": true,                                                                                               // 446\n        \"name\": \"from\",                                                                                                // 447\n        \"type\": \"address\"                                                                                              // 448\n      },                                                                                                               // 449\n      {                                                                                                                // 450\n        \"indexed\": true,                                                                                               // 451\n        \"name\": \"to\",                                                                                                  // 452\n        \"type\": \"bytes32\"                                                                                              // 453\n      },                                                                                                               // 454\n      {                                                                                                                // 455\n        \"indexed\": false,                                                                                              // 456\n        \"name\": \"value\",                                                                                               // 457\n        \"type\": \"uint256\"                                                                                              // 458\n      }                                                                                                                // 459\n    ],                                                                                                                 // 460\n    \"name\": \"Deposit\",                                                                                                 // 461\n    \"type\": \"event\"                                                                                                    // 462\n  },                                                                                                                   // 463\n  {                                                                                                                    // 464\n    \"anonymous\": false,                                                                                                // 465\n    \"inputs\": [                                                                                                        // 466\n      {                                                                                                                // 467\n        \"indexed\": true,                                                                                               // 468\n        \"name\": \"from\",                                                                                                // 469\n        \"type\": \"bytes32\"                                                                                              // 470\n      },                                                                                                               // 471\n      {                                                                                                                // 472\n        \"indexed\": true,                                                                                               // 473\n        \"name\": \"to\",                                                                                                  // 474\n        \"type\": \"address\"                                                                                              // 475\n      },                                                                                                               // 476\n      {                                                                                                                // 477\n        \"indexed\": false,                                                                                              // 478\n        \"name\": \"value\",                                                                                               // 479\n        \"type\": \"uint256\"                                                                                              // 480\n      }                                                                                                                // 481\n    ],                                                                                                                 // 482\n    \"name\": \"Transfer\",                                                                                                // 483\n    \"type\": \"event\"                                                                                                    // 484\n  },                                                                                                                   // 485\n  {                                                                                                                    // 486\n    \"anonymous\": false,                                                                                                // 487\n    \"inputs\": [                                                                                                        // 488\n      {                                                                                                                // 489\n        \"indexed\": true,                                                                                               // 490\n        \"name\": \"from\",                                                                                                // 491\n        \"type\": \"bytes32\"                                                                                              // 492\n      },                                                                                                               // 493\n      {                                                                                                                // 494\n        \"indexed\": true,                                                                                               // 495\n        \"name\": \"to\",                                                                                                  // 496\n        \"type\": \"address\"                                                                                              // 497\n      },                                                                                                               // 498\n      {                                                                                                                // 499\n        \"indexed\": false,                                                                                              // 500\n        \"name\": \"indirectId\",                                                                                          // 501\n        \"type\": \"bytes32\"                                                                                              // 502\n      },                                                                                                               // 503\n      {                                                                                                                // 504\n        \"indexed\": false,                                                                                              // 505\n        \"name\": \"value\",                                                                                               // 506\n        \"type\": \"uint256\"                                                                                              // 507\n      }                                                                                                                // 508\n    ],                                                                                                                 // 509\n    \"name\": \"IcapTransfer\",                                                                                            // 510\n    \"type\": \"event\"                                                                                                    // 511\n  }                                                                                                                    // 512\n]                                                                                                                      // 513\n                                                                                                                       // 514\n},{}],4:[function(require,module,exports){                                                                             // 515\nvar f = require('./formatters');                                                                                       // 516\nvar SolidityType = require('./type');                                                                                  // 517\n                                                                                                                       // 518\n/**                                                                                                                    // 519\n * SolidityTypeAddress is a prootype that represents address type                                                      // 520\n * It matches:                                                                                                         // 521\n * address                                                                                                             // 522\n * address[]                                                                                                           // 523\n * address[4]                                                                                                          // 524\n * address[][]                                                                                                         // 525\n * address[3][]                                                                                                        // 526\n * address[][6][], ...                                                                                                 // 527\n */                                                                                                                    // 528\nvar SolidityTypeAddress = function () {                                                                                // 529\n    this._inputFormatter = f.formatInputInt;                                                                           // 530\n    this._outputFormatter = f.formatOutputAddress;                                                                     // 531\n};                                                                                                                     // 532\n                                                                                                                       // 533\nSolidityTypeAddress.prototype = new SolidityType({});                                                                  // 534\nSolidityTypeAddress.prototype.constructor = SolidityTypeAddress;                                                       // 535\n                                                                                                                       // 536\nSolidityTypeAddress.prototype.isType = function (name) {                                                               // 537\n    return !!name.match(/address(\\[([0-9]*)\\])?/);                                                                     // 538\n};                                                                                                                     // 539\n                                                                                                                       // 540\nSolidityTypeAddress.prototype.staticPartLength = function (name) {                                                     // 541\n    return 32 * this.staticArrayLength(name);                                                                          // 542\n};                                                                                                                     // 543\n                                                                                                                       // 544\nmodule.exports = SolidityTypeAddress;                                                                                  // 545\n                                                                                                                       // 546\n                                                                                                                       // 547\n},{\"./formatters\":9,\"./type\":14}],5:[function(require,module,exports){                                                 // 548\nvar f = require('./formatters');                                                                                       // 549\nvar SolidityType = require('./type');                                                                                  // 550\n                                                                                                                       // 551\n/**                                                                                                                    // 552\n * SolidityTypeBool is a prootype that represents bool type                                                            // 553\n * It matches:                                                                                                         // 554\n * bool                                                                                                                // 555\n * bool[]                                                                                                              // 556\n * bool[4]                                                                                                             // 557\n * bool[][]                                                                                                            // 558\n * bool[3][]                                                                                                           // 559\n * bool[][6][], ...                                                                                                    // 560\n */                                                                                                                    // 561\nvar SolidityTypeBool = function () {                                                                                   // 562\n    this._inputFormatter = f.formatInputBool;                                                                          // 563\n    this._outputFormatter = f.formatOutputBool;                                                                        // 564\n};                                                                                                                     // 565\n                                                                                                                       // 566\nSolidityTypeBool.prototype = new SolidityType({});                                                                     // 567\nSolidityTypeBool.prototype.constructor = SolidityTypeBool;                                                             // 568\n                                                                                                                       // 569\nSolidityTypeBool.prototype.isType = function (name) {                                                                  // 570\n    return !!name.match(/^bool(\\[([0-9]*)\\])*$/);                                                                      // 571\n};                                                                                                                     // 572\n                                                                                                                       // 573\nSolidityTypeBool.prototype.staticPartLength = function (name) {                                                        // 574\n    return 32 * this.staticArrayLength(name);                                                                          // 575\n};                                                                                                                     // 576\n                                                                                                                       // 577\nmodule.exports = SolidityTypeBool;                                                                                     // 578\n                                                                                                                       // 579\n},{\"./formatters\":9,\"./type\":14}],6:[function(require,module,exports){                                                 // 580\nvar f = require('./formatters');                                                                                       // 581\nvar SolidityType = require('./type');                                                                                  // 582\n                                                                                                                       // 583\n/**                                                                                                                    // 584\n * SolidityTypeBytes is a prootype that represents bytes type                                                          // 585\n * It matches:                                                                                                         // 586\n * bytes                                                                                                               // 587\n * bytes[]                                                                                                             // 588\n * bytes[4]                                                                                                            // 589\n * bytes[][]                                                                                                           // 590\n * bytes[3][]                                                                                                          // 591\n * bytes[][6][], ...                                                                                                   // 592\n * bytes32                                                                                                             // 593\n * bytes64[]                                                                                                           // 594\n * bytes8[4]                                                                                                           // 595\n * bytes256[][]                                                                                                        // 596\n * bytes[3][]                                                                                                          // 597\n * bytes64[][6][], ...                                                                                                 // 598\n */                                                                                                                    // 599\nvar SolidityTypeBytes = function () {                                                                                  // 600\n    this._inputFormatter = f.formatInputBytes;                                                                         // 601\n    this._outputFormatter = f.formatOutputBytes;                                                                       // 602\n};                                                                                                                     // 603\n                                                                                                                       // 604\nSolidityTypeBytes.prototype = new SolidityType({});                                                                    // 605\nSolidityTypeBytes.prototype.constructor = SolidityTypeBytes;                                                           // 606\n                                                                                                                       // 607\nSolidityTypeBytes.prototype.isType = function (name) {                                                                 // 608\n    return !!name.match(/^bytes([0-9]{1,})(\\[([0-9]*)\\])*$/);                                                          // 609\n};                                                                                                                     // 610\n                                                                                                                       // 611\nSolidityTypeBytes.prototype.staticPartLength = function (name) {                                                       // 612\n    var matches = name.match(/^bytes([0-9]*)/);                                                                        // 613\n    var size = parseInt(matches[1]);                                                                                   // 614\n    return size * this.staticArrayLength(name);                                                                        // 615\n};                                                                                                                     // 616\n                                                                                                                       // 617\nmodule.exports = SolidityTypeBytes;                                                                                    // 618\n                                                                                                                       // 619\n},{\"./formatters\":9,\"./type\":14}],7:[function(require,module,exports){                                                 // 620\n/*                                                                                                                     // 621\n    This file is part of web3.js.                                                                                      // 622\n                                                                                                                       // 623\n    web3.js is free software: you can redistribute it and/or modify                                                    // 624\n    it under the terms of the GNU Lesser General Public License as published by                                        // 625\n    the Free Software Foundation, either version 3 of the License, or                                                  // 626\n    (at your option) any later version.                                                                                // 627\n                                                                                                                       // 628\n    web3.js is distributed in the hope that it will be useful,                                                         // 629\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 630\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 631\n    GNU Lesser General Public License for more details.                                                                // 632\n                                                                                                                       // 633\n    You should have received a copy of the GNU Lesser General Public License                                           // 634\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 635\n*/                                                                                                                     // 636\n/**                                                                                                                    // 637\n * @file coder.js                                                                                                      // 638\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 639\n * @date 2015                                                                                                          // 640\n */                                                                                                                    // 641\n                                                                                                                       // 642\nvar f = require('./formatters');                                                                                       // 643\n                                                                                                                       // 644\nvar SolidityTypeAddress = require('./address');                                                                        // 645\nvar SolidityTypeBool = require('./bool');                                                                              // 646\nvar SolidityTypeInt = require('./int');                                                                                // 647\nvar SolidityTypeUInt = require('./uint');                                                                              // 648\nvar SolidityTypeDynamicBytes = require('./dynamicbytes');                                                              // 649\nvar SolidityTypeString = require('./string');                                                                          // 650\nvar SolidityTypeReal = require('./real');                                                                              // 651\nvar SolidityTypeUReal = require('./ureal');                                                                            // 652\nvar SolidityTypeBytes = require('./bytes');                                                                            // 653\n                                                                                                                       // 654\n/**                                                                                                                    // 655\n * SolidityCoder prototype should be used to encode/decode solidity params of any type                                 // 656\n */                                                                                                                    // 657\nvar SolidityCoder = function (types) {                                                                                 // 658\n    this._types = types;                                                                                               // 659\n};                                                                                                                     // 660\n                                                                                                                       // 661\n/**                                                                                                                    // 662\n * This method should be used to transform type to SolidityType                                                        // 663\n *                                                                                                                     // 664\n * @method _requireType                                                                                                // 665\n * @param {String} type                                                                                                // 666\n * @returns {SolidityType}                                                                                             // 667\n * @throws {Error} throws if no matching type is found                                                                 // 668\n */                                                                                                                    // 669\nSolidityCoder.prototype._requireType = function (type) {                                                               // 670\n    var solidityType = this._types.filter(function (t) {                                                               // 671\n        return t.isType(type);                                                                                         // 672\n    })[0];                                                                                                             // 673\n                                                                                                                       // 674\n    if (!solidityType) {                                                                                               // 675\n        throw Error('invalid solidity type!: ' + type);                                                                // 676\n    }                                                                                                                  // 677\n                                                                                                                       // 678\n    return solidityType;                                                                                               // 679\n};                                                                                                                     // 680\n                                                                                                                       // 681\n/**                                                                                                                    // 682\n * Should be used to encode plain param                                                                                // 683\n *                                                                                                                     // 684\n * @method encodeParam                                                                                                 // 685\n * @param {String} type                                                                                                // 686\n * @param {Object} plain param                                                                                         // 687\n * @return {String} encoded plain param                                                                                // 688\n */                                                                                                                    // 689\nSolidityCoder.prototype.encodeParam = function (type, param) {                                                         // 690\n    return this.encodeParams([type], [param]);                                                                         // 691\n};                                                                                                                     // 692\n                                                                                                                       // 693\n/**                                                                                                                    // 694\n * Should be used to encode list of params                                                                             // 695\n *                                                                                                                     // 696\n * @method encodeParams                                                                                                // 697\n * @param {Array} types                                                                                                // 698\n * @param {Array} params                                                                                               // 699\n * @return {String} encoded list of params                                                                             // 700\n */                                                                                                                    // 701\nSolidityCoder.prototype.encodeParams = function (types, params) {                                                      // 702\n    var solidityTypes = this.getSolidityTypes(types);                                                                  // 703\n                                                                                                                       // 704\n    var encodeds = solidityTypes.map(function (solidityType, index) {                                                  // 705\n        return solidityType.encode(params[index], types[index]);                                                       // 706\n    });                                                                                                                // 707\n                                                                                                                       // 708\n    var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {                                     // 709\n        var staticPartLength = solidityType.staticPartLength(types[index]);                                            // 710\n        var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;                                   // 711\n        return acc + roundedStaticPartLength;                                                                          // 712\n    }, 0);                                                                                                             // 713\n                                                                                                                       // 714\n    var result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);                            // 715\n                                                                                                                       // 716\n    return result;                                                                                                     // 717\n};                                                                                                                     // 718\n                                                                                                                       // 719\nSolidityCoder.prototype.encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {             // 720\n    var result = \"\";                                                                                                   // 721\n    var self = this;                                                                                                   // 722\n                                                                                                                       // 723\n    var isDynamic = function (i) {                                                                                     // 724\n       return solidityTypes[i].isDynamicArray(types[i]) || solidityTypes[i].isDynamicType(types[i]);                   // 725\n    };                                                                                                                 // 726\n                                                                                                                       // 727\n    types.forEach(function (type, i) {                                                                                 // 728\n        if (isDynamic(i)) {                                                                                            // 729\n            result += f.formatInputInt(dynamicOffset).encode();                                                        // 730\n            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);                     // 731\n            dynamicOffset += e.length / 2;                                                                             // 732\n        } else {                                                                                                       // 733\n            // don't add length to dynamicOffset. it's already counted                                                 // 734\n            result += self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);                   // 735\n        }                                                                                                              // 736\n                                                                                                                       // 737\n        // TODO: figure out nested arrays                                                                              // 738\n    });                                                                                                                // 739\n                                                                                                                       // 740\n    types.forEach(function (type, i) {                                                                                 // 741\n        if (isDynamic(i)) {                                                                                            // 742\n            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);                     // 743\n            dynamicOffset += e.length / 2;                                                                             // 744\n            result += e;                                                                                               // 745\n        }                                                                                                              // 746\n    });                                                                                                                // 747\n    return result;                                                                                                     // 748\n};                                                                                                                     // 749\n                                                                                                                       // 750\n// TODO: refactor whole encoding!                                                                                      // 751\nSolidityCoder.prototype.encodeWithOffset = function (type, solidityType, encoded, offset) {                            // 752\n    var self = this;                                                                                                   // 753\n    if (solidityType.isDynamicArray(type)) {                                                                           // 754\n        return (function () {                                                                                          // 755\n            // offset was already set                                                                                  // 756\n            var nestedName = solidityType.nestedName(type);                                                            // 757\n            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);                                    // 758\n            var result = encoded[0];                                                                                   // 759\n                                                                                                                       // 760\n            (function () {                                                                                             // 761\n                var previousLength = 2; // in int                                                                      // 762\n                if (solidityType.isDynamicArray(nestedName)) {                                                         // 763\n                    for (var i = 1; i < encoded.length; i++) {                                                         // 764\n                        previousLength += +(encoded[i - 1])[0] || 0;                                                   // 765\n                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();\n                    }                                                                                                  // 767\n                }                                                                                                      // 768\n            })();                                                                                                      // 769\n                                                                                                                       // 770\n            // first element is length, skip it                                                                        // 771\n            (function () {                                                                                             // 772\n                for (var i = 0; i < encoded.length - 1; i++) {                                                         // 773\n                    var additionalOffset = result / 2;                                                                 // 774\n                    result += self.encodeWithOffset(nestedName, solidityType, encoded[i + 1], offset +  additionalOffset);\n                }                                                                                                      // 776\n            })();                                                                                                      // 777\n                                                                                                                       // 778\n            return result;                                                                                             // 779\n        })();                                                                                                          // 780\n                                                                                                                       // 781\n    } else if (solidityType.isStaticArray(type)) {                                                                     // 782\n        return (function () {                                                                                          // 783\n            var nestedName = solidityType.nestedName(type);                                                            // 784\n            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);                                    // 785\n            var result = \"\";                                                                                           // 786\n                                                                                                                       // 787\n                                                                                                                       // 788\n            if (solidityType.isDynamicArray(nestedName)) {                                                             // 789\n                (function () {                                                                                         // 790\n                    var previousLength = 0; // in int                                                                  // 791\n                    for (var i = 0; i < encoded.length; i++) {                                                         // 792\n                        // calculate length of previous item                                                           // 793\n                        previousLength += +(encoded[i - 1] || [])[0] || 0;                                             // 794\n                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();\n                    }                                                                                                  // 796\n                })();                                                                                                  // 797\n            }                                                                                                          // 798\n                                                                                                                       // 799\n            (function () {                                                                                             // 800\n                for (var i = 0; i < encoded.length; i++) {                                                             // 801\n                    var additionalOffset = result / 2;                                                                 // 802\n                    result += self.encodeWithOffset(nestedName, solidityType, encoded[i], offset + additionalOffset);  // 803\n                }                                                                                                      // 804\n            })();                                                                                                      // 805\n                                                                                                                       // 806\n            return result;                                                                                             // 807\n        })();                                                                                                          // 808\n    }                                                                                                                  // 809\n                                                                                                                       // 810\n    return encoded;                                                                                                    // 811\n};                                                                                                                     // 812\n                                                                                                                       // 813\n/**                                                                                                                    // 814\n * Should be used to decode bytes to plain param                                                                       // 815\n *                                                                                                                     // 816\n * @method decodeParam                                                                                                 // 817\n * @param {String} type                                                                                                // 818\n * @param {String} bytes                                                                                               // 819\n * @return {Object} plain param                                                                                        // 820\n */                                                                                                                    // 821\nSolidityCoder.prototype.decodeParam = function (type, bytes) {                                                         // 822\n    return this.decodeParams([type], bytes)[0];                                                                        // 823\n};                                                                                                                     // 824\n                                                                                                                       // 825\n/**                                                                                                                    // 826\n * Should be used to decode list of params                                                                             // 827\n *                                                                                                                     // 828\n * @method decodeParam                                                                                                 // 829\n * @param {Array} types                                                                                                // 830\n * @param {String} bytes                                                                                               // 831\n * @return {Array} array of plain params                                                                               // 832\n */                                                                                                                    // 833\nSolidityCoder.prototype.decodeParams = function (types, bytes) {                                                       // 834\n    var solidityTypes = this.getSolidityTypes(types);                                                                  // 835\n    var offsets = this.getOffsets(types, solidityTypes);                                                               // 836\n                                                                                                                       // 837\n    return solidityTypes.map(function (solidityType, index) {                                                          // 838\n        return solidityType.decode(bytes, offsets[index],  types[index], index);                                       // 839\n    });                                                                                                                // 840\n};                                                                                                                     // 841\n                                                                                                                       // 842\nSolidityCoder.prototype.getOffsets = function (types, solidityTypes) {                                                 // 843\n    var lengths =  solidityTypes.map(function (solidityType, index) {                                                  // 844\n        return solidityType.staticPartLength(types[index]);                                                            // 845\n    });                                                                                                                // 846\n                                                                                                                       // 847\n    for (var i = 1; i < lengths.length; i++) {                                                                         // 848\n         // sum with length of previous element                                                                        // 849\n        lengths[i] += lengths[i - 1];                                                                                  // 850\n    }                                                                                                                  // 851\n                                                                                                                       // 852\n    return lengths.map(function (length, index) {                                                                      // 853\n        // remove the current length, so the length is sum of previous elements                                        // 854\n        var staticPartLength = solidityTypes[index].staticPartLength(types[index]);                                    // 855\n        return length - staticPartLength;                                                                              // 856\n    });                                                                                                                // 857\n};                                                                                                                     // 858\n                                                                                                                       // 859\nSolidityCoder.prototype.getSolidityTypes = function (types) {                                                          // 860\n    var self = this;                                                                                                   // 861\n    return types.map(function (type) {                                                                                 // 862\n        return self._requireType(type);                                                                                // 863\n    });                                                                                                                // 864\n};                                                                                                                     // 865\n                                                                                                                       // 866\nvar coder = new SolidityCoder([                                                                                        // 867\n    new SolidityTypeAddress(),                                                                                         // 868\n    new SolidityTypeBool(),                                                                                            // 869\n    new SolidityTypeInt(),                                                                                             // 870\n    new SolidityTypeUInt(),                                                                                            // 871\n    new SolidityTypeDynamicBytes(),                                                                                    // 872\n    new SolidityTypeBytes(),                                                                                           // 873\n    new SolidityTypeString(),                                                                                          // 874\n    new SolidityTypeReal(),                                                                                            // 875\n    new SolidityTypeUReal()                                                                                            // 876\n]);                                                                                                                    // 877\n                                                                                                                       // 878\nmodule.exports = coder;                                                                                                // 879\n                                                                                                                       // 880\n                                                                                                                       // 881\n},{\"./address\":4,\"./bool\":5,\"./bytes\":6,\"./dynamicbytes\":8,\"./formatters\":9,\"./int\":10,\"./real\":12,\"./string\":13,\"./uint\":15,\"./ureal\":16}],8:[function(require,module,exports){\nvar f = require('./formatters');                                                                                       // 883\nvar SolidityType = require('./type');                                                                                  // 884\n                                                                                                                       // 885\nvar SolidityTypeDynamicBytes = function () {                                                                           // 886\n    this._inputFormatter = f.formatInputDynamicBytes;                                                                  // 887\n    this._outputFormatter = f.formatOutputDynamicBytes;                                                                // 888\n};                                                                                                                     // 889\n                                                                                                                       // 890\nSolidityTypeDynamicBytes.prototype = new SolidityType({});                                                             // 891\nSolidityTypeDynamicBytes.prototype.constructor = SolidityTypeDynamicBytes;                                             // 892\n                                                                                                                       // 893\nSolidityTypeDynamicBytes.prototype.isType = function (name) {                                                          // 894\n    return !!name.match(/^bytes(\\[([0-9]*)\\])*$/);                                                                     // 895\n};                                                                                                                     // 896\n                                                                                                                       // 897\nSolidityTypeDynamicBytes.prototype.staticPartLength = function (name) {                                                // 898\n    return 32 * this.staticArrayLength(name);                                                                          // 899\n};                                                                                                                     // 900\n                                                                                                                       // 901\nSolidityTypeDynamicBytes.prototype.isDynamicType = function () {                                                       // 902\n    return true;                                                                                                       // 903\n};                                                                                                                     // 904\n                                                                                                                       // 905\nmodule.exports = SolidityTypeDynamicBytes;                                                                             // 906\n                                                                                                                       // 907\n                                                                                                                       // 908\n},{\"./formatters\":9,\"./type\":14}],9:[function(require,module,exports){                                                 // 909\n/*                                                                                                                     // 910\n    This file is part of web3.js.                                                                                      // 911\n                                                                                                                       // 912\n    web3.js is free software: you can redistribute it and/or modify                                                    // 913\n    it under the terms of the GNU Lesser General Public License as published by                                        // 914\n    the Free Software Foundation, either version 3 of the License, or                                                  // 915\n    (at your option) any later version.                                                                                // 916\n                                                                                                                       // 917\n    web3.js is distributed in the hope that it will be useful,                                                         // 918\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 919\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 920\n    GNU Lesser General Public License for more details.                                                                // 921\n                                                                                                                       // 922\n    You should have received a copy of the GNU Lesser General Public License                                           // 923\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 924\n*/                                                                                                                     // 925\n/**                                                                                                                    // 926\n * @file formatters.js                                                                                                 // 927\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 928\n * @date 2015                                                                                                          // 929\n */                                                                                                                    // 930\n                                                                                                                       // 931\nvar BigNumber = require('bignumber.js');                                                                               // 932\nvar utils = require('../utils/utils');                                                                                 // 933\nvar c = require('../utils/config');                                                                                    // 934\nvar SolidityParam = require('./param');                                                                                // 935\n                                                                                                                       // 936\n                                                                                                                       // 937\n/**                                                                                                                    // 938\n * Formats input value to byte representation of int                                                                   // 939\n * If value is negative, return it's two's complement                                                                  // 940\n * If the value is floating point, round it down                                                                       // 941\n *                                                                                                                     // 942\n * @method formatInputInt                                                                                              // 943\n * @param {String|Number|BigNumber} value that needs to be formatted                                                   // 944\n * @returns {SolidityParam}                                                                                            // 945\n */                                                                                                                    // 946\nvar formatInputInt = function (value) {                                                                                // 947\n    BigNumber.config(c.ETH_BIGNUMBER_ROUNDING_MODE);                                                                   // 948\n    var result = utils.padLeft(utils.toTwosComplement(value).round().toString(16), 64);                                // 949\n    return new SolidityParam(result);                                                                                  // 950\n};                                                                                                                     // 951\n                                                                                                                       // 952\n/**                                                                                                                    // 953\n * Formats input bytes                                                                                                 // 954\n *                                                                                                                     // 955\n * @method formatInputBytes                                                                                            // 956\n * @param {String}                                                                                                     // 957\n * @returns {SolidityParam}                                                                                            // 958\n */                                                                                                                    // 959\nvar formatInputBytes = function (value) {                                                                              // 960\n    var result = utils.toHex(value).substr(2);                                                                         // 961\n    var l = Math.floor((result.length + 63) / 64);                                                                     // 962\n    result = utils.padRight(result, l * 64);                                                                           // 963\n    return new SolidityParam(result);                                                                                  // 964\n};                                                                                                                     // 965\n                                                                                                                       // 966\n/**                                                                                                                    // 967\n * Formats input bytes                                                                                                 // 968\n *                                                                                                                     // 969\n * @method formatDynamicInputBytes                                                                                     // 970\n * @param {String}                                                                                                     // 971\n * @returns {SolidityParam}                                                                                            // 972\n */                                                                                                                    // 973\nvar formatInputDynamicBytes = function (value) {                                                                       // 974\n    var result = utils.toHex(value).substr(2);                                                                         // 975\n    var length = result.length / 2;                                                                                    // 976\n    var l = Math.floor((result.length + 63) / 64);                                                                     // 977\n    result = utils.padRight(result, l * 64);                                                                           // 978\n    return new SolidityParam(formatInputInt(length).value + result);                                                   // 979\n};                                                                                                                     // 980\n                                                                                                                       // 981\n/**                                                                                                                    // 982\n * Formats input value to byte representation of string                                                                // 983\n *                                                                                                                     // 984\n * @method formatInputString                                                                                           // 985\n * @param {String}                                                                                                     // 986\n * @returns {SolidityParam}                                                                                            // 987\n */                                                                                                                    // 988\nvar formatInputString = function (value) {                                                                             // 989\n    var result = utils.fromUtf8(value).substr(2);                                                                      // 990\n    var length = result.length / 2;                                                                                    // 991\n    var l = Math.floor((result.length + 63) / 64);                                                                     // 992\n    result = utils.padRight(result, l * 64);                                                                           // 993\n    return new SolidityParam(formatInputInt(length).value + result);                                                   // 994\n};                                                                                                                     // 995\n                                                                                                                       // 996\n/**                                                                                                                    // 997\n * Formats input value to byte representation of bool                                                                  // 998\n *                                                                                                                     // 999\n * @method formatInputBool                                                                                             // 1000\n * @param {Boolean}                                                                                                    // 1001\n * @returns {SolidityParam}                                                                                            // 1002\n */                                                                                                                    // 1003\nvar formatInputBool = function (value) {                                                                               // 1004\n    var result = '000000000000000000000000000000000000000000000000000000000000000' + (value ?  '1' : '0');             // 1005\n    return new SolidityParam(result);                                                                                  // 1006\n};                                                                                                                     // 1007\n                                                                                                                       // 1008\n/**                                                                                                                    // 1009\n * Formats input value to byte representation of real                                                                  // 1010\n * Values are multiplied by 2^m and encoded as integers                                                                // 1011\n *                                                                                                                     // 1012\n * @method formatInputReal                                                                                             // 1013\n * @param {String|Number|BigNumber}                                                                                    // 1014\n * @returns {SolidityParam}                                                                                            // 1015\n */                                                                                                                    // 1016\nvar formatInputReal = function (value) {                                                                               // 1017\n    return formatInputInt(new BigNumber(value).times(new BigNumber(2).pow(128)));                                      // 1018\n};                                                                                                                     // 1019\n                                                                                                                       // 1020\n/**                                                                                                                    // 1021\n * Check if input value is negative                                                                                    // 1022\n *                                                                                                                     // 1023\n * @method signedIsNegative                                                                                            // 1024\n * @param {String} value is hex format                                                                                 // 1025\n * @returns {Boolean} true if it is negative, otherwise false                                                          // 1026\n */                                                                                                                    // 1027\nvar signedIsNegative = function (value) {                                                                              // 1028\n    return (new BigNumber(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';                                   // 1029\n};                                                                                                                     // 1030\n                                                                                                                       // 1031\n/**                                                                                                                    // 1032\n * Formats right-aligned output bytes to int                                                                           // 1033\n *                                                                                                                     // 1034\n * @method formatOutputInt                                                                                             // 1035\n * @param {SolidityParam} param                                                                                        // 1036\n * @returns {BigNumber} right-aligned output bytes formatted to big number                                             // 1037\n */                                                                                                                    // 1038\nvar formatOutputInt = function (param) {                                                                               // 1039\n    var value = param.staticPart() || \"0\";                                                                             // 1040\n                                                                                                                       // 1041\n    // check if it's negative number                                                                                   // 1042\n    // it it is, return two's complement                                                                               // 1043\n    if (signedIsNegative(value)) {                                                                                     // 1044\n        return new BigNumber(value, 16).minus(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)).minus(1);\n    }                                                                                                                  // 1046\n    return new BigNumber(value, 16);                                                                                   // 1047\n};                                                                                                                     // 1048\n                                                                                                                       // 1049\n/**                                                                                                                    // 1050\n * Formats right-aligned output bytes to uint                                                                          // 1051\n *                                                                                                                     // 1052\n * @method formatOutputUInt                                                                                            // 1053\n * @param {SolidityParam}                                                                                              // 1054\n * @returns {BigNumeber} right-aligned output bytes formatted to uint                                                  // 1055\n */                                                                                                                    // 1056\nvar formatOutputUInt = function (param) {                                                                              // 1057\n    var value = param.staticPart() || \"0\";                                                                             // 1058\n    return new BigNumber(value, 16);                                                                                   // 1059\n};                                                                                                                     // 1060\n                                                                                                                       // 1061\n/**                                                                                                                    // 1062\n * Formats right-aligned output bytes to real                                                                          // 1063\n *                                                                                                                     // 1064\n * @method formatOutputReal                                                                                            // 1065\n * @param {SolidityParam}                                                                                              // 1066\n * @returns {BigNumber} input bytes formatted to real                                                                  // 1067\n */                                                                                                                    // 1068\nvar formatOutputReal = function (param) {                                                                              // 1069\n    return formatOutputInt(param).dividedBy(new BigNumber(2).pow(128));                                                // 1070\n};                                                                                                                     // 1071\n                                                                                                                       // 1072\n/**                                                                                                                    // 1073\n * Formats right-aligned output bytes to ureal                                                                         // 1074\n *                                                                                                                     // 1075\n * @method formatOutputUReal                                                                                           // 1076\n * @param {SolidityParam}                                                                                              // 1077\n * @returns {BigNumber} input bytes formatted to ureal                                                                 // 1078\n */                                                                                                                    // 1079\nvar formatOutputUReal = function (param) {                                                                             // 1080\n    return formatOutputUInt(param).dividedBy(new BigNumber(2).pow(128));                                               // 1081\n};                                                                                                                     // 1082\n                                                                                                                       // 1083\n/**                                                                                                                    // 1084\n * Should be used to format output bool                                                                                // 1085\n *                                                                                                                     // 1086\n * @method formatOutputBool                                                                                            // 1087\n * @param {SolidityParam}                                                                                              // 1088\n * @returns {Boolean} right-aligned input bytes formatted to bool                                                      // 1089\n */                                                                                                                    // 1090\nvar formatOutputBool = function (param) {                                                                              // 1091\n    return param.staticPart() === '0000000000000000000000000000000000000000000000000000000000000001' ? true : false;   // 1092\n};                                                                                                                     // 1093\n                                                                                                                       // 1094\n/**                                                                                                                    // 1095\n * Should be used to format output bytes                                                                               // 1096\n *                                                                                                                     // 1097\n * @method formatOutputBytes                                                                                           // 1098\n * @param {SolidityParam} left-aligned hex representation of string                                                    // 1099\n * @returns {String} hex string                                                                                        // 1100\n */                                                                                                                    // 1101\nvar formatOutputBytes = function (param) {                                                                             // 1102\n    return '0x' + param.staticPart();                                                                                  // 1103\n};                                                                                                                     // 1104\n                                                                                                                       // 1105\n/**                                                                                                                    // 1106\n * Should be used to format output bytes                                                                               // 1107\n *                                                                                                                     // 1108\n * @method formatOutputDynamicBytes                                                                                    // 1109\n * @param {SolidityParam} left-aligned hex representation of string                                                    // 1110\n * @returns {String} hex string                                                                                        // 1111\n */                                                                                                                    // 1112\nvar formatOutputDynamicBytes = function (param) {                                                                      // 1113\n    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;                                 // 1114\n    return '0x' + param.dynamicPart().substr(64, length);                                                              // 1115\n};                                                                                                                     // 1116\n                                                                                                                       // 1117\n/**                                                                                                                    // 1118\n * Should be used to format output string                                                                              // 1119\n *                                                                                                                     // 1120\n * @method formatOutputString                                                                                          // 1121\n * @param {SolidityParam} left-aligned hex representation of string                                                    // 1122\n * @returns {String} ascii string                                                                                      // 1123\n */                                                                                                                    // 1124\nvar formatOutputString = function (param) {                                                                            // 1125\n    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;                                 // 1126\n    return utils.toUtf8(param.dynamicPart().substr(64, length));                                                       // 1127\n};                                                                                                                     // 1128\n                                                                                                                       // 1129\n/**                                                                                                                    // 1130\n * Should be used to format output address                                                                             // 1131\n *                                                                                                                     // 1132\n * @method formatOutputAddress                                                                                         // 1133\n * @param {SolidityParam} right-aligned input bytes                                                                    // 1134\n * @returns {String} address                                                                                           // 1135\n */                                                                                                                    // 1136\nvar formatOutputAddress = function (param) {                                                                           // 1137\n    var value = param.staticPart();                                                                                    // 1138\n    return \"0x\" + value.slice(value.length - 40, value.length);                                                        // 1139\n};                                                                                                                     // 1140\n                                                                                                                       // 1141\nmodule.exports = {                                                                                                     // 1142\n    formatInputInt: formatInputInt,                                                                                    // 1143\n    formatInputBytes: formatInputBytes,                                                                                // 1144\n    formatInputDynamicBytes: formatInputDynamicBytes,                                                                  // 1145\n    formatInputString: formatInputString,                                                                              // 1146\n    formatInputBool: formatInputBool,                                                                                  // 1147\n    formatInputReal: formatInputReal,                                                                                  // 1148\n    formatOutputInt: formatOutputInt,                                                                                  // 1149\n    formatOutputUInt: formatOutputUInt,                                                                                // 1150\n    formatOutputReal: formatOutputReal,                                                                                // 1151\n    formatOutputUReal: formatOutputUReal,                                                                              // 1152\n    formatOutputBool: formatOutputBool,                                                                                // 1153\n    formatOutputBytes: formatOutputBytes,                                                                              // 1154\n    formatOutputDynamicBytes: formatOutputDynamicBytes,                                                                // 1155\n    formatOutputString: formatOutputString,                                                                            // 1156\n    formatOutputAddress: formatOutputAddress                                                                           // 1157\n};                                                                                                                     // 1158\n                                                                                                                       // 1159\n                                                                                                                       // 1160\n},{\"../utils/config\":18,\"../utils/utils\":20,\"./param\":11,\"bignumber.js\":\"bignumber.js\"}],10:[function(require,module,exports){\nvar f = require('./formatters');                                                                                       // 1162\nvar SolidityType = require('./type');                                                                                  // 1163\n                                                                                                                       // 1164\n/**                                                                                                                    // 1165\n * SolidityTypeInt is a prootype that represents int type                                                              // 1166\n * It matches:                                                                                                         // 1167\n * int                                                                                                                 // 1168\n * int[]                                                                                                               // 1169\n * int[4]                                                                                                              // 1170\n * int[][]                                                                                                             // 1171\n * int[3][]                                                                                                            // 1172\n * int[][6][], ...                                                                                                     // 1173\n * int32                                                                                                               // 1174\n * int64[]                                                                                                             // 1175\n * int8[4]                                                                                                             // 1176\n * int256[][]                                                                                                          // 1177\n * int[3][]                                                                                                            // 1178\n * int64[][6][], ...                                                                                                   // 1179\n */                                                                                                                    // 1180\nvar SolidityTypeInt = function () {                                                                                    // 1181\n    this._inputFormatter = f.formatInputInt;                                                                           // 1182\n    this._outputFormatter = f.formatOutputInt;                                                                         // 1183\n};                                                                                                                     // 1184\n                                                                                                                       // 1185\nSolidityTypeInt.prototype = new SolidityType({});                                                                      // 1186\nSolidityTypeInt.prototype.constructor = SolidityTypeInt;                                                               // 1187\n                                                                                                                       // 1188\nSolidityTypeInt.prototype.isType = function (name) {                                                                   // 1189\n    return !!name.match(/^int([0-9]*)?(\\[([0-9]*)\\])*$/);                                                              // 1190\n};                                                                                                                     // 1191\n                                                                                                                       // 1192\nSolidityTypeInt.prototype.staticPartLength = function (name) {                                                         // 1193\n    return 32 * this.staticArrayLength(name);                                                                          // 1194\n};                                                                                                                     // 1195\n                                                                                                                       // 1196\nmodule.exports = SolidityTypeInt;                                                                                      // 1197\n                                                                                                                       // 1198\n},{\"./formatters\":9,\"./type\":14}],11:[function(require,module,exports){                                                // 1199\n/*                                                                                                                     // 1200\n    This file is part of web3.js.                                                                                      // 1201\n                                                                                                                       // 1202\n    web3.js is free software: you can redistribute it and/or modify                                                    // 1203\n    it under the terms of the GNU Lesser General Public License as published by                                        // 1204\n    the Free Software Foundation, either version 3 of the License, or                                                  // 1205\n    (at your option) any later version.                                                                                // 1206\n                                                                                                                       // 1207\n    web3.js is distributed in the hope that it will be useful,                                                         // 1208\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1209\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1210\n    GNU Lesser General Public License for more details.                                                                // 1211\n                                                                                                                       // 1212\n    You should have received a copy of the GNU Lesser General Public License                                           // 1213\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1214\n*/                                                                                                                     // 1215\n/**                                                                                                                    // 1216\n * @file param.js                                                                                                      // 1217\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 1218\n * @date 2015                                                                                                          // 1219\n */                                                                                                                    // 1220\n                                                                                                                       // 1221\nvar utils = require('../utils/utils');                                                                                 // 1222\n                                                                                                                       // 1223\n/**                                                                                                                    // 1224\n * SolidityParam object prototype.                                                                                     // 1225\n * Should be used when encoding, decoding solidity bytes                                                               // 1226\n */                                                                                                                    // 1227\nvar SolidityParam = function (value, offset) {                                                                         // 1228\n    this.value = value || '';                                                                                          // 1229\n    this.offset = offset; // offset in bytes                                                                           // 1230\n};                                                                                                                     // 1231\n                                                                                                                       // 1232\n/**                                                                                                                    // 1233\n * This method should be used to get length of params's dynamic part                                                   // 1234\n *                                                                                                                     // 1235\n * @method dynamicPartLength                                                                                           // 1236\n * @returns {Number} length of dynamic part (in bytes)                                                                 // 1237\n */                                                                                                                    // 1238\nSolidityParam.prototype.dynamicPartLength = function () {                                                              // 1239\n    return this.dynamicPart().length / 2;                                                                              // 1240\n};                                                                                                                     // 1241\n                                                                                                                       // 1242\n/**                                                                                                                    // 1243\n * This method should be used to create copy of solidity param with different offset                                   // 1244\n *                                                                                                                     // 1245\n * @method withOffset                                                                                                  // 1246\n * @param {Number} offset length in bytes                                                                              // 1247\n * @returns {SolidityParam} new solidity param with applied offset                                                     // 1248\n */                                                                                                                    // 1249\nSolidityParam.prototype.withOffset = function (offset) {                                                               // 1250\n    return new SolidityParam(this.value, offset);                                                                      // 1251\n};                                                                                                                     // 1252\n                                                                                                                       // 1253\n/**                                                                                                                    // 1254\n * This method should be used to combine solidity params together                                                      // 1255\n * eg. when appending an array                                                                                         // 1256\n *                                                                                                                     // 1257\n * @method combine                                                                                                     // 1258\n * @param {SolidityParam} param with which we should combine                                                           // 1259\n * @param {SolidityParam} result of combination                                                                        // 1260\n */                                                                                                                    // 1261\nSolidityParam.prototype.combine = function (param) {                                                                   // 1262\n    return new SolidityParam(this.value + param.value);                                                                // 1263\n};                                                                                                                     // 1264\n                                                                                                                       // 1265\n/**                                                                                                                    // 1266\n * This method should be called to check if param has dynamic size.                                                    // 1267\n * If it has, it returns true, otherwise false                                                                         // 1268\n *                                                                                                                     // 1269\n * @method isDynamic                                                                                                   // 1270\n * @returns {Boolean}                                                                                                  // 1271\n */                                                                                                                    // 1272\nSolidityParam.prototype.isDynamic = function () {                                                                      // 1273\n    return this.offset !== undefined;                                                                                  // 1274\n};                                                                                                                     // 1275\n                                                                                                                       // 1276\n/**                                                                                                                    // 1277\n * This method should be called to transform offset to bytes                                                           // 1278\n *                                                                                                                     // 1279\n * @method offsetAsBytes                                                                                               // 1280\n * @returns {String} bytes representation of offset                                                                    // 1281\n */                                                                                                                    // 1282\nSolidityParam.prototype.offsetAsBytes = function () {                                                                  // 1283\n    return !this.isDynamic() ? '' : utils.padLeft(utils.toTwosComplement(this.offset).toString(16), 64);               // 1284\n};                                                                                                                     // 1285\n                                                                                                                       // 1286\n/**                                                                                                                    // 1287\n * This method should be called to get static part of param                                                            // 1288\n *                                                                                                                     // 1289\n * @method staticPart                                                                                                  // 1290\n * @returns {String} offset if it is a dynamic param, otherwise value                                                  // 1291\n */                                                                                                                    // 1292\nSolidityParam.prototype.staticPart = function () {                                                                     // 1293\n    if (!this.isDynamic()) {                                                                                           // 1294\n        return this.value;                                                                                             // 1295\n    }                                                                                                                  // 1296\n    return this.offsetAsBytes();                                                                                       // 1297\n};                                                                                                                     // 1298\n                                                                                                                       // 1299\n/**                                                                                                                    // 1300\n * This method should be called to get dynamic part of param                                                           // 1301\n *                                                                                                                     // 1302\n * @method dynamicPart                                                                                                 // 1303\n * @returns {String} returns a value if it is a dynamic param, otherwise empty string                                  // 1304\n */                                                                                                                    // 1305\nSolidityParam.prototype.dynamicPart = function () {                                                                    // 1306\n    return this.isDynamic() ? this.value : '';                                                                         // 1307\n};                                                                                                                     // 1308\n                                                                                                                       // 1309\n/**                                                                                                                    // 1310\n * This method should be called to encode param                                                                        // 1311\n *                                                                                                                     // 1312\n * @method encode                                                                                                      // 1313\n * @returns {String}                                                                                                   // 1314\n */                                                                                                                    // 1315\nSolidityParam.prototype.encode = function () {                                                                         // 1316\n    return this.staticPart() + this.dynamicPart();                                                                     // 1317\n};                                                                                                                     // 1318\n                                                                                                                       // 1319\n/**                                                                                                                    // 1320\n * This method should be called to encode array of params                                                              // 1321\n *                                                                                                                     // 1322\n * @method encodeList                                                                                                  // 1323\n * @param {Array[SolidityParam]} params                                                                                // 1324\n * @returns {String}                                                                                                   // 1325\n */                                                                                                                    // 1326\nSolidityParam.encodeList = function (params) {                                                                         // 1327\n                                                                                                                       // 1328\n    // updating offsets                                                                                                // 1329\n    var totalOffset = params.length * 32;                                                                              // 1330\n    var offsetParams = params.map(function (param) {                                                                   // 1331\n        if (!param.isDynamic()) {                                                                                      // 1332\n            return param;                                                                                              // 1333\n        }                                                                                                              // 1334\n        var offset = totalOffset;                                                                                      // 1335\n        totalOffset += param.dynamicPartLength();                                                                      // 1336\n        return param.withOffset(offset);                                                                               // 1337\n    });                                                                                                                // 1338\n                                                                                                                       // 1339\n    // encode everything!                                                                                              // 1340\n    return offsetParams.reduce(function (result, param) {                                                              // 1341\n        return result + param.dynamicPart();                                                                           // 1342\n    }, offsetParams.reduce(function (result, param) {                                                                  // 1343\n        return result + param.staticPart();                                                                            // 1344\n    }, ''));                                                                                                           // 1345\n};                                                                                                                     // 1346\n                                                                                                                       // 1347\n                                                                                                                       // 1348\n                                                                                                                       // 1349\nmodule.exports = SolidityParam;                                                                                        // 1350\n                                                                                                                       // 1351\n                                                                                                                       // 1352\n},{\"../utils/utils\":20}],12:[function(require,module,exports){                                                         // 1353\nvar f = require('./formatters');                                                                                       // 1354\nvar SolidityType = require('./type');                                                                                  // 1355\n                                                                                                                       // 1356\n/**                                                                                                                    // 1357\n * SolidityTypeReal is a prootype that represents real type                                                            // 1358\n * It matches:                                                                                                         // 1359\n * real                                                                                                                // 1360\n * real[]                                                                                                              // 1361\n * real[4]                                                                                                             // 1362\n * real[][]                                                                                                            // 1363\n * real[3][]                                                                                                           // 1364\n * real[][6][], ...                                                                                                    // 1365\n * real32                                                                                                              // 1366\n * real64[]                                                                                                            // 1367\n * real8[4]                                                                                                            // 1368\n * real256[][]                                                                                                         // 1369\n * real[3][]                                                                                                           // 1370\n * real64[][6][], ...                                                                                                  // 1371\n */                                                                                                                    // 1372\nvar SolidityTypeReal = function () {                                                                                   // 1373\n    this._inputFormatter = f.formatInputReal;                                                                          // 1374\n    this._outputFormatter = f.formatOutputReal;                                                                        // 1375\n};                                                                                                                     // 1376\n                                                                                                                       // 1377\nSolidityTypeReal.prototype = new SolidityType({});                                                                     // 1378\nSolidityTypeReal.prototype.constructor = SolidityTypeReal;                                                             // 1379\n                                                                                                                       // 1380\nSolidityTypeReal.prototype.isType = function (name) {                                                                  // 1381\n    return !!name.match(/real([0-9]*)?(\\[([0-9]*)\\])?/);                                                               // 1382\n};                                                                                                                     // 1383\n                                                                                                                       // 1384\nSolidityTypeReal.prototype.staticPartLength = function (name) {                                                        // 1385\n    return 32 * this.staticArrayLength(name);                                                                          // 1386\n};                                                                                                                     // 1387\n                                                                                                                       // 1388\nmodule.exports = SolidityTypeReal;                                                                                     // 1389\n                                                                                                                       // 1390\n},{\"./formatters\":9,\"./type\":14}],13:[function(require,module,exports){                                                // 1391\nvar f = require('./formatters');                                                                                       // 1392\nvar SolidityType = require('./type');                                                                                  // 1393\n                                                                                                                       // 1394\nvar SolidityTypeString = function () {                                                                                 // 1395\n    this._inputFormatter = f.formatInputString;                                                                        // 1396\n    this._outputFormatter = f.formatOutputString;                                                                      // 1397\n};                                                                                                                     // 1398\n                                                                                                                       // 1399\nSolidityTypeString.prototype = new SolidityType({});                                                                   // 1400\nSolidityTypeString.prototype.constructor = SolidityTypeString;                                                         // 1401\n                                                                                                                       // 1402\nSolidityTypeString.prototype.isType = function (name) {                                                                // 1403\n    return !!name.match(/^string(\\[([0-9]*)\\])*$/);                                                                    // 1404\n};                                                                                                                     // 1405\n                                                                                                                       // 1406\nSolidityTypeString.prototype.staticPartLength = function (name) {                                                      // 1407\n    return 32 * this.staticArrayLength(name);                                                                          // 1408\n};                                                                                                                     // 1409\n                                                                                                                       // 1410\nSolidityTypeString.prototype.isDynamicType = function () {                                                             // 1411\n    return true;                                                                                                       // 1412\n};                                                                                                                     // 1413\n                                                                                                                       // 1414\nmodule.exports = SolidityTypeString;                                                                                   // 1415\n                                                                                                                       // 1416\n                                                                                                                       // 1417\n},{\"./formatters\":9,\"./type\":14}],14:[function(require,module,exports){                                                // 1418\nvar f = require('./formatters');                                                                                       // 1419\nvar SolidityParam = require('./param');                                                                                // 1420\n                                                                                                                       // 1421\n/**                                                                                                                    // 1422\n * SolidityType prototype is used to encode/decode solidity params of certain type                                     // 1423\n */                                                                                                                    // 1424\nvar SolidityType = function (config) {                                                                                 // 1425\n    this._inputFormatter = config.inputFormatter;                                                                      // 1426\n    this._outputFormatter = config.outputFormatter;                                                                    // 1427\n};                                                                                                                     // 1428\n                                                                                                                       // 1429\n/**                                                                                                                    // 1430\n * Should be used to determine if this SolidityType do match given name                                                // 1431\n *                                                                                                                     // 1432\n * @method isType                                                                                                      // 1433\n * @param {String} name                                                                                                // 1434\n * @return {Bool} true if type match this SolidityType, otherwise false                                                // 1435\n */                                                                                                                    // 1436\nSolidityType.prototype.isType = function (name) {                                                                      // 1437\n    throw \"this method should be overrwritten for type \" + name;                                                       // 1438\n};                                                                                                                     // 1439\n                                                                                                                       // 1440\n/**                                                                                                                    // 1441\n * Should be used to determine what is the length of static part in given type                                         // 1442\n *                                                                                                                     // 1443\n * @method staticPartLength                                                                                            // 1444\n * @param {String} name                                                                                                // 1445\n * @return {Number} length of static part in bytes                                                                     // 1446\n */                                                                                                                    // 1447\nSolidityType.prototype.staticPartLength = function (name) {                                                            // 1448\n    throw \"this method should be overrwritten for type: \" + name;                                                      // 1449\n};                                                                                                                     // 1450\n                                                                                                                       // 1451\n/**                                                                                                                    // 1452\n * Should be used to determine if type is dynamic array                                                                // 1453\n * eg:                                                                                                                 // 1454\n * \"type[]\" => true                                                                                                    // 1455\n * \"type[4]\" => false                                                                                                  // 1456\n *                                                                                                                     // 1457\n * @method isDynamicArray                                                                                              // 1458\n * @param {String} name                                                                                                // 1459\n * @return {Bool} true if the type is dynamic array                                                                    // 1460\n */                                                                                                                    // 1461\nSolidityType.prototype.isDynamicArray = function (name) {                                                              // 1462\n    var nestedTypes = this.nestedTypes(name);                                                                          // 1463\n    return !!nestedTypes && !nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);                                  // 1464\n};                                                                                                                     // 1465\n                                                                                                                       // 1466\n/**                                                                                                                    // 1467\n * Should be used to determine if type is static array                                                                 // 1468\n * eg:                                                                                                                 // 1469\n * \"type[]\" => false                                                                                                   // 1470\n * \"type[4]\" => true                                                                                                   // 1471\n *                                                                                                                     // 1472\n * @method isStaticArray                                                                                               // 1473\n * @param {String} name                                                                                                // 1474\n * @return {Bool} true if the type is static array                                                                     // 1475\n */                                                                                                                    // 1476\nSolidityType.prototype.isStaticArray = function (name) {                                                               // 1477\n    var nestedTypes = this.nestedTypes(name);                                                                          // 1478\n    return !!nestedTypes && !!nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);                                 // 1479\n};                                                                                                                     // 1480\n                                                                                                                       // 1481\n/**                                                                                                                    // 1482\n * Should return length of static array                                                                                // 1483\n * eg.                                                                                                                 // 1484\n * \"int[32]\" => 32                                                                                                     // 1485\n * \"int256[14]\" => 14                                                                                                  // 1486\n * \"int[2][3]\" => 3                                                                                                    // 1487\n * \"int\" => 1                                                                                                          // 1488\n * \"int[1]\" => 1                                                                                                       // 1489\n * \"int[]\" => 1                                                                                                        // 1490\n *                                                                                                                     // 1491\n * @method staticArrayLength                                                                                           // 1492\n * @param {String} name                                                                                                // 1493\n * @return {Number} static array length                                                                                // 1494\n */                                                                                                                    // 1495\nSolidityType.prototype.staticArrayLength = function (name) {                                                           // 1496\n    var nestedTypes = this.nestedTypes(name);                                                                          // 1497\n    if (nestedTypes) {                                                                                                 // 1498\n       return parseInt(nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g) || 1);                                  // 1499\n    }                                                                                                                  // 1500\n    return 1;                                                                                                          // 1501\n};                                                                                                                     // 1502\n                                                                                                                       // 1503\n/**                                                                                                                    // 1504\n * Should return nested type                                                                                           // 1505\n * eg.                                                                                                                 // 1506\n * \"int[32]\" => \"int\"                                                                                                  // 1507\n * \"int256[14]\" => \"int256\"                                                                                            // 1508\n * \"int[2][3]\" => \"int[2]\"                                                                                             // 1509\n * \"int\" => \"int\"                                                                                                      // 1510\n * \"int[]\" => \"int\"                                                                                                    // 1511\n *                                                                                                                     // 1512\n * @method nestedName                                                                                                  // 1513\n * @param {String} name                                                                                                // 1514\n * @return {String} nested name                                                                                        // 1515\n */                                                                                                                    // 1516\nSolidityType.prototype.nestedName = function (name) {                                                                  // 1517\n    // remove last [] in name                                                                                          // 1518\n    var nestedTypes = this.nestedTypes(name);                                                                          // 1519\n    if (!nestedTypes) {                                                                                                // 1520\n        return name;                                                                                                   // 1521\n    }                                                                                                                  // 1522\n                                                                                                                       // 1523\n    return name.substr(0, name.length - nestedTypes[nestedTypes.length - 1].length);                                   // 1524\n};                                                                                                                     // 1525\n                                                                                                                       // 1526\n/**                                                                                                                    // 1527\n * Should return true if type has dynamic size by default                                                              // 1528\n * such types are \"string\", \"bytes\"                                                                                    // 1529\n *                                                                                                                     // 1530\n * @method isDynamicType                                                                                               // 1531\n * @param {String} name                                                                                                // 1532\n * @return {Bool} true if is dynamic, otherwise false                                                                  // 1533\n */                                                                                                                    // 1534\nSolidityType.prototype.isDynamicType = function () {                                                                   // 1535\n    return false;                                                                                                      // 1536\n};                                                                                                                     // 1537\n                                                                                                                       // 1538\n/**                                                                                                                    // 1539\n * Should return array of nested types                                                                                 // 1540\n * eg.                                                                                                                 // 1541\n * \"int[2][3][]\" => [\"[2]\", \"[3]\", \"[]\"]                                                                               // 1542\n * \"int[] => [\"[]\"]                                                                                                    // 1543\n * \"int\" => null                                                                                                       // 1544\n *                                                                                                                     // 1545\n * @method nestedTypes                                                                                                 // 1546\n * @param {String} name                                                                                                // 1547\n * @return {Array} array of nested types                                                                               // 1548\n */                                                                                                                    // 1549\nSolidityType.prototype.nestedTypes = function (name) {                                                                 // 1550\n    // return list of strings eg. \"[]\", \"[3]\", \"[]\", \"[2]\"                                                             // 1551\n    return name.match(/(\\[[0-9]*\\])/g);                                                                                // 1552\n};                                                                                                                     // 1553\n                                                                                                                       // 1554\n/**                                                                                                                    // 1555\n * Should be used to encode the value                                                                                  // 1556\n *                                                                                                                     // 1557\n * @method encode                                                                                                      // 1558\n * @param {Object} value                                                                                               // 1559\n * @param {String} name                                                                                                // 1560\n * @return {String} encoded value                                                                                      // 1561\n */                                                                                                                    // 1562\nSolidityType.prototype.encode = function (value, name) {                                                               // 1563\n    var self = this;                                                                                                   // 1564\n    if (this.isDynamicArray(name)) {                                                                                   // 1565\n                                                                                                                       // 1566\n        return (function () {                                                                                          // 1567\n            var length = value.length;                          // in int                                              // 1568\n            var nestedName = self.nestedName(name);                                                                    // 1569\n                                                                                                                       // 1570\n            var result = [];                                                                                           // 1571\n            result.push(f.formatInputInt(length).encode());                                                            // 1572\n                                                                                                                       // 1573\n            value.forEach(function (v) {                                                                               // 1574\n                result.push(self.encode(v, nestedName));                                                               // 1575\n            });                                                                                                        // 1576\n                                                                                                                       // 1577\n            return result;                                                                                             // 1578\n        })();                                                                                                          // 1579\n                                                                                                                       // 1580\n    } else if (this.isStaticArray(name)) {                                                                             // 1581\n                                                                                                                       // 1582\n        return (function () {                                                                                          // 1583\n            var length = self.staticArrayLength(name);          // in int                                              // 1584\n            var nestedName = self.nestedName(name);                                                                    // 1585\n                                                                                                                       // 1586\n            var result = [];                                                                                           // 1587\n            for (var i = 0; i < length; i++) {                                                                         // 1588\n                result.push(self.encode(value[i], nestedName));                                                        // 1589\n            }                                                                                                          // 1590\n                                                                                                                       // 1591\n            return result;                                                                                             // 1592\n        })();                                                                                                          // 1593\n                                                                                                                       // 1594\n    }                                                                                                                  // 1595\n                                                                                                                       // 1596\n    return this._inputFormatter(value, name).encode();                                                                 // 1597\n};                                                                                                                     // 1598\n                                                                                                                       // 1599\n/**                                                                                                                    // 1600\n * Should be used to decode value from bytes                                                                           // 1601\n *                                                                                                                     // 1602\n * @method decode                                                                                                      // 1603\n * @param {String} bytes                                                                                               // 1604\n * @param {Number} offset in bytes                                                                                     // 1605\n * @param {String} name type name                                                                                      // 1606\n * @returns {Object} decoded value                                                                                     // 1607\n */                                                                                                                    // 1608\nSolidityType.prototype.decode = function (bytes, offset, name) {                                                       // 1609\n    var self = this;                                                                                                   // 1610\n                                                                                                                       // 1611\n    if (this.isDynamicArray(name)) {                                                                                   // 1612\n                                                                                                                       // 1613\n        return (function () {                                                                                          // 1614\n            var arrayOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes                               // 1615\n            var length = parseInt('0x' + bytes.substr(arrayOffset * 2, 64)); // in int                                 // 1616\n            var arrayStart = arrayOffset + 32; // array starts after length; // in bytes                               // 1617\n                                                                                                                       // 1618\n            var nestedName = self.nestedName(name);                                                                    // 1619\n            var nestedStaticPartLength = self.staticPartLength(nestedName);  // in bytes                               // 1620\n            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;                   // 1621\n            var result = [];                                                                                           // 1622\n                                                                                                                       // 1623\n            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {          // 1624\n                result.push(self.decode(bytes, arrayStart + i, nestedName));                                           // 1625\n            }                                                                                                          // 1626\n                                                                                                                       // 1627\n            return result;                                                                                             // 1628\n        })();                                                                                                          // 1629\n                                                                                                                       // 1630\n    } else if (this.isStaticArray(name)) {                                                                             // 1631\n                                                                                                                       // 1632\n        return (function () {                                                                                          // 1633\n            var length = self.staticArrayLength(name);                      // in int                                  // 1634\n            var arrayStart = offset;                                        // in bytes                                // 1635\n                                                                                                                       // 1636\n            var nestedName = self.nestedName(name);                                                                    // 1637\n            var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes                                // 1638\n            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;                   // 1639\n            var result = [];                                                                                           // 1640\n                                                                                                                       // 1641\n            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {          // 1642\n                result.push(self.decode(bytes, arrayStart + i, nestedName));                                           // 1643\n            }                                                                                                          // 1644\n                                                                                                                       // 1645\n            return result;                                                                                             // 1646\n        })();                                                                                                          // 1647\n    } else if (this.isDynamicType(name)) {                                                                             // 1648\n                                                                                                                       // 1649\n        return (function () {                                                                                          // 1650\n            var dynamicOffset = parseInt('0x' + bytes.substr(offset * 2, 64));      // in bytes                        // 1651\n            var length = parseInt('0x' + bytes.substr(dynamicOffset * 2, 64));      // in bytes                        // 1652\n            var roundedLength = Math.floor((length + 31) / 32);                     // in int                          // 1653\n                                                                                                                       // 1654\n            return self._outputFormatter(new SolidityParam(bytes.substr(dynamicOffset * 2, ( 1 + roundedLength) * 64), 0));\n        })();                                                                                                          // 1656\n    }                                                                                                                  // 1657\n                                                                                                                       // 1658\n    var length = this.staticPartLength(name);                                                                          // 1659\n    return this._outputFormatter(new SolidityParam(bytes.substr(offset * 2, length * 2)));                             // 1660\n};                                                                                                                     // 1661\n                                                                                                                       // 1662\nmodule.exports = SolidityType;                                                                                         // 1663\n                                                                                                                       // 1664\n},{\"./formatters\":9,\"./param\":11}],15:[function(require,module,exports){                                               // 1665\nvar f = require('./formatters');                                                                                       // 1666\nvar SolidityType = require('./type');                                                                                  // 1667\n                                                                                                                       // 1668\n/**                                                                                                                    // 1669\n * SolidityTypeUInt is a prootype that represents uint type                                                            // 1670\n * It matches:                                                                                                         // 1671\n * uint                                                                                                                // 1672\n * uint[]                                                                                                              // 1673\n * uint[4]                                                                                                             // 1674\n * uint[][]                                                                                                            // 1675\n * uint[3][]                                                                                                           // 1676\n * uint[][6][], ...                                                                                                    // 1677\n * uint32                                                                                                              // 1678\n * uint64[]                                                                                                            // 1679\n * uint8[4]                                                                                                            // 1680\n * uint256[][]                                                                                                         // 1681\n * uint[3][]                                                                                                           // 1682\n * uint64[][6][], ...                                                                                                  // 1683\n */                                                                                                                    // 1684\nvar SolidityTypeUInt = function () {                                                                                   // 1685\n    this._inputFormatter = f.formatInputInt;                                                                           // 1686\n    this._outputFormatter = f.formatOutputUInt;                                                                        // 1687\n};                                                                                                                     // 1688\n                                                                                                                       // 1689\nSolidityTypeUInt.prototype = new SolidityType({});                                                                     // 1690\nSolidityTypeUInt.prototype.constructor = SolidityTypeUInt;                                                             // 1691\n                                                                                                                       // 1692\nSolidityTypeUInt.prototype.isType = function (name) {                                                                  // 1693\n    return !!name.match(/^uint([0-9]*)?(\\[([0-9]*)\\])*$/);                                                             // 1694\n};                                                                                                                     // 1695\n                                                                                                                       // 1696\nSolidityTypeUInt.prototype.staticPartLength = function (name) {                                                        // 1697\n    return 32 * this.staticArrayLength(name);                                                                          // 1698\n};                                                                                                                     // 1699\n                                                                                                                       // 1700\nmodule.exports = SolidityTypeUInt;                                                                                     // 1701\n                                                                                                                       // 1702\n},{\"./formatters\":9,\"./type\":14}],16:[function(require,module,exports){                                                // 1703\nvar f = require('./formatters');                                                                                       // 1704\nvar SolidityType = require('./type');                                                                                  // 1705\n                                                                                                                       // 1706\n/**                                                                                                                    // 1707\n * SolidityTypeUReal is a prootype that represents ureal type                                                          // 1708\n * It matches:                                                                                                         // 1709\n * ureal                                                                                                               // 1710\n * ureal[]                                                                                                             // 1711\n * ureal[4]                                                                                                            // 1712\n * ureal[][]                                                                                                           // 1713\n * ureal[3][]                                                                                                          // 1714\n * ureal[][6][], ...                                                                                                   // 1715\n * ureal32                                                                                                             // 1716\n * ureal64[]                                                                                                           // 1717\n * ureal8[4]                                                                                                           // 1718\n * ureal256[][]                                                                                                        // 1719\n * ureal[3][]                                                                                                          // 1720\n * ureal64[][6][], ...                                                                                                 // 1721\n */                                                                                                                    // 1722\nvar SolidityTypeUReal = function () {                                                                                  // 1723\n    this._inputFormatter = f.formatInputReal;                                                                          // 1724\n    this._outputFormatter = f.formatOutputUReal;                                                                       // 1725\n};                                                                                                                     // 1726\n                                                                                                                       // 1727\nSolidityTypeUReal.prototype = new SolidityType({});                                                                    // 1728\nSolidityTypeUReal.prototype.constructor = SolidityTypeUReal;                                                           // 1729\n                                                                                                                       // 1730\nSolidityTypeUReal.prototype.isType = function (name) {                                                                 // 1731\n    return !!name.match(/^ureal([0-9]*)?(\\[([0-9]*)\\])*$/);                                                            // 1732\n};                                                                                                                     // 1733\n                                                                                                                       // 1734\nSolidityTypeUReal.prototype.staticPartLength = function (name) {                                                       // 1735\n    return 32 * this.staticArrayLength(name);                                                                          // 1736\n};                                                                                                                     // 1737\n                                                                                                                       // 1738\nmodule.exports = SolidityTypeUReal;                                                                                    // 1739\n                                                                                                                       // 1740\n},{\"./formatters\":9,\"./type\":14}],17:[function(require,module,exports){                                                // 1741\n'use strict';                                                                                                          // 1742\n                                                                                                                       // 1743\n// go env doesn't have and need XMLHttpRequest                                                                         // 1744\nif (typeof XMLHttpRequest === 'undefined') {                                                                           // 1745\n    exports.XMLHttpRequest = {};                                                                                       // 1746\n} else {                                                                                                               // 1747\n    exports.XMLHttpRequest = XMLHttpRequest; // jshint ignore:line                                                     // 1748\n}                                                                                                                      // 1749\n                                                                                                                       // 1750\n                                                                                                                       // 1751\n},{}],18:[function(require,module,exports){                                                                            // 1752\n/*                                                                                                                     // 1753\n    This file is part of web3.js.                                                                                      // 1754\n                                                                                                                       // 1755\n    web3.js is free software: you can redistribute it and/or modify                                                    // 1756\n    it under the terms of the GNU Lesser General Public License as published by                                        // 1757\n    the Free Software Foundation, either version 3 of the License, or                                                  // 1758\n    (at your option) any later version.                                                                                // 1759\n                                                                                                                       // 1760\n    web3.js is distributed in the hope that it will be useful,                                                         // 1761\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1762\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1763\n    GNU Lesser General Public License for more details.                                                                // 1764\n                                                                                                                       // 1765\n    You should have received a copy of the GNU Lesser General Public License                                           // 1766\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1767\n*/                                                                                                                     // 1768\n/** @file config.js                                                                                                    // 1769\n * @authors:                                                                                                           // 1770\n *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 1771\n * @date 2015                                                                                                          // 1772\n */                                                                                                                    // 1773\n                                                                                                                       // 1774\n/**                                                                                                                    // 1775\n * Utils                                                                                                               // 1776\n *                                                                                                                     // 1777\n * @module utils                                                                                                       // 1778\n */                                                                                                                    // 1779\n                                                                                                                       // 1780\n/**                                                                                                                    // 1781\n * Utility functions                                                                                                   // 1782\n *                                                                                                                     // 1783\n * @class [utils] config                                                                                               // 1784\n * @constructor                                                                                                        // 1785\n */                                                                                                                    // 1786\n                                                                                                                       // 1787\n                                                                                                                       // 1788\n/// required to define ETH_BIGNUMBER_ROUNDING_MODE                                                                     // 1789\nvar BigNumber = require('bignumber.js');                                                                               // 1790\n                                                                                                                       // 1791\nvar ETH_UNITS = [                                                                                                      // 1792\n    'wei',                                                                                                             // 1793\n    'kwei',                                                                                                            // 1794\n    'Mwei',                                                                                                            // 1795\n    'Gwei',                                                                                                            // 1796\n    'szabo',                                                                                                           // 1797\n    'finney',                                                                                                          // 1798\n    'femtoether',                                                                                                      // 1799\n    'picoether',                                                                                                       // 1800\n    'nanoether',                                                                                                       // 1801\n    'microether',                                                                                                      // 1802\n    'milliether',                                                                                                      // 1803\n    'nano',                                                                                                            // 1804\n    'micro',                                                                                                           // 1805\n    'milli',                                                                                                           // 1806\n    'ether',                                                                                                           // 1807\n    'grand',                                                                                                           // 1808\n    'Mether',                                                                                                          // 1809\n    'Gether',                                                                                                          // 1810\n    'Tether',                                                                                                          // 1811\n    'Pether',                                                                                                          // 1812\n    'Eether',                                                                                                          // 1813\n    'Zether',                                                                                                          // 1814\n    'Yether',                                                                                                          // 1815\n    'Nether',                                                                                                          // 1816\n    'Dether',                                                                                                          // 1817\n    'Vether',                                                                                                          // 1818\n    'Uether'                                                                                                           // 1819\n];                                                                                                                     // 1820\n                                                                                                                       // 1821\nmodule.exports = {                                                                                                     // 1822\n    ETH_PADDING: 32,                                                                                                   // 1823\n    ETH_SIGNATURE_LENGTH: 4,                                                                                           // 1824\n    ETH_UNITS: ETH_UNITS,                                                                                              // 1825\n    ETH_BIGNUMBER_ROUNDING_MODE: { ROUNDING_MODE: BigNumber.ROUND_DOWN },                                              // 1826\n    ETH_POLLING_TIMEOUT: 1000/2,                                                                                       // 1827\n    defaultBlock: 'latest',                                                                                            // 1828\n    defaultAccount: undefined                                                                                          // 1829\n};                                                                                                                     // 1830\n                                                                                                                       // 1831\n                                                                                                                       // 1832\n},{\"bignumber.js\":\"bignumber.js\"}],19:[function(require,module,exports){                                               // 1833\n/*                                                                                                                     // 1834\n    This file is part of web3.js.                                                                                      // 1835\n                                                                                                                       // 1836\n    web3.js is free software: you can redistribute it and/or modify                                                    // 1837\n    it under the terms of the GNU Lesser General Public License as published by                                        // 1838\n    the Free Software Foundation, either version 3 of the License, or                                                  // 1839\n    (at your option) any later version.                                                                                // 1840\n                                                                                                                       // 1841\n    web3.js is distributed in the hope that it will be useful,                                                         // 1842\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1843\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1844\n    GNU Lesser General Public License for more details.                                                                // 1845\n                                                                                                                       // 1846\n    You should have received a copy of the GNU Lesser General Public License                                           // 1847\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1848\n*/                                                                                                                     // 1849\n/**                                                                                                                    // 1850\n * @file sha3.js                                                                                                       // 1851\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 1852\n * @date 2015                                                                                                          // 1853\n */                                                                                                                    // 1854\n                                                                                                                       // 1855\nvar CryptoJS = require('crypto-js');                                                                                   // 1856\nvar sha3 = require('crypto-js/sha3');                                                                                  // 1857\n                                                                                                                       // 1858\nmodule.exports = function (value, options) {                                                                           // 1859\n    if (options && options.encoding === 'hex') {                                                                       // 1860\n        if (value.length > 2 && value.substr(0, 2) === '0x') {                                                         // 1861\n            value = value.substr(2);                                                                                   // 1862\n        }                                                                                                              // 1863\n        value = CryptoJS.enc.Hex.parse(value);                                                                         // 1864\n    }                                                                                                                  // 1865\n                                                                                                                       // 1866\n    return sha3(value, {                                                                                               // 1867\n        outputLength: 256                                                                                              // 1868\n    }).toString();                                                                                                     // 1869\n};                                                                                                                     // 1870\n                                                                                                                       // 1871\n                                                                                                                       // 1872\n},{\"crypto-js\":57,\"crypto-js/sha3\":78}],20:[function(require,module,exports){                                          // 1873\n/*                                                                                                                     // 1874\n    This file is part of web3.js.                                                                                      // 1875\n                                                                                                                       // 1876\n    web3.js is free software: you can redistribute it and/or modify                                                    // 1877\n    it under the terms of the GNU Lesser General Public License as published by                                        // 1878\n    the Free Software Foundation, either version 3 of the License, or                                                  // 1879\n    (at your option) any later version.                                                                                // 1880\n                                                                                                                       // 1881\n    web3.js is distributed in the hope that it will be useful,                                                         // 1882\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 1883\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 1884\n    GNU Lesser General Public License for more details.                                                                // 1885\n                                                                                                                       // 1886\n    You should have received a copy of the GNU Lesser General Public License                                           // 1887\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 1888\n*/                                                                                                                     // 1889\n/**                                                                                                                    // 1890\n * @file utils.js                                                                                                      // 1891\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 1892\n * @date 2015                                                                                                          // 1893\n */                                                                                                                    // 1894\n                                                                                                                       // 1895\n/**                                                                                                                    // 1896\n * Utils                                                                                                               // 1897\n *                                                                                                                     // 1898\n * @module utils                                                                                                       // 1899\n */                                                                                                                    // 1900\n                                                                                                                       // 1901\n/**                                                                                                                    // 1902\n * Utility functions                                                                                                   // 1903\n *                                                                                                                     // 1904\n * @class [utils] utils                                                                                                // 1905\n * @constructor                                                                                                        // 1906\n */                                                                                                                    // 1907\n                                                                                                                       // 1908\n                                                                                                                       // 1909\nvar BigNumber = require('bignumber.js');                                                                               // 1910\nvar utf8 = require('utf8');                                                                                            // 1911\n                                                                                                                       // 1912\nvar unitMap = {                                                                                                        // 1913\n    'wei':          '1',                                                                                               // 1914\n    'kwei':         '1000',                                                                                            // 1915\n    'ada':          '1000',                                                                                            // 1916\n    'femtoether':   '1000',                                                                                            // 1917\n    'mwei':         '1000000',                                                                                         // 1918\n    'babbage':      '1000000',                                                                                         // 1919\n    'picoether':    '1000000',                                                                                         // 1920\n    'gwei':         '1000000000',                                                                                      // 1921\n    'shannon':      '1000000000',                                                                                      // 1922\n    'nanoether':    '1000000000',                                                                                      // 1923\n    'nano':         '1000000000',                                                                                      // 1924\n    'szabo':        '1000000000000',                                                                                   // 1925\n    'microether':   '1000000000000',                                                                                   // 1926\n    'micro':        '1000000000000',                                                                                   // 1927\n    'finney':       '1000000000000000',                                                                                // 1928\n    'milliether':    '1000000000000000',                                                                               // 1929\n    'milli':         '1000000000000000',                                                                               // 1930\n    'ether':        '1000000000000000000',                                                                             // 1931\n    'kether':       '1000000000000000000000',                                                                          // 1932\n    'grand':        '1000000000000000000000',                                                                          // 1933\n    'einstein':     '1000000000000000000000',                                                                          // 1934\n    'mether':       '1000000000000000000000000',                                                                       // 1935\n    'gether':       '1000000000000000000000000000',                                                                    // 1936\n    'tether':       '1000000000000000000000000000000'                                                                  // 1937\n};                                                                                                                     // 1938\n                                                                                                                       // 1939\n/**                                                                                                                    // 1940\n * Should be called to pad string to expected length                                                                   // 1941\n *                                                                                                                     // 1942\n * @method padLeft                                                                                                     // 1943\n * @param {String} string to be padded                                                                                 // 1944\n * @param {Number} characters that result string should have                                                           // 1945\n * @param {String} sign, by default 0                                                                                  // 1946\n * @returns {String} right aligned string                                                                              // 1947\n */                                                                                                                    // 1948\nvar padLeft = function (string, chars, sign) {                                                                         // 1949\n    return new Array(chars - string.length + 1).join(sign ? sign : \"0\") + string;                                      // 1950\n};                                                                                                                     // 1951\n                                                                                                                       // 1952\n/**                                                                                                                    // 1953\n * Should be called to pad string to expected length                                                                   // 1954\n *                                                                                                                     // 1955\n * @method padRight                                                                                                    // 1956\n * @param {String} string to be padded                                                                                 // 1957\n * @param {Number} characters that result string should have                                                           // 1958\n * @param {String} sign, by default 0                                                                                  // 1959\n * @returns {String} right aligned string                                                                              // 1960\n */                                                                                                                    // 1961\nvar padRight = function (string, chars, sign) {                                                                        // 1962\n    return string + (new Array(chars - string.length + 1).join(sign ? sign : \"0\"));                                    // 1963\n};                                                                                                                     // 1964\n                                                                                                                       // 1965\n/**                                                                                                                    // 1966\n * Should be called to get utf8 from it's hex representation                                                           // 1967\n *                                                                                                                     // 1968\n * @method toUtf8                                                                                                      // 1969\n * @param {String} string in hex                                                                                       // 1970\n * @returns {String} ascii string representation of hex value                                                          // 1971\n */                                                                                                                    // 1972\nvar toUtf8 = function(hex) {                                                                                           // 1973\n// Find termination                                                                                                    // 1974\n    var str = \"\";                                                                                                      // 1975\n    var i = 0, l = hex.length;                                                                                         // 1976\n    if (hex.substring(0, 2) === '0x') {                                                                                // 1977\n        i = 2;                                                                                                         // 1978\n    }                                                                                                                  // 1979\n    for (; i < l; i+=2) {                                                                                              // 1980\n        var code = parseInt(hex.substr(i, 2), 16);                                                                     // 1981\n        if (code === 0)                                                                                                // 1982\n            break;                                                                                                     // 1983\n        str += String.fromCharCode(code);                                                                              // 1984\n    }                                                                                                                  // 1985\n                                                                                                                       // 1986\n    return utf8.decode(str);                                                                                           // 1987\n};                                                                                                                     // 1988\n                                                                                                                       // 1989\n/**                                                                                                                    // 1990\n * Should be called to get ascii from it's hex representation                                                          // 1991\n *                                                                                                                     // 1992\n * @method toAscii                                                                                                     // 1993\n * @param {String} string in hex                                                                                       // 1994\n * @returns {String} ascii string representation of hex value                                                          // 1995\n */                                                                                                                    // 1996\nvar toAscii = function(hex) {                                                                                          // 1997\n// Find termination                                                                                                    // 1998\n    var str = \"\";                                                                                                      // 1999\n    var i = 0, l = hex.length;                                                                                         // 2000\n    if (hex.substring(0, 2) === '0x') {                                                                                // 2001\n        i = 2;                                                                                                         // 2002\n    }                                                                                                                  // 2003\n    for (; i < l; i+=2) {                                                                                              // 2004\n        var code = parseInt(hex.substr(i, 2), 16);                                                                     // 2005\n        str += String.fromCharCode(code);                                                                              // 2006\n    }                                                                                                                  // 2007\n                                                                                                                       // 2008\n    return str;                                                                                                        // 2009\n};                                                                                                                     // 2010\n                                                                                                                       // 2011\n/**                                                                                                                    // 2012\n * Should be called to get hex representation (prefixed by 0x) of utf8 a string                                        // 2013\n *                                                                                                                     // 2014\n * @method fromUtf8                                                                                                    // 2015\n * @param {String} string                                                                                              // 2016\n * @param {Number} optional padding                                                                                    // 2017\n * @returns {String} hex representation of input string                                                                // 2018\n */                                                                                                                    // 2019\nvar fromUtf8 = function(str) {                                                                                         // 2020\n    str = utf8.encode(str);                                                                                            // 2021\n    var hex = \"\";                                                                                                      // 2022\n    for(var i = 0; i < str.length; i++) {                                                                              // 2023\n        var code = str.charCodeAt(i);                                                                                  // 2024\n        if (code === 0)                                                                                                // 2025\n            break;                                                                                                     // 2026\n        var n = code.toString(16);                                                                                     // 2027\n        hex += n.length < 2 ? '0' + n : n;                                                                             // 2028\n    }                                                                                                                  // 2029\n                                                                                                                       // 2030\n    return \"0x\" + hex;                                                                                                 // 2031\n};                                                                                                                     // 2032\n                                                                                                                       // 2033\n/**                                                                                                                    // 2034\n * Should be called to get hex representation (prefixed by 0x) of ascii string                                         // 2035\n *                                                                                                                     // 2036\n * @method fromAscii                                                                                                   // 2037\n * @param {String} string                                                                                              // 2038\n * @param {Number} optional padding                                                                                    // 2039\n * @returns {String} hex representation of input string                                                                // 2040\n */                                                                                                                    // 2041\nvar fromAscii = function(str) {                                                                                        // 2042\n    var hex = \"\";                                                                                                      // 2043\n    for(var i = 0; i < str.length; i++) {                                                                              // 2044\n        var code = str.charCodeAt(i);                                                                                  // 2045\n        var n = code.toString(16);                                                                                     // 2046\n        hex += n.length < 2 ? '0' + n : n;                                                                             // 2047\n    }                                                                                                                  // 2048\n                                                                                                                       // 2049\n    return \"0x\" + hex;                                                                                                 // 2050\n};                                                                                                                     // 2051\n                                                                                                                       // 2052\n/**                                                                                                                    // 2053\n * Should be used to create full function/event name from json abi                                                     // 2054\n *                                                                                                                     // 2055\n * @method transformToFullName                                                                                         // 2056\n * @param {Object} json-abi                                                                                            // 2057\n * @return {String} full fnction/event name                                                                            // 2058\n */                                                                                                                    // 2059\nvar transformToFullName = function (json) {                                                                            // 2060\n    if (json.name.indexOf('(') !== -1) {                                                                               // 2061\n        return json.name;                                                                                              // 2062\n    }                                                                                                                  // 2063\n                                                                                                                       // 2064\n    var typeName = json.inputs.map(function(i){return i.type; }).join();                                               // 2065\n    return json.name + '(' + typeName + ')';                                                                           // 2066\n};                                                                                                                     // 2067\n                                                                                                                       // 2068\n/**                                                                                                                    // 2069\n * Should be called to get display name of contract function                                                           // 2070\n *                                                                                                                     // 2071\n * @method extractDisplayName                                                                                          // 2072\n * @param {String} name of function/event                                                                              // 2073\n * @returns {String} display name for function/event eg. multiply(uint256) -> multiply                                 // 2074\n */                                                                                                                    // 2075\nvar extractDisplayName = function (name) {                                                                             // 2076\n    var length = name.indexOf('(');                                                                                    // 2077\n    return length !== -1 ? name.substr(0, length) : name;                                                              // 2078\n};                                                                                                                     // 2079\n                                                                                                                       // 2080\n/// @returns overloaded part of function/event name                                                                    // 2081\nvar extractTypeName = function (name) {                                                                                // 2082\n    /// TODO: make it invulnerable                                                                                     // 2083\n    var length = name.indexOf('(');                                                                                    // 2084\n    return length !== -1 ? name.substr(length + 1, name.length - 1 - (length + 1)).replace(' ', '') : \"\";              // 2085\n};                                                                                                                     // 2086\n                                                                                                                       // 2087\n/**                                                                                                                    // 2088\n * Converts value to it's decimal representation in string                                                             // 2089\n *                                                                                                                     // 2090\n * @method toDecimal                                                                                                   // 2091\n * @param {String|Number|BigNumber}                                                                                    // 2092\n * @return {String}                                                                                                    // 2093\n */                                                                                                                    // 2094\nvar toDecimal = function (value) {                                                                                     // 2095\n    return toBigNumber(value).toNumber();                                                                              // 2096\n};                                                                                                                     // 2097\n                                                                                                                       // 2098\n/**                                                                                                                    // 2099\n * Converts value to it's hex representation                                                                           // 2100\n *                                                                                                                     // 2101\n * @method fromDecimal                                                                                                 // 2102\n * @param {String|Number|BigNumber}                                                                                    // 2103\n * @return {String}                                                                                                    // 2104\n */                                                                                                                    // 2105\nvar fromDecimal = function (value) {                                                                                   // 2106\n    var number = toBigNumber(value);                                                                                   // 2107\n    var result = number.toString(16);                                                                                  // 2108\n                                                                                                                       // 2109\n    return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;                                              // 2110\n};                                                                                                                     // 2111\n                                                                                                                       // 2112\n/**                                                                                                                    // 2113\n * Auto converts any given value into it's hex representation.                                                         // 2114\n *                                                                                                                     // 2115\n * And even stringifys objects before.                                                                                 // 2116\n *                                                                                                                     // 2117\n * @method toHex                                                                                                       // 2118\n * @param {String|Number|BigNumber|Object}                                                                             // 2119\n * @return {String}                                                                                                    // 2120\n */                                                                                                                    // 2121\nvar toHex = function (val) {                                                                                           // 2122\n    /*jshint maxcomplexity: 8 */                                                                                       // 2123\n                                                                                                                       // 2124\n    if (isBoolean(val))                                                                                                // 2125\n        return fromDecimal(+val);                                                                                      // 2126\n                                                                                                                       // 2127\n    if (isBigNumber(val))                                                                                              // 2128\n        return fromDecimal(val);                                                                                       // 2129\n                                                                                                                       // 2130\n    if (isObject(val))                                                                                                 // 2131\n        return fromUtf8(JSON.stringify(val));                                                                          // 2132\n                                                                                                                       // 2133\n    // if its a negative number, pass it through fromDecimal                                                           // 2134\n    if (isString(val)) {                                                                                               // 2135\n        if (val.indexOf('-0x') === 0)                                                                                  // 2136\n            return fromDecimal(val);                                                                                   // 2137\n        else if(val.indexOf('0x') === 0)                                                                               // 2138\n            return val;                                                                                                // 2139\n        else if (!isFinite(val))                                                                                       // 2140\n            return fromAscii(val);                                                                                     // 2141\n    }                                                                                                                  // 2142\n                                                                                                                       // 2143\n    return fromDecimal(val);                                                                                           // 2144\n};                                                                                                                     // 2145\n                                                                                                                       // 2146\n/**                                                                                                                    // 2147\n * Returns value of unit in Wei                                                                                        // 2148\n *                                                                                                                     // 2149\n * @method getValueOfUnit                                                                                              // 2150\n * @param {String} unit the unit to convert to, default ether                                                          // 2151\n * @returns {BigNumber} value of the unit (in Wei)                                                                     // 2152\n * @throws error if the unit is not correct:w                                                                          // 2153\n */                                                                                                                    // 2154\nvar getValueOfUnit = function (unit) {                                                                                 // 2155\n    unit = unit ? unit.toLowerCase() : 'ether';                                                                        // 2156\n    var unitValue = unitMap[unit];                                                                                     // 2157\n    if (unitValue === undefined) {                                                                                     // 2158\n        throw new Error('This unit doesn\\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));\n    }                                                                                                                  // 2160\n    return new BigNumber(unitValue, 10);                                                                               // 2161\n};                                                                                                                     // 2162\n                                                                                                                       // 2163\n/**                                                                                                                    // 2164\n * Takes a number of wei and converts it to any other ether unit.                                                      // 2165\n *                                                                                                                     // 2166\n * Possible units are:                                                                                                 // 2167\n *   SI Short   SI Full        Effigy       Other                                                                      // 2168\n * - kwei       femtoether     ada                                                                                     // 2169\n * - mwei       picoether      babbage                                                                                 // 2170\n * - gwei       nanoether      shannon      nano                                                                       // 2171\n * - --         microether     szabo        micro                                                                      // 2172\n * - --         milliether     finney       milli                                                                      // 2173\n * - ether      --             --                                                                                      // 2174\n * - kether                    einstein     grand                                                                      // 2175\n * - mether                                                                                                            // 2176\n * - gether                                                                                                            // 2177\n * - tether                                                                                                            // 2178\n *                                                                                                                     // 2179\n * @method fromWei                                                                                                     // 2180\n * @param {Number|String} number can be a number, number string or a HEX of a decimal                                  // 2181\n * @param {String} unit the unit to convert to, default ether                                                          // 2182\n * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number                    // 2183\n*/                                                                                                                     // 2184\nvar fromWei = function(number, unit) {                                                                                 // 2185\n    var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));                                             // 2186\n                                                                                                                       // 2187\n    return isBigNumber(number) ? returnValue : returnValue.toString(10);                                               // 2188\n};                                                                                                                     // 2189\n                                                                                                                       // 2190\n/**                                                                                                                    // 2191\n * Takes a number of a unit and converts it to wei.                                                                    // 2192\n *                                                                                                                     // 2193\n * Possible units are:                                                                                                 // 2194\n *   SI Short   SI Full        Effigy       Other                                                                      // 2195\n * - kwei       femtoether     ada                                                                                     // 2196\n * - mwei       picoether      babbage                                                                                 // 2197\n * - gwei       nanoether      shannon      nano                                                                       // 2198\n * - --         microether     szabo        micro                                                                      // 2199\n * - --         milliether     finney       milli                                                                      // 2200\n * - ether      --             --                                                                                      // 2201\n * - kether                    einstein     grand                                                                      // 2202\n * - mether                                                                                                            // 2203\n * - gether                                                                                                            // 2204\n * - tether                                                                                                            // 2205\n *                                                                                                                     // 2206\n * @method toWei                                                                                                       // 2207\n * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal                        // 2208\n * @param {String} unit the unit to convert from, default ether                                                        // 2209\n * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number                    // 2210\n*/                                                                                                                     // 2211\nvar toWei = function(number, unit) {                                                                                   // 2212\n    var returnValue = toBigNumber(number).times(getValueOfUnit(unit));                                                 // 2213\n                                                                                                                       // 2214\n    return isBigNumber(number) ? returnValue : returnValue.toString(10);                                               // 2215\n};                                                                                                                     // 2216\n                                                                                                                       // 2217\n/**                                                                                                                    // 2218\n * Takes an input and transforms it into an bignumber                                                                  // 2219\n *                                                                                                                     // 2220\n * @method toBigNumber                                                                                                 // 2221\n * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber                                          // 2222\n * @return {BigNumber} BigNumber                                                                                       // 2223\n*/                                                                                                                     // 2224\nvar toBigNumber = function(number) {                                                                                   // 2225\n    /*jshint maxcomplexity:5 */                                                                                        // 2226\n    number = number || 0;                                                                                              // 2227\n    if (isBigNumber(number))                                                                                           // 2228\n        return number;                                                                                                 // 2229\n                                                                                                                       // 2230\n    if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {                             // 2231\n        return new BigNumber(number.replace('0x',''), 16);                                                             // 2232\n    }                                                                                                                  // 2233\n                                                                                                                       // 2234\n    return new BigNumber(number.toString(10), 10);                                                                     // 2235\n};                                                                                                                     // 2236\n                                                                                                                       // 2237\n/**                                                                                                                    // 2238\n * Takes and input transforms it into bignumber and if it is negative value, into two's complement                     // 2239\n *                                                                                                                     // 2240\n * @method toTwosComplement                                                                                            // 2241\n * @param {Number|String|BigNumber}                                                                                    // 2242\n * @return {BigNumber}                                                                                                 // 2243\n */                                                                                                                    // 2244\nvar toTwosComplement = function (number) {                                                                             // 2245\n    var bigNumber = toBigNumber(number);                                                                               // 2246\n    if (bigNumber.lessThan(0)) {                                                                                       // 2247\n        return new BigNumber(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", 16).plus(bigNumber).plus(1);\n    }                                                                                                                  // 2249\n    return bigNumber;                                                                                                  // 2250\n};                                                                                                                     // 2251\n                                                                                                                       // 2252\n/**                                                                                                                    // 2253\n * Checks if the given string is strictly an address                                                                   // 2254\n *                                                                                                                     // 2255\n * @method isStrictAddress                                                                                             // 2256\n * @param {String} address the given HEX adress                                                                        // 2257\n * @return {Boolean}                                                                                                   // 2258\n*/                                                                                                                     // 2259\nvar isStrictAddress = function (address) {                                                                             // 2260\n    return /^0x[0-9a-f]{40}$/i.test(address);                                                                          // 2261\n};                                                                                                                     // 2262\n                                                                                                                       // 2263\n/**                                                                                                                    // 2264\n * Checks if the given string is an address                                                                            // 2265\n *                                                                                                                     // 2266\n * @method isAddress                                                                                                   // 2267\n * @param {String} address the given HEX adress                                                                        // 2268\n * @return {Boolean}                                                                                                   // 2269\n*/                                                                                                                     // 2270\nvar isAddress = function (address) {                                                                                   // 2271\n    return /^(0x)?[0-9a-f]{40}$/i.test(address);                                                                       // 2272\n};                                                                                                                     // 2273\n                                                                                                                       // 2274\n/**                                                                                                                    // 2275\n * Transforms given string to valid 20 bytes-length addres with 0x prefix                                              // 2276\n *                                                                                                                     // 2277\n * @method toAddress                                                                                                   // 2278\n * @param {String} address                                                                                             // 2279\n * @return {String} formatted address                                                                                  // 2280\n */                                                                                                                    // 2281\nvar toAddress = function (address) {                                                                                   // 2282\n    if (isStrictAddress(address)) {                                                                                    // 2283\n        return address;                                                                                                // 2284\n    }                                                                                                                  // 2285\n                                                                                                                       // 2286\n    if (/^[0-9a-f]{40}$/.test(address)) {                                                                              // 2287\n        return '0x' + address;                                                                                         // 2288\n    }                                                                                                                  // 2289\n                                                                                                                       // 2290\n    return '0x' + padLeft(toHex(address).substr(2), 40);                                                               // 2291\n};                                                                                                                     // 2292\n                                                                                                                       // 2293\n/**                                                                                                                    // 2294\n * Returns true if object is BigNumber, otherwise false                                                                // 2295\n *                                                                                                                     // 2296\n * @method isBigNumber                                                                                                 // 2297\n * @param {Object}                                                                                                     // 2298\n * @return {Boolean}                                                                                                   // 2299\n */                                                                                                                    // 2300\nvar isBigNumber = function (object) {                                                                                  // 2301\n    return object instanceof BigNumber ||                                                                              // 2302\n        (object && object.constructor && object.constructor.name === 'BigNumber');                                     // 2303\n};                                                                                                                     // 2304\n                                                                                                                       // 2305\n/**                                                                                                                    // 2306\n * Returns true if object is string, otherwise false                                                                   // 2307\n *                                                                                                                     // 2308\n * @method isString                                                                                                    // 2309\n * @param {Object}                                                                                                     // 2310\n * @return {Boolean}                                                                                                   // 2311\n */                                                                                                                    // 2312\nvar isString = function (object) {                                                                                     // 2313\n    return typeof object === 'string' ||                                                                               // 2314\n        (object && object.constructor && object.constructor.name === 'String');                                        // 2315\n};                                                                                                                     // 2316\n                                                                                                                       // 2317\n/**                                                                                                                    // 2318\n * Returns true if object is function, otherwise false                                                                 // 2319\n *                                                                                                                     // 2320\n * @method isFunction                                                                                                  // 2321\n * @param {Object}                                                                                                     // 2322\n * @return {Boolean}                                                                                                   // 2323\n */                                                                                                                    // 2324\nvar isFunction = function (object) {                                                                                   // 2325\n    return typeof object === 'function';                                                                               // 2326\n};                                                                                                                     // 2327\n                                                                                                                       // 2328\n/**                                                                                                                    // 2329\n * Returns true if object is Objet, otherwise false                                                                    // 2330\n *                                                                                                                     // 2331\n * @method isObject                                                                                                    // 2332\n * @param {Object}                                                                                                     // 2333\n * @return {Boolean}                                                                                                   // 2334\n */                                                                                                                    // 2335\nvar isObject = function (object) {                                                                                     // 2336\n    return typeof object === 'object';                                                                                 // 2337\n};                                                                                                                     // 2338\n                                                                                                                       // 2339\n/**                                                                                                                    // 2340\n * Returns true if object is boolean, otherwise false                                                                  // 2341\n *                                                                                                                     // 2342\n * @method isBoolean                                                                                                   // 2343\n * @param {Object}                                                                                                     // 2344\n * @return {Boolean}                                                                                                   // 2345\n */                                                                                                                    // 2346\nvar isBoolean = function (object) {                                                                                    // 2347\n    return typeof object === 'boolean';                                                                                // 2348\n};                                                                                                                     // 2349\n                                                                                                                       // 2350\n/**                                                                                                                    // 2351\n * Returns true if object is array, otherwise false                                                                    // 2352\n *                                                                                                                     // 2353\n * @method isArray                                                                                                     // 2354\n * @param {Object}                                                                                                     // 2355\n * @return {Boolean}                                                                                                   // 2356\n */                                                                                                                    // 2357\nvar isArray = function (object) {                                                                                      // 2358\n    return object instanceof Array;                                                                                    // 2359\n};                                                                                                                     // 2360\n                                                                                                                       // 2361\n/**                                                                                                                    // 2362\n * Returns true if given string is valid json object                                                                   // 2363\n *                                                                                                                     // 2364\n * @method isJson                                                                                                      // 2365\n * @param {String}                                                                                                     // 2366\n * @return {Boolean}                                                                                                   // 2367\n */                                                                                                                    // 2368\nvar isJson = function (str) {                                                                                          // 2369\n    try {                                                                                                              // 2370\n        return !!JSON.parse(str);                                                                                      // 2371\n    } catch (e) {                                                                                                      // 2372\n        return false;                                                                                                  // 2373\n    }                                                                                                                  // 2374\n};                                                                                                                     // 2375\n                                                                                                                       // 2376\nmodule.exports = {                                                                                                     // 2377\n    padLeft: padLeft,                                                                                                  // 2378\n    padRight: padRight,                                                                                                // 2379\n    toHex: toHex,                                                                                                      // 2380\n    toDecimal: toDecimal,                                                                                              // 2381\n    fromDecimal: fromDecimal,                                                                                          // 2382\n    toUtf8: toUtf8,                                                                                                    // 2383\n    toAscii: toAscii,                                                                                                  // 2384\n    fromUtf8: fromUtf8,                                                                                                // 2385\n    fromAscii: fromAscii,                                                                                              // 2386\n    transformToFullName: transformToFullName,                                                                          // 2387\n    extractDisplayName: extractDisplayName,                                                                            // 2388\n    extractTypeName: extractTypeName,                                                                                  // 2389\n    toWei: toWei,                                                                                                      // 2390\n    fromWei: fromWei,                                                                                                  // 2391\n    toBigNumber: toBigNumber,                                                                                          // 2392\n    toTwosComplement: toTwosComplement,                                                                                // 2393\n    toAddress: toAddress,                                                                                              // 2394\n    isBigNumber: isBigNumber,                                                                                          // 2395\n    isStrictAddress: isStrictAddress,                                                                                  // 2396\n    isAddress: isAddress,                                                                                              // 2397\n    isFunction: isFunction,                                                                                            // 2398\n    isString: isString,                                                                                                // 2399\n    isObject: isObject,                                                                                                // 2400\n    isBoolean: isBoolean,                                                                                              // 2401\n    isArray: isArray,                                                                                                  // 2402\n    isJson: isJson                                                                                                     // 2403\n};                                                                                                                     // 2404\n                                                                                                                       // 2405\n},{\"bignumber.js\":\"bignumber.js\",\"utf8\":83}],21:[function(require,module,exports){                                     // 2406\nmodule.exports={                                                                                                       // 2407\n    \"version\": \"0.15.2\"                                                                                                // 2408\n}                                                                                                                      // 2409\n                                                                                                                       // 2410\n},{}],22:[function(require,module,exports){                                                                            // 2411\n/*                                                                                                                     // 2412\n    This file is part of web3.js.                                                                                      // 2413\n                                                                                                                       // 2414\n    web3.js is free software: you can redistribute it and/or modify                                                    // 2415\n    it under the terms of the GNU Lesser General Public License as published by                                        // 2416\n    the Free Software Foundation, either version 3 of the License, or                                                  // 2417\n    (at your option) any later version.                                                                                // 2418\n                                                                                                                       // 2419\n    web3.js is distributed in the hope that it will be useful,                                                         // 2420\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2421\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2422\n    GNU Lesser General Public License for more details.                                                                // 2423\n                                                                                                                       // 2424\n    You should have received a copy of the GNU Lesser General Public License                                           // 2425\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2426\n*/                                                                                                                     // 2427\n/**                                                                                                                    // 2428\n * @file web3.js                                                                                                       // 2429\n * @authors:                                                                                                           // 2430\n *   Jeffrey Wilcke <jeff@ethdev.com>                                                                                  // 2431\n *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 2432\n *   Marian Oancea <marian@ethdev.com>                                                                                 // 2433\n *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 2434\n *   Gav Wood <g@ethdev.com>                                                                                           // 2435\n * @date 2014                                                                                                          // 2436\n */                                                                                                                    // 2437\n                                                                                                                       // 2438\nvar RequestManager = require('./web3/requestmanager');                                                                 // 2439\nvar Iban = require('./web3/iban');                                                                                     // 2440\nvar Eth = require('./web3/methods/eth');                                                                               // 2441\nvar DB = require('./web3/methods/db');                                                                                 // 2442\nvar Shh = require('./web3/methods/shh');                                                                               // 2443\nvar Net = require('./web3/methods/net');                                                                               // 2444\nvar Settings = require('./web3/settings');                                                                             // 2445\nvar version = require('./version.json');                                                                               // 2446\nvar utils = require('./utils/utils');                                                                                  // 2447\nvar sha3 = require('./utils/sha3');                                                                                    // 2448\nvar extend = require('./web3/extend');                                                                                 // 2449\nvar Batch = require('./web3/batch');                                                                                   // 2450\nvar Property = require('./web3/property');                                                                             // 2451\nvar HttpProvider = require('./web3/httpprovider');                                                                     // 2452\nvar IpcProvider = require('./web3/ipcprovider');                                                                       // 2453\n                                                                                                                       // 2454\n                                                                                                                       // 2455\n                                                                                                                       // 2456\nfunction Web3 (provider) {                                                                                             // 2457\n    this._requestManager = new RequestManager(provider);                                                               // 2458\n    this.currentProvider = provider;                                                                                   // 2459\n    this.eth = new Eth(this);                                                                                          // 2460\n    this.db = new DB(this);                                                                                            // 2461\n    this.shh = new Shh(this);                                                                                          // 2462\n    this.net = new Net(this);                                                                                          // 2463\n    this.settings = new Settings();                                                                                    // 2464\n    this.version = {                                                                                                   // 2465\n        api: version.version                                                                                           // 2466\n    };                                                                                                                 // 2467\n    this.providers = {                                                                                                 // 2468\n        HttpProvider: HttpProvider,                                                                                    // 2469\n        IpcProvider: IpcProvider                                                                                       // 2470\n    };                                                                                                                 // 2471\n    this._extend = extend(this);                                                                                       // 2472\n    this._extend({                                                                                                     // 2473\n        properties: properties()                                                                                       // 2474\n    });                                                                                                                // 2475\n}                                                                                                                      // 2476\n                                                                                                                       // 2477\n// expose providers on the class                                                                                       // 2478\nWeb3.providers = {                                                                                                     // 2479\n    HttpProvider: HttpProvider,                                                                                        // 2480\n    IpcProvider: IpcProvider                                                                                           // 2481\n};                                                                                                                     // 2482\n                                                                                                                       // 2483\nWeb3.prototype.setProvider = function (provider) {                                                                     // 2484\n    this._requestManager.setProvider(provider);                                                                        // 2485\n    this.currentProvider = provider;                                                                                   // 2486\n};                                                                                                                     // 2487\n                                                                                                                       // 2488\nWeb3.prototype.reset = function (keepIsSyncing) {                                                                      // 2489\n    this._requestManager.reset(keepIsSyncing);                                                                         // 2490\n    this.settings = new Settings();                                                                                    // 2491\n};                                                                                                                     // 2492\n                                                                                                                       // 2493\nWeb3.prototype.toHex = utils.toHex;                                                                                    // 2494\nWeb3.prototype.toAscii = utils.toAscii;                                                                                // 2495\nWeb3.prototype.toUtf8 = utils.toUtf8;                                                                                  // 2496\nWeb3.prototype.fromAscii = utils.fromAscii;                                                                            // 2497\nWeb3.prototype.fromUtf8 = utils.fromUtf8;                                                                              // 2498\nWeb3.prototype.toDecimal = utils.toDecimal;                                                                            // 2499\nWeb3.prototype.fromDecimal = utils.fromDecimal;                                                                        // 2500\nWeb3.prototype.toBigNumber = utils.toBigNumber;                                                                        // 2501\nWeb3.prototype.toWei = utils.toWei;                                                                                    // 2502\nWeb3.prototype.fromWei = utils.fromWei;                                                                                // 2503\nWeb3.prototype.isAddress = utils.isAddress;                                                                            // 2504\nWeb3.prototype.isIBAN = utils.isIBAN;                                                                                  // 2505\nWeb3.prototype.sha3 = sha3;                                                                                            // 2506\n                                                                                                                       // 2507\n/**                                                                                                                    // 2508\n * Transforms direct icap to address                                                                                   // 2509\n */                                                                                                                    // 2510\nWeb3.prototype.fromICAP = function (icap) {                                                                            // 2511\n    var iban = new Iban(icap);                                                                                         // 2512\n    return iban.address();                                                                                             // 2513\n};                                                                                                                     // 2514\n                                                                                                                       // 2515\nvar properties = function () {                                                                                         // 2516\n    return [                                                                                                           // 2517\n        new Property({                                                                                                 // 2518\n            name: 'version.node',                                                                                      // 2519\n            getter: 'web3_clientVersion'                                                                               // 2520\n        }),                                                                                                            // 2521\n        new Property({                                                                                                 // 2522\n            name: 'version.network',                                                                                   // 2523\n            getter: 'net_version',                                                                                     // 2524\n            inputFormatter: utils.toDecimal                                                                            // 2525\n        }),                                                                                                            // 2526\n        new Property({                                                                                                 // 2527\n            name: 'version.ethereum',                                                                                  // 2528\n            getter: 'eth_protocolVersion',                                                                             // 2529\n            inputFormatter: utils.toDecimal                                                                            // 2530\n        }),                                                                                                            // 2531\n        new Property({                                                                                                 // 2532\n            name: 'version.whisper',                                                                                   // 2533\n            getter: 'shh_version',                                                                                     // 2534\n            inputFormatter: utils.toDecimal                                                                            // 2535\n        })                                                                                                             // 2536\n    ];                                                                                                                 // 2537\n};                                                                                                                     // 2538\n                                                                                                                       // 2539\nWeb3.prototype.isConnected = function(){                                                                               // 2540\n    return (this.currentProvider && this.currentProvider.isConnected());                                               // 2541\n};                                                                                                                     // 2542\n                                                                                                                       // 2543\nWeb3.prototype.createBatch = function () {                                                                             // 2544\n    return new Batch(this);                                                                                            // 2545\n};                                                                                                                     // 2546\n                                                                                                                       // 2547\nmodule.exports = Web3;                                                                                                 // 2548\n                                                                                                                       // 2549\n                                                                                                                       // 2550\n},{\"./utils/sha3\":19,\"./utils/utils\":20,\"./version.json\":21,\"./web3/batch\":24,\"./web3/extend\":28,\"./web3/httpprovider\":32,\"./web3/iban\":33,\"./web3/ipcprovider\":34,\"./web3/methods/db\":37,\"./web3/methods/eth\":38,\"./web3/methods/net\":39,\"./web3/methods/shh\":40,\"./web3/property\":43,\"./web3/requestmanager\":44,\"./web3/settings\":45}],23:[function(require,module,exports){\n/*                                                                                                                     // 2552\n    This file is part of web3.js.                                                                                      // 2553\n                                                                                                                       // 2554\n    web3.js is free software: you can redistribute it and/or modify                                                    // 2555\n    it under the terms of the GNU Lesser General Public License as published by                                        // 2556\n    the Free Software Foundation, either version 3 of the License, or                                                  // 2557\n    (at your option) any later version.                                                                                // 2558\n                                                                                                                       // 2559\n    web3.js is distributed in the hope that it will be useful,                                                         // 2560\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2561\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2562\n    GNU Lesser General Public License for more details.                                                                // 2563\n                                                                                                                       // 2564\n    You should have received a copy of the GNU Lesser General Public License                                           // 2565\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2566\n*/                                                                                                                     // 2567\n/**                                                                                                                    // 2568\n * @file allevents.js                                                                                                  // 2569\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 2570\n * @date 2014                                                                                                          // 2571\n */                                                                                                                    // 2572\n                                                                                                                       // 2573\nvar sha3 = require('../utils/sha3');                                                                                   // 2574\nvar SolidityEvent = require('./event');                                                                                // 2575\nvar formatters = require('./formatters');                                                                              // 2576\nvar utils = require('../utils/utils');                                                                                 // 2577\nvar Filter = require('./filter');                                                                                      // 2578\nvar watches = require('./methods/watches');                                                                            // 2579\n                                                                                                                       // 2580\nvar AllSolidityEvents = function (requestManager, json, address) {                                                     // 2581\n    this._requestManager = requestManager;                                                                             // 2582\n    this._json = json;                                                                                                 // 2583\n    this._address = address;                                                                                           // 2584\n};                                                                                                                     // 2585\n                                                                                                                       // 2586\nAllSolidityEvents.prototype.encode = function (options) {                                                              // 2587\n    options = options || {};                                                                                           // 2588\n    var result = {};                                                                                                   // 2589\n                                                                                                                       // 2590\n    ['fromBlock', 'toBlock'].filter(function (f) {                                                                     // 2591\n        return options[f] !== undefined;                                                                               // 2592\n    }).forEach(function (f) {                                                                                          // 2593\n        result[f] = formatters.inputBlockNumberFormatter(options[f]);                                                  // 2594\n    });                                                                                                                // 2595\n                                                                                                                       // 2596\n    result.address = this._address;                                                                                    // 2597\n                                                                                                                       // 2598\n    return result;                                                                                                     // 2599\n};                                                                                                                     // 2600\n                                                                                                                       // 2601\nAllSolidityEvents.prototype.decode = function (data) {                                                                 // 2602\n    data.data = data.data || '';                                                                                       // 2603\n    data.topics = data.topics || [];                                                                                   // 2604\n                                                                                                                       // 2605\n    var eventTopic = data.topics[0].slice(2);                                                                          // 2606\n    var match = this._json.filter(function (j) {                                                                       // 2607\n        return eventTopic === sha3(utils.transformToFullName(j));                                                      // 2608\n    })[0];                                                                                                             // 2609\n                                                                                                                       // 2610\n    if (!match) { // cannot find matching event?                                                                       // 2611\n        console.warn('cannot find event for log');                                                                     // 2612\n        return data;                                                                                                   // 2613\n    }                                                                                                                  // 2614\n                                                                                                                       // 2615\n    var event = new SolidityEvent(this._requestManager, match, this._address);                                         // 2616\n    return event.decode(data);                                                                                         // 2617\n};                                                                                                                     // 2618\n                                                                                                                       // 2619\nAllSolidityEvents.prototype.execute = function (options, callback) {                                                   // 2620\n                                                                                                                       // 2621\n    if (utils.isFunction(arguments[arguments.length - 1])) {                                                           // 2622\n        callback = arguments[arguments.length - 1];                                                                    // 2623\n        if(arguments.length === 1)                                                                                     // 2624\n            options = null;                                                                                            // 2625\n    }                                                                                                                  // 2626\n                                                                                                                       // 2627\n    var o = this.encode(options);                                                                                      // 2628\n    var formatter = this.decode.bind(this);                                                                            // 2629\n    return new Filter(this._requestManager, o, watches.eth(), formatter, callback);                                    // 2630\n};                                                                                                                     // 2631\n                                                                                                                       // 2632\nAllSolidityEvents.prototype.attachToContract = function (contract) {                                                   // 2633\n    var execute = this.execute.bind(this);                                                                             // 2634\n    contract.allEvents = execute;                                                                                      // 2635\n};                                                                                                                     // 2636\n                                                                                                                       // 2637\nmodule.exports = AllSolidityEvents;                                                                                    // 2638\n                                                                                                                       // 2639\n                                                                                                                       // 2640\n},{\"../utils/sha3\":19,\"../utils/utils\":20,\"./event\":27,\"./filter\":29,\"./formatters\":30,\"./methods/watches\":41}],24:[function(require,module,exports){\n/*                                                                                                                     // 2642\n    This file is part of web3.js.                                                                                      // 2643\n                                                                                                                       // 2644\n    web3.js is free software: you can redistribute it and/or modify                                                    // 2645\n    it under the terms of the GNU Lesser General Public License as published by                                        // 2646\n    the Free Software Foundation, either version 3 of the License, or                                                  // 2647\n    (at your option) any later version.                                                                                // 2648\n                                                                                                                       // 2649\n    web3.js is distributed in the hope that it will be useful,                                                         // 2650\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2651\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2652\n    GNU Lesser General Public License for more details.                                                                // 2653\n                                                                                                                       // 2654\n    You should have received a copy of the GNU Lesser General Public License                                           // 2655\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2656\n*/                                                                                                                     // 2657\n/**                                                                                                                    // 2658\n * @file batch.js                                                                                                      // 2659\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 2660\n * @date 2015                                                                                                          // 2661\n */                                                                                                                    // 2662\n                                                                                                                       // 2663\nvar Jsonrpc = require('./jsonrpc');                                                                                    // 2664\nvar errors = require('./errors');                                                                                      // 2665\n                                                                                                                       // 2666\nvar Batch = function (web3) {                                                                                          // 2667\n    this.requestManager = web3._requestManager;                                                                        // 2668\n    this.requests = [];                                                                                                // 2669\n};                                                                                                                     // 2670\n                                                                                                                       // 2671\n/**                                                                                                                    // 2672\n * Should be called to add create new request to batch request                                                         // 2673\n *                                                                                                                     // 2674\n * @method add                                                                                                         // 2675\n * @param {Object} jsonrpc requet object                                                                               // 2676\n */                                                                                                                    // 2677\nBatch.prototype.add = function (request) {                                                                             // 2678\n    this.requests.push(request);                                                                                       // 2679\n};                                                                                                                     // 2680\n                                                                                                                       // 2681\n/**                                                                                                                    // 2682\n * Should be called to execute batch request                                                                           // 2683\n *                                                                                                                     // 2684\n * @method execute                                                                                                     // 2685\n */                                                                                                                    // 2686\nBatch.prototype.execute = function () {                                                                                // 2687\n    var requests = this.requests;                                                                                      // 2688\n    this.requestManager.sendBatch(requests, function (err, results) {                                                  // 2689\n        results = results || [];                                                                                       // 2690\n        requests.map(function (request, index) {                                                                       // 2691\n            return results[index] || {};                                                                               // 2692\n        }).forEach(function (result, index) {                                                                          // 2693\n            if (requests[index].callback) {                                                                            // 2694\n                                                                                                                       // 2695\n                if (!Jsonrpc.getInstance().isValidResponse(result)) {                                                  // 2696\n                    return requests[index].callback(errors.InvalidResponse(result));                                   // 2697\n                }                                                                                                      // 2698\n                                                                                                                       // 2699\n                requests[index].callback(null, (requests[index].format ? requests[index].format(result.result) : result.result));\n            }                                                                                                          // 2701\n        });                                                                                                            // 2702\n    });                                                                                                                // 2703\n};                                                                                                                     // 2704\n                                                                                                                       // 2705\nmodule.exports = Batch;                                                                                                // 2706\n                                                                                                                       // 2707\n                                                                                                                       // 2708\n},{\"./errors\":26,\"./jsonrpc\":35}],25:[function(require,module,exports){                                                // 2709\n/*                                                                                                                     // 2710\n    This file is part of web3.js.                                                                                      // 2711\n                                                                                                                       // 2712\n    web3.js is free software: you can redistribute it and/or modify                                                    // 2713\n    it under the terms of the GNU Lesser General Public License as published by                                        // 2714\n    the Free Software Foundation, either version 3 of the License, or                                                  // 2715\n    (at your option) any later version.                                                                                // 2716\n                                                                                                                       // 2717\n    web3.js is distributed in the hope that it will be useful,                                                         // 2718\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 2719\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 2720\n    GNU Lesser General Public License for more details.                                                                // 2721\n                                                                                                                       // 2722\n    You should have received a copy of the GNU Lesser General Public License                                           // 2723\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 2724\n*/                                                                                                                     // 2725\n/**                                                                                                                    // 2726\n * @file contract.js                                                                                                   // 2727\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 2728\n * @date 2014                                                                                                          // 2729\n */                                                                                                                    // 2730\n                                                                                                                       // 2731\nvar utils = require('../utils/utils');                                                                                 // 2732\nvar coder = require('../solidity/coder');                                                                              // 2733\nvar SolidityEvent = require('./event');                                                                                // 2734\nvar SolidityFunction = require('./function');                                                                          // 2735\nvar AllEvents = require('./allevents');                                                                                // 2736\n                                                                                                                       // 2737\n/**                                                                                                                    // 2738\n * Should be called to encode constructor params                                                                       // 2739\n *                                                                                                                     // 2740\n * @method encodeConstructorParams                                                                                     // 2741\n * @param {Array} abi                                                                                                  // 2742\n * @param {Array} constructor params                                                                                   // 2743\n */                                                                                                                    // 2744\nvar encodeConstructorParams = function (abi, params) {                                                                 // 2745\n    return abi.filter(function (json) {                                                                                // 2746\n        return json.type === 'constructor' && json.inputs.length === params.length;                                    // 2747\n    }).map(function (json) {                                                                                           // 2748\n        return json.inputs.map(function (input) {                                                                      // 2749\n            return input.type;                                                                                         // 2750\n        });                                                                                                            // 2751\n    }).map(function (types) {                                                                                          // 2752\n        return coder.encodeParams(types, params);                                                                      // 2753\n    })[0] || '';                                                                                                       // 2754\n};                                                                                                                     // 2755\n                                                                                                                       // 2756\n/**                                                                                                                    // 2757\n * Should be called to add functions to contract object                                                                // 2758\n *                                                                                                                     // 2759\n * @method addFunctionsToContract                                                                                      // 2760\n * @param {Contract} contract                                                                                          // 2761\n * @param {Array} abi                                                                                                  // 2762\n */                                                                                                                    // 2763\nvar addFunctionsToContract = function (contract) {                                                                     // 2764\n    contract.abi.filter(function (json) {                                                                              // 2765\n        return json.type === 'function';                                                                               // 2766\n    }).map(function (json) {                                                                                           // 2767\n        return new SolidityFunction(contract._eth, json, contract.address);                                            // 2768\n    }).forEach(function (f) {                                                                                          // 2769\n        f.attachToContract(contract);                                                                                  // 2770\n    });                                                                                                                // 2771\n};                                                                                                                     // 2772\n                                                                                                                       // 2773\n/**                                                                                                                    // 2774\n * Should be called to add events to contract object                                                                   // 2775\n *                                                                                                                     // 2776\n * @method addEventsToContract                                                                                         // 2777\n * @param {Contract} contract                                                                                          // 2778\n * @param {Array} abi                                                                                                  // 2779\n */                                                                                                                    // 2780\nvar addEventsToContract = function (contract) {                                                                        // 2781\n    var events = contract.abi.filter(function (json) {                                                                 // 2782\n        return json.type === 'event';                                                                                  // 2783\n    });                                                                                                                // 2784\n                                                                                                                       // 2785\n    var All = new AllEvents(contract._eth._requestManager, events, contract.address);                                  // 2786\n    All.attachToContract(contract);                                                                                    // 2787\n                                                                                                                       // 2788\n    events.map(function (json) {                                                                                       // 2789\n        return new SolidityEvent(contract._eth._requestManager, json, contract.address);                               // 2790\n    }).forEach(function (e) {                                                                                          // 2791\n        e.attachToContract(contract);                                                                                  // 2792\n    });                                                                                                                // 2793\n};                                                                                                                     // 2794\n                                                                                                                       // 2795\n                                                                                                                       // 2796\n/**                                                                                                                    // 2797\n * Should be called to check if the contract gets properly deployed on the blockchain.                                 // 2798\n *                                                                                                                     // 2799\n * @method checkForContractAddress                                                                                     // 2800\n * @param {Object} contract                                                                                            // 2801\n * @param {Function} callback                                                                                          // 2802\n * @returns {Undefined}                                                                                                // 2803\n */                                                                                                                    // 2804\nvar checkForContractAddress = function(contract, callback){                                                            // 2805\n    var count = 0,                                                                                                     // 2806\n        callbackFired = false;                                                                                         // 2807\n                                                                                                                       // 2808\n    // wait for receipt                                                                                                // 2809\n    var filter = contract._eth.filter('latest', function(e){                                                           // 2810\n        if (!e && !callbackFired) {                                                                                    // 2811\n            count++;                                                                                                   // 2812\n                                                                                                                       // 2813\n            // stop watching after 50 blocks (timeout)                                                                 // 2814\n            if (count > 50) {                                                                                          // 2815\n                                                                                                                       // 2816\n                filter.stopWatching();                                                                                 // 2817\n                callbackFired = true;                                                                                  // 2818\n                                                                                                                       // 2819\n                if (callback)                                                                                          // 2820\n                    callback(new Error('Contract transaction couldn\\'t be found after 50 blocks'));                    // 2821\n                else                                                                                                   // 2822\n                    throw new Error('Contract transaction couldn\\'t be found after 50 blocks');                        // 2823\n                                                                                                                       // 2824\n                                                                                                                       // 2825\n            } else {                                                                                                   // 2826\n                                                                                                                       // 2827\n                contract._eth.getTransactionReceipt(contract.transactionHash, function(e, receipt){                    // 2828\n                    if(receipt && !callbackFired) {                                                                    // 2829\n                                                                                                                       // 2830\n                        contract._eth.getCode(receipt.contractAddress, function(e, code){                              // 2831\n                            /*jshint maxcomplexity: 6 */                                                               // 2832\n                                                                                                                       // 2833\n                            if(callbackFired || !code)                                                                 // 2834\n                                return;                                                                                // 2835\n                                                                                                                       // 2836\n                            filter.stopWatching();                                                                     // 2837\n                            callbackFired = true;                                                                      // 2838\n                                                                                                                       // 2839\n                            if(code.length > 2) {                                                                      // 2840\n                                                                                                                       // 2841\n                                // console.log('Contract code deployed!');                                             // 2842\n                                                                                                                       // 2843\n                                contract.address = receipt.contractAddress;                                            // 2844\n                                                                                                                       // 2845\n                                // attach events and methods again after we have                                       // 2846\n                                addFunctionsToContract(contract);                                                      // 2847\n                                addEventsToContract(contract);                                                         // 2848\n                                                                                                                       // 2849\n                                // call callback for the second time                                                   // 2850\n                                if(callback)                                                                           // 2851\n                                    callback(null, contract);                                                          // 2852\n                                                                                                                       // 2853\n                            } else {                                                                                   // 2854\n                                if(callback)                                                                           // 2855\n                                    callback(new Error('The contract code couldn\\'t be stored, please check your gas amount.'));\n                                else                                                                                   // 2857\n                                    throw new Error('The contract code couldn\\'t be stored, please check your gas amount.');\n                            }                                                                                          // 2859\n                        });                                                                                            // 2860\n                    }                                                                                                  // 2861\n                });                                                                                                    // 2862\n            }                                                                                                          // 2863\n        }                                                                                                              // 2864\n    });                                                                                                                // 2865\n};                                                                                                                     // 2866\n                                                                                                                       // 2867\n/**                                                                                                                    // 2868\n * Should be called to create new ContractFactory instance                                                             // 2869\n *                                                                                                                     // 2870\n * @method ContractFactory                                                                                             // 2871\n * @param {Array} abi                                                                                                  // 2872\n */                                                                                                                    // 2873\nvar ContractFactory = function (eth, abi) {                                                                            // 2874\n    this.eth = eth;                                                                                                    // 2875\n    this.abi = abi;                                                                                                    // 2876\n                                                                                                                       // 2877\n    /**                                                                                                                // 2878\n     * Should be called to create new contract on a blockchain                                                         // 2879\n     *                                                                                                                 // 2880\n     * @method new                                                                                                     // 2881\n     * @param {Any} contract constructor param1 (optional)                                                             // 2882\n     * @param {Any} contract constructor param2 (optional)                                                             // 2883\n     * @param {Object} contract transaction object (required)                                                          // 2884\n     * @param {Function} callback                                                                                      // 2885\n     * @returns {Contract} returns contract instance                                                                   // 2886\n     */                                                                                                                // 2887\n    this.new = function () {                                                                                           // 2888\n        var contract = new Contract(this.eth, this.abi);                                                               // 2889\n                                                                                                                       // 2890\n        // parse arguments                                                                                             // 2891\n        var options = {}; // required!                                                                                 // 2892\n        var callback;                                                                                                  // 2893\n                                                                                                                       // 2894\n        var args = Array.prototype.slice.call(arguments);                                                              // 2895\n        if (utils.isFunction(args[args.length - 1])) {                                                                 // 2896\n            callback = args.pop();                                                                                     // 2897\n        }                                                                                                              // 2898\n                                                                                                                       // 2899\n        var last = args[args.length - 1];                                                                              // 2900\n        if (utils.isObject(last) && !utils.isArray(last)) {                                                            // 2901\n            options = args.pop();                                                                                      // 2902\n        }                                                                                                              // 2903\n                                                                                                                       // 2904\n        var bytes = encodeConstructorParams(this.abi, args);                                                           // 2905\n        options.data += bytes;                                                                                         // 2906\n                                                                                                                       // 2907\n        if (callback) {                                                                                                // 2908\n                                                                                                                       // 2909\n            // wait for the contract address adn check if the code was deployed                                        // 2910\n            this.eth.sendTransaction(options, function (err, hash) {                                                   // 2911\n                if (err) {                                                                                             // 2912\n                    callback(err);                                                                                     // 2913\n                } else {                                                                                               // 2914\n                    // add the transaction hash                                                                        // 2915\n                    contract.transactionHash = hash;                                                                   // 2916\n                                                                                                                       // 2917\n                    // call callback for the first time                                                                // 2918\n                    callback(null, contract);                                                                          // 2919\n                                                                                                                       // 2920\n                    checkForContractAddress(contract, callback);                                                       // 2921\n                }                                                                                                      // 2922\n            });                                                                                                        // 2923\n        } else {                                                                                                       // 2924\n            var hash = this.eth.sendTransaction(options);                                                              // 2925\n            // add the transaction hash                                                                                // 2926\n            contract.transactionHash = hash;                                                                           // 2927\n            checkForContractAddress(contract);                                                                         // 2928\n        }                                                                                                              // 2929\n                                                                                                                       // 2930\n        return contract;                                                                                               // 2931\n    };                                                                                                                 // 2932\n                                                                                                                       // 2933\n    this.new.getData = this.getData.bind(this);                                                                        // 2934\n};                                                                                                                     // 2935\n                                                                                                                       // 2936\n/**                                                                                                                    // 2937\n * Should be called to create new ContractFactory                                                                      // 2938\n *                                                                                                                     // 2939\n * @method contract                                                                                                    // 2940\n * @param {Array} abi                                                                                                  // 2941\n * @returns {ContractFactory} new contract factory                                                                     // 2942\n */                                                                                                                    // 2943\n//var contract = function (abi) {                                                                                      // 2944\n    //return new ContractFactory(abi);                                                                                 // 2945\n//};                                                                                                                   // 2946\n                                                                                                                       // 2947\n                                                                                                                       // 2948\n                                                                                                                       // 2949\n/**                                                                                                                    // 2950\n * Should be called to get access to existing contract on a blockchain                                                 // 2951\n *                                                                                                                     // 2952\n * @method at                                                                                                          // 2953\n * @param {Address} contract address (required)                                                                        // 2954\n * @param {Function} callback {optional)                                                                               // 2955\n * @returns {Contract} returns contract if no callback was passed,                                                     // 2956\n * otherwise calls callback function (err, contract)                                                                   // 2957\n */                                                                                                                    // 2958\nContractFactory.prototype.at = function (address, callback) {                                                          // 2959\n    var contract = new Contract(this.eth, this.abi, address);                                                          // 2960\n                                                                                                                       // 2961\n    // this functions are not part of prototype,                                                                       // 2962\n    // because we dont want to spoil the interface                                                                     // 2963\n    addFunctionsToContract(contract);                                                                                  // 2964\n    addEventsToContract(contract);                                                                                     // 2965\n                                                                                                                       // 2966\n    if (callback) {                                                                                                    // 2967\n        callback(null, contract);                                                                                      // 2968\n    }                                                                                                                  // 2969\n    return contract;                                                                                                   // 2970\n};                                                                                                                     // 2971\n                                                                                                                       // 2972\n/**                                                                                                                    // 2973\n * Gets the data, which is data to deploy plus constructor params                                                      // 2974\n *                                                                                                                     // 2975\n * @method getData                                                                                                     // 2976\n */                                                                                                                    // 2977\nContractFactory.prototype.getData = function () {                                                                      // 2978\n    var options = {}; // required!                                                                                     // 2979\n    var args = Array.prototype.slice.call(arguments);                                                                  // 2980\n                                                                                                                       // 2981\n    var last = args[args.length - 1];                                                                                  // 2982\n    if (utils.isObject(last) && !utils.isArray(last)) {                                                                // 2983\n        options = args.pop();                                                                                          // 2984\n    }                                                                                                                  // 2985\n                                                                                                                       // 2986\n    var bytes = encodeConstructorParams(this.abi, args);                                                               // 2987\n    options.data += bytes;                                                                                             // 2988\n                                                                                                                       // 2989\n    return options.data;                                                                                               // 2990\n};                                                                                                                     // 2991\n                                                                                                                       // 2992\n/**                                                                                                                    // 2993\n * Should be called to create new contract instance                                                                    // 2994\n *                                                                                                                     // 2995\n * @method Contract                                                                                                    // 2996\n * @param {Array} abi                                                                                                  // 2997\n * @param {Address} contract address                                                                                   // 2998\n */                                                                                                                    // 2999\nvar Contract = function (eth, abi, address) {                                                                          // 3000\n    this._eth = eth;                                                                                                   // 3001\n    this.transactionHash = null;                                                                                       // 3002\n    this.address = address;                                                                                            // 3003\n    this.abi = abi;                                                                                                    // 3004\n};                                                                                                                     // 3005\n                                                                                                                       // 3006\nmodule.exports = ContractFactory;                                                                                      // 3007\n                                                                                                                       // 3008\n},{\"../solidity/coder\":7,\"../utils/utils\":20,\"./allevents\":23,\"./event\":27,\"./function\":31}],26:[function(require,module,exports){\n/*                                                                                                                     // 3010\n    This file is part of web3.js.                                                                                      // 3011\n                                                                                                                       // 3012\n    web3.js is free software: you can redistribute it and/or modify                                                    // 3013\n    it under the terms of the GNU Lesser General Public License as published by                                        // 3014\n    the Free Software Foundation, either version 3 of the License, or                                                  // 3015\n    (at your option) any later version.                                                                                // 3016\n                                                                                                                       // 3017\n    web3.js is distributed in the hope that it will be useful,                                                         // 3018\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3019\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3020\n    GNU Lesser General Public License for more details.                                                                // 3021\n                                                                                                                       // 3022\n    You should have received a copy of the GNU Lesser General Public License                                           // 3023\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3024\n*/                                                                                                                     // 3025\n/**                                                                                                                    // 3026\n * @file errors.js                                                                                                     // 3027\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3028\n * @date 2015                                                                                                          // 3029\n */                                                                                                                    // 3030\n                                                                                                                       // 3031\nmodule.exports = {                                                                                                     // 3032\n    InvalidNumberOfParams: function () {                                                                               // 3033\n        return new Error('Invalid number of input parameters');                                                        // 3034\n    },                                                                                                                 // 3035\n    InvalidConnection: function (host){                                                                                // 3036\n        return new Error('CONNECTION ERROR: Couldn\\'t connect to node '+ host +'.');                                   // 3037\n    },                                                                                                                 // 3038\n    InvalidProvider: function () {                                                                                     // 3039\n        return new Error('Provider not set or invalid');                                                               // 3040\n    },                                                                                                                 // 3041\n    InvalidResponse: function (result){                                                                                // 3042\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);\n        return new Error(message);                                                                                     // 3044\n    }                                                                                                                  // 3045\n};                                                                                                                     // 3046\n                                                                                                                       // 3047\n                                                                                                                       // 3048\n},{}],27:[function(require,module,exports){                                                                            // 3049\n/*                                                                                                                     // 3050\n    This file is part of web3.js.                                                                                      // 3051\n                                                                                                                       // 3052\n    web3.js is free software: you can redistribute it and/or modify                                                    // 3053\n    it under the terms of the GNU Lesser General Public License as published by                                        // 3054\n    the Free Software Foundation, either version 3 of the License, or                                                  // 3055\n    (at your option) any later version.                                                                                // 3056\n                                                                                                                       // 3057\n    web3.js is distributed in the hope that it will be useful,                                                         // 3058\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3059\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3060\n    GNU Lesser General Public License for more details.                                                                // 3061\n                                                                                                                       // 3062\n    You should have received a copy of the GNU Lesser General Public License                                           // 3063\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3064\n*/                                                                                                                     // 3065\n/**                                                                                                                    // 3066\n * @file event.js                                                                                                      // 3067\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3068\n * @date 2014                                                                                                          // 3069\n */                                                                                                                    // 3070\n                                                                                                                       // 3071\nvar utils = require('../utils/utils');                                                                                 // 3072\nvar coder = require('../solidity/coder');                                                                              // 3073\nvar formatters = require('./formatters');                                                                              // 3074\nvar sha3 = require('../utils/sha3');                                                                                   // 3075\nvar Filter = require('./filter');                                                                                      // 3076\nvar watches = require('./methods/watches');                                                                            // 3077\n                                                                                                                       // 3078\n/**                                                                                                                    // 3079\n * This prototype should be used to create event filters                                                               // 3080\n */                                                                                                                    // 3081\nvar SolidityEvent = function (requestManager, json, address) {                                                         // 3082\n    this._requestManager = requestManager;                                                                             // 3083\n    this._params = json.inputs;                                                                                        // 3084\n    this._name = utils.transformToFullName(json);                                                                      // 3085\n    this._address = address;                                                                                           // 3086\n    this._anonymous = json.anonymous;                                                                                  // 3087\n};                                                                                                                     // 3088\n                                                                                                                       // 3089\n/**                                                                                                                    // 3090\n * Should be used to get filtered param types                                                                          // 3091\n *                                                                                                                     // 3092\n * @method types                                                                                                       // 3093\n * @param {Bool} decide if returned typed should be indexed                                                            // 3094\n * @return {Array} array of types                                                                                      // 3095\n */                                                                                                                    // 3096\nSolidityEvent.prototype.types = function (indexed) {                                                                   // 3097\n    return this._params.filter(function (i) {                                                                          // 3098\n        return i.indexed === indexed;                                                                                  // 3099\n    }).map(function (i) {                                                                                              // 3100\n        return i.type;                                                                                                 // 3101\n    });                                                                                                                // 3102\n};                                                                                                                     // 3103\n                                                                                                                       // 3104\n/**                                                                                                                    // 3105\n * Should be used to get event display name                                                                            // 3106\n *                                                                                                                     // 3107\n * @method displayName                                                                                                 // 3108\n * @return {String} event display name                                                                                 // 3109\n */                                                                                                                    // 3110\nSolidityEvent.prototype.displayName = function () {                                                                    // 3111\n    return utils.extractDisplayName(this._name);                                                                       // 3112\n};                                                                                                                     // 3113\n                                                                                                                       // 3114\n/**                                                                                                                    // 3115\n * Should be used to get event type name                                                                               // 3116\n *                                                                                                                     // 3117\n * @method typeName                                                                                                    // 3118\n * @return {String} event type name                                                                                    // 3119\n */                                                                                                                    // 3120\nSolidityEvent.prototype.typeName = function () {                                                                       // 3121\n    return utils.extractTypeName(this._name);                                                                          // 3122\n};                                                                                                                     // 3123\n                                                                                                                       // 3124\n/**                                                                                                                    // 3125\n * Should be used to get event signature                                                                               // 3126\n *                                                                                                                     // 3127\n * @method signature                                                                                                   // 3128\n * @return {String} event signature                                                                                    // 3129\n */                                                                                                                    // 3130\nSolidityEvent.prototype.signature = function () {                                                                      // 3131\n    return sha3(this._name);                                                                                           // 3132\n};                                                                                                                     // 3133\n                                                                                                                       // 3134\n/**                                                                                                                    // 3135\n * Should be used to encode indexed params and options to one final object                                             // 3136\n *                                                                                                                     // 3137\n * @method encode                                                                                                      // 3138\n * @param {Object} indexed                                                                                             // 3139\n * @param {Object} options                                                                                             // 3140\n * @return {Object} everything combined together and encoded                                                           // 3141\n */                                                                                                                    // 3142\nSolidityEvent.prototype.encode = function (indexed, options) {                                                         // 3143\n    indexed = indexed || {};                                                                                           // 3144\n    options = options || {};                                                                                           // 3145\n    var result = {};                                                                                                   // 3146\n                                                                                                                       // 3147\n    ['fromBlock', 'toBlock'].filter(function (f) {                                                                     // 3148\n        return options[f] !== undefined;                                                                               // 3149\n    }).forEach(function (f) {                                                                                          // 3150\n        result[f] = formatters.inputBlockNumberFormatter(options[f]);                                                  // 3151\n    });                                                                                                                // 3152\n                                                                                                                       // 3153\n    result.topics = [];                                                                                                // 3154\n                                                                                                                       // 3155\n    result.address = this._address;                                                                                    // 3156\n    if (!this._anonymous) {                                                                                            // 3157\n        result.topics.push('0x' + this.signature());                                                                   // 3158\n    }                                                                                                                  // 3159\n                                                                                                                       // 3160\n    var indexedTopics = this._params.filter(function (i) {                                                             // 3161\n        return i.indexed === true;                                                                                     // 3162\n    }).map(function (i) {                                                                                              // 3163\n        var value = indexed[i.name];                                                                                   // 3164\n        if (value === undefined || value === null) {                                                                   // 3165\n            return null;                                                                                               // 3166\n        }                                                                                                              // 3167\n                                                                                                                       // 3168\n        if (utils.isArray(value)) {                                                                                    // 3169\n            return value.map(function (v) {                                                                            // 3170\n                return '0x' + coder.encodeParam(i.type, v);                                                            // 3171\n            });                                                                                                        // 3172\n        }                                                                                                              // 3173\n        return '0x' + coder.encodeParam(i.type, value);                                                                // 3174\n    });                                                                                                                // 3175\n                                                                                                                       // 3176\n    result.topics = result.topics.concat(indexedTopics);                                                               // 3177\n                                                                                                                       // 3178\n    return result;                                                                                                     // 3179\n};                                                                                                                     // 3180\n                                                                                                                       // 3181\n/**                                                                                                                    // 3182\n * Should be used to decode indexed params and options                                                                 // 3183\n *                                                                                                                     // 3184\n * @method decode                                                                                                      // 3185\n * @param {Object} data                                                                                                // 3186\n * @return {Object} result object with decoded indexed && not indexed params                                           // 3187\n */                                                                                                                    // 3188\nSolidityEvent.prototype.decode = function (data) {                                                                     // 3189\n                                                                                                                       // 3190\n    data.data = data.data || '';                                                                                       // 3191\n    data.topics = data.topics || [];                                                                                   // 3192\n                                                                                                                       // 3193\n    var argTopics = this._anonymous ? data.topics : data.topics.slice(1);                                              // 3194\n    var indexedData = argTopics.map(function (topics) { return topics.slice(2); }).join(\"\");                           // 3195\n    var indexedParams = coder.decodeParams(this.types(true), indexedData);                                             // 3196\n                                                                                                                       // 3197\n    var notIndexedData = data.data.slice(2);                                                                           // 3198\n    var notIndexedParams = coder.decodeParams(this.types(false), notIndexedData);                                      // 3199\n                                                                                                                       // 3200\n    var result = formatters.outputLogFormatter(data);                                                                  // 3201\n    result.event = this.displayName();                                                                                 // 3202\n    result.address = data.address;                                                                                     // 3203\n                                                                                                                       // 3204\n    result.args = this._params.reduce(function (acc, current) {                                                        // 3205\n        acc[current.name] = current.indexed ? indexedParams.shift() : notIndexedParams.shift();                        // 3206\n        return acc;                                                                                                    // 3207\n    }, {});                                                                                                            // 3208\n                                                                                                                       // 3209\n    delete result.data;                                                                                                // 3210\n    delete result.topics;                                                                                              // 3211\n                                                                                                                       // 3212\n    return result;                                                                                                     // 3213\n};                                                                                                                     // 3214\n                                                                                                                       // 3215\n/**                                                                                                                    // 3216\n * Should be used to create new filter object from event                                                               // 3217\n *                                                                                                                     // 3218\n * @method execute                                                                                                     // 3219\n * @param {Object} indexed                                                                                             // 3220\n * @param {Object} options                                                                                             // 3221\n * @return {Object} filter object                                                                                      // 3222\n */                                                                                                                    // 3223\nSolidityEvent.prototype.execute = function (indexed, options, callback) {                                              // 3224\n                                                                                                                       // 3225\n    if (utils.isFunction(arguments[arguments.length - 1])) {                                                           // 3226\n        callback = arguments[arguments.length - 1];                                                                    // 3227\n        if(arguments.length === 2)                                                                                     // 3228\n            options = null;                                                                                            // 3229\n        if(arguments.length === 1) {                                                                                   // 3230\n            options = null;                                                                                            // 3231\n            indexed = {};                                                                                              // 3232\n        }                                                                                                              // 3233\n    }                                                                                                                  // 3234\n                                                                                                                       // 3235\n    var o = this.encode(indexed, options);                                                                             // 3236\n    var formatter = this.decode.bind(this);                                                                            // 3237\n    return new Filter(this._requestManager, o, watches.eth(), formatter, callback);                                    // 3238\n};                                                                                                                     // 3239\n                                                                                                                       // 3240\n/**                                                                                                                    // 3241\n * Should be used to attach event to contract object                                                                   // 3242\n *                                                                                                                     // 3243\n * @method attachToContract                                                                                            // 3244\n * @param {Contract}                                                                                                   // 3245\n */                                                                                                                    // 3246\nSolidityEvent.prototype.attachToContract = function (contract) {                                                       // 3247\n    var execute = this.execute.bind(this);                                                                             // 3248\n    var displayName = this.displayName();                                                                              // 3249\n    if (!contract[displayName]) {                                                                                      // 3250\n        contract[displayName] = execute;                                                                               // 3251\n    }                                                                                                                  // 3252\n    contract[displayName][this.typeName()] = this.execute.bind(this, contract);                                        // 3253\n};                                                                                                                     // 3254\n                                                                                                                       // 3255\nmodule.exports = SolidityEvent;                                                                                        // 3256\n                                                                                                                       // 3257\n                                                                                                                       // 3258\n},{\"../solidity/coder\":7,\"../utils/sha3\":19,\"../utils/utils\":20,\"./filter\":29,\"./formatters\":30,\"./methods/watches\":41}],28:[function(require,module,exports){\nvar formatters = require('./formatters');                                                                              // 3260\nvar utils = require('./../utils/utils');                                                                               // 3261\nvar Method = require('./method');                                                                                      // 3262\nvar Property = require('./property');                                                                                  // 3263\n                                                                                                                       // 3264\n// TODO: refactor, so the input params are not altered.                                                                // 3265\n// it's necessary to make same 'extension' work with multiple providers                                                // 3266\nvar extend = function (web3) {                                                                                         // 3267\n    /* jshint maxcomplexity:5 */                                                                                       // 3268\n    var ex = function (extension) {                                                                                    // 3269\n                                                                                                                       // 3270\n        var extendedObject;                                                                                            // 3271\n        if (extension.property) {                                                                                      // 3272\n            if (!web3[extension.property]) {                                                                           // 3273\n                web3[extension.property] = {};                                                                         // 3274\n            }                                                                                                          // 3275\n            extendedObject = web3[extension.property];                                                                 // 3276\n        } else {                                                                                                       // 3277\n            extendedObject = web3;                                                                                     // 3278\n        }                                                                                                              // 3279\n                                                                                                                       // 3280\n        if (extension.methods) {                                                                                       // 3281\n            extension.methods.forEach(function (method) {                                                              // 3282\n                method.attachToObject(extendedObject);                                                                 // 3283\n                method.setRequestManager(web3._requestManager);                                                        // 3284\n            });                                                                                                        // 3285\n        }                                                                                                              // 3286\n                                                                                                                       // 3287\n        if (extension.properties) {                                                                                    // 3288\n            extension.properties.forEach(function (property) {                                                         // 3289\n                property.attachToObject(extendedObject);                                                               // 3290\n                property.setRequestManager(web3._requestManager);                                                      // 3291\n            });                                                                                                        // 3292\n        }                                                                                                              // 3293\n    };                                                                                                                 // 3294\n                                                                                                                       // 3295\n    ex.formatters = formatters;                                                                                        // 3296\n    ex.utils = utils;                                                                                                  // 3297\n    ex.Method = Method;                                                                                                // 3298\n    ex.Property = Property;                                                                                            // 3299\n                                                                                                                       // 3300\n    return ex;                                                                                                         // 3301\n};                                                                                                                     // 3302\n                                                                                                                       // 3303\n                                                                                                                       // 3304\n                                                                                                                       // 3305\nmodule.exports = extend;                                                                                               // 3306\n                                                                                                                       // 3307\n                                                                                                                       // 3308\n},{\"./../utils/utils\":20,\"./formatters\":30,\"./method\":36,\"./property\":43}],29:[function(require,module,exports){       // 3309\n/*                                                                                                                     // 3310\n    This file is part of web3.js.                                                                                      // 3311\n                                                                                                                       // 3312\n    web3.js is free software: you can redistribute it and/or modify                                                    // 3313\n    it under the terms of the GNU Lesser General Public License as published by                                        // 3314\n    the Free Software Foundation, either version 3 of the License, or                                                  // 3315\n    (at your option) any later version.                                                                                // 3316\n                                                                                                                       // 3317\n    web3.js is distributed in the hope that it will be useful,                                                         // 3318\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3319\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3320\n    GNU Lesser General Public License for more details.                                                                // 3321\n                                                                                                                       // 3322\n    You should have received a copy of the GNU Lesser General Public License                                           // 3323\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3324\n*/                                                                                                                     // 3325\n/** @file filter.js                                                                                                    // 3326\n * @authors:                                                                                                           // 3327\n *   Jeffrey Wilcke <jeff@ethdev.com>                                                                                  // 3328\n *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 3329\n *   Marian Oancea <marian@ethdev.com>                                                                                 // 3330\n *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 3331\n *   Gav Wood <g@ethdev.com>                                                                                           // 3332\n * @date 2014                                                                                                          // 3333\n */                                                                                                                    // 3334\n                                                                                                                       // 3335\nvar formatters = require('./formatters');                                                                              // 3336\nvar utils = require('../utils/utils');                                                                                 // 3337\n                                                                                                                       // 3338\n/**                                                                                                                    // 3339\n* Converts a given topic to a hex string, but also allows null values.                                                 // 3340\n*                                                                                                                      // 3341\n* @param {Mixed} value                                                                                                 // 3342\n* @return {String}                                                                                                     // 3343\n*/                                                                                                                     // 3344\nvar toTopic = function(value){                                                                                         // 3345\n                                                                                                                       // 3346\n    if(value === null || typeof value === 'undefined')                                                                 // 3347\n        return null;                                                                                                   // 3348\n                                                                                                                       // 3349\n    value = String(value);                                                                                             // 3350\n                                                                                                                       // 3351\n    if(value.indexOf('0x') === 0)                                                                                      // 3352\n        return value;                                                                                                  // 3353\n    else                                                                                                               // 3354\n        return utils.fromUtf8(value);                                                                                  // 3355\n};                                                                                                                     // 3356\n                                                                                                                       // 3357\n/// This method should be called on options object, to verify deprecated properties && lazy load dynamic ones          // 3358\n/// @param should be string or object                                                                                  // 3359\n/// @returns options string or object                                                                                  // 3360\nvar getOptions = function (options) {                                                                                  // 3361\n                                                                                                                       // 3362\n    if (utils.isString(options)) {                                                                                     // 3363\n        return options;                                                                                                // 3364\n    }                                                                                                                  // 3365\n                                                                                                                       // 3366\n    options = options || {};                                                                                           // 3367\n                                                                                                                       // 3368\n    // make sure topics, get converted to hex                                                                          // 3369\n    options.topics = options.topics || [];                                                                             // 3370\n    options.topics = options.topics.map(function(topic){                                                               // 3371\n        return (utils.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);                                           // 3372\n    });                                                                                                                // 3373\n                                                                                                                       // 3374\n    return {                                                                                                           // 3375\n        topics: options.topics,                                                                                        // 3376\n        from: options.from,                                                                                            // 3377\n        to: options.to,                                                                                                // 3378\n        address: options.address,                                                                                      // 3379\n        fromBlock: formatters.inputBlockNumberFormatter(options.fromBlock),                                            // 3380\n        toBlock: formatters.inputBlockNumberFormatter(options.toBlock)                                                 // 3381\n    };                                                                                                                 // 3382\n};                                                                                                                     // 3383\n                                                                                                                       // 3384\n/**                                                                                                                    // 3385\nAdds the callback and sets up the methods, to iterate over the results.                                                // 3386\n                                                                                                                       // 3387\n@method getLogsAtStart                                                                                                 // 3388\n@param {Object} self                                                                                                   // 3389\n@param {funciton}                                                                                                      // 3390\n*/                                                                                                                     // 3391\nvar getLogsAtStart = function(self, callback){                                                                         // 3392\n    // call getFilterLogs for the first watch callback start                                                           // 3393\n    if (!utils.isString(self.options)) {                                                                               // 3394\n        self.get(function (err, messages) {                                                                            // 3395\n            // don't send all the responses to all the watches again... just to self one                               // 3396\n            if (err) {                                                                                                 // 3397\n                callback(err);                                                                                         // 3398\n            }                                                                                                          // 3399\n                                                                                                                       // 3400\n            if(utils.isArray(messages)) {                                                                              // 3401\n                messages.forEach(function (message) {                                                                  // 3402\n                    callback(null, message);                                                                           // 3403\n                });                                                                                                    // 3404\n            }                                                                                                          // 3405\n        });                                                                                                            // 3406\n    }                                                                                                                  // 3407\n};                                                                                                                     // 3408\n                                                                                                                       // 3409\n/**                                                                                                                    // 3410\nAdds the callback and sets up the methods, to iterate over the results.                                                // 3411\n                                                                                                                       // 3412\n@method pollFilter                                                                                                     // 3413\n@param {Object} self                                                                                                   // 3414\n*/                                                                                                                     // 3415\nvar pollFilter = function(self) {                                                                                      // 3416\n                                                                                                                       // 3417\n    var onMessage = function (error, messages) {                                                                       // 3418\n        if (error) {                                                                                                   // 3419\n            return self.callbacks.forEach(function (callback) {                                                        // 3420\n                callback(error);                                                                                       // 3421\n            });                                                                                                        // 3422\n        }                                                                                                              // 3423\n                                                                                                                       // 3424\n        if(utils.isArray(messages)) {                                                                                  // 3425\n            messages.forEach(function (message) {                                                                      // 3426\n                message = self.formatter ? self.formatter(message) : message;                                          // 3427\n                self.callbacks.forEach(function (callback) {                                                           // 3428\n                    callback(null, message);                                                                           // 3429\n                });                                                                                                    // 3430\n            });                                                                                                        // 3431\n        }                                                                                                              // 3432\n    };                                                                                                                 // 3433\n                                                                                                                       // 3434\n    self.requestManager.startPolling({                                                                                 // 3435\n        method: self.implementation.poll.call,                                                                         // 3436\n        params: [self.filterId],                                                                                       // 3437\n    }, self.filterId, onMessage, self.stopWatching.bind(self));                                                        // 3438\n                                                                                                                       // 3439\n};                                                                                                                     // 3440\n                                                                                                                       // 3441\nvar Filter = function (requestManager, options, methods, formatter, callback) {                                        // 3442\n    var self = this;                                                                                                   // 3443\n    var implementation = {};                                                                                           // 3444\n    methods.forEach(function (method) {                                                                                // 3445\n        method.setRequestManager(requestManager);                                                                      // 3446\n        method.attachToObject(implementation);                                                                         // 3447\n    });                                                                                                                // 3448\n    this.requestManager = requestManager;                                                                              // 3449\n    this.options = getOptions(options);                                                                                // 3450\n    this.implementation = implementation;                                                                              // 3451\n    this.filterId = null;                                                                                              // 3452\n    this.callbacks = [];                                                                                               // 3453\n    this.getLogsCallbacks = [];                                                                                        // 3454\n    this.pollFilters = [];                                                                                             // 3455\n    this.formatter = formatter;                                                                                        // 3456\n    this.implementation.newFilter(this.options, function(error, id){                                                   // 3457\n        if(error) {                                                                                                    // 3458\n            self.callbacks.forEach(function(cb){                                                                       // 3459\n                cb(error);                                                                                             // 3460\n            });                                                                                                        // 3461\n        } else {                                                                                                       // 3462\n            self.filterId = id;                                                                                        // 3463\n                                                                                                                       // 3464\n            // check if there are get pending callbacks as a consequence                                               // 3465\n            // of calling get() with filterId unassigned.                                                              // 3466\n            self.getLogsCallbacks.forEach(function (cb){                                                               // 3467\n                self.get(cb);                                                                                          // 3468\n            });                                                                                                        // 3469\n            self.getLogsCallbacks = [];                                                                                // 3470\n                                                                                                                       // 3471\n            // get filter logs for the already existing watch calls                                                    // 3472\n            self.callbacks.forEach(function(cb){                                                                       // 3473\n                getLogsAtStart(self, cb);                                                                              // 3474\n            });                                                                                                        // 3475\n            if(self.callbacks.length > 0)                                                                              // 3476\n                pollFilter(self);                                                                                      // 3477\n                                                                                                                       // 3478\n            // start to watch immediately                                                                              // 3479\n            if(typeof callback === 'function') {                                                                       // 3480\n                return self.watch(callback);                                                                           // 3481\n            }                                                                                                          // 3482\n        }                                                                                                              // 3483\n    });                                                                                                                // 3484\n                                                                                                                       // 3485\n    return this;                                                                                                       // 3486\n};                                                                                                                     // 3487\n                                                                                                                       // 3488\nFilter.prototype.watch = function (callback) {                                                                         // 3489\n    this.callbacks.push(callback);                                                                                     // 3490\n                                                                                                                       // 3491\n    if(this.filterId) {                                                                                                // 3492\n        getLogsAtStart(this, callback);                                                                                // 3493\n        pollFilter(this);                                                                                              // 3494\n    }                                                                                                                  // 3495\n                                                                                                                       // 3496\n    return this;                                                                                                       // 3497\n};                                                                                                                     // 3498\n                                                                                                                       // 3499\nFilter.prototype.stopWatching = function () {                                                                          // 3500\n    this.requestManager.stopPolling(this.filterId);                                                                    // 3501\n    // remove filter async                                                                                             // 3502\n    this.implementation.uninstallFilter(this.filterId, function(){});                                                  // 3503\n    this.callbacks = [];                                                                                               // 3504\n};                                                                                                                     // 3505\n                                                                                                                       // 3506\nFilter.prototype.get = function (callback) {                                                                           // 3507\n    var self = this;                                                                                                   // 3508\n    if (utils.isFunction(callback)) {                                                                                  // 3509\n        if (this.filterId === null) {                                                                                  // 3510\n            // If filterId is not set yet, call it back                                                                // 3511\n            // when newFilter() assigns it.                                                                            // 3512\n            this.getLogsCallbacks.push(callback);                                                                      // 3513\n        } else {                                                                                                       // 3514\n            this.implementation.getLogs(this.filterId, function(err, res){                                             // 3515\n                if (err) {                                                                                             // 3516\n                    callback(err);                                                                                     // 3517\n                } else {                                                                                               // 3518\n                    callback(null, res.map(function (log) {                                                            // 3519\n                        return self.formatter ? self.formatter(log) : log;                                             // 3520\n                    }));                                                                                               // 3521\n                }                                                                                                      // 3522\n            });                                                                                                        // 3523\n        }                                                                                                              // 3524\n    } else {                                                                                                           // 3525\n        if (this.filterId === null) {                                                                                  // 3526\n            throw new Error('Filter ID Error: filter().get() can\\'t be chained synchronous, please provide a callback for the get() method.');\n        }                                                                                                              // 3528\n        var logs = this.implementation.getLogs(this.filterId);                                                         // 3529\n        return logs.map(function (log) {                                                                               // 3530\n            return self.formatter ? self.formatter(log) : log;                                                         // 3531\n        });                                                                                                            // 3532\n    }                                                                                                                  // 3533\n                                                                                                                       // 3534\n    return this;                                                                                                       // 3535\n};                                                                                                                     // 3536\n                                                                                                                       // 3537\nmodule.exports = Filter;                                                                                               // 3538\n                                                                                                                       // 3539\n                                                                                                                       // 3540\n},{\"../utils/utils\":20,\"./formatters\":30}],30:[function(require,module,exports){                                       // 3541\n/*                                                                                                                     // 3542\n    This file is part of web3.js.                                                                                      // 3543\n                                                                                                                       // 3544\n    web3.js is free software: you can redistribute it and/or modify                                                    // 3545\n    it under the terms of the GNU Lesser General Public License as published by                                        // 3546\n    the Free Software Foundation, either version 3 of the License, or                                                  // 3547\n    (at your option) any later version.                                                                                // 3548\n                                                                                                                       // 3549\n    web3.js is distributed in the hope that it will be useful,                                                         // 3550\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3551\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3552\n    GNU Lesser General Public License for more details.                                                                // 3553\n                                                                                                                       // 3554\n    You should have received a copy of the GNU Lesser General Public License                                           // 3555\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3556\n*/                                                                                                                     // 3557\n/**                                                                                                                    // 3558\n * @file formatters.js                                                                                                 // 3559\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3560\n * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 3561\n * @date 2015                                                                                                          // 3562\n */                                                                                                                    // 3563\n                                                                                                                       // 3564\nvar utils = require('../utils/utils');                                                                                 // 3565\nvar config = require('../utils/config');                                                                               // 3566\nvar Iban = require('./iban');                                                                                          // 3567\n                                                                                                                       // 3568\n/**                                                                                                                    // 3569\n * Should the format output to a big number                                                                            // 3570\n *                                                                                                                     // 3571\n * @method outputBigNumberFormatter                                                                                    // 3572\n * @param {String|Number|BigNumber}                                                                                    // 3573\n * @returns {BigNumber} object                                                                                         // 3574\n */                                                                                                                    // 3575\nvar outputBigNumberFormatter = function (number) {                                                                     // 3576\n    return utils.toBigNumber(number);                                                                                  // 3577\n};                                                                                                                     // 3578\n                                                                                                                       // 3579\nvar isPredefinedBlockNumber = function (blockNumber) {                                                                 // 3580\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';                        // 3581\n};                                                                                                                     // 3582\n                                                                                                                       // 3583\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {                                                        // 3584\n    if (blockNumber === undefined) {                                                                                   // 3585\n        return config.defaultBlock;                                                                                    // 3586\n    }                                                                                                                  // 3587\n    return inputBlockNumberFormatter(blockNumber);                                                                     // 3588\n};                                                                                                                     // 3589\n                                                                                                                       // 3590\nvar inputBlockNumberFormatter = function (blockNumber) {                                                               // 3591\n    if (blockNumber === undefined) {                                                                                   // 3592\n        return undefined;                                                                                              // 3593\n    } else if (isPredefinedBlockNumber(blockNumber)) {                                                                 // 3594\n        return blockNumber;                                                                                            // 3595\n    }                                                                                                                  // 3596\n    return utils.toHex(blockNumber);                                                                                   // 3597\n};                                                                                                                     // 3598\n                                                                                                                       // 3599\n/**                                                                                                                    // 3600\n * Formats the input of a transaction and converts all values to HEX                                                   // 3601\n *                                                                                                                     // 3602\n * @method inputCallFormatter                                                                                          // 3603\n * @param {Object} transaction options                                                                                 // 3604\n * @returns object                                                                                                     // 3605\n*/                                                                                                                     // 3606\nvar inputCallFormatter = function (options){                                                                           // 3607\n                                                                                                                       // 3608\n    options.from = options.from || config.defaultAccount;                                                              // 3609\n                                                                                                                       // 3610\n    if (options.from) {                                                                                                // 3611\n        options.from = inputAddressFormatter(options.from);                                                            // 3612\n    }                                                                                                                  // 3613\n                                                                                                                       // 3614\n    if (options.to) { // it might be contract creation                                                                 // 3615\n        options.to = inputAddressFormatter(options.to);                                                                // 3616\n    }                                                                                                                  // 3617\n                                                                                                                       // 3618\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {                                                      // 3619\n        return options[key] !== undefined;                                                                             // 3620\n    }).forEach(function(key){                                                                                          // 3621\n        options[key] = utils.fromDecimal(options[key]);                                                                // 3622\n    });                                                                                                                // 3623\n                                                                                                                       // 3624\n    return options;                                                                                                    // 3625\n};                                                                                                                     // 3626\n                                                                                                                       // 3627\n/**                                                                                                                    // 3628\n * Formats the input of a transaction and converts all values to HEX                                                   // 3629\n *                                                                                                                     // 3630\n * @method inputTransactionFormatter                                                                                   // 3631\n * @param {Object} transaction options                                                                                 // 3632\n * @returns object                                                                                                     // 3633\n*/                                                                                                                     // 3634\nvar inputTransactionFormatter = function (options){                                                                    // 3635\n                                                                                                                       // 3636\n    options.from = options.from || config.defaultAccount;                                                              // 3637\n    options.from = inputAddressFormatter(options.from);                                                                // 3638\n                                                                                                                       // 3639\n    if (options.to) { // it might be contract creation                                                                 // 3640\n        options.to = inputAddressFormatter(options.to);                                                                // 3641\n    }                                                                                                                  // 3642\n                                                                                                                       // 3643\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {                                                      // 3644\n        return options[key] !== undefined;                                                                             // 3645\n    }).forEach(function(key){                                                                                          // 3646\n        options[key] = utils.fromDecimal(options[key]);                                                                // 3647\n    });                                                                                                                // 3648\n                                                                                                                       // 3649\n    return options;                                                                                                    // 3650\n};                                                                                                                     // 3651\n                                                                                                                       // 3652\n/**                                                                                                                    // 3653\n * Formats the output of a transaction to its proper values                                                            // 3654\n *                                                                                                                     // 3655\n * @method outputTransactionFormatter                                                                                  // 3656\n * @param {Object} tx                                                                                                  // 3657\n * @returns {Object}                                                                                                   // 3658\n*/                                                                                                                     // 3659\nvar outputTransactionFormatter = function (tx){                                                                        // 3660\n    if(tx.blockNumber !== null)                                                                                        // 3661\n        tx.blockNumber = utils.toDecimal(tx.blockNumber);                                                              // 3662\n    if(tx.transactionIndex !== null)                                                                                   // 3663\n        tx.transactionIndex = utils.toDecimal(tx.transactionIndex);                                                    // 3664\n    tx.nonce = utils.toDecimal(tx.nonce);                                                                              // 3665\n    tx.gas = utils.toDecimal(tx.gas);                                                                                  // 3666\n    tx.gasPrice = utils.toBigNumber(tx.gasPrice);                                                                      // 3667\n    tx.value = utils.toBigNumber(tx.value);                                                                            // 3668\n    return tx;                                                                                                         // 3669\n};                                                                                                                     // 3670\n                                                                                                                       // 3671\n/**                                                                                                                    // 3672\n * Formats the output of a transaction receipt to its proper values                                                    // 3673\n *                                                                                                                     // 3674\n * @method outputTransactionReceiptFormatter                                                                           // 3675\n * @param {Object} receipt                                                                                             // 3676\n * @returns {Object}                                                                                                   // 3677\n*/                                                                                                                     // 3678\nvar outputTransactionReceiptFormatter = function (receipt){                                                            // 3679\n    if(receipt.blockNumber !== null)                                                                                   // 3680\n        receipt.blockNumber = utils.toDecimal(receipt.blockNumber);                                                    // 3681\n    if(receipt.transactionIndex !== null)                                                                              // 3682\n        receipt.transactionIndex = utils.toDecimal(receipt.transactionIndex);                                          // 3683\n    receipt.cumulativeGasUsed = utils.toDecimal(receipt.cumulativeGasUsed);                                            // 3684\n    receipt.gasUsed = utils.toDecimal(receipt.gasUsed);                                                                // 3685\n                                                                                                                       // 3686\n    if(utils.isArray(receipt.logs)) {                                                                                  // 3687\n        receipt.logs = receipt.logs.map(function(log){                                                                 // 3688\n            return outputLogFormatter(log);                                                                            // 3689\n        });                                                                                                            // 3690\n    }                                                                                                                  // 3691\n                                                                                                                       // 3692\n    return receipt;                                                                                                    // 3693\n};                                                                                                                     // 3694\n                                                                                                                       // 3695\n/**                                                                                                                    // 3696\n * Formats the output of a block to its proper values                                                                  // 3697\n *                                                                                                                     // 3698\n * @method outputBlockFormatter                                                                                        // 3699\n * @param {Object} block                                                                                               // 3700\n * @returns {Object}                                                                                                   // 3701\n*/                                                                                                                     // 3702\nvar outputBlockFormatter = function(block) {                                                                           // 3703\n                                                                                                                       // 3704\n    // transform to number                                                                                             // 3705\n    block.gasLimit = utils.toDecimal(block.gasLimit);                                                                  // 3706\n    block.gasUsed = utils.toDecimal(block.gasUsed);                                                                    // 3707\n    block.size = utils.toDecimal(block.size);                                                                          // 3708\n    block.timestamp = utils.toDecimal(block.timestamp);                                                                // 3709\n    if(block.number !== null)                                                                                          // 3710\n        block.number = utils.toDecimal(block.number);                                                                  // 3711\n                                                                                                                       // 3712\n    block.difficulty = utils.toBigNumber(block.difficulty);                                                            // 3713\n    block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);                                                  // 3714\n                                                                                                                       // 3715\n    if (utils.isArray(block.transactions)) {                                                                           // 3716\n        block.transactions.forEach(function(item){                                                                     // 3717\n            if(!utils.isString(item))                                                                                  // 3718\n                return outputTransactionFormatter(item);                                                               // 3719\n        });                                                                                                            // 3720\n    }                                                                                                                  // 3721\n                                                                                                                       // 3722\n    return block;                                                                                                      // 3723\n};                                                                                                                     // 3724\n                                                                                                                       // 3725\n/**                                                                                                                    // 3726\n * Formats the output of a log                                                                                         // 3727\n *                                                                                                                     // 3728\n * @method outputLogFormatter                                                                                          // 3729\n * @param {Object} log object                                                                                          // 3730\n * @returns {Object} log                                                                                               // 3731\n*/                                                                                                                     // 3732\nvar outputLogFormatter = function(log) {                                                                               // 3733\n    if(log.blockNumber !== null)                                                                                       // 3734\n        log.blockNumber = utils.toDecimal(log.blockNumber);                                                            // 3735\n    if(log.transactionIndex !== null)                                                                                  // 3736\n        log.transactionIndex = utils.toDecimal(log.transactionIndex);                                                  // 3737\n    if(log.logIndex !== null)                                                                                          // 3738\n        log.logIndex = utils.toDecimal(log.logIndex);                                                                  // 3739\n                                                                                                                       // 3740\n    return log;                                                                                                        // 3741\n};                                                                                                                     // 3742\n                                                                                                                       // 3743\n/**                                                                                                                    // 3744\n * Formats the input of a whisper post and converts all values to HEX                                                  // 3745\n *                                                                                                                     // 3746\n * @method inputPostFormatter                                                                                          // 3747\n * @param {Object} transaction object                                                                                  // 3748\n * @returns {Object}                                                                                                   // 3749\n*/                                                                                                                     // 3750\nvar inputPostFormatter = function(post) {                                                                              // 3751\n                                                                                                                       // 3752\n    // post.payload = utils.toHex(post.payload);                                                                       // 3753\n    post.ttl = utils.fromDecimal(post.ttl);                                                                            // 3754\n    post.workToProve = utils.fromDecimal(post.workToProve);                                                            // 3755\n    post.priority = utils.fromDecimal(post.priority);                                                                  // 3756\n                                                                                                                       // 3757\n    // fallback                                                                                                        // 3758\n    if (!utils.isArray(post.topics)) {                                                                                 // 3759\n        post.topics = post.topics ? [post.topics] : [];                                                                // 3760\n    }                                                                                                                  // 3761\n                                                                                                                       // 3762\n    // format the following options                                                                                    // 3763\n    post.topics = post.topics.map(function(topic){                                                                     // 3764\n        // convert only if not hex                                                                                     // 3765\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);                                            // 3766\n    });                                                                                                                // 3767\n                                                                                                                       // 3768\n    return post;                                                                                                       // 3769\n};                                                                                                                     // 3770\n                                                                                                                       // 3771\n/**                                                                                                                    // 3772\n * Formats the output of a received post message                                                                       // 3773\n *                                                                                                                     // 3774\n * @method outputPostFormatter                                                                                         // 3775\n * @param {Object}                                                                                                     // 3776\n * @returns {Object}                                                                                                   // 3777\n */                                                                                                                    // 3778\nvar outputPostFormatter = function(post){                                                                              // 3779\n                                                                                                                       // 3780\n    post.expiry = utils.toDecimal(post.expiry);                                                                        // 3781\n    post.sent = utils.toDecimal(post.sent);                                                                            // 3782\n    post.ttl = utils.toDecimal(post.ttl);                                                                              // 3783\n    post.workProved = utils.toDecimal(post.workProved);                                                                // 3784\n    // post.payloadRaw = post.payload;                                                                                 // 3785\n    // post.payload = utils.toAscii(post.payload);                                                                     // 3786\n                                                                                                                       // 3787\n    // if (utils.isJson(post.payload)) {                                                                               // 3788\n    //     post.payload = JSON.parse(post.payload);                                                                    // 3789\n    // }                                                                                                               // 3790\n                                                                                                                       // 3791\n    // format the following options                                                                                    // 3792\n    if (!post.topics) {                                                                                                // 3793\n        post.topics = [];                                                                                              // 3794\n    }                                                                                                                  // 3795\n    post.topics = post.topics.map(function(topic){                                                                     // 3796\n        return utils.toAscii(topic);                                                                                   // 3797\n    });                                                                                                                // 3798\n                                                                                                                       // 3799\n    return post;                                                                                                       // 3800\n};                                                                                                                     // 3801\n                                                                                                                       // 3802\nvar inputAddressFormatter = function (address) {                                                                       // 3803\n    var iban = new Iban(address);                                                                                      // 3804\n    if (iban.isValid() && iban.isDirect()) {                                                                           // 3805\n        return '0x' + iban.address();                                                                                  // 3806\n    } else if (utils.isStrictAddress(address)) {                                                                       // 3807\n        return address;                                                                                                // 3808\n    } else if (utils.isAddress(address)) {                                                                             // 3809\n        return '0x' + address;                                                                                         // 3810\n    }                                                                                                                  // 3811\n    throw 'invalid address';                                                                                           // 3812\n};                                                                                                                     // 3813\n                                                                                                                       // 3814\n                                                                                                                       // 3815\nvar outputSyncingFormatter = function(result) {                                                                        // 3816\n                                                                                                                       // 3817\n    result.startingBlock = utils.toDecimal(result.startingBlock);                                                      // 3818\n    result.currentBlock = utils.toDecimal(result.currentBlock);                                                        // 3819\n    result.highestBlock = utils.toDecimal(result.highestBlock);                                                        // 3820\n                                                                                                                       // 3821\n    return result;                                                                                                     // 3822\n};                                                                                                                     // 3823\n                                                                                                                       // 3824\nmodule.exports = {                                                                                                     // 3825\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,                                                // 3826\n    inputBlockNumberFormatter: inputBlockNumberFormatter,                                                              // 3827\n    inputCallFormatter: inputCallFormatter,                                                                            // 3828\n    inputTransactionFormatter: inputTransactionFormatter,                                                              // 3829\n    inputAddressFormatter: inputAddressFormatter,                                                                      // 3830\n    inputPostFormatter: inputPostFormatter,                                                                            // 3831\n    outputBigNumberFormatter: outputBigNumberFormatter,                                                                // 3832\n    outputTransactionFormatter: outputTransactionFormatter,                                                            // 3833\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,                                              // 3834\n    outputBlockFormatter: outputBlockFormatter,                                                                        // 3835\n    outputLogFormatter: outputLogFormatter,                                                                            // 3836\n    outputPostFormatter: outputPostFormatter,                                                                          // 3837\n    outputSyncingFormatter: outputSyncingFormatter                                                                     // 3838\n};                                                                                                                     // 3839\n                                                                                                                       // 3840\n                                                                                                                       // 3841\n},{\"../utils/config\":18,\"../utils/utils\":20,\"./iban\":33}],31:[function(require,module,exports){                        // 3842\n/*                                                                                                                     // 3843\n    This file is part of web3.js.                                                                                      // 3844\n                                                                                                                       // 3845\n    web3.js is free software: you can redistribute it and/or modify                                                    // 3846\n    it under the terms of the GNU Lesser General Public License as published by                                        // 3847\n    the Free Software Foundation, either version 3 of the License, or                                                  // 3848\n    (at your option) any later version.                                                                                // 3849\n                                                                                                                       // 3850\n    web3.js is distributed in the hope that it will be useful,                                                         // 3851\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 3852\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 3853\n    GNU Lesser General Public License for more details.                                                                // 3854\n                                                                                                                       // 3855\n    You should have received a copy of the GNU Lesser General Public License                                           // 3856\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 3857\n*/                                                                                                                     // 3858\n/**                                                                                                                    // 3859\n * @file function.js                                                                                                   // 3860\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 3861\n * @date 2015                                                                                                          // 3862\n */                                                                                                                    // 3863\n                                                                                                                       // 3864\nvar coder = require('../solidity/coder');                                                                              // 3865\nvar utils = require('../utils/utils');                                                                                 // 3866\nvar formatters = require('./formatters');                                                                              // 3867\nvar sha3 = require('../utils/sha3');                                                                                   // 3868\n                                                                                                                       // 3869\n/**                                                                                                                    // 3870\n * This prototype should be used to call/sendTransaction to solidity functions                                         // 3871\n */                                                                                                                    // 3872\nvar SolidityFunction = function (eth, json, address) {                                                                 // 3873\n    this._eth = eth;                                                                                                   // 3874\n    this._inputTypes = json.inputs.map(function (i) {                                                                  // 3875\n        return i.type;                                                                                                 // 3876\n    });                                                                                                                // 3877\n    this._outputTypes = json.outputs.map(function (i) {                                                                // 3878\n        return i.type;                                                                                                 // 3879\n    });                                                                                                                // 3880\n    this._constant = json.constant;                                                                                    // 3881\n    this._name = utils.transformToFullName(json);                                                                      // 3882\n    this._address = address;                                                                                           // 3883\n};                                                                                                                     // 3884\n                                                                                                                       // 3885\nSolidityFunction.prototype.extractCallback = function (args) {                                                         // 3886\n    if (utils.isFunction(args[args.length - 1])) {                                                                     // 3887\n        return args.pop(); // modify the args array!                                                                   // 3888\n    }                                                                                                                  // 3889\n};                                                                                                                     // 3890\n                                                                                                                       // 3891\nSolidityFunction.prototype.extractDefaultBlock = function (args) {                                                     // 3892\n    if (args.length > this._inputTypes.length && !utils.isObject(args[args.length -1])) {                              // 3893\n        return formatters.inputDefaultBlockNumberFormatter(args.pop()); // modify the args array!                      // 3894\n    }                                                                                                                  // 3895\n};                                                                                                                     // 3896\n                                                                                                                       // 3897\n/**                                                                                                                    // 3898\n * Should be used to create payload from arguments                                                                     // 3899\n *                                                                                                                     // 3900\n * @method toPayload                                                                                                   // 3901\n * @param {Array} solidity function params                                                                             // 3902\n * @param {Object} optional payload options                                                                            // 3903\n */                                                                                                                    // 3904\nSolidityFunction.prototype.toPayload = function (args) {                                                               // 3905\n    var options = {};                                                                                                  // 3906\n    if (args.length > this._inputTypes.length && utils.isObject(args[args.length -1])) {                               // 3907\n        options = args[args.length - 1];                                                                               // 3908\n    }                                                                                                                  // 3909\n    options.to = this._address;                                                                                        // 3910\n    options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);                               // 3911\n    return options;                                                                                                    // 3912\n};                                                                                                                     // 3913\n                                                                                                                       // 3914\n/**                                                                                                                    // 3915\n * Should be used to get function signature                                                                            // 3916\n *                                                                                                                     // 3917\n * @method signature                                                                                                   // 3918\n * @return {String} function signature                                                                                 // 3919\n */                                                                                                                    // 3920\nSolidityFunction.prototype.signature = function () {                                                                   // 3921\n    return sha3(this._name).slice(0, 8);                                                                               // 3922\n};                                                                                                                     // 3923\n                                                                                                                       // 3924\n                                                                                                                       // 3925\nSolidityFunction.prototype.unpackOutput = function (output) {                                                          // 3926\n    if (!output) {                                                                                                     // 3927\n        return;                                                                                                        // 3928\n    }                                                                                                                  // 3929\n                                                                                                                       // 3930\n    output = output.length >= 2 ? output.slice(2) : output;                                                            // 3931\n    var result = coder.decodeParams(this._outputTypes, output);                                                        // 3932\n    return result.length === 1 ? result[0] : result;                                                                   // 3933\n};                                                                                                                     // 3934\n                                                                                                                       // 3935\n/**                                                                                                                    // 3936\n * Calls a contract function.                                                                                          // 3937\n *                                                                                                                     // 3938\n * @method call                                                                                                        // 3939\n * @param {...Object} Contract function arguments                                                                      // 3940\n * @param {function} If the last argument is a function, the contract function                                         // 3941\n *   call will be asynchronous, and the callback will be passed the                                                    // 3942\n *   error and result.                                                                                                 // 3943\n * @return {String} output bytes                                                                                       // 3944\n */                                                                                                                    // 3945\nSolidityFunction.prototype.call = function () {                                                                        // 3946\n    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });                  // 3947\n    var callback = this.extractCallback(args);                                                                         // 3948\n    var defaultBlock = this.extractDefaultBlock(args);                                                                 // 3949\n    var payload = this.toPayload(args);                                                                                // 3950\n                                                                                                                       // 3951\n                                                                                                                       // 3952\n    if (!callback) {                                                                                                   // 3953\n        var output = this._eth.call(payload, defaultBlock);                                                            // 3954\n        return this.unpackOutput(output);                                                                              // 3955\n    }                                                                                                                  // 3956\n                                                                                                                       // 3957\n    var self = this;                                                                                                   // 3958\n    this._eth.call(payload, defaultBlock, function (error, output) {                                                   // 3959\n        callback(error, self.unpackOutput(output));                                                                    // 3960\n    });                                                                                                                // 3961\n};                                                                                                                     // 3962\n                                                                                                                       // 3963\n/**                                                                                                                    // 3964\n * Should be used to sendTransaction to solidity function                                                              // 3965\n *                                                                                                                     // 3966\n * @method sendTransaction                                                                                             // 3967\n */                                                                                                                    // 3968\nSolidityFunction.prototype.sendTransaction = function () {                                                             // 3969\n    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });                  // 3970\n    var callback = this.extractCallback(args);                                                                         // 3971\n    var payload = this.toPayload(args);                                                                                // 3972\n                                                                                                                       // 3973\n    if (!callback) {                                                                                                   // 3974\n        return this._eth.sendTransaction(payload);                                                                     // 3975\n    }                                                                                                                  // 3976\n                                                                                                                       // 3977\n    this._eth.sendTransaction(payload, callback);                                                                      // 3978\n};                                                                                                                     // 3979\n                                                                                                                       // 3980\n/**                                                                                                                    // 3981\n * Should be used to estimateGas of solidity function                                                                  // 3982\n *                                                                                                                     // 3983\n * @method estimateGas                                                                                                 // 3984\n */                                                                                                                    // 3985\nSolidityFunction.prototype.estimateGas = function () {                                                                 // 3986\n    var args = Array.prototype.slice.call(arguments);                                                                  // 3987\n    var callback = this.extractCallback(args);                                                                         // 3988\n    var payload = this.toPayload(args);                                                                                // 3989\n                                                                                                                       // 3990\n    if (!callback) {                                                                                                   // 3991\n        return this._eth.estimateGas(payload);                                                                         // 3992\n    }                                                                                                                  // 3993\n                                                                                                                       // 3994\n    this._eth.estimateGas(payload, callback);                                                                          // 3995\n};                                                                                                                     // 3996\n                                                                                                                       // 3997\n/**                                                                                                                    // 3998\n * Return the encoded data of the call                                                                                 // 3999\n *                                                                                                                     // 4000\n * @method getData                                                                                                     // 4001\n * @return {String} the encoded data                                                                                   // 4002\n */                                                                                                                    // 4003\nSolidityFunction.prototype.getData = function () {                                                                     // 4004\n    var args = Array.prototype.slice.call(arguments);                                                                  // 4005\n    var payload = this.toPayload(args);                                                                                // 4006\n                                                                                                                       // 4007\n    return payload.data;                                                                                               // 4008\n};                                                                                                                     // 4009\n                                                                                                                       // 4010\n/**                                                                                                                    // 4011\n * Should be used to get function display name                                                                         // 4012\n *                                                                                                                     // 4013\n * @method displayName                                                                                                 // 4014\n * @return {String} display name of the function                                                                       // 4015\n */                                                                                                                    // 4016\nSolidityFunction.prototype.displayName = function () {                                                                 // 4017\n    return utils.extractDisplayName(this._name);                                                                       // 4018\n};                                                                                                                     // 4019\n                                                                                                                       // 4020\n/**                                                                                                                    // 4021\n * Should be used to get function type name                                                                            // 4022\n *                                                                                                                     // 4023\n * @method typeName                                                                                                    // 4024\n * @return {String} type name of the function                                                                          // 4025\n */                                                                                                                    // 4026\nSolidityFunction.prototype.typeName = function () {                                                                    // 4027\n    return utils.extractTypeName(this._name);                                                                          // 4028\n};                                                                                                                     // 4029\n                                                                                                                       // 4030\n/**                                                                                                                    // 4031\n * Should be called to get rpc requests from solidity function                                                         // 4032\n *                                                                                                                     // 4033\n * @method request                                                                                                     // 4034\n * @returns {Object}                                                                                                   // 4035\n */                                                                                                                    // 4036\nSolidityFunction.prototype.request = function () {                                                                     // 4037\n    var args = Array.prototype.slice.call(arguments);                                                                  // 4038\n    var callback = this.extractCallback(args);                                                                         // 4039\n    var payload = this.toPayload(args);                                                                                // 4040\n    var format = this.unpackOutput.bind(this);                                                                         // 4041\n                                                                                                                       // 4042\n    return {                                                                                                           // 4043\n        method: this._constant ? 'eth_call' : 'eth_sendTransaction',                                                   // 4044\n        callback: callback,                                                                                            // 4045\n        params: [payload],                                                                                             // 4046\n        format: format                                                                                                 // 4047\n    };                                                                                                                 // 4048\n};                                                                                                                     // 4049\n                                                                                                                       // 4050\n/**                                                                                                                    // 4051\n * Should be called to execute function                                                                                // 4052\n *                                                                                                                     // 4053\n * @method execute                                                                                                     // 4054\n */                                                                                                                    // 4055\nSolidityFunction.prototype.execute = function () {                                                                     // 4056\n    var transaction = !this._constant;                                                                                 // 4057\n                                                                                                                       // 4058\n    // send transaction                                                                                                // 4059\n    if (transaction) {                                                                                                 // 4060\n        return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));                                // 4061\n    }                                                                                                                  // 4062\n                                                                                                                       // 4063\n    // call                                                                                                            // 4064\n    return this.call.apply(this, Array.prototype.slice.call(arguments));                                               // 4065\n};                                                                                                                     // 4066\n                                                                                                                       // 4067\n/**                                                                                                                    // 4068\n * Should be called to attach function to contract                                                                     // 4069\n *                                                                                                                     // 4070\n * @method attachToContract                                                                                            // 4071\n * @param {Contract}                                                                                                   // 4072\n */                                                                                                                    // 4073\nSolidityFunction.prototype.attachToContract = function (contract) {                                                    // 4074\n    var execute = this.execute.bind(this);                                                                             // 4075\n    execute.request = this.request.bind(this);                                                                         // 4076\n    execute.call = this.call.bind(this);                                                                               // 4077\n    execute.sendTransaction = this.sendTransaction.bind(this);                                                         // 4078\n    execute.estimateGas = this.estimateGas.bind(this);                                                                 // 4079\n    execute.getData = this.getData.bind(this);                                                                         // 4080\n    var displayName = this.displayName();                                                                              // 4081\n    if (!contract[displayName]) {                                                                                      // 4082\n        contract[displayName] = execute;                                                                               // 4083\n    }                                                                                                                  // 4084\n    contract[displayName][this.typeName()] = execute; // circular!!!!                                                  // 4085\n};                                                                                                                     // 4086\n                                                                                                                       // 4087\nmodule.exports = SolidityFunction;                                                                                     // 4088\n                                                                                                                       // 4089\n                                                                                                                       // 4090\n},{\"../solidity/coder\":7,\"../utils/sha3\":19,\"../utils/utils\":20,\"./formatters\":30}],32:[function(require,module,exports){\n/*                                                                                                                     // 4092\n    This file is part of web3.js.                                                                                      // 4093\n                                                                                                                       // 4094\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4095\n    it under the terms of the GNU Lesser General Public License as published by                                        // 4096\n    the Free Software Foundation, either version 3 of the License, or                                                  // 4097\n    (at your option) any later version.                                                                                // 4098\n                                                                                                                       // 4099\n    web3.js is distributed in the hope that it will be useful,                                                         // 4100\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4101\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4102\n    GNU Lesser General Public License for more details.                                                                // 4103\n                                                                                                                       // 4104\n    You should have received a copy of the GNU Lesser General Public License                                           // 4105\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4106\n*/                                                                                                                     // 4107\n/** @file httpprovider.js                                                                                              // 4108\n * @authors:                                                                                                           // 4109\n *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 4110\n *   Marian Oancea <marian@ethdev.com>                                                                                 // 4111\n *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 4112\n * @date 2015                                                                                                          // 4113\n */                                                                                                                    // 4114\n                                                                                                                       // 4115\n\"use strict\";                                                                                                          // 4116\n                                                                                                                       // 4117\nvar errors = require('./errors');                                                                                      // 4118\n                                                                                                                       // 4119\n// workaround to use httpprovider in different envs                                                                    // 4120\nvar XMLHttpRequest; // jshint ignore: line                                                                             // 4121\n                                                                                                                       // 4122\n// meteor server environment                                                                                           // 4123\nif (typeof Meteor !== 'undefined' && Meteor.isServer) { // jshint ignore: line                                         // 4124\n    XMLHttpRequest = Npm.require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line                              // 4125\n                                                                                                                       // 4126\n// browser                                                                                                             // 4127\n} else if (typeof window !== 'undefined' && window.XMLHttpRequest) {                                                   // 4128\n    XMLHttpRequest = window.XMLHttpRequest; // jshint ignore: line                                                     // 4129\n                                                                                                                       // 4130\n// node                                                                                                                // 4131\n} else {                                                                                                               // 4132\n    XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line                                  // 4133\n}                                                                                                                      // 4134\n                                                                                                                       // 4135\n/**                                                                                                                    // 4136\n * HttpProvider should be used to send rpc calls over http                                                             // 4137\n */                                                                                                                    // 4138\nvar HttpProvider = function (host) {                                                                                   // 4139\n    this.host = host || 'http://localhost:8545';                                                                       // 4140\n};                                                                                                                     // 4141\n                                                                                                                       // 4142\n/**                                                                                                                    // 4143\n * Should be called to prepare new XMLHttpRequest                                                                      // 4144\n *                                                                                                                     // 4145\n * @method prepareRequest                                                                                              // 4146\n * @param {Boolean} true if request should be async                                                                    // 4147\n * @return {XMLHttpRequest} object                                                                                     // 4148\n */                                                                                                                    // 4149\nHttpProvider.prototype.prepareRequest = function (async) {                                                             // 4150\n    var request = new XMLHttpRequest();                                                                                // 4151\n    request.open('POST', this.host, async);                                                                            // 4152\n    request.setRequestHeader('Content-Type','application/json');                                                       // 4153\n    return request;                                                                                                    // 4154\n};                                                                                                                     // 4155\n                                                                                                                       // 4156\n/**                                                                                                                    // 4157\n * Should be called to make sync request                                                                               // 4158\n *                                                                                                                     // 4159\n * @method send                                                                                                        // 4160\n * @param {Object} payload                                                                                             // 4161\n * @return {Object} result                                                                                             // 4162\n */                                                                                                                    // 4163\nHttpProvider.prototype.send = function (payload) {                                                                     // 4164\n    var request = this.prepareRequest(false);                                                                          // 4165\n                                                                                                                       // 4166\n    try {                                                                                                              // 4167\n        request.send(JSON.stringify(payload));                                                                         // 4168\n    } catch(error) {                                                                                                   // 4169\n        throw errors.InvalidConnection(this.host);                                                                     // 4170\n    }                                                                                                                  // 4171\n                                                                                                                       // 4172\n    var result = request.responseText;                                                                                 // 4173\n                                                                                                                       // 4174\n    try {                                                                                                              // 4175\n        result = JSON.parse(result);                                                                                   // 4176\n    } catch(e) {                                                                                                       // 4177\n        throw errors.InvalidResponse(request.responseText);                                                            // 4178\n    }                                                                                                                  // 4179\n                                                                                                                       // 4180\n    return result;                                                                                                     // 4181\n};                                                                                                                     // 4182\n                                                                                                                       // 4183\n/**                                                                                                                    // 4184\n * Should be used to make async request                                                                                // 4185\n *                                                                                                                     // 4186\n * @method sendAsync                                                                                                   // 4187\n * @param {Object} payload                                                                                             // 4188\n * @param {Function} callback triggered on end with (err, result)                                                      // 4189\n */                                                                                                                    // 4190\nHttpProvider.prototype.sendAsync = function (payload, callback) {                                                      // 4191\n    var request = this.prepareRequest(true);                                                                           // 4192\n                                                                                                                       // 4193\n    request.onreadystatechange = function() {                                                                          // 4194\n        if (request.readyState === 4) {                                                                                // 4195\n            var result = request.responseText;                                                                         // 4196\n            var error = null;                                                                                          // 4197\n                                                                                                                       // 4198\n            try {                                                                                                      // 4199\n                result = JSON.parse(result);                                                                           // 4200\n            } catch(e) {                                                                                               // 4201\n                error = errors.InvalidResponse(request.responseText);                                                  // 4202\n            }                                                                                                          // 4203\n                                                                                                                       // 4204\n            callback(error, result);                                                                                   // 4205\n        }                                                                                                              // 4206\n    };                                                                                                                 // 4207\n                                                                                                                       // 4208\n    try {                                                                                                              // 4209\n        request.send(JSON.stringify(payload));                                                                         // 4210\n    } catch(error) {                                                                                                   // 4211\n        callback(errors.InvalidConnection(this.host));                                                                 // 4212\n    }                                                                                                                  // 4213\n};                                                                                                                     // 4214\n                                                                                                                       // 4215\n/**                                                                                                                    // 4216\n * Synchronously tries to make Http request                                                                            // 4217\n *                                                                                                                     // 4218\n * @method isConnected                                                                                                 // 4219\n * @return {Boolean} returns true if request haven't failed. Otherwise false                                           // 4220\n */                                                                                                                    // 4221\nHttpProvider.prototype.isConnected = function() {                                                                      // 4222\n    try {                                                                                                              // 4223\n        this.send({                                                                                                    // 4224\n            id: 9999999999,                                                                                            // 4225\n            jsonrpc: '2.0',                                                                                            // 4226\n            method: 'net_listening',                                                                                   // 4227\n            params: []                                                                                                 // 4228\n        });                                                                                                            // 4229\n        return true;                                                                                                   // 4230\n    } catch(e) {                                                                                                       // 4231\n        return false;                                                                                                  // 4232\n    }                                                                                                                  // 4233\n};                                                                                                                     // 4234\n                                                                                                                       // 4235\nmodule.exports = HttpProvider;                                                                                         // 4236\n                                                                                                                       // 4237\n                                                                                                                       // 4238\n},{\"./errors\":26,\"xmlhttprequest\":17}],33:[function(require,module,exports){                                           // 4239\n/*                                                                                                                     // 4240\n    This file is part of web3.js.                                                                                      // 4241\n                                                                                                                       // 4242\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4243\n    it under the terms of the GNU Lesser General Public License as published by                                        // 4244\n    the Free Software Foundation, either version 3 of the License, or                                                  // 4245\n    (at your option) any later version.                                                                                // 4246\n                                                                                                                       // 4247\n    web3.js is distributed in the hope that it will be useful,                                                         // 4248\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4249\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4250\n    GNU Lesser General Public License for more details.                                                                // 4251\n                                                                                                                       // 4252\n    You should have received a copy of the GNU Lesser General Public License                                           // 4253\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4254\n*/                                                                                                                     // 4255\n/**                                                                                                                    // 4256\n * @file iban.js                                                                                                       // 4257\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 4258\n * @date 2015                                                                                                          // 4259\n */                                                                                                                    // 4260\n                                                                                                                       // 4261\nvar BigNumber = require('bignumber.js');                                                                               // 4262\n                                                                                                                       // 4263\nvar padLeft = function (string, bytes) {                                                                               // 4264\n    var result = string;                                                                                               // 4265\n    while (result.length < bytes * 2) {                                                                                // 4266\n        result = '00' + result;                                                                                        // 4267\n    }                                                                                                                  // 4268\n    return result;                                                                                                     // 4269\n};                                                                                                                     // 4270\n                                                                                                                       // 4271\n/**                                                                                                                    // 4272\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to       // 4273\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.                                                    // 4274\n *                                                                                                                     // 4275\n * @method iso13616Prepare                                                                                             // 4276\n * @param {String} iban the IBAN                                                                                       // 4277\n * @returns {String} the prepared IBAN                                                                                 // 4278\n */                                                                                                                    // 4279\nvar iso13616Prepare = function (iban) {                                                                                // 4280\n    var A = 'A'.charCodeAt(0);                                                                                         // 4281\n    var Z = 'Z'.charCodeAt(0);                                                                                         // 4282\n                                                                                                                       // 4283\n    iban = iban.toUpperCase();                                                                                         // 4284\n    iban = iban.substr(4) + iban.substr(0,4);                                                                          // 4285\n                                                                                                                       // 4286\n    return iban.split('').map(function(n){                                                                             // 4287\n        var code = n.charCodeAt(0);                                                                                    // 4288\n        if (code >= A && code <= Z){                                                                                   // 4289\n            // A = 10, B = 11, ... Z = 35                                                                              // 4290\n            return code - A + 10;                                                                                      // 4291\n        } else {                                                                                                       // 4292\n            return n;                                                                                                  // 4293\n        }                                                                                                              // 4294\n    }).join('');                                                                                                       // 4295\n};                                                                                                                     // 4296\n                                                                                                                       // 4297\n/**                                                                                                                    // 4298\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.                                                // 4299\n *                                                                                                                     // 4300\n * @method mod9710                                                                                                     // 4301\n * @param {String} iban                                                                                                // 4302\n * @returns {Number}                                                                                                   // 4303\n */                                                                                                                    // 4304\nvar mod9710 = function (iban) {                                                                                        // 4305\n    var remainder = iban,                                                                                              // 4306\n        block;                                                                                                         // 4307\n                                                                                                                       // 4308\n    while (remainder.length > 2){                                                                                      // 4309\n        block = remainder.slice(0, 9);                                                                                 // 4310\n        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);                                          // 4311\n    }                                                                                                                  // 4312\n                                                                                                                       // 4313\n    return parseInt(remainder, 10) % 97;                                                                               // 4314\n};                                                                                                                     // 4315\n                                                                                                                       // 4316\n/**                                                                                                                    // 4317\n * This prototype should be used to create iban object from iban correct string                                        // 4318\n *                                                                                                                     // 4319\n * @param {String} iban                                                                                                // 4320\n */                                                                                                                    // 4321\nvar Iban = function (iban) {                                                                                           // 4322\n    this._iban = iban;                                                                                                 // 4323\n};                                                                                                                     // 4324\n                                                                                                                       // 4325\n/**                                                                                                                    // 4326\n * This method should be used to create iban object from ethereum address                                              // 4327\n *                                                                                                                     // 4328\n * @method fromAddress                                                                                                 // 4329\n * @param {String} address                                                                                             // 4330\n * @return {Iban} the IBAN object                                                                                      // 4331\n */                                                                                                                    // 4332\nIban.fromAddress = function (address) {                                                                                // 4333\n    var asBn = new BigNumber(address, 16);                                                                             // 4334\n    var base36 = asBn.toString(36);                                                                                    // 4335\n    var padded = padLeft(base36, 15);                                                                                  // 4336\n    return Iban.fromBban(padded.toUpperCase());                                                                        // 4337\n};                                                                                                                     // 4338\n                                                                                                                       // 4339\n/**                                                                                                                    // 4340\n * Convert the passed BBAN to an IBAN for this country specification.                                                  // 4341\n * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n *                                                                                                                     // 4344\n * @method fromBban                                                                                                    // 4345\n * @param {String} bban the BBAN to convert to IBAN                                                                    // 4346\n * @returns {Iban} the IBAN object                                                                                     // 4347\n */                                                                                                                    // 4348\nIban.fromBban = function (bban) {                                                                                      // 4349\n    var countryCode = 'XE';                                                                                            // 4350\n                                                                                                                       // 4351\n    var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));                                               // 4352\n    var checkDigit = ('0' + (98 - remainder)).slice(-2);                                                               // 4353\n                                                                                                                       // 4354\n    return new Iban(countryCode + checkDigit + bban);                                                                  // 4355\n};                                                                                                                     // 4356\n                                                                                                                       // 4357\n/**                                                                                                                    // 4358\n * Should be used to create IBAN object for given institution and identifier                                           // 4359\n *                                                                                                                     // 4360\n * @method createIndirect                                                                                              // 4361\n * @param {Object} options, required options are \"institution\" and \"identifier\"                                        // 4362\n * @return {Iban} the IBAN object                                                                                      // 4363\n */                                                                                                                    // 4364\nIban.createIndirect = function (options) {                                                                             // 4365\n    return Iban.fromBban('ETH' + options.institution + options.identifier);                                            // 4366\n};                                                                                                                     // 4367\n                                                                                                                       // 4368\n/**                                                                                                                    // 4369\n * Thos method should be used to check if given string is valid iban object                                            // 4370\n *                                                                                                                     // 4371\n * @method isValid                                                                                                     // 4372\n * @param {String} iban string                                                                                         // 4373\n * @return {Boolean} true if it is valid IBAN                                                                          // 4374\n */                                                                                                                    // 4375\nIban.isValid = function (iban) {                                                                                       // 4376\n    var i = new Iban(iban);                                                                                            // 4377\n    return i.isValid();                                                                                                // 4378\n};                                                                                                                     // 4379\n                                                                                                                       // 4380\n/**                                                                                                                    // 4381\n * Should be called to check if iban is correct                                                                        // 4382\n *                                                                                                                     // 4383\n * @method isValid                                                                                                     // 4384\n * @returns {Boolean} true if it is, otherwise false                                                                   // 4385\n */                                                                                                                    // 4386\nIban.prototype.isValid = function () {                                                                                 // 4387\n    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&                                         // 4388\n        mod9710(iso13616Prepare(this._iban)) === 1;                                                                    // 4389\n};                                                                                                                     // 4390\n                                                                                                                       // 4391\n/**                                                                                                                    // 4392\n * Should be called to check if iban number is direct                                                                  // 4393\n *                                                                                                                     // 4394\n * @method isDirect                                                                                                    // 4395\n * @returns {Boolean} true if it is, otherwise false                                                                   // 4396\n */                                                                                                                    // 4397\nIban.prototype.isDirect = function () {                                                                                // 4398\n    return this._iban.length === 34 || this._iban.length === 35;                                                       // 4399\n};                                                                                                                     // 4400\n                                                                                                                       // 4401\n/**                                                                                                                    // 4402\n * Should be called to check if iban number if indirect                                                                // 4403\n *                                                                                                                     // 4404\n * @method isIndirect                                                                                                  // 4405\n * @returns {Boolean} true if it is, otherwise false                                                                   // 4406\n */                                                                                                                    // 4407\nIban.prototype.isIndirect = function () {                                                                              // 4408\n    return this._iban.length === 20;                                                                                   // 4409\n};                                                                                                                     // 4410\n                                                                                                                       // 4411\n/**                                                                                                                    // 4412\n * Should be called to get iban checksum                                                                               // 4413\n * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)                                                        // 4414\n *                                                                                                                     // 4415\n * @method checksum                                                                                                    // 4416\n * @returns {String} checksum                                                                                          // 4417\n */                                                                                                                    // 4418\nIban.prototype.checksum = function () {                                                                                // 4419\n    return this._iban.substr(2, 2);                                                                                    // 4420\n};                                                                                                                     // 4421\n                                                                                                                       // 4422\n/**                                                                                                                    // 4423\n * Should be called to get institution identifier                                                                      // 4424\n * eg. XREG                                                                                                            // 4425\n *                                                                                                                     // 4426\n * @method institution                                                                                                 // 4427\n * @returns {String} institution identifier                                                                            // 4428\n */                                                                                                                    // 4429\nIban.prototype.institution = function () {                                                                             // 4430\n    return this.isIndirect() ? this._iban.substr(7, 4) : '';                                                           // 4431\n};                                                                                                                     // 4432\n                                                                                                                       // 4433\n/**                                                                                                                    // 4434\n * Should be called to get client identifier within institution                                                        // 4435\n * eg. GAVOFYORK                                                                                                       // 4436\n *                                                                                                                     // 4437\n * @method client                                                                                                      // 4438\n * @returns {String} client identifier                                                                                 // 4439\n */                                                                                                                    // 4440\nIban.prototype.client = function () {                                                                                  // 4441\n    return this.isIndirect() ? this._iban.substr(11) : '';                                                             // 4442\n};                                                                                                                     // 4443\n                                                                                                                       // 4444\n/**                                                                                                                    // 4445\n * Should be called to get client direct address                                                                       // 4446\n *                                                                                                                     // 4447\n * @method address                                                                                                     // 4448\n * @returns {String} client direct address                                                                             // 4449\n */                                                                                                                    // 4450\nIban.prototype.address = function () {                                                                                 // 4451\n    if (this.isDirect()) {                                                                                             // 4452\n        var base36 = this._iban.substr(4);                                                                             // 4453\n        var asBn = new BigNumber(base36, 36);                                                                          // 4454\n        return padLeft(asBn.toString(16), 20);                                                                         // 4455\n    }                                                                                                                  // 4456\n                                                                                                                       // 4457\n    return '';                                                                                                         // 4458\n};                                                                                                                     // 4459\n                                                                                                                       // 4460\nIban.prototype.toString = function () {                                                                                // 4461\n    return this._iban;                                                                                                 // 4462\n};                                                                                                                     // 4463\n                                                                                                                       // 4464\nmodule.exports = Iban;                                                                                                 // 4465\n                                                                                                                       // 4466\n                                                                                                                       // 4467\n},{\"bignumber.js\":\"bignumber.js\"}],34:[function(require,module,exports){                                               // 4468\n/*                                                                                                                     // 4469\n    This file is part of web3.js.                                                                                      // 4470\n                                                                                                                       // 4471\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4472\n    it under the terms of the GNU Lesser General Public License as published by                                        // 4473\n    the Free Software Foundation, either version 3 of the License, or                                                  // 4474\n    (at your option) any later version.                                                                                // 4475\n                                                                                                                       // 4476\n    web3.js is distributed in the hope that it will be useful,                                                         // 4477\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4478\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4479\n    GNU Lesser General Public License for more details.                                                                // 4480\n                                                                                                                       // 4481\n    You should have received a copy of the GNU Lesser General Public License                                           // 4482\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4483\n*/                                                                                                                     // 4484\n/** @file ipcprovider.js                                                                                               // 4485\n * @authors:                                                                                                           // 4486\n *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 4487\n * @date 2015                                                                                                          // 4488\n */                                                                                                                    // 4489\n                                                                                                                       // 4490\n\"use strict\";                                                                                                          // 4491\n                                                                                                                       // 4492\nvar utils = require('../utils/utils');                                                                                 // 4493\nvar errors = require('./errors');                                                                                      // 4494\n                                                                                                                       // 4495\n                                                                                                                       // 4496\nvar IpcProvider = function (path, net) {                                                                               // 4497\n    var _this = this;                                                                                                  // 4498\n    this.responseCallbacks = {};                                                                                       // 4499\n    this.path = path;                                                                                                  // 4500\n                                                                                                                       // 4501\n    this.connection = net.connect({path: this.path});                                                                  // 4502\n                                                                                                                       // 4503\n    this.connection.on('error', function(e){                                                                           // 4504\n        console.error('IPC Connection Error', e);                                                                      // 4505\n        _this._timeout();                                                                                              // 4506\n    });                                                                                                                // 4507\n                                                                                                                       // 4508\n    this.connection.on('end', function(){                                                                              // 4509\n        _this._timeout();                                                                                              // 4510\n    });                                                                                                                // 4511\n                                                                                                                       // 4512\n                                                                                                                       // 4513\n    // LISTEN FOR CONNECTION RESPONSES                                                                                 // 4514\n    this.connection.on('data', function(data) {                                                                        // 4515\n        /*jshint maxcomplexity: 6 */                                                                                   // 4516\n                                                                                                                       // 4517\n        _this._parseResponse(data.toString()).forEach(function(result){                                                // 4518\n                                                                                                                       // 4519\n            var id = null;                                                                                             // 4520\n                                                                                                                       // 4521\n            // get the id which matches the returned id                                                                // 4522\n            if(utils.isArray(result)) {                                                                                // 4523\n                result.forEach(function(load){                                                                         // 4524\n                    if(_this.responseCallbacks[load.id])                                                               // 4525\n                        id = load.id;                                                                                  // 4526\n                });                                                                                                    // 4527\n            } else {                                                                                                   // 4528\n                id = result.id;                                                                                        // 4529\n            }                                                                                                          // 4530\n                                                                                                                       // 4531\n            // fire the callback                                                                                       // 4532\n            if(_this.responseCallbacks[id]) {                                                                          // 4533\n                _this.responseCallbacks[id](null, result);                                                             // 4534\n                delete _this.responseCallbacks[id];                                                                    // 4535\n            }                                                                                                          // 4536\n        });                                                                                                            // 4537\n    });                                                                                                                // 4538\n};                                                                                                                     // 4539\n                                                                                                                       // 4540\n/**                                                                                                                    // 4541\nWill parse the response and make an array out of it.                                                                   // 4542\n                                                                                                                       // 4543\n@method _parseResponse                                                                                                 // 4544\n@param {String} data                                                                                                   // 4545\n*/                                                                                                                     // 4546\nIpcProvider.prototype._parseResponse = function(data) {                                                                // 4547\n    var _this = this,                                                                                                  // 4548\n        returnValues = [];                                                                                             // 4549\n                                                                                                                       // 4550\n    // DE-CHUNKER                                                                                                      // 4551\n    var dechunkedData = data                                                                                           // 4552\n        .replace(/\\}\\{/g,'}|--|{') // }{                                                                               // 4553\n        .replace(/\\}\\]\\[\\{/g,'}]|--|[{') // }][{                                                                       // 4554\n        .replace(/\\}\\[\\{/g,'}|--|[{') // }[{                                                                           // 4555\n        .replace(/\\}\\]\\{/g,'}]|--|{') // }]{                                                                           // 4556\n        .split('|--|');                                                                                                // 4557\n                                                                                                                       // 4558\n    dechunkedData.forEach(function(data){                                                                              // 4559\n                                                                                                                       // 4560\n        // prepend the last chunk                                                                                      // 4561\n        if(_this.lastChunk)                                                                                            // 4562\n            data = _this.lastChunk + data;                                                                             // 4563\n                                                                                                                       // 4564\n        var result = null;                                                                                             // 4565\n                                                                                                                       // 4566\n        try {                                                                                                          // 4567\n            result = JSON.parse(data);                                                                                 // 4568\n                                                                                                                       // 4569\n        } catch(e) {                                                                                                   // 4570\n                                                                                                                       // 4571\n            _this.lastChunk = data;                                                                                    // 4572\n                                                                                                                       // 4573\n            // start timeout to cancel all requests                                                                    // 4574\n            clearTimeout(_this.lastChunkTimeout);                                                                      // 4575\n            _this.lastChunkTimeout = setTimeout(function(){                                                            // 4576\n                _this._timeout();                                                                                      // 4577\n                throw errors.InvalidResponse(data);                                                                    // 4578\n            }, 1000 * 15);                                                                                             // 4579\n                                                                                                                       // 4580\n            return;                                                                                                    // 4581\n        }                                                                                                              // 4582\n                                                                                                                       // 4583\n        // cancel timeout and set chunk to null                                                                        // 4584\n        clearTimeout(_this.lastChunkTimeout);                                                                          // 4585\n        _this.lastChunk = null;                                                                                        // 4586\n                                                                                                                       // 4587\n        if(result)                                                                                                     // 4588\n            returnValues.push(result);                                                                                 // 4589\n    });                                                                                                                // 4590\n                                                                                                                       // 4591\n    return returnValues;                                                                                               // 4592\n};                                                                                                                     // 4593\n                                                                                                                       // 4594\n                                                                                                                       // 4595\n/**                                                                                                                    // 4596\nGet the adds a callback to the responseCallbacks object,                                                               // 4597\nwhich will be called if a response matching the response Id will arrive.                                               // 4598\n                                                                                                                       // 4599\n@method _addResponseCallback                                                                                           // 4600\n*/                                                                                                                     // 4601\nIpcProvider.prototype._addResponseCallback = function(payload, callback) {                                             // 4602\n    var id = payload.id || payload[0].id;                                                                              // 4603\n    var method = payload.method || payload[0].method;                                                                  // 4604\n                                                                                                                       // 4605\n    this.responseCallbacks[id] = callback;                                                                             // 4606\n    this.responseCallbacks[id].method = method;                                                                        // 4607\n};                                                                                                                     // 4608\n                                                                                                                       // 4609\n/**                                                                                                                    // 4610\nTimeout all requests when the end/error event is fired                                                                 // 4611\n                                                                                                                       // 4612\n@method _timeout                                                                                                       // 4613\n*/                                                                                                                     // 4614\nIpcProvider.prototype._timeout = function() {                                                                          // 4615\n    for(var key in this.responseCallbacks) {                                                                           // 4616\n        if(this.responseCallbacks.hasOwnProperty(key)){                                                                // 4617\n            this.responseCallbacks[key](errors.InvalidConnection('on IPC'));                                           // 4618\n            delete this.responseCallbacks[key];                                                                        // 4619\n        }                                                                                                              // 4620\n    }                                                                                                                  // 4621\n};                                                                                                                     // 4622\n                                                                                                                       // 4623\n                                                                                                                       // 4624\n/**                                                                                                                    // 4625\nCheck if the current connection is still valid.                                                                        // 4626\n                                                                                                                       // 4627\n@method isConnected                                                                                                    // 4628\n*/                                                                                                                     // 4629\nIpcProvider.prototype.isConnected = function() {                                                                       // 4630\n    var _this = this;                                                                                                  // 4631\n                                                                                                                       // 4632\n    // try reconnect, when connection is gone                                                                          // 4633\n    if(!_this.connection.writable)                                                                                     // 4634\n        _this.connection.connect({path: _this.path});                                                                  // 4635\n                                                                                                                       // 4636\n    return !!this.connection.writable;                                                                                 // 4637\n};                                                                                                                     // 4638\n                                                                                                                       // 4639\nIpcProvider.prototype.send = function (payload) {                                                                      // 4640\n                                                                                                                       // 4641\n    if(this.connection.writeSync) {                                                                                    // 4642\n        var result;                                                                                                    // 4643\n                                                                                                                       // 4644\n        // try reconnect, when connection is gone                                                                      // 4645\n        if(!this.connection.writable)                                                                                  // 4646\n            this.connection.connect({path: this.path});                                                                // 4647\n                                                                                                                       // 4648\n        var data = this.connection.writeSync(JSON.stringify(payload));                                                 // 4649\n                                                                                                                       // 4650\n        try {                                                                                                          // 4651\n            result = JSON.parse(data);                                                                                 // 4652\n        } catch(e) {                                                                                                   // 4653\n            throw errors.InvalidResponse(data);                                                                        // 4654\n        }                                                                                                              // 4655\n                                                                                                                       // 4656\n        return result;                                                                                                 // 4657\n                                                                                                                       // 4658\n    } else {                                                                                                           // 4659\n        throw new Error('You tried to send \"'+ payload.method +'\" synchronously. Synchronous requests are not supported by the IPC provider.');\n    }                                                                                                                  // 4661\n};                                                                                                                     // 4662\n                                                                                                                       // 4663\nIpcProvider.prototype.sendAsync = function (payload, callback) {                                                       // 4664\n    // try reconnect, when connection is gone                                                                          // 4665\n    if(!this.connection.writable)                                                                                      // 4666\n        this.connection.connect({path: this.path});                                                                    // 4667\n                                                                                                                       // 4668\n                                                                                                                       // 4669\n    this.connection.write(JSON.stringify(payload));                                                                    // 4670\n    this._addResponseCallback(payload, callback);                                                                      // 4671\n};                                                                                                                     // 4672\n                                                                                                                       // 4673\nmodule.exports = IpcProvider;                                                                                          // 4674\n                                                                                                                       // 4675\n                                                                                                                       // 4676\n},{\"../utils/utils\":20,\"./errors\":26}],35:[function(require,module,exports){                                           // 4677\n/*                                                                                                                     // 4678\n    This file is part of web3.js.                                                                                      // 4679\n                                                                                                                       // 4680\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4681\n    it under the terms of the GNU Lesser General Public License as published by                                        // 4682\n    the Free Software Foundation, either version 3 of the License, or                                                  // 4683\n    (at your option) any later version.                                                                                // 4684\n                                                                                                                       // 4685\n    web3.js is distributed in the hope that it will be useful,                                                         // 4686\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4687\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4688\n    GNU Lesser General Public License for more details.                                                                // 4689\n                                                                                                                       // 4690\n    You should have received a copy of the GNU Lesser General Public License                                           // 4691\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4692\n*/                                                                                                                     // 4693\n/** @file jsonrpc.js                                                                                                   // 4694\n * @authors:                                                                                                           // 4695\n *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 4696\n * @date 2015                                                                                                          // 4697\n */                                                                                                                    // 4698\n                                                                                                                       // 4699\nvar Jsonrpc = function () {                                                                                            // 4700\n    // singleton pattern                                                                                               // 4701\n    if (arguments.callee._singletonInstance) {                                                                         // 4702\n        return arguments.callee._singletonInstance;                                                                    // 4703\n    }                                                                                                                  // 4704\n    arguments.callee._singletonInstance = this;                                                                        // 4705\n                                                                                                                       // 4706\n    this.messageId = 1;                                                                                                // 4707\n};                                                                                                                     // 4708\n                                                                                                                       // 4709\n/**                                                                                                                    // 4710\n * @return {Jsonrpc} singleton                                                                                         // 4711\n */                                                                                                                    // 4712\nJsonrpc.getInstance = function () {                                                                                    // 4713\n    var instance = new Jsonrpc();                                                                                      // 4714\n    return instance;                                                                                                   // 4715\n};                                                                                                                     // 4716\n                                                                                                                       // 4717\n/**                                                                                                                    // 4718\n * Should be called to valid json create payload object                                                                // 4719\n *                                                                                                                     // 4720\n * @method toPayload                                                                                                   // 4721\n * @param {Function} method of jsonrpc call, required                                                                  // 4722\n * @param {Array} params, an array of method params, optional                                                          // 4723\n * @returns {Object} valid jsonrpc payload object                                                                      // 4724\n */                                                                                                                    // 4725\nJsonrpc.prototype.toPayload = function (method, params) {                                                              // 4726\n    if (!method)                                                                                                       // 4727\n        console.error('jsonrpc method should be specified!');                                                          // 4728\n                                                                                                                       // 4729\n    return {                                                                                                           // 4730\n        jsonrpc: '2.0',                                                                                                // 4731\n        method: method,                                                                                                // 4732\n        params: params || [],                                                                                          // 4733\n        id: this.messageId++                                                                                           // 4734\n    };                                                                                                                 // 4735\n};                                                                                                                     // 4736\n                                                                                                                       // 4737\n/**                                                                                                                    // 4738\n * Should be called to check if jsonrpc response is valid                                                              // 4739\n *                                                                                                                     // 4740\n * @method isValidResponse                                                                                             // 4741\n * @param {Object}                                                                                                     // 4742\n * @returns {Boolean} true if response is valid, otherwise false                                                       // 4743\n */                                                                                                                    // 4744\nJsonrpc.prototype.isValidResponse = function (response) {                                                              // 4745\n    return !!response &&                                                                                               // 4746\n        !response.error &&                                                                                             // 4747\n        response.jsonrpc === '2.0' &&                                                                                  // 4748\n        typeof response.id === 'number' &&                                                                             // 4749\n        response.result !== undefined; // only undefined is not valid json object                                      // 4750\n};                                                                                                                     // 4751\n                                                                                                                       // 4752\n/**                                                                                                                    // 4753\n * Should be called to create batch payload object                                                                     // 4754\n *                                                                                                                     // 4755\n * @method toBatchPayload                                                                                              // 4756\n * @param {Array} messages, an array of objects with method (required) and params (optional) fields                    // 4757\n * @returns {Array} batch payload                                                                                      // 4758\n */                                                                                                                    // 4759\nJsonrpc.prototype.toBatchPayload = function (messages) {                                                               // 4760\n    var self = this;                                                                                                   // 4761\n    return messages.map(function (message) {                                                                           // 4762\n        return self.toPayload(message.method, message.params);                                                         // 4763\n    });                                                                                                                // 4764\n};                                                                                                                     // 4765\n                                                                                                                       // 4766\nmodule.exports = Jsonrpc;                                                                                              // 4767\n                                                                                                                       // 4768\n                                                                                                                       // 4769\n},{}],36:[function(require,module,exports){                                                                            // 4770\n/*                                                                                                                     // 4771\n    This file is part of web3.js.                                                                                      // 4772\n                                                                                                                       // 4773\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4774\n    it under the terms of the GNU Lesser General Public License as published by                                        // 4775\n    the Free Software Foundation, either version 3 of the License, or                                                  // 4776\n    (at your option) any later version.                                                                                // 4777\n                                                                                                                       // 4778\n    web3.js is distributed in the hope that it will be useful,                                                         // 4779\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4780\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4781\n    GNU Lesser General Public License for more details.                                                                // 4782\n                                                                                                                       // 4783\n    You should have received a copy of the GNU Lesser General Public License                                           // 4784\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4785\n*/                                                                                                                     // 4786\n/**                                                                                                                    // 4787\n * @file method.js                                                                                                     // 4788\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 4789\n * @date 2015                                                                                                          // 4790\n */                                                                                                                    // 4791\n                                                                                                                       // 4792\nvar utils = require('../utils/utils');                                                                                 // 4793\nvar errors = require('./errors');                                                                                      // 4794\n                                                                                                                       // 4795\nvar Method = function (options) {                                                                                      // 4796\n    this.name = options.name;                                                                                          // 4797\n    this.call = options.call;                                                                                          // 4798\n    this.params = options.params || 0;                                                                                 // 4799\n    this.inputFormatter = options.inputFormatter;                                                                      // 4800\n    this.outputFormatter = options.outputFormatter;                                                                    // 4801\n    this.requestManager = null;                                                                                        // 4802\n};                                                                                                                     // 4803\n                                                                                                                       // 4804\nMethod.prototype.setRequestManager = function (rm) {                                                                   // 4805\n    this.requestManager = rm;                                                                                          // 4806\n};                                                                                                                     // 4807\n                                                                                                                       // 4808\n/**                                                                                                                    // 4809\n * Should be used to determine name of the jsonrpc method based on arguments                                           // 4810\n *                                                                                                                     // 4811\n * @method getCall                                                                                                     // 4812\n * @param {Array} arguments                                                                                            // 4813\n * @return {String} name of jsonrpc method                                                                             // 4814\n */                                                                                                                    // 4815\nMethod.prototype.getCall = function (args) {                                                                           // 4816\n    return utils.isFunction(this.call) ? this.call(args) : this.call;                                                  // 4817\n};                                                                                                                     // 4818\n                                                                                                                       // 4819\n/**                                                                                                                    // 4820\n * Should be used to extract callback from array of arguments. Modifies input param                                    // 4821\n *                                                                                                                     // 4822\n * @method extractCallback                                                                                             // 4823\n * @param {Array} arguments                                                                                            // 4824\n * @return {Function|Null} callback, if exists                                                                         // 4825\n */                                                                                                                    // 4826\nMethod.prototype.extractCallback = function (args) {                                                                   // 4827\n    if (utils.isFunction(args[args.length - 1])) {                                                                     // 4828\n        return args.pop(); // modify the args array!                                                                   // 4829\n    }                                                                                                                  // 4830\n};                                                                                                                     // 4831\n                                                                                                                       // 4832\n/**                                                                                                                    // 4833\n * Should be called to check if the number of arguments is correct                                                     // 4834\n *                                                                                                                     // 4835\n * @method validateArgs                                                                                                // 4836\n * @param {Array} arguments                                                                                            // 4837\n * @throws {Error} if it is not                                                                                        // 4838\n */                                                                                                                    // 4839\nMethod.prototype.validateArgs = function (args) {                                                                      // 4840\n    if (args.length !== this.params) {                                                                                 // 4841\n        throw errors.InvalidNumberOfParams();                                                                          // 4842\n    }                                                                                                                  // 4843\n};                                                                                                                     // 4844\n                                                                                                                       // 4845\n/**                                                                                                                    // 4846\n * Should be called to format input args of method                                                                     // 4847\n *                                                                                                                     // 4848\n * @method formatInput                                                                                                 // 4849\n * @param {Array}                                                                                                      // 4850\n * @return {Array}                                                                                                     // 4851\n */                                                                                                                    // 4852\nMethod.prototype.formatInput = function (args) {                                                                       // 4853\n    if (!this.inputFormatter) {                                                                                        // 4854\n        return args;                                                                                                   // 4855\n    }                                                                                                                  // 4856\n                                                                                                                       // 4857\n    return this.inputFormatter.map(function (formatter, index) {                                                       // 4858\n        return formatter ? formatter(args[index]) : args[index];                                                       // 4859\n    });                                                                                                                // 4860\n};                                                                                                                     // 4861\n                                                                                                                       // 4862\n/**                                                                                                                    // 4863\n * Should be called to format output(result) of method                                                                 // 4864\n *                                                                                                                     // 4865\n * @method formatOutput                                                                                                // 4866\n * @param {Object}                                                                                                     // 4867\n * @return {Object}                                                                                                    // 4868\n */                                                                                                                    // 4869\nMethod.prototype.formatOutput = function (result) {                                                                    // 4870\n    return this.outputFormatter && result ? this.outputFormatter(result) : result;                                     // 4871\n};                                                                                                                     // 4872\n                                                                                                                       // 4873\n/**                                                                                                                    // 4874\n * Should create payload from given input args                                                                         // 4875\n *                                                                                                                     // 4876\n * @method toPayload                                                                                                   // 4877\n * @param {Array} args                                                                                                 // 4878\n * @return {Object}                                                                                                    // 4879\n */                                                                                                                    // 4880\nMethod.prototype.toPayload = function (args) {                                                                         // 4881\n    var call = this.getCall(args);                                                                                     // 4882\n    var callback = this.extractCallback(args);                                                                         // 4883\n    var params = this.formatInput(args);                                                                               // 4884\n    this.validateArgs(params);                                                                                         // 4885\n                                                                                                                       // 4886\n    return {                                                                                                           // 4887\n        method: call,                                                                                                  // 4888\n        params: params,                                                                                                // 4889\n        callback: callback                                                                                             // 4890\n    };                                                                                                                 // 4891\n};                                                                                                                     // 4892\n                                                                                                                       // 4893\nMethod.prototype.attachToObject = function (obj) {                                                                     // 4894\n    var func = this.buildCall();                                                                                       // 4895\n    func.call = this.call; // TODO!!! that's ugly. filter.js uses it                                                   // 4896\n    var name = this.name.split('.');                                                                                   // 4897\n    if (name.length > 1) {                                                                                             // 4898\n        obj[name[0]] = obj[name[0]] || {};                                                                             // 4899\n        obj[name[0]][name[1]] = func;                                                                                  // 4900\n    } else {                                                                                                           // 4901\n        obj[name[0]] = func;                                                                                           // 4902\n    }                                                                                                                  // 4903\n};                                                                                                                     // 4904\n                                                                                                                       // 4905\nMethod.prototype.buildCall = function() {                                                                              // 4906\n    var method = this;                                                                                                 // 4907\n    var send = function () {                                                                                           // 4908\n        var payload = method.toPayload(Array.prototype.slice.call(arguments));                                         // 4909\n        if (payload.callback) {                                                                                        // 4910\n            return method.requestManager.sendAsync(payload, function (err, result) {                                   // 4911\n                payload.callback(err, method.formatOutput(result));                                                    // 4912\n            });                                                                                                        // 4913\n        }                                                                                                              // 4914\n        return method.formatOutput(method.requestManager.send(payload));                                               // 4915\n    };                                                                                                                 // 4916\n    send.request = this.request.bind(this);                                                                            // 4917\n    return send;                                                                                                       // 4918\n};                                                                                                                     // 4919\n                                                                                                                       // 4920\n/**                                                                                                                    // 4921\n * Should be called to create pure JSONRPC request which can be used in batch request                                  // 4922\n *                                                                                                                     // 4923\n * @method request                                                                                                     // 4924\n * @param {...} params                                                                                                 // 4925\n * @return {Object} jsonrpc request                                                                                    // 4926\n */                                                                                                                    // 4927\nMethod.prototype.request = function () {                                                                               // 4928\n    var payload = this.toPayload(Array.prototype.slice.call(arguments));                                               // 4929\n    payload.format = this.formatOutput.bind(this);                                                                     // 4930\n    return payload;                                                                                                    // 4931\n};                                                                                                                     // 4932\n                                                                                                                       // 4933\nmodule.exports = Method;                                                                                               // 4934\n                                                                                                                       // 4935\n                                                                                                                       // 4936\n},{\"../utils/utils\":20,\"./errors\":26}],37:[function(require,module,exports){                                           // 4937\n/*                                                                                                                     // 4938\n    This file is part of web3.js.                                                                                      // 4939\n                                                                                                                       // 4940\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4941\n    it under the terms of the GNU Lesser General Public License as published by                                        // 4942\n    the Free Software Foundation, either version 3 of the License, or                                                  // 4943\n    (at your option) any later version.                                                                                // 4944\n                                                                                                                       // 4945\n    web3.js is distributed in the hope that it will be useful,                                                         // 4946\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 4947\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 4948\n    GNU Lesser General Public License for more details.                                                                // 4949\n                                                                                                                       // 4950\n    You should have received a copy of the GNU Lesser General Public License                                           // 4951\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 4952\n*/                                                                                                                     // 4953\n/** @file db.js                                                                                                        // 4954\n * @authors:                                                                                                           // 4955\n *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 4956\n * @date 2015                                                                                                          // 4957\n */                                                                                                                    // 4958\n                                                                                                                       // 4959\nvar Method = require('../method');                                                                                     // 4960\n                                                                                                                       // 4961\nvar DB = function (web3) {                                                                                             // 4962\n    this._requestManager = web3._requestManager;                                                                       // 4963\n                                                                                                                       // 4964\n    var self = this;                                                                                                   // 4965\n                                                                                                                       // 4966\n    methods().forEach(function(method) {                                                                               // 4967\n        method.attachToObject(self);                                                                                   // 4968\n        method.setRequestManager(web3._requestManager);                                                                // 4969\n    });                                                                                                                // 4970\n};                                                                                                                     // 4971\n                                                                                                                       // 4972\nvar methods = function () {                                                                                            // 4973\n    var putString = new Method({                                                                                       // 4974\n        name: 'putString',                                                                                             // 4975\n        call: 'db_putString',                                                                                          // 4976\n        params: 3                                                                                                      // 4977\n    });                                                                                                                // 4978\n                                                                                                                       // 4979\n    var getString = new Method({                                                                                       // 4980\n        name: 'getString',                                                                                             // 4981\n        call: 'db_getString',                                                                                          // 4982\n        params: 2                                                                                                      // 4983\n    });                                                                                                                // 4984\n                                                                                                                       // 4985\n    var putHex = new Method({                                                                                          // 4986\n        name: 'putHex',                                                                                                // 4987\n        call: 'db_putHex',                                                                                             // 4988\n        params: 3                                                                                                      // 4989\n    });                                                                                                                // 4990\n                                                                                                                       // 4991\n    var getHex = new Method({                                                                                          // 4992\n        name: 'getHex',                                                                                                // 4993\n        call: 'db_getHex',                                                                                             // 4994\n        params: 2                                                                                                      // 4995\n    });                                                                                                                // 4996\n                                                                                                                       // 4997\n    return [                                                                                                           // 4998\n        putString, getString, putHex, getHex                                                                           // 4999\n    ];                                                                                                                 // 5000\n};                                                                                                                     // 5001\n                                                                                                                       // 5002\nmodule.exports = DB;                                                                                                   // 5003\n                                                                                                                       // 5004\n},{\"../method\":36}],38:[function(require,module,exports){                                                              // 5005\n/*                                                                                                                     // 5006\n    This file is part of web3.js.                                                                                      // 5007\n                                                                                                                       // 5008\n    web3.js is free software: you can redistribute it and/or modify                                                    // 5009\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5010\n    the Free Software Foundation, either version 3 of the License, or                                                  // 5011\n    (at your option) any later version.                                                                                // 5012\n                                                                                                                       // 5013\n    web3.js is distributed in the hope that it will be useful,                                                         // 5014\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5015\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5016\n    GNU Lesser General Public License for more details.                                                                // 5017\n                                                                                                                       // 5018\n    You should have received a copy of the GNU Lesser General Public License                                           // 5019\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5020\n*/                                                                                                                     // 5021\n/**                                                                                                                    // 5022\n * @file eth.js                                                                                                        // 5023\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5024\n * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 5025\n * @date 2015                                                                                                          // 5026\n */                                                                                                                    // 5027\n                                                                                                                       // 5028\n\"use strict\";                                                                                                          // 5029\n                                                                                                                       // 5030\nvar formatters = require('../formatters');                                                                             // 5031\nvar utils = require('../../utils/utils');                                                                              // 5032\nvar Method = require('../method');                                                                                     // 5033\nvar Property = require('../property');                                                                                 // 5034\nvar c = require('../../utils/config');                                                                                 // 5035\nvar Contract = require('../contract');                                                                                 // 5036\nvar watches = require('./watches');                                                                                    // 5037\nvar Filter = require('../filter');                                                                                     // 5038\nvar IsSyncing = require('../syncing');                                                                                 // 5039\nvar namereg = require('../namereg');                                                                                   // 5040\nvar Iban = require('../iban');                                                                                         // 5041\nvar transfer = require('../transfer');                                                                                 // 5042\n                                                                                                                       // 5043\nvar blockCall = function (args) {                                                                                      // 5044\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";   // 5045\n};                                                                                                                     // 5046\n                                                                                                                       // 5047\nvar transactionFromBlockCall = function (args) {                                                                       // 5048\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';\n};                                                                                                                     // 5050\n                                                                                                                       // 5051\nvar uncleCall = function (args) {                                                                                      // 5052\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';\n};                                                                                                                     // 5054\n                                                                                                                       // 5055\nvar getBlockTransactionCountCall = function (args) {                                                                   // 5056\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';\n};                                                                                                                     // 5058\n                                                                                                                       // 5059\nvar uncleCountCall = function (args) {                                                                                 // 5060\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';\n};                                                                                                                     // 5062\n                                                                                                                       // 5063\nfunction Eth(web3) {                                                                                                   // 5064\n    this._requestManager = web3._requestManager;                                                                       // 5065\n                                                                                                                       // 5066\n    var self = this;                                                                                                   // 5067\n                                                                                                                       // 5068\n    methods().forEach(function(method) {                                                                               // 5069\n        method.attachToObject(self);                                                                                   // 5070\n        method.setRequestManager(self._requestManager);                                                                // 5071\n    });                                                                                                                // 5072\n                                                                                                                       // 5073\n    properties().forEach(function(p) {                                                                                 // 5074\n        p.attachToObject(self);                                                                                        // 5075\n        p.setRequestManager(self._requestManager);                                                                     // 5076\n    });                                                                                                                // 5077\n                                                                                                                       // 5078\n                                                                                                                       // 5079\n    this.iban = Iban;                                                                                                  // 5080\n    this.sendIBANTransaction = transfer.bind(null, this);                                                              // 5081\n}                                                                                                                      // 5082\n                                                                                                                       // 5083\nObject.defineProperty(Eth.prototype, 'defaultBlock', {                                                                 // 5084\n    get: function () {                                                                                                 // 5085\n        return c.defaultBlock;                                                                                         // 5086\n    },                                                                                                                 // 5087\n    set: function (val) {                                                                                              // 5088\n        c.defaultBlock = val;                                                                                          // 5089\n        return val;                                                                                                    // 5090\n    }                                                                                                                  // 5091\n});                                                                                                                    // 5092\n                                                                                                                       // 5093\nObject.defineProperty(Eth.prototype, 'defaultAccount', {                                                               // 5094\n    get: function () {                                                                                                 // 5095\n        return c.defaultAccount;                                                                                       // 5096\n    },                                                                                                                 // 5097\n    set: function (val) {                                                                                              // 5098\n        c.defaultAccount = val;                                                                                        // 5099\n        return val;                                                                                                    // 5100\n    }                                                                                                                  // 5101\n});                                                                                                                    // 5102\n                                                                                                                       // 5103\nvar methods = function () {                                                                                            // 5104\n    var getBalance = new Method({                                                                                      // 5105\n        name: 'getBalance',                                                                                            // 5106\n        call: 'eth_getBalance',                                                                                        // 5107\n        params: 2,                                                                                                     // 5108\n        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],               // 5109\n        outputFormatter: formatters.outputBigNumberFormatter                                                           // 5110\n    });                                                                                                                // 5111\n                                                                                                                       // 5112\n    var getStorageAt = new Method({                                                                                    // 5113\n        name: 'getStorageAt',                                                                                          // 5114\n        call: 'eth_getStorageAt',                                                                                      // 5115\n        params: 3,                                                                                                     // 5116\n        inputFormatter: [null, utils.toHex, formatters.inputDefaultBlockNumberFormatter]                               // 5117\n    });                                                                                                                // 5118\n                                                                                                                       // 5119\n    var getCode = new Method({                                                                                         // 5120\n        name: 'getCode',                                                                                               // 5121\n        call: 'eth_getCode',                                                                                           // 5122\n        params: 2,                                                                                                     // 5123\n        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]                // 5124\n    });                                                                                                                // 5125\n                                                                                                                       // 5126\n    var getBlock = new Method({                                                                                        // 5127\n        name: 'getBlock',                                                                                              // 5128\n        call: blockCall,                                                                                               // 5129\n        params: 2,                                                                                                     // 5130\n        inputFormatter: [formatters.inputBlockNumberFormatter, function (val) { return !!val; }],                      // 5131\n        outputFormatter: formatters.outputBlockFormatter                                                               // 5132\n    });                                                                                                                // 5133\n                                                                                                                       // 5134\n    var getUncle = new Method({                                                                                        // 5135\n        name: 'getUncle',                                                                                              // 5136\n        call: uncleCall,                                                                                               // 5137\n        params: 2,                                                                                                     // 5138\n        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],                                           // 5139\n        outputFormatter: formatters.outputBlockFormatter,                                                              // 5140\n                                                                                                                       // 5141\n    });                                                                                                                // 5142\n                                                                                                                       // 5143\n    var getCompilers = new Method({                                                                                    // 5144\n        name: 'getCompilers',                                                                                          // 5145\n        call: 'eth_getCompilers',                                                                                      // 5146\n        params: 0                                                                                                      // 5147\n    });                                                                                                                // 5148\n                                                                                                                       // 5149\n    var getBlockTransactionCount = new Method({                                                                        // 5150\n        name: 'getBlockTransactionCount',                                                                              // 5151\n        call: getBlockTransactionCountCall,                                                                            // 5152\n        params: 1,                                                                                                     // 5153\n        inputFormatter: [formatters.inputBlockNumberFormatter],                                                        // 5154\n        outputFormatter: utils.toDecimal                                                                               // 5155\n    });                                                                                                                // 5156\n                                                                                                                       // 5157\n    var getBlockUncleCount = new Method({                                                                              // 5158\n        name: 'getBlockUncleCount',                                                                                    // 5159\n        call: uncleCountCall,                                                                                          // 5160\n        params: 1,                                                                                                     // 5161\n        inputFormatter: [formatters.inputBlockNumberFormatter],                                                        // 5162\n        outputFormatter: utils.toDecimal                                                                               // 5163\n    });                                                                                                                // 5164\n                                                                                                                       // 5165\n    var getTransaction = new Method({                                                                                  // 5166\n        name: 'getTransaction',                                                                                        // 5167\n        call: 'eth_getTransactionByHash',                                                                              // 5168\n        params: 1,                                                                                                     // 5169\n        outputFormatter: formatters.outputTransactionFormatter                                                         // 5170\n    });                                                                                                                // 5171\n                                                                                                                       // 5172\n    var getTransactionFromBlock = new Method({                                                                         // 5173\n        name: 'getTransactionFromBlock',                                                                               // 5174\n        call: transactionFromBlockCall,                                                                                // 5175\n        params: 2,                                                                                                     // 5176\n        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],                                           // 5177\n        outputFormatter: formatters.outputTransactionFormatter                                                         // 5178\n    });                                                                                                                // 5179\n                                                                                                                       // 5180\n    var getTransactionReceipt = new Method({                                                                           // 5181\n        name: 'getTransactionReceipt',                                                                                 // 5182\n        call: 'eth_getTransactionReceipt',                                                                             // 5183\n        params: 1,                                                                                                     // 5184\n        outputFormatter: formatters.outputTransactionReceiptFormatter                                                  // 5185\n    });                                                                                                                // 5186\n                                                                                                                       // 5187\n    var getTransactionCount = new Method({                                                                             // 5188\n        name: 'getTransactionCount',                                                                                   // 5189\n        call: 'eth_getTransactionCount',                                                                               // 5190\n        params: 2,                                                                                                     // 5191\n        inputFormatter: [null, formatters.inputDefaultBlockNumberFormatter],                                           // 5192\n        outputFormatter: utils.toDecimal                                                                               // 5193\n    });                                                                                                                // 5194\n                                                                                                                       // 5195\n    var sendRawTransaction = new Method({                                                                              // 5196\n        name: 'sendRawTransaction',                                                                                    // 5197\n        call: 'eth_sendRawTransaction',                                                                                // 5198\n        params: 1,                                                                                                     // 5199\n        inputFormatter: [null]                                                                                         // 5200\n    });                                                                                                                // 5201\n                                                                                                                       // 5202\n    var sendTransaction = new Method({                                                                                 // 5203\n        name: 'sendTransaction',                                                                                       // 5204\n        call: 'eth_sendTransaction',                                                                                   // 5205\n        params: 1,                                                                                                     // 5206\n        inputFormatter: [formatters.inputTransactionFormatter]                                                         // 5207\n    });                                                                                                                // 5208\n                                                                                                                       // 5209\n    var sign = new Method({                                                                                            // 5210\n        name: 'sign',                                                                                                  // 5211\n        call: 'eth_sign',                                                                                              // 5212\n        params: 2,                                                                                                     // 5213\n        inputFormatter: [formatters.inputAddressFormatter, null]                                                       // 5214\n    });                                                                                                                // 5215\n                                                                                                                       // 5216\n    var call = new Method({                                                                                            // 5217\n        name: 'call',                                                                                                  // 5218\n        call: 'eth_call',                                                                                              // 5219\n        params: 2,                                                                                                     // 5220\n        inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]                   // 5221\n    });                                                                                                                // 5222\n                                                                                                                       // 5223\n    var estimateGas = new Method({                                                                                     // 5224\n        name: 'estimateGas',                                                                                           // 5225\n        call: 'eth_estimateGas',                                                                                       // 5226\n        params: 1,                                                                                                     // 5227\n        inputFormatter: [formatters.inputCallFormatter],                                                               // 5228\n        outputFormatter: utils.toDecimal                                                                               // 5229\n    });                                                                                                                // 5230\n                                                                                                                       // 5231\n    var compileSolidity = new Method({                                                                                 // 5232\n        name: 'compile.solidity',                                                                                      // 5233\n        call: 'eth_compileSolidity',                                                                                   // 5234\n        params: 1                                                                                                      // 5235\n    });                                                                                                                // 5236\n                                                                                                                       // 5237\n    var compileLLL = new Method({                                                                                      // 5238\n        name: 'compile.lll',                                                                                           // 5239\n        call: 'eth_compileLLL',                                                                                        // 5240\n        params: 1                                                                                                      // 5241\n    });                                                                                                                // 5242\n                                                                                                                       // 5243\n    var compileSerpent = new Method({                                                                                  // 5244\n        name: 'compile.serpent',                                                                                       // 5245\n        call: 'eth_compileSerpent',                                                                                    // 5246\n        params: 1                                                                                                      // 5247\n    });                                                                                                                // 5248\n                                                                                                                       // 5249\n    var submitWork = new Method({                                                                                      // 5250\n        name: 'submitWork',                                                                                            // 5251\n        call: 'eth_submitWork',                                                                                        // 5252\n        params: 3                                                                                                      // 5253\n    });                                                                                                                // 5254\n                                                                                                                       // 5255\n    var getWork = new Method({                                                                                         // 5256\n        name: 'getWork',                                                                                               // 5257\n        call: 'eth_getWork',                                                                                           // 5258\n        params: 0                                                                                                      // 5259\n    });                                                                                                                // 5260\n                                                                                                                       // 5261\n    return [                                                                                                           // 5262\n        getBalance,                                                                                                    // 5263\n        getStorageAt,                                                                                                  // 5264\n        getCode,                                                                                                       // 5265\n        getBlock,                                                                                                      // 5266\n        getUncle,                                                                                                      // 5267\n        getCompilers,                                                                                                  // 5268\n        getBlockTransactionCount,                                                                                      // 5269\n        getBlockUncleCount,                                                                                            // 5270\n        getTransaction,                                                                                                // 5271\n        getTransactionFromBlock,                                                                                       // 5272\n        getTransactionReceipt,                                                                                         // 5273\n        getTransactionCount,                                                                                           // 5274\n        call,                                                                                                          // 5275\n        estimateGas,                                                                                                   // 5276\n        sendRawTransaction,                                                                                            // 5277\n        sendTransaction,                                                                                               // 5278\n        sign,                                                                                                          // 5279\n        compileSolidity,                                                                                               // 5280\n        compileLLL,                                                                                                    // 5281\n        compileSerpent,                                                                                                // 5282\n        submitWork,                                                                                                    // 5283\n        getWork                                                                                                        // 5284\n    ];                                                                                                                 // 5285\n};                                                                                                                     // 5286\n                                                                                                                       // 5287\n                                                                                                                       // 5288\nvar properties = function () {                                                                                         // 5289\n    return [                                                                                                           // 5290\n        new Property({                                                                                                 // 5291\n            name: 'coinbase',                                                                                          // 5292\n            getter: 'eth_coinbase'                                                                                     // 5293\n        }),                                                                                                            // 5294\n        new Property({                                                                                                 // 5295\n            name: 'mining',                                                                                            // 5296\n            getter: 'eth_mining'                                                                                       // 5297\n        }),                                                                                                            // 5298\n        new Property({                                                                                                 // 5299\n            name: 'hashrate',                                                                                          // 5300\n            getter: 'eth_hashrate',                                                                                    // 5301\n            outputFormatter: utils.toDecimal                                                                           // 5302\n        }),                                                                                                            // 5303\n        new Property({                                                                                                 // 5304\n            name: 'syncing',                                                                                           // 5305\n            getter: 'eth_syncing',                                                                                     // 5306\n            outputFormatter: formatters.outputSyncingFormatter                                                         // 5307\n        }),                                                                                                            // 5308\n        new Property({                                                                                                 // 5309\n            name: 'gasPrice',                                                                                          // 5310\n            getter: 'eth_gasPrice',                                                                                    // 5311\n            outputFormatter: formatters.outputBigNumberFormatter                                                       // 5312\n        }),                                                                                                            // 5313\n        new Property({                                                                                                 // 5314\n            name: 'accounts',                                                                                          // 5315\n            getter: 'eth_accounts'                                                                                     // 5316\n        }),                                                                                                            // 5317\n        new Property({                                                                                                 // 5318\n            name: 'blockNumber',                                                                                       // 5319\n            getter: 'eth_blockNumber',                                                                                 // 5320\n            outputFormatter: utils.toDecimal                                                                           // 5321\n        })                                                                                                             // 5322\n    ];                                                                                                                 // 5323\n};                                                                                                                     // 5324\n                                                                                                                       // 5325\nEth.prototype.contract = function (abi) {                                                                              // 5326\n    var factory = new Contract(this, abi);                                                                             // 5327\n    return factory;                                                                                                    // 5328\n};                                                                                                                     // 5329\n                                                                                                                       // 5330\nEth.prototype.filter = function (fil, callback) {                                                                      // 5331\n    return new Filter(this._requestManager, fil, watches.eth(), formatters.outputLogFormatter, callback);              // 5332\n};                                                                                                                     // 5333\n                                                                                                                       // 5334\nEth.prototype.namereg = function () {                                                                                  // 5335\n    return this.contract(namereg.global.abi).at(namereg.global.address);                                               // 5336\n};                                                                                                                     // 5337\n                                                                                                                       // 5338\nEth.prototype.icapNamereg = function () {                                                                              // 5339\n    return this.contract(namereg.icap.abi).at(namereg.icap.address);                                                   // 5340\n};                                                                                                                     // 5341\n                                                                                                                       // 5342\nEth.prototype.isSyncing = function (callback) {                                                                        // 5343\n    return new IsSyncing(this._requestManager, callback);                                                              // 5344\n};                                                                                                                     // 5345\n                                                                                                                       // 5346\nmodule.exports = Eth;                                                                                                  // 5347\n                                                                                                                       // 5348\n                                                                                                                       // 5349\n},{\"../../utils/config\":18,\"../../utils/utils\":20,\"../contract\":25,\"../filter\":29,\"../formatters\":30,\"../iban\":33,\"../method\":36,\"../namereg\":42,\"../property\":43,\"../syncing\":46,\"../transfer\":47,\"./watches\":41}],39:[function(require,module,exports){\n/*                                                                                                                     // 5351\n    This file is part of web3.js.                                                                                      // 5352\n                                                                                                                       // 5353\n    web3.js is free software: you can redistribute it and/or modify                                                    // 5354\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5355\n    the Free Software Foundation, either version 3 of the License, or                                                  // 5356\n    (at your option) any later version.                                                                                // 5357\n                                                                                                                       // 5358\n    web3.js is distributed in the hope that it will be useful,                                                         // 5359\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5360\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5361\n    GNU Lesser General Public License for more details.                                                                // 5362\n                                                                                                                       // 5363\n    You should have received a copy of the GNU Lesser General Public License                                           // 5364\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5365\n*/                                                                                                                     // 5366\n/** @file eth.js                                                                                                       // 5367\n * @authors:                                                                                                           // 5368\n *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 5369\n * @date 2015                                                                                                          // 5370\n */                                                                                                                    // 5371\n                                                                                                                       // 5372\nvar utils = require('../../utils/utils');                                                                              // 5373\nvar Property = require('../property');                                                                                 // 5374\n                                                                                                                       // 5375\nvar Net = function (web3) {                                                                                            // 5376\n    this._requestManager = web3._requestManager;                                                                       // 5377\n                                                                                                                       // 5378\n    var self = this;                                                                                                   // 5379\n                                                                                                                       // 5380\n    properties().forEach(function(p) {                                                                                 // 5381\n        p.attachToObject(self);                                                                                        // 5382\n        p.setRequestManager(web3._requestManager);                                                                     // 5383\n    });                                                                                                                // 5384\n};                                                                                                                     // 5385\n                                                                                                                       // 5386\n/// @returns an array of objects describing web3.eth api properties                                                    // 5387\nvar properties = function () {                                                                                         // 5388\n    return [                                                                                                           // 5389\n        new Property({                                                                                                 // 5390\n            name: 'listening',                                                                                         // 5391\n            getter: 'net_listening'                                                                                    // 5392\n        }),                                                                                                            // 5393\n        new Property({                                                                                                 // 5394\n            name: 'peerCount',                                                                                         // 5395\n            getter: 'net_peerCount',                                                                                   // 5396\n            outputFormatter: utils.toDecimal                                                                           // 5397\n        })                                                                                                             // 5398\n    ];                                                                                                                 // 5399\n};                                                                                                                     // 5400\n                                                                                                                       // 5401\nmodule.exports = Net;                                                                                                  // 5402\n                                                                                                                       // 5403\n},{\"../../utils/utils\":20,\"../property\":43}],40:[function(require,module,exports){                                     // 5404\n/*                                                                                                                     // 5405\n    This file is part of web3.js.                                                                                      // 5406\n                                                                                                                       // 5407\n    web3.js is free software: you can redistribute it and/or modify                                                    // 5408\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5409\n    the Free Software Foundation, either version 3 of the License, or                                                  // 5410\n    (at your option) any later version.                                                                                // 5411\n                                                                                                                       // 5412\n    web3.js is distributed in the hope that it will be useful,                                                         // 5413\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5414\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5415\n    GNU Lesser General Public License for more details.                                                                // 5416\n                                                                                                                       // 5417\n    You should have received a copy of the GNU Lesser General Public License                                           // 5418\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5419\n*/                                                                                                                     // 5420\n/** @file shh.js                                                                                                       // 5421\n * @authors:                                                                                                           // 5422\n *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 5423\n * @date 2015                                                                                                          // 5424\n */                                                                                                                    // 5425\n                                                                                                                       // 5426\nvar Method = require('../method');                                                                                     // 5427\nvar formatters = require('../formatters');                                                                             // 5428\nvar Filter = require('../filter');                                                                                     // 5429\nvar watches = require('./watches');                                                                                    // 5430\n                                                                                                                       // 5431\nvar Shh = function (web3) {                                                                                            // 5432\n    this._requestManager = web3._requestManager;                                                                       // 5433\n                                                                                                                       // 5434\n    var self = this;                                                                                                   // 5435\n                                                                                                                       // 5436\n    methods().forEach(function(method) {                                                                               // 5437\n        method.attachToObject(self);                                                                                   // 5438\n        method.setRequestManager(self._requestManager);                                                                // 5439\n    });                                                                                                                // 5440\n};                                                                                                                     // 5441\n                                                                                                                       // 5442\nShh.prototype.filter = function (fil, callback) {                                                                      // 5443\n    return new Filter(this._requestManager, fil, watches.shh(), formatters.outputPostFormatter, callback);             // 5444\n};                                                                                                                     // 5445\n                                                                                                                       // 5446\nvar methods = function () {                                                                                            // 5447\n                                                                                                                       // 5448\n    var post = new Method({                                                                                            // 5449\n        name: 'post',                                                                                                  // 5450\n        call: 'shh_post',                                                                                              // 5451\n        params: 1,                                                                                                     // 5452\n        inputFormatter: [formatters.inputPostFormatter]                                                                // 5453\n    });                                                                                                                // 5454\n                                                                                                                       // 5455\n    var newIdentity = new Method({                                                                                     // 5456\n        name: 'newIdentity',                                                                                           // 5457\n        call: 'shh_newIdentity',                                                                                       // 5458\n        params: 0                                                                                                      // 5459\n    });                                                                                                                // 5460\n                                                                                                                       // 5461\n    var hasIdentity = new Method({                                                                                     // 5462\n        name: 'hasIdentity',                                                                                           // 5463\n        call: 'shh_hasIdentity',                                                                                       // 5464\n        params: 1                                                                                                      // 5465\n    });                                                                                                                // 5466\n                                                                                                                       // 5467\n    var newGroup = new Method({                                                                                        // 5468\n        name: 'newGroup',                                                                                              // 5469\n        call: 'shh_newGroup',                                                                                          // 5470\n        params: 0                                                                                                      // 5471\n    });                                                                                                                // 5472\n                                                                                                                       // 5473\n    var addToGroup = new Method({                                                                                      // 5474\n        name: 'addToGroup',                                                                                            // 5475\n        call: 'shh_addToGroup',                                                                                        // 5476\n        params: 0                                                                                                      // 5477\n    });                                                                                                                // 5478\n                                                                                                                       // 5479\n    return [                                                                                                           // 5480\n        post,                                                                                                          // 5481\n        newIdentity,                                                                                                   // 5482\n        hasIdentity,                                                                                                   // 5483\n        newGroup,                                                                                                      // 5484\n        addToGroup                                                                                                     // 5485\n    ];                                                                                                                 // 5486\n};                                                                                                                     // 5487\n                                                                                                                       // 5488\nmodule.exports = Shh;                                                                                                  // 5489\n                                                                                                                       // 5490\n                                                                                                                       // 5491\n},{\"../filter\":29,\"../formatters\":30,\"../method\":36,\"./watches\":41}],41:[function(require,module,exports){             // 5492\n/*                                                                                                                     // 5493\n    This file is part of web3.js.                                                                                      // 5494\n                                                                                                                       // 5495\n    web3.js is free software: you can redistribute it and/or modify                                                    // 5496\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5497\n    the Free Software Foundation, either version 3 of the License, or                                                  // 5498\n    (at your option) any later version.                                                                                // 5499\n                                                                                                                       // 5500\n    web3.js is distributed in the hope that it will be useful,                                                         // 5501\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5502\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5503\n    GNU Lesser General Public License for more details.                                                                // 5504\n                                                                                                                       // 5505\n    You should have received a copy of the GNU Lesser General Public License                                           // 5506\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5507\n*/                                                                                                                     // 5508\n/** @file watches.js                                                                                                   // 5509\n * @authors:                                                                                                           // 5510\n *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 5511\n * @date 2015                                                                                                          // 5512\n */                                                                                                                    // 5513\n                                                                                                                       // 5514\nvar Method = require('../method');                                                                                     // 5515\n                                                                                                                       // 5516\n/// @returns an array of objects describing web3.eth.filter api methods                                                // 5517\nvar eth = function () {                                                                                                // 5518\n    var newFilterCall = function (args) {                                                                              // 5519\n        var type = args[0];                                                                                            // 5520\n                                                                                                                       // 5521\n        switch(type) {                                                                                                 // 5522\n            case 'latest':                                                                                             // 5523\n                args.shift();                                                                                          // 5524\n                this.params = 0;                                                                                       // 5525\n                return 'eth_newBlockFilter';                                                                           // 5526\n            case 'pending':                                                                                            // 5527\n                args.shift();                                                                                          // 5528\n                this.params = 0;                                                                                       // 5529\n                return 'eth_newPendingTransactionFilter';                                                              // 5530\n            default:                                                                                                   // 5531\n                return 'eth_newFilter';                                                                                // 5532\n        }                                                                                                              // 5533\n    };                                                                                                                 // 5534\n                                                                                                                       // 5535\n    var newFilter = new Method({                                                                                       // 5536\n        name: 'newFilter',                                                                                             // 5537\n        call: newFilterCall,                                                                                           // 5538\n        params: 1                                                                                                      // 5539\n    });                                                                                                                // 5540\n                                                                                                                       // 5541\n    var uninstallFilter = new Method({                                                                                 // 5542\n        name: 'uninstallFilter',                                                                                       // 5543\n        call: 'eth_uninstallFilter',                                                                                   // 5544\n        params: 1                                                                                                      // 5545\n    });                                                                                                                // 5546\n                                                                                                                       // 5547\n    var getLogs = new Method({                                                                                         // 5548\n        name: 'getLogs',                                                                                               // 5549\n        call: 'eth_getFilterLogs',                                                                                     // 5550\n        params: 1                                                                                                      // 5551\n    });                                                                                                                // 5552\n                                                                                                                       // 5553\n    var poll = new Method({                                                                                            // 5554\n        name: 'poll',                                                                                                  // 5555\n        call: 'eth_getFilterChanges',                                                                                  // 5556\n        params: 1                                                                                                      // 5557\n    });                                                                                                                // 5558\n                                                                                                                       // 5559\n    return [                                                                                                           // 5560\n        newFilter,                                                                                                     // 5561\n        uninstallFilter,                                                                                               // 5562\n        getLogs,                                                                                                       // 5563\n        poll                                                                                                           // 5564\n    ];                                                                                                                 // 5565\n};                                                                                                                     // 5566\n                                                                                                                       // 5567\n/// @returns an array of objects describing web3.shh.watch api methods                                                 // 5568\nvar shh = function () {                                                                                                // 5569\n    var newFilter = new Method({                                                                                       // 5570\n        name: 'newFilter',                                                                                             // 5571\n        call: 'shh_newFilter',                                                                                         // 5572\n        params: 1                                                                                                      // 5573\n    });                                                                                                                // 5574\n                                                                                                                       // 5575\n    var uninstallFilter = new Method({                                                                                 // 5576\n        name: 'uninstallFilter',                                                                                       // 5577\n        call: 'shh_uninstallFilter',                                                                                   // 5578\n        params: 1                                                                                                      // 5579\n    });                                                                                                                // 5580\n                                                                                                                       // 5581\n    var getLogs = new Method({                                                                                         // 5582\n        name: 'getLogs',                                                                                               // 5583\n        call: 'shh_getMessages',                                                                                       // 5584\n        params: 1                                                                                                      // 5585\n    });                                                                                                                // 5586\n                                                                                                                       // 5587\n    var poll = new Method({                                                                                            // 5588\n        name: 'poll',                                                                                                  // 5589\n        call: 'shh_getFilterChanges',                                                                                  // 5590\n        params: 1                                                                                                      // 5591\n    });                                                                                                                // 5592\n                                                                                                                       // 5593\n    return [                                                                                                           // 5594\n        newFilter,                                                                                                     // 5595\n        uninstallFilter,                                                                                               // 5596\n        getLogs,                                                                                                       // 5597\n        poll                                                                                                           // 5598\n    ];                                                                                                                 // 5599\n};                                                                                                                     // 5600\n                                                                                                                       // 5601\nmodule.exports = {                                                                                                     // 5602\n    eth: eth,                                                                                                          // 5603\n    shh: shh                                                                                                           // 5604\n};                                                                                                                     // 5605\n                                                                                                                       // 5606\n                                                                                                                       // 5607\n},{\"../method\":36}],42:[function(require,module,exports){                                                              // 5608\n/*                                                                                                                     // 5609\n    This file is part of web3.js.                                                                                      // 5610\n                                                                                                                       // 5611\n    web3.js is free software: you can redistribute it and/or modify                                                    // 5612\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5613\n    the Free Software Foundation, either version 3 of the License, or                                                  // 5614\n    (at your option) any later version.                                                                                // 5615\n                                                                                                                       // 5616\n    web3.js is distributed in the hope that it will be useful,                                                         // 5617\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5618\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5619\n    GNU Lesser General Public License for more details.                                                                // 5620\n                                                                                                                       // 5621\n    You should have received a copy of the GNU Lesser General Public License                                           // 5622\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5623\n*/                                                                                                                     // 5624\n/**                                                                                                                    // 5625\n * @file namereg.js                                                                                                    // 5626\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5627\n * @date 2015                                                                                                          // 5628\n */                                                                                                                    // 5629\n                                                                                                                       // 5630\nvar globalRegistrarAbi = require('../contracts/GlobalRegistrar.json');                                                 // 5631\nvar icapRegistrarAbi= require('../contracts/ICAPRegistrar.json');                                                      // 5632\n                                                                                                                       // 5633\nvar globalNameregAddress = '0xc6d9d2cd449a754c494264e1809c50e34d64562b';                                               // 5634\nvar icapNameregAddress = '0xa1a111bc074c9cfa781f0c38e63bd51c91b8af00';                                                 // 5635\n                                                                                                                       // 5636\nmodule.exports = {                                                                                                     // 5637\n    global: {                                                                                                          // 5638\n        abi: globalRegistrarAbi,                                                                                       // 5639\n        address: globalNameregAddress                                                                                  // 5640\n    },                                                                                                                 // 5641\n    icap: {                                                                                                            // 5642\n        abi: icapRegistrarAbi,                                                                                         // 5643\n        address: icapNameregAddress                                                                                    // 5644\n    }                                                                                                                  // 5645\n};                                                                                                                     // 5646\n                                                                                                                       // 5647\n                                                                                                                       // 5648\n},{\"../contracts/GlobalRegistrar.json\":1,\"../contracts/ICAPRegistrar.json\":2}],43:[function(require,module,exports){   // 5649\n/*                                                                                                                     // 5650\n    This file is part of web3.js.                                                                                      // 5651\n                                                                                                                       // 5652\n    web3.js is free software: you can redistribute it and/or modify                                                    // 5653\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5654\n    the Free Software Foundation, either version 3 of the License, or                                                  // 5655\n    (at your option) any later version.                                                                                // 5656\n                                                                                                                       // 5657\n    web3.js is distributed in the hope that it will be useful,                                                         // 5658\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5659\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5660\n    GNU Lesser General Public License for more details.                                                                // 5661\n                                                                                                                       // 5662\n    You should have received a copy of the GNU Lesser General Public License                                           // 5663\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5664\n*/                                                                                                                     // 5665\n/**                                                                                                                    // 5666\n * @file property.js                                                                                                   // 5667\n * @author Fabian Vogelsteller <fabian@frozeman.de>                                                                    // 5668\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5669\n * @date 2015                                                                                                          // 5670\n */                                                                                                                    // 5671\n                                                                                                                       // 5672\nvar utils = require('../utils/utils');                                                                                 // 5673\n                                                                                                                       // 5674\nvar Property = function (options) {                                                                                    // 5675\n    this.name = options.name;                                                                                          // 5676\n    this.getter = options.getter;                                                                                      // 5677\n    this.setter = options.setter;                                                                                      // 5678\n    this.outputFormatter = options.outputFormatter;                                                                    // 5679\n    this.inputFormatter = options.inputFormatter;                                                                      // 5680\n    this.requestManager = null;                                                                                        // 5681\n};                                                                                                                     // 5682\n                                                                                                                       // 5683\nProperty.prototype.setRequestManager = function (rm) {                                                                 // 5684\n    this.requestManager = rm;                                                                                          // 5685\n};                                                                                                                     // 5686\n                                                                                                                       // 5687\n/**                                                                                                                    // 5688\n * Should be called to format input args of method                                                                     // 5689\n *                                                                                                                     // 5690\n * @method formatInput                                                                                                 // 5691\n * @param {Array}                                                                                                      // 5692\n * @return {Array}                                                                                                     // 5693\n */                                                                                                                    // 5694\nProperty.prototype.formatInput = function (arg) {                                                                      // 5695\n    return this.inputFormatter ? this.inputFormatter(arg) : arg;                                                       // 5696\n};                                                                                                                     // 5697\n                                                                                                                       // 5698\n/**                                                                                                                    // 5699\n * Should be called to format output(result) of method                                                                 // 5700\n *                                                                                                                     // 5701\n * @method formatOutput                                                                                                // 5702\n * @param {Object}                                                                                                     // 5703\n * @return {Object}                                                                                                    // 5704\n */                                                                                                                    // 5705\nProperty.prototype.formatOutput = function (result) {                                                                  // 5706\n    return this.outputFormatter && result !== null ? this.outputFormatter(result) : result;                            // 5707\n};                                                                                                                     // 5708\n                                                                                                                       // 5709\n/**                                                                                                                    // 5710\n * Should be used to extract callback from array of arguments. Modifies input param                                    // 5711\n *                                                                                                                     // 5712\n * @method extractCallback                                                                                             // 5713\n * @param {Array} arguments                                                                                            // 5714\n * @return {Function|Null} callback, if exists                                                                         // 5715\n */                                                                                                                    // 5716\nProperty.prototype.extractCallback = function (args) {                                                                 // 5717\n    if (utils.isFunction(args[args.length - 1])) {                                                                     // 5718\n        return args.pop(); // modify the args array!                                                                   // 5719\n    }                                                                                                                  // 5720\n};                                                                                                                     // 5721\n                                                                                                                       // 5722\n                                                                                                                       // 5723\n/**                                                                                                                    // 5724\n * Should attach function to method                                                                                    // 5725\n *                                                                                                                     // 5726\n * @method attachToObject                                                                                              // 5727\n * @param {Object}                                                                                                     // 5728\n * @param {Function}                                                                                                   // 5729\n */                                                                                                                    // 5730\nProperty.prototype.attachToObject = function (obj) {                                                                   // 5731\n    var proto = {                                                                                                      // 5732\n        get: this.buildGet(),                                                                                          // 5733\n        enumerable: true                                                                                               // 5734\n    };                                                                                                                 // 5735\n                                                                                                                       // 5736\n    var names = this.name.split('.');                                                                                  // 5737\n    var name = names[0];                                                                                               // 5738\n    if (names.length > 1) {                                                                                            // 5739\n        obj[names[0]] = obj[names[0]] || {};                                                                           // 5740\n        obj = obj[names[0]];                                                                                           // 5741\n        name = names[1];                                                                                               // 5742\n    }                                                                                                                  // 5743\n                                                                                                                       // 5744\n    Object.defineProperty(obj, name, proto);                                                                           // 5745\n    obj[asyncGetterName(name)] = this.buildAsyncGet();                                                                 // 5746\n};                                                                                                                     // 5747\n                                                                                                                       // 5748\nvar asyncGetterName = function (name) {                                                                                // 5749\n    return 'get' + name.charAt(0).toUpperCase() + name.slice(1);                                                       // 5750\n};                                                                                                                     // 5751\n                                                                                                                       // 5752\nProperty.prototype.buildGet = function () {                                                                            // 5753\n    var property = this;                                                                                               // 5754\n    return function get() {                                                                                            // 5755\n        return property.formatOutput(property.requestManager.send({                                                    // 5756\n            method: property.getter                                                                                    // 5757\n        }));                                                                                                           // 5758\n    };                                                                                                                 // 5759\n};                                                                                                                     // 5760\n                                                                                                                       // 5761\nProperty.prototype.buildAsyncGet = function () {                                                                       // 5762\n    var property = this;                                                                                               // 5763\n    var get = function (callback) {                                                                                    // 5764\n        property.requestManager.sendAsync({                                                                            // 5765\n            method: property.getter                                                                                    // 5766\n        }, function (err, result) {                                                                                    // 5767\n            callback(err, property.formatOutput(result));                                                              // 5768\n        });                                                                                                            // 5769\n    };                                                                                                                 // 5770\n    get.request = this.request.bind(this);                                                                             // 5771\n    return get;                                                                                                        // 5772\n};                                                                                                                     // 5773\n                                                                                                                       // 5774\n/**                                                                                                                    // 5775\n * Should be called to create pure JSONRPC request which can be used in batch request                                  // 5776\n *                                                                                                                     // 5777\n * @method request                                                                                                     // 5778\n * @param {...} params                                                                                                 // 5779\n * @return {Object} jsonrpc request                                                                                    // 5780\n */                                                                                                                    // 5781\nProperty.prototype.request = function () {                                                                             // 5782\n    var payload = {                                                                                                    // 5783\n        method: this.getter,                                                                                           // 5784\n        params: [],                                                                                                    // 5785\n        callback: this.extractCallback(Array.prototype.slice.call(arguments))                                          // 5786\n    };                                                                                                                 // 5787\n    payload.format = this.formatOutput.bind(this);                                                                     // 5788\n    return payload;                                                                                                    // 5789\n};                                                                                                                     // 5790\n                                                                                                                       // 5791\nmodule.exports = Property;                                                                                             // 5792\n                                                                                                                       // 5793\n                                                                                                                       // 5794\n},{\"../utils/utils\":20}],44:[function(require,module,exports){                                                         // 5795\n/*                                                                                                                     // 5796\n    This file is part of web3.js.                                                                                      // 5797\n                                                                                                                       // 5798\n    web3.js is free software: you can redistribute it and/or modify                                                    // 5799\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5800\n    the Free Software Foundation, either version 3 of the License, or                                                  // 5801\n    (at your option) any later version.                                                                                // 5802\n                                                                                                                       // 5803\n    web3.js is distributed in the hope that it will be useful,                                                         // 5804\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 5805\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 5806\n    GNU Lesser General Public License for more details.                                                                // 5807\n                                                                                                                       // 5808\n    You should have received a copy of the GNU Lesser General Public License                                           // 5809\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 5810\n*/                                                                                                                     // 5811\n/**                                                                                                                    // 5812\n * @file requestmanager.js                                                                                             // 5813\n * @author Jeffrey Wilcke <jeff@ethdev.com>                                                                            // 5814\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 5815\n * @author Marian Oancea <marian@ethdev.com>                                                                           // 5816\n * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 5817\n * @author Gav Wood <g@ethdev.com>                                                                                     // 5818\n * @date 2014                                                                                                          // 5819\n */                                                                                                                    // 5820\n                                                                                                                       // 5821\nvar Jsonrpc = require('./jsonrpc');                                                                                    // 5822\nvar utils = require('../utils/utils');                                                                                 // 5823\nvar c = require('../utils/config');                                                                                    // 5824\nvar errors = require('./errors');                                                                                      // 5825\n                                                                                                                       // 5826\n/**                                                                                                                    // 5827\n * It's responsible for passing messages to providers                                                                  // 5828\n * It's also responsible for polling the ethereum node for incoming messages                                           // 5829\n * Default poll timeout is 1 second                                                                                    // 5830\n * Singleton                                                                                                           // 5831\n */                                                                                                                    // 5832\nvar RequestManager = function (provider) {                                                                             // 5833\n    this.provider = provider;                                                                                          // 5834\n    this.polls = {};                                                                                                   // 5835\n    this.timeout = null;                                                                                               // 5836\n};                                                                                                                     // 5837\n                                                                                                                       // 5838\n/**                                                                                                                    // 5839\n * Should be used to synchronously send request                                                                        // 5840\n *                                                                                                                     // 5841\n * @method send                                                                                                        // 5842\n * @param {Object} data                                                                                                // 5843\n * @return {Object}                                                                                                    // 5844\n */                                                                                                                    // 5845\nRequestManager.prototype.send = function (data) {                                                                      // 5846\n    if (!this.provider) {                                                                                              // 5847\n        console.error(errors.InvalidProvider());                                                                       // 5848\n        return null;                                                                                                   // 5849\n    }                                                                                                                  // 5850\n                                                                                                                       // 5851\n    var payload = Jsonrpc.getInstance().toPayload(data.method, data.params);                                           // 5852\n    var result = this.provider.send(payload);                                                                          // 5853\n                                                                                                                       // 5854\n    if (!Jsonrpc.getInstance().isValidResponse(result)) {                                                              // 5855\n        throw errors.InvalidResponse(result);                                                                          // 5856\n    }                                                                                                                  // 5857\n                                                                                                                       // 5858\n    return result.result;                                                                                              // 5859\n};                                                                                                                     // 5860\n                                                                                                                       // 5861\n/**                                                                                                                    // 5862\n * Should be used to asynchronously send request                                                                       // 5863\n *                                                                                                                     // 5864\n * @method sendAsync                                                                                                   // 5865\n * @param {Object} data                                                                                                // 5866\n * @param {Function} callback                                                                                          // 5867\n */                                                                                                                    // 5868\nRequestManager.prototype.sendAsync = function (data, callback) {                                                       // 5869\n    if (!this.provider) {                                                                                              // 5870\n        return callback(errors.InvalidProvider());                                                                     // 5871\n    }                                                                                                                  // 5872\n                                                                                                                       // 5873\n    var payload = Jsonrpc.getInstance().toPayload(data.method, data.params);                                           // 5874\n    this.provider.sendAsync(payload, function (err, result) {                                                          // 5875\n        if (err) {                                                                                                     // 5876\n            return callback(err);                                                                                      // 5877\n        }                                                                                                              // 5878\n                                                                                                                       // 5879\n        if (!Jsonrpc.getInstance().isValidResponse(result)) {                                                          // 5880\n            return callback(errors.InvalidResponse(result));                                                           // 5881\n        }                                                                                                              // 5882\n                                                                                                                       // 5883\n        callback(null, result.result);                                                                                 // 5884\n    });                                                                                                                // 5885\n};                                                                                                                     // 5886\n                                                                                                                       // 5887\n/**                                                                                                                    // 5888\n * Should be called to asynchronously send batch request                                                               // 5889\n *                                                                                                                     // 5890\n * @method sendBatch                                                                                                   // 5891\n * @param {Array} batch data                                                                                           // 5892\n * @param {Function} callback                                                                                          // 5893\n */                                                                                                                    // 5894\nRequestManager.prototype.sendBatch = function (data, callback) {                                                       // 5895\n    if (!this.provider) {                                                                                              // 5896\n        return callback(errors.InvalidProvider());                                                                     // 5897\n    }                                                                                                                  // 5898\n                                                                                                                       // 5899\n    var payload = Jsonrpc.getInstance().toBatchPayload(data);                                                          // 5900\n                                                                                                                       // 5901\n    this.provider.sendAsync(payload, function (err, results) {                                                         // 5902\n        if (err) {                                                                                                     // 5903\n            return callback(err);                                                                                      // 5904\n        }                                                                                                              // 5905\n                                                                                                                       // 5906\n        if (!utils.isArray(results)) {                                                                                 // 5907\n            return callback(errors.InvalidResponse(results));                                                          // 5908\n        }                                                                                                              // 5909\n                                                                                                                       // 5910\n        callback(err, results);                                                                                        // 5911\n    });                                                                                                                // 5912\n};                                                                                                                     // 5913\n                                                                                                                       // 5914\n/**                                                                                                                    // 5915\n * Should be used to set provider of request manager                                                                   // 5916\n *                                                                                                                     // 5917\n * @method setProvider                                                                                                 // 5918\n * @param {Object}                                                                                                     // 5919\n */                                                                                                                    // 5920\nRequestManager.prototype.setProvider = function (p) {                                                                  // 5921\n    this.provider = p;                                                                                                 // 5922\n};                                                                                                                     // 5923\n                                                                                                                       // 5924\n/**                                                                                                                    // 5925\n * Should be used to start polling                                                                                     // 5926\n *                                                                                                                     // 5927\n * @method startPolling                                                                                                // 5928\n * @param {Object} data                                                                                                // 5929\n * @param {Number} pollId                                                                                              // 5930\n * @param {Function} callback                                                                                          // 5931\n * @param {Function} uninstall                                                                                         // 5932\n *                                                                                                                     // 5933\n * @todo cleanup number of params                                                                                      // 5934\n */                                                                                                                    // 5935\nRequestManager.prototype.startPolling = function (data, pollId, callback, uninstall) {                                 // 5936\n    this.polls[pollId] = {data: data, id: pollId, callback: callback, uninstall: uninstall};                           // 5937\n                                                                                                                       // 5938\n                                                                                                                       // 5939\n    // start polling                                                                                                   // 5940\n    if (!this.timeout) {                                                                                               // 5941\n        this.poll();                                                                                                   // 5942\n    }                                                                                                                  // 5943\n};                                                                                                                     // 5944\n                                                                                                                       // 5945\n/**                                                                                                                    // 5946\n * Should be used to stop polling for filter with given id                                                             // 5947\n *                                                                                                                     // 5948\n * @method stopPolling                                                                                                 // 5949\n * @param {Number} pollId                                                                                              // 5950\n */                                                                                                                    // 5951\nRequestManager.prototype.stopPolling = function (pollId) {                                                             // 5952\n    delete this.polls[pollId];                                                                                         // 5953\n                                                                                                                       // 5954\n    // stop polling                                                                                                    // 5955\n    if(Object.keys(this.polls).length === 0 && this.timeout) {                                                         // 5956\n        clearTimeout(this.timeout);                                                                                    // 5957\n        this.timeout = null;                                                                                           // 5958\n    }                                                                                                                  // 5959\n};                                                                                                                     // 5960\n                                                                                                                       // 5961\n/**                                                                                                                    // 5962\n * Should be called to reset the polling mechanism of the request manager                                              // 5963\n *                                                                                                                     // 5964\n * @method reset                                                                                                       // 5965\n */                                                                                                                    // 5966\nRequestManager.prototype.reset = function (keepIsSyncing) {                                                            // 5967\n    /*jshint maxcomplexity:5 */                                                                                        // 5968\n                                                                                                                       // 5969\n    for (var key in this.polls) {                                                                                      // 5970\n        // remove all polls, except sync polls,                                                                        // 5971\n        // they need to be removed manually by calling syncing.stopWatching()                                          // 5972\n        if(!keepIsSyncing || key.indexOf('syncPoll_') === -1) {                                                        // 5973\n            this.polls[key].uninstall();                                                                               // 5974\n            delete this.polls[key];                                                                                    // 5975\n        }                                                                                                              // 5976\n    }                                                                                                                  // 5977\n                                                                                                                       // 5978\n    // stop polling                                                                                                    // 5979\n    if(Object.keys(this.polls).length === 0 && this.timeout) {                                                         // 5980\n        clearTimeout(this.timeout);                                                                                    // 5981\n        this.timeout = null;                                                                                           // 5982\n    }                                                                                                                  // 5983\n};                                                                                                                     // 5984\n                                                                                                                       // 5985\n/**                                                                                                                    // 5986\n * Should be called to poll for changes on filter with given id                                                        // 5987\n *                                                                                                                     // 5988\n * @method poll                                                                                                        // 5989\n */                                                                                                                    // 5990\nRequestManager.prototype.poll = function () {                                                                          // 5991\n    /*jshint maxcomplexity: 6 */                                                                                       // 5992\n    this.timeout = setTimeout(this.poll.bind(this), c.ETH_POLLING_TIMEOUT);                                            // 5993\n                                                                                                                       // 5994\n    if (Object.keys(this.polls).length === 0) {                                                                        // 5995\n        return;                                                                                                        // 5996\n    }                                                                                                                  // 5997\n                                                                                                                       // 5998\n    if (!this.provider) {                                                                                              // 5999\n        console.error(errors.InvalidProvider());                                                                       // 6000\n        return;                                                                                                        // 6001\n    }                                                                                                                  // 6002\n                                                                                                                       // 6003\n    var pollsData = [];                                                                                                // 6004\n    var pollsIds = [];                                                                                                 // 6005\n    for (var key in this.polls) {                                                                                      // 6006\n        pollsData.push(this.polls[key].data);                                                                          // 6007\n        pollsIds.push(key);                                                                                            // 6008\n    }                                                                                                                  // 6009\n                                                                                                                       // 6010\n    if (pollsData.length === 0) {                                                                                      // 6011\n        return;                                                                                                        // 6012\n    }                                                                                                                  // 6013\n                                                                                                                       // 6014\n    var payload = Jsonrpc.getInstance().toBatchPayload(pollsData);                                                     // 6015\n                                                                                                                       // 6016\n    // map the request id to they poll id                                                                              // 6017\n    var pollsIdMap = {};                                                                                               // 6018\n    payload.forEach(function(load, index){                                                                             // 6019\n        pollsIdMap[load.id] = pollsIds[index];                                                                         // 6020\n    });                                                                                                                // 6021\n                                                                                                                       // 6022\n                                                                                                                       // 6023\n    var self = this;                                                                                                   // 6024\n    this.provider.sendAsync(payload, function (error, results) {                                                       // 6025\n                                                                                                                       // 6026\n                                                                                                                       // 6027\n        // TODO: console log?                                                                                          // 6028\n        if (error) {                                                                                                   // 6029\n            return;                                                                                                    // 6030\n        }                                                                                                              // 6031\n                                                                                                                       // 6032\n        if (!utils.isArray(results)) {                                                                                 // 6033\n            throw errors.InvalidResponse(results);                                                                     // 6034\n        }                                                                                                              // 6035\n        results.map(function (result) {                                                                                // 6036\n            var id = pollsIdMap[result.id];                                                                            // 6037\n                                                                                                                       // 6038\n            // make sure the filter is still installed after arrival of the request                                    // 6039\n            if (self.polls[id]) {                                                                                      // 6040\n                result.callback = self.polls[id].callback;                                                             // 6041\n                return result;                                                                                         // 6042\n            } else                                                                                                     // 6043\n                return false;                                                                                          // 6044\n        }).filter(function (result) {                                                                                  // 6045\n            return !!result;                                                                                           // 6046\n        }).filter(function (result) {                                                                                  // 6047\n            var valid = Jsonrpc.getInstance().isValidResponse(result);                                                 // 6048\n            if (!valid) {                                                                                              // 6049\n                result.callback(errors.InvalidResponse(result));                                                       // 6050\n            }                                                                                                          // 6051\n            return valid;                                                                                              // 6052\n        }).forEach(function (result) {                                                                                 // 6053\n            result.callback(null, result.result);                                                                      // 6054\n        });                                                                                                            // 6055\n    });                                                                                                                // 6056\n};                                                                                                                     // 6057\n                                                                                                                       // 6058\nmodule.exports = RequestManager;                                                                                       // 6059\n                                                                                                                       // 6060\n                                                                                                                       // 6061\n},{\"../utils/config\":18,\"../utils/utils\":20,\"./errors\":26,\"./jsonrpc\":35}],45:[function(require,module,exports){       // 6062\n                                                                                                                       // 6063\n                                                                                                                       // 6064\nvar Settings = function () {                                                                                           // 6065\n    this.defaultBlock = 'latest';                                                                                      // 6066\n    this.defaultAccount = undefined;                                                                                   // 6067\n};                                                                                                                     // 6068\n                                                                                                                       // 6069\nmodule.exports = Settings;                                                                                             // 6070\n                                                                                                                       // 6071\n                                                                                                                       // 6072\n},{}],46:[function(require,module,exports){                                                                            // 6073\n/*                                                                                                                     // 6074\n    This file is part of web3.js.                                                                                      // 6075\n                                                                                                                       // 6076\n    web3.js is free software: you can redistribute it and/or modify                                                    // 6077\n    it under the terms of the GNU Lesser General Public License as published by                                        // 6078\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6079\n    (at your option) any later version.                                                                                // 6080\n                                                                                                                       // 6081\n    web3.js is distributed in the hope that it will be useful,                                                         // 6082\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 6083\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 6084\n    GNU Lesser General Public License for more details.                                                                // 6085\n                                                                                                                       // 6086\n    You should have received a copy of the GNU Lesser General Public License                                           // 6087\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 6088\n*/                                                                                                                     // 6089\n/** @file syncing.js                                                                                                   // 6090\n * @authors:                                                                                                           // 6091\n *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 6092\n * @date 2015                                                                                                          // 6093\n */                                                                                                                    // 6094\n                                                                                                                       // 6095\nvar formatters = require('./formatters');                                                                              // 6096\nvar utils = require('../utils/utils');                                                                                 // 6097\n                                                                                                                       // 6098\nvar count = 1;                                                                                                         // 6099\n                                                                                                                       // 6100\n/**                                                                                                                    // 6101\nAdds the callback and sets up the methods, to iterate over the results.                                                // 6102\n                                                                                                                       // 6103\n@method pollSyncing                                                                                                    // 6104\n@param {Object} self                                                                                                   // 6105\n*/                                                                                                                     // 6106\nvar pollSyncing = function(self) {                                                                                     // 6107\n                                                                                                                       // 6108\n    var onMessage = function (error, sync) {                                                                           // 6109\n        if (error) {                                                                                                   // 6110\n            return self.callbacks.forEach(function (callback) {                                                        // 6111\n                callback(error);                                                                                       // 6112\n            });                                                                                                        // 6113\n        }                                                                                                              // 6114\n                                                                                                                       // 6115\n        if(utils.isObject(sync) && sync.startingBlock)                                                                 // 6116\n            sync = formatters.outputSyncingFormatter(sync);                                                            // 6117\n                                                                                                                       // 6118\n        self.callbacks.forEach(function (callback) {                                                                   // 6119\n            if (self.lastSyncState !== sync) {                                                                         // 6120\n                                                                                                                       // 6121\n                // call the callback with true first so the app can stop anything, before receiving the sync data      // 6122\n                if(!self.lastSyncState && utils.isObject(sync))                                                        // 6123\n                    callback(null, true);                                                                              // 6124\n                                                                                                                       // 6125\n                // call on the next CPU cycle, so the actions of the sync stop can be processes first                  // 6126\n                setTimeout(function() {                                                                                // 6127\n                    callback(null, sync);                                                                              // 6128\n                }, 0);                                                                                                 // 6129\n                                                                                                                       // 6130\n                self.lastSyncState = sync;                                                                             // 6131\n            }                                                                                                          // 6132\n        });                                                                                                            // 6133\n    };                                                                                                                 // 6134\n                                                                                                                       // 6135\n    self.requestManager.startPolling({                                                                                 // 6136\n        method: 'eth_syncing',                                                                                         // 6137\n        params: [],                                                                                                    // 6138\n    }, self.pollId, onMessage, self.stopWatching.bind(self));                                                          // 6139\n                                                                                                                       // 6140\n};                                                                                                                     // 6141\n                                                                                                                       // 6142\nvar IsSyncing = function (requestManager, callback) {                                                                  // 6143\n    this.requestManager = requestManager;                                                                              // 6144\n    this.pollId = 'syncPoll_'+ count++;                                                                                // 6145\n    this.callbacks = [];                                                                                               // 6146\n    this.addCallback(callback);                                                                                        // 6147\n    this.lastSyncState = false;                                                                                        // 6148\n    pollSyncing(this);                                                                                                 // 6149\n                                                                                                                       // 6150\n    return this;                                                                                                       // 6151\n};                                                                                                                     // 6152\n                                                                                                                       // 6153\nIsSyncing.prototype.addCallback = function (callback) {                                                                // 6154\n    if(callback)                                                                                                       // 6155\n        this.callbacks.push(callback);                                                                                 // 6156\n    return this;                                                                                                       // 6157\n};                                                                                                                     // 6158\n                                                                                                                       // 6159\nIsSyncing.prototype.stopWatching = function () {                                                                       // 6160\n    this.requestManager.stopPolling(this.pollId);                                                                      // 6161\n    this.callbacks = [];                                                                                               // 6162\n};                                                                                                                     // 6163\n                                                                                                                       // 6164\nmodule.exports = IsSyncing;                                                                                            // 6165\n                                                                                                                       // 6166\n                                                                                                                       // 6167\n},{\"../utils/utils\":20,\"./formatters\":30}],47:[function(require,module,exports){                                       // 6168\n/*                                                                                                                     // 6169\n    This file is part of web3.js.                                                                                      // 6170\n                                                                                                                       // 6171\n    web3.js is free software: you can redistribute it and/or modify                                                    // 6172\n    it under the terms of the GNU Lesser General Public License as published by                                        // 6173\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6174\n    (at your option) any later version.                                                                                // 6175\n                                                                                                                       // 6176\n    web3.js is distributed in the hope that it will be useful,                                                         // 6177\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 6178\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 6179\n    GNU Lesser General Public License for more details.                                                                // 6180\n                                                                                                                       // 6181\n    You should have received a copy of the GNU Lesser General Public License                                           // 6182\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 6183\n*/                                                                                                                     // 6184\n/**                                                                                                                    // 6185\n * @file transfer.js                                                                                                   // 6186\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 6187\n * @date 2015                                                                                                          // 6188\n */                                                                                                                    // 6189\n                                                                                                                       // 6190\nvar Iban = require('./iban');                                                                                          // 6191\nvar exchangeAbi = require('../contracts/SmartExchange.json');                                                          // 6192\n                                                                                                                       // 6193\n/**                                                                                                                    // 6194\n * Should be used to make Iban transfer                                                                                // 6195\n *                                                                                                                     // 6196\n * @method transfer                                                                                                    // 6197\n * @param {String} from                                                                                                // 6198\n * @param {String} to iban                                                                                             // 6199\n * @param {Value} value to be tranfered                                                                                // 6200\n * @param {Function} callback, callback                                                                                // 6201\n */                                                                                                                    // 6202\nvar transfer = function (eth, from, to, value, callback) {                                                             // 6203\n    var iban = new Iban(to);                                                                                           // 6204\n    if (!iban.isValid()) {                                                                                             // 6205\n        throw new Error('invalid iban address');                                                                       // 6206\n    }                                                                                                                  // 6207\n                                                                                                                       // 6208\n    if (iban.isDirect()) {                                                                                             // 6209\n        return transferToAddress(eth, from, iban.address(), value, callback);                                          // 6210\n    }                                                                                                                  // 6211\n                                                                                                                       // 6212\n    if (!callback) {                                                                                                   // 6213\n        var address = eth.icapNamereg().addr(iban.institution());                                                      // 6214\n        return deposit(eth, from, address, value, iban.client());                                                      // 6215\n    }                                                                                                                  // 6216\n                                                                                                                       // 6217\n    eth.icapNamereg().addr(iban.institution(), function (err, address) {                                               // 6218\n        return deposit(eth, from, address, value, iban.client(), callback);                                            // 6219\n    });                                                                                                                // 6220\n                                                                                                                       // 6221\n};                                                                                                                     // 6222\n                                                                                                                       // 6223\n/**                                                                                                                    // 6224\n * Should be used to transfer funds to certain address                                                                 // 6225\n *                                                                                                                     // 6226\n * @method transferToAddress                                                                                           // 6227\n * @param {String} from                                                                                                // 6228\n * @param {String} to                                                                                                  // 6229\n * @param {Value} value to be tranfered                                                                                // 6230\n * @param {Function} callback, callback                                                                                // 6231\n */                                                                                                                    // 6232\nvar transferToAddress = function (eth, from, to, value, callback) {                                                    // 6233\n    return eth.sendTransaction({                                                                                       // 6234\n        address: to,                                                                                                   // 6235\n        from: from,                                                                                                    // 6236\n        value: value                                                                                                   // 6237\n    }, callback);                                                                                                      // 6238\n};                                                                                                                     // 6239\n                                                                                                                       // 6240\n/**                                                                                                                    // 6241\n * Should be used to deposit funds to generic Exchange contract (must implement deposit(bytes32) method!)              // 6242\n *                                                                                                                     // 6243\n * @method deposit                                                                                                     // 6244\n * @param {String} from                                                                                                // 6245\n * @param {String} to                                                                                                  // 6246\n * @param {Value} value to be transfered                                                                               // 6247\n * @param {String} client unique identifier                                                                            // 6248\n * @param {Function} callback, callback                                                                                // 6249\n */                                                                                                                    // 6250\nvar deposit = function (eth, from, to, value, client, callback) {                                                      // 6251\n    var abi = exchangeAbi;                                                                                             // 6252\n    return eth.contract(abi).at(to).deposit(client, {                                                                  // 6253\n        from: from,                                                                                                    // 6254\n        value: value                                                                                                   // 6255\n    }, callback);                                                                                                      // 6256\n};                                                                                                                     // 6257\n                                                                                                                       // 6258\nmodule.exports = transfer;                                                                                             // 6259\n                                                                                                                       // 6260\n                                                                                                                       // 6261\n},{\"../contracts/SmartExchange.json\":3,\"./iban\":33}],48:[function(require,module,exports){                             // 6262\n                                                                                                                       // 6263\n},{}],49:[function(require,module,exports){                                                                            // 6264\n;(function (root, factory, undef) {                                                                                    // 6265\n\tif (typeof exports === \"object\") {                                                                                    // 6266\n\t\t// CommonJS                                                                                                          // 6267\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}                                                                                                                     // 6269\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6270\n\t\t// AMD                                                                                                               // 6271\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);                                   // 6272\n\t}                                                                                                                     // 6273\n\telse {                                                                                                                // 6274\n\t\t// Global (browser)                                                                                                  // 6275\n\t\tfactory(root.CryptoJS);                                                                                              // 6276\n\t}                                                                                                                     // 6277\n}(this, function (CryptoJS) {                                                                                          // 6278\n                                                                                                                       // 6279\n\t(function () {                                                                                                        // 6280\n\t    // Shortcuts                                                                                                      // 6281\n\t    var C = CryptoJS;                                                                                                 // 6282\n\t    var C_lib = C.lib;                                                                                                // 6283\n\t    var BlockCipher = C_lib.BlockCipher;                                                                              // 6284\n\t    var C_algo = C.algo;                                                                                              // 6285\n                                                                                                                       // 6286\n\t    // Lookup tables                                                                                                  // 6287\n\t    var SBOX = [];                                                                                                    // 6288\n\t    var INV_SBOX = [];                                                                                                // 6289\n\t    var SUB_MIX_0 = [];                                                                                               // 6290\n\t    var SUB_MIX_1 = [];                                                                                               // 6291\n\t    var SUB_MIX_2 = [];                                                                                               // 6292\n\t    var SUB_MIX_3 = [];                                                                                               // 6293\n\t    var INV_SUB_MIX_0 = [];                                                                                           // 6294\n\t    var INV_SUB_MIX_1 = [];                                                                                           // 6295\n\t    var INV_SUB_MIX_2 = [];                                                                                           // 6296\n\t    var INV_SUB_MIX_3 = [];                                                                                           // 6297\n                                                                                                                       // 6298\n\t    // Compute lookup tables                                                                                          // 6299\n\t    (function () {                                                                                                    // 6300\n\t        // Compute double table                                                                                       // 6301\n\t        var d = [];                                                                                                   // 6302\n\t        for (var i = 0; i < 256; i++) {                                                                               // 6303\n\t            if (i < 128) {                                                                                            // 6304\n\t                d[i] = i << 1;                                                                                        // 6305\n\t            } else {                                                                                                  // 6306\n\t                d[i] = (i << 1) ^ 0x11b;                                                                              // 6307\n\t            }                                                                                                         // 6308\n\t        }                                                                                                             // 6309\n                                                                                                                       // 6310\n\t        // Walk GF(2^8)                                                                                               // 6311\n\t        var x = 0;                                                                                                    // 6312\n\t        var xi = 0;                                                                                                   // 6313\n\t        for (var i = 0; i < 256; i++) {                                                                               // 6314\n\t            // Compute sbox                                                                                           // 6315\n\t            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);                                              // 6316\n\t            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;                                                                     // 6317\n\t            SBOX[x] = sx;                                                                                             // 6318\n\t            INV_SBOX[sx] = x;                                                                                         // 6319\n                                                                                                                       // 6320\n\t            // Compute multiplication                                                                                 // 6321\n\t            var x2 = d[x];                                                                                            // 6322\n\t            var x4 = d[x2];                                                                                           // 6323\n\t            var x8 = d[x4];                                                                                           // 6324\n                                                                                                                       // 6325\n\t            // Compute sub bytes, mix columns tables                                                                  // 6326\n\t            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);                                                               // 6327\n\t            SUB_MIX_0[x] = (t << 24) | (t >>> 8);                                                                     // 6328\n\t            SUB_MIX_1[x] = (t << 16) | (t >>> 16);                                                                    // 6329\n\t            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);                                                                    // 6330\n\t            SUB_MIX_3[x] = t;                                                                                         // 6331\n                                                                                                                       // 6332\n\t            // Compute inv sub bytes, inv mix columns tables                                                          // 6333\n\t            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);                               // 6334\n\t            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);                                                                // 6335\n\t            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);                                                               // 6336\n\t            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);                                                               // 6337\n\t            INV_SUB_MIX_3[sx] = t;                                                                                    // 6338\n                                                                                                                       // 6339\n\t            // Compute next counter                                                                                   // 6340\n\t            if (!x) {                                                                                                 // 6341\n\t                x = xi = 1;                                                                                           // 6342\n\t            } else {                                                                                                  // 6343\n\t                x = x2 ^ d[d[d[x8 ^ x2]]];                                                                            // 6344\n\t                xi ^= d[d[xi]];                                                                                       // 6345\n\t            }                                                                                                         // 6346\n\t        }                                                                                                             // 6347\n\t    }());                                                                                                             // 6348\n                                                                                                                       // 6349\n\t    // Precomputed Rcon lookup                                                                                        // 6350\n\t    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];                                    // 6351\n                                                                                                                       // 6352\n\t    /**                                                                                                               // 6353\n\t     * AES block cipher algorithm.                                                                                    // 6354\n\t     */                                                                                                               // 6355\n\t    var AES = C_algo.AES = BlockCipher.extend({                                                                       // 6356\n\t        _doReset: function () {                                                                                       // 6357\n\t            // Shortcuts                                                                                              // 6358\n\t            var key = this._key;                                                                                      // 6359\n\t            var keyWords = key.words;                                                                                 // 6360\n\t            var keySize = key.sigBytes / 4;                                                                           // 6361\n                                                                                                                       // 6362\n\t            // Compute number of rounds                                                                               // 6363\n\t            var nRounds = this._nRounds = keySize + 6                                                                 // 6364\n                                                                                                                       // 6365\n\t            // Compute number of key schedule rows                                                                    // 6366\n\t            var ksRows = (nRounds + 1) * 4;                                                                           // 6367\n                                                                                                                       // 6368\n\t            // Compute key schedule                                                                                   // 6369\n\t            var keySchedule = this._keySchedule = [];                                                                 // 6370\n\t            for (var ksRow = 0; ksRow < ksRows; ksRow++) {                                                            // 6371\n\t                if (ksRow < keySize) {                                                                                // 6372\n\t                    keySchedule[ksRow] = keyWords[ksRow];                                                             // 6373\n\t                } else {                                                                                              // 6374\n\t                    var t = keySchedule[ksRow - 1];                                                                   // 6375\n                                                                                                                       // 6376\n\t                    if (!(ksRow % keySize)) {                                                                         // 6377\n\t                        // Rot word                                                                                   // 6378\n\t                        t = (t << 8) | (t >>> 24);                                                                    // 6379\n                                                                                                                       // 6380\n\t                        // Sub word                                                                                   // 6381\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n                                                                                                                       // 6383\n\t                        // Mix Rcon                                                                                   // 6384\n\t                        t ^= RCON[(ksRow / keySize) | 0] << 24;                                                       // 6385\n\t                    } else if (keySize > 6 && ksRow % keySize == 4) {                                                 // 6386\n\t                        // Sub word                                                                                   // 6387\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\t                    }                                                                                                 // 6389\n                                                                                                                       // 6390\n\t                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;                                            // 6391\n\t                }                                                                                                     // 6392\n\t            }                                                                                                         // 6393\n                                                                                                                       // 6394\n\t            // Compute inv key schedule                                                                               // 6395\n\t            var invKeySchedule = this._invKeySchedule = [];                                                           // 6396\n\t            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {                                                   // 6397\n\t                var ksRow = ksRows - invKsRow;                                                                        // 6398\n                                                                                                                       // 6399\n\t                if (invKsRow % 4) {                                                                                   // 6400\n\t                    var t = keySchedule[ksRow];                                                                       // 6401\n\t                } else {                                                                                              // 6402\n\t                    var t = keySchedule[ksRow - 4];                                                                   // 6403\n\t                }                                                                                                     // 6404\n                                                                                                                       // 6405\n\t                if (invKsRow < 4 || ksRow <= 4) {                                                                     // 6406\n\t                    invKeySchedule[invKsRow] = t;                                                                     // 6407\n\t                } else {                                                                                              // 6408\n\t                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\n\t                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n\t                }                                                                                                     // 6411\n\t            }                                                                                                         // 6412\n\t        },                                                                                                            // 6413\n                                                                                                                       // 6414\n\t        encryptBlock: function (M, offset) {                                                                          // 6415\n\t            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);       // 6416\n\t        },                                                                                                            // 6417\n                                                                                                                       // 6418\n\t        decryptBlock: function (M, offset) {                                                                          // 6419\n\t            // Swap 2nd and 4th rows                                                                                  // 6420\n\t            var t = M[offset + 1];                                                                                    // 6421\n\t            M[offset + 1] = M[offset + 3];                                                                            // 6422\n\t            M[offset + 3] = t;                                                                                        // 6423\n                                                                                                                       // 6424\n\t            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n                                                                                                                       // 6426\n\t            // Inv swap 2nd and 4th rows                                                                              // 6427\n\t            var t = M[offset + 1];                                                                                    // 6428\n\t            M[offset + 1] = M[offset + 3];                                                                            // 6429\n\t            M[offset + 3] = t;                                                                                        // 6430\n\t        },                                                                                                            // 6431\n                                                                                                                       // 6432\n\t        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {          // 6433\n\t            // Shortcut                                                                                               // 6434\n\t            var nRounds = this._nRounds;                                                                              // 6435\n                                                                                                                       // 6436\n\t            // Get input, add round key                                                                               // 6437\n\t            var s0 = M[offset]     ^ keySchedule[0];                                                                  // 6438\n\t            var s1 = M[offset + 1] ^ keySchedule[1];                                                                  // 6439\n\t            var s2 = M[offset + 2] ^ keySchedule[2];                                                                  // 6440\n\t            var s3 = M[offset + 3] ^ keySchedule[3];                                                                  // 6441\n                                                                                                                       // 6442\n\t            // Key schedule row counter                                                                               // 6443\n\t            var ksRow = 4;                                                                                            // 6444\n                                                                                                                       // 6445\n\t            // Rounds                                                                                                 // 6446\n\t            for (var round = 1; round < nRounds; round++) {                                                           // 6447\n\t                // Shift rows, sub bytes, mix columns, add round key                                                  // 6448\n\t                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];\n\t                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];\n\t                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];\n\t                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];\n                                                                                                                       // 6453\n\t                // Update state                                                                                       // 6454\n\t                s0 = t0;                                                                                              // 6455\n\t                s1 = t1;                                                                                              // 6456\n\t                s2 = t2;                                                                                              // 6457\n\t                s3 = t3;                                                                                              // 6458\n\t            }                                                                                                         // 6459\n                                                                                                                       // 6460\n\t            // Shift rows, sub bytes, add round key                                                                   // 6461\n\t            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n                                                                                                                       // 6466\n\t            // Set output                                                                                             // 6467\n\t            M[offset]     = t0;                                                                                       // 6468\n\t            M[offset + 1] = t1;                                                                                       // 6469\n\t            M[offset + 2] = t2;                                                                                       // 6470\n\t            M[offset + 3] = t3;                                                                                       // 6471\n\t        },                                                                                                            // 6472\n                                                                                                                       // 6473\n\t        keySize: 256/32                                                                                               // 6474\n\t    });                                                                                                               // 6475\n                                                                                                                       // 6476\n\t    /**                                                                                                               // 6477\n\t     * Shortcut functions to the cipher's object interface.                                                           // 6478\n\t     *                                                                                                                // 6479\n\t     * @example                                                                                                       // 6480\n\t     *                                                                                                                // 6481\n\t     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);                                                  // 6482\n\t     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);                                               // 6483\n\t     */                                                                                                               // 6484\n\t    C.AES = BlockCipher._createHelper(AES);                                                                           // 6485\n\t}());                                                                                                                 // 6486\n                                                                                                                       // 6487\n                                                                                                                       // 6488\n\treturn CryptoJS.AES;                                                                                                  // 6489\n                                                                                                                       // 6490\n}));                                                                                                                   // 6491\n},{\"./cipher-core\":50,\"./core\":51,\"./enc-base64\":52,\"./evpkdf\":54,\"./md5\":59}],50:[function(require,module,exports){   // 6492\n;(function (root, factory) {                                                                                           // 6493\n\tif (typeof exports === \"object\") {                                                                                    // 6494\n\t\t// CommonJS                                                                                                          // 6495\n\t\tmodule.exports = exports = factory(require(\"./core\"));                                                               // 6496\n\t}                                                                                                                     // 6497\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6498\n\t\t// AMD                                                                                                               // 6499\n\t\tdefine([\"./core\"], factory);                                                                                         // 6500\n\t}                                                                                                                     // 6501\n\telse {                                                                                                                // 6502\n\t\t// Global (browser)                                                                                                  // 6503\n\t\tfactory(root.CryptoJS);                                                                                              // 6504\n\t}                                                                                                                     // 6505\n}(this, function (CryptoJS) {                                                                                          // 6506\n                                                                                                                       // 6507\n\t/**                                                                                                                   // 6508\n\t * Cipher core components.                                                                                            // 6509\n\t */                                                                                                                   // 6510\n\tCryptoJS.lib.Cipher || (function (undefined) {                                                                        // 6511\n\t    // Shortcuts                                                                                                      // 6512\n\t    var C = CryptoJS;                                                                                                 // 6513\n\t    var C_lib = C.lib;                                                                                                // 6514\n\t    var Base = C_lib.Base;                                                                                            // 6515\n\t    var WordArray = C_lib.WordArray;                                                                                  // 6516\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;                                                        // 6517\n\t    var C_enc = C.enc;                                                                                                // 6518\n\t    var Utf8 = C_enc.Utf8;                                                                                            // 6519\n\t    var Base64 = C_enc.Base64;                                                                                        // 6520\n\t    var C_algo = C.algo;                                                                                              // 6521\n\t    var EvpKDF = C_algo.EvpKDF;                                                                                       // 6522\n                                                                                                                       // 6523\n\t    /**                                                                                                               // 6524\n\t     * Abstract base cipher template.                                                                                 // 6525\n\t     *                                                                                                                // 6526\n\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)                                       // 6527\n\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)                                         // 6528\n\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.                                    // 6529\n\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.                                    // 6530\n\t     */                                                                                                               // 6531\n\t    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({                                                       // 6532\n\t        /**                                                                                                           // 6533\n\t         * Configuration options.                                                                                     // 6534\n\t         *                                                                                                            // 6535\n\t         * @property {WordArray} iv The IV to use for this operation.                                                 // 6536\n\t         */                                                                                                           // 6537\n\t        cfg: Base.extend(),                                                                                           // 6538\n                                                                                                                       // 6539\n\t        /**                                                                                                           // 6540\n\t         * Creates this cipher in encryption mode.                                                                    // 6541\n\t         *                                                                                                            // 6542\n\t         * @param {WordArray} key The key.                                                                            // 6543\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 6544\n\t         *                                                                                                            // 6545\n\t         * @return {Cipher} A cipher instance.                                                                        // 6546\n\t         *                                                                                                            // 6547\n\t         * @static                                                                                                    // 6548\n\t         *                                                                                                            // 6549\n\t         * @example                                                                                                   // 6550\n\t         *                                                                                                            // 6551\n\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });                     // 6552\n\t         */                                                                                                           // 6553\n\t        createEncryptor: function (key, cfg) {                                                                        // 6554\n\t            return this.create(this._ENC_XFORM_MODE, key, cfg);                                                       // 6555\n\t        },                                                                                                            // 6556\n                                                                                                                       // 6557\n\t        /**                                                                                                           // 6558\n\t         * Creates this cipher in decryption mode.                                                                    // 6559\n\t         *                                                                                                            // 6560\n\t         * @param {WordArray} key The key.                                                                            // 6561\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 6562\n\t         *                                                                                                            // 6563\n\t         * @return {Cipher} A cipher instance.                                                                        // 6564\n\t         *                                                                                                            // 6565\n\t         * @static                                                                                                    // 6566\n\t         *                                                                                                            // 6567\n\t         * @example                                                                                                   // 6568\n\t         *                                                                                                            // 6569\n\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });                     // 6570\n\t         */                                                                                                           // 6571\n\t        createDecryptor: function (key, cfg) {                                                                        // 6572\n\t            return this.create(this._DEC_XFORM_MODE, key, cfg);                                                       // 6573\n\t        },                                                                                                            // 6574\n                                                                                                                       // 6575\n\t        /**                                                                                                           // 6576\n\t         * Initializes a newly created cipher.                                                                        // 6577\n\t         *                                                                                                            // 6578\n\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.                 // 6579\n\t         * @param {WordArray} key The key.                                                                            // 6580\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 6581\n\t         *                                                                                                            // 6582\n\t         * @example                                                                                                   // 6583\n\t         *                                                                                                            // 6584\n\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n\t         */                                                                                                           // 6586\n\t        init: function (xformMode, key, cfg) {                                                                        // 6587\n\t            // Apply config defaults                                                                                  // 6588\n\t            this.cfg = this.cfg.extend(cfg);                                                                          // 6589\n                                                                                                                       // 6590\n\t            // Store transform mode and key                                                                           // 6591\n\t            this._xformMode = xformMode;                                                                              // 6592\n\t            this._key = key;                                                                                          // 6593\n                                                                                                                       // 6594\n\t            // Set initial values                                                                                     // 6595\n\t            this.reset();                                                                                             // 6596\n\t        },                                                                                                            // 6597\n                                                                                                                       // 6598\n\t        /**                                                                                                           // 6599\n\t         * Resets this cipher to its initial state.                                                                   // 6600\n\t         *                                                                                                            // 6601\n\t         * @example                                                                                                   // 6602\n\t         *                                                                                                            // 6603\n\t         *     cipher.reset();                                                                                        // 6604\n\t         */                                                                                                           // 6605\n\t        reset: function () {                                                                                          // 6606\n\t            // Reset data buffer                                                                                      // 6607\n\t            BufferedBlockAlgorithm.reset.call(this);                                                                  // 6608\n                                                                                                                       // 6609\n\t            // Perform concrete-cipher logic                                                                          // 6610\n\t            this._doReset();                                                                                          // 6611\n\t        },                                                                                                            // 6612\n                                                                                                                       // 6613\n\t        /**                                                                                                           // 6614\n\t         * Adds data to be encrypted or decrypted.                                                                    // 6615\n\t         *                                                                                                            // 6616\n\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.                                       // 6617\n\t         *                                                                                                            // 6618\n\t         * @return {WordArray} The data after processing.                                                             // 6619\n\t         *                                                                                                            // 6620\n\t         * @example                                                                                                   // 6621\n\t         *                                                                                                            // 6622\n\t         *     var encrypted = cipher.process('data');                                                                // 6623\n\t         *     var encrypted = cipher.process(wordArray);                                                             // 6624\n\t         */                                                                                                           // 6625\n\t        process: function (dataUpdate) {                                                                              // 6626\n\t            // Append                                                                                                 // 6627\n\t            this._append(dataUpdate);                                                                                 // 6628\n                                                                                                                       // 6629\n\t            // Process available blocks                                                                               // 6630\n\t            return this._process();                                                                                   // 6631\n\t        },                                                                                                            // 6632\n                                                                                                                       // 6633\n\t        /**                                                                                                           // 6634\n\t         * Finalizes the encryption or decryption process.                                                            // 6635\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 6636\n\t         *                                                                                                            // 6637\n\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.                                 // 6638\n\t         *                                                                                                            // 6639\n\t         * @return {WordArray} The data after final processing.                                                       // 6640\n\t         *                                                                                                            // 6641\n\t         * @example                                                                                                   // 6642\n\t         *                                                                                                            // 6643\n\t         *     var encrypted = cipher.finalize();                                                                     // 6644\n\t         *     var encrypted = cipher.finalize('data');                                                               // 6645\n\t         *     var encrypted = cipher.finalize(wordArray);                                                            // 6646\n\t         */                                                                                                           // 6647\n\t        finalize: function (dataUpdate) {                                                                             // 6648\n\t            // Final data update                                                                                      // 6649\n\t            if (dataUpdate) {                                                                                         // 6650\n\t                this._append(dataUpdate);                                                                             // 6651\n\t            }                                                                                                         // 6652\n                                                                                                                       // 6653\n\t            // Perform concrete-cipher logic                                                                          // 6654\n\t            var finalProcessedData = this._doFinalize();                                                              // 6655\n                                                                                                                       // 6656\n\t            return finalProcessedData;                                                                                // 6657\n\t        },                                                                                                            // 6658\n                                                                                                                       // 6659\n\t        keySize: 128/32,                                                                                              // 6660\n                                                                                                                       // 6661\n\t        ivSize: 128/32,                                                                                               // 6662\n                                                                                                                       // 6663\n\t        _ENC_XFORM_MODE: 1,                                                                                           // 6664\n                                                                                                                       // 6665\n\t        _DEC_XFORM_MODE: 2,                                                                                           // 6666\n                                                                                                                       // 6667\n\t        /**                                                                                                           // 6668\n\t         * Creates shortcut functions to a cipher's object interface.                                                 // 6669\n\t         *                                                                                                            // 6670\n\t         * @param {Cipher} cipher The cipher to create a helper for.                                                  // 6671\n\t         *                                                                                                            // 6672\n\t         * @return {Object} An object with encrypt and decrypt shortcut functions.                                    // 6673\n\t         *                                                                                                            // 6674\n\t         * @static                                                                                                    // 6675\n\t         *                                                                                                            // 6676\n\t         * @example                                                                                                   // 6677\n\t         *                                                                                                            // 6678\n\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);                                        // 6679\n\t         */                                                                                                           // 6680\n\t        _createHelper: (function () {                                                                                 // 6681\n\t            function selectCipherStrategy(key) {                                                                      // 6682\n\t                if (typeof key == 'string') {                                                                         // 6683\n\t                    return PasswordBasedCipher;                                                                       // 6684\n\t                } else {                                                                                              // 6685\n\t                    return SerializableCipher;                                                                        // 6686\n\t                }                                                                                                     // 6687\n\t            }                                                                                                         // 6688\n                                                                                                                       // 6689\n\t            return function (cipher) {                                                                                // 6690\n\t                return {                                                                                              // 6691\n\t                    encrypt: function (message, key, cfg) {                                                           // 6692\n\t                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);                          // 6693\n\t                    },                                                                                                // 6694\n                                                                                                                       // 6695\n\t                    decrypt: function (ciphertext, key, cfg) {                                                        // 6696\n\t                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);                       // 6697\n\t                    }                                                                                                 // 6698\n\t                };                                                                                                    // 6699\n\t            };                                                                                                        // 6700\n\t        }())                                                                                                          // 6701\n\t    });                                                                                                               // 6702\n                                                                                                                       // 6703\n\t    /**                                                                                                               // 6704\n\t     * Abstract base stream cipher template.                                                                          // 6705\n\t     *                                                                                                                // 6706\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)          // 6707\n\t     */                                                                                                               // 6708\n\t    var StreamCipher = C_lib.StreamCipher = Cipher.extend({                                                           // 6709\n\t        _doFinalize: function () {                                                                                    // 6710\n\t            // Process partial blocks                                                                                 // 6711\n\t            var finalProcessedBlocks = this._process(!!'flush');                                                      // 6712\n                                                                                                                       // 6713\n\t            return finalProcessedBlocks;                                                                              // 6714\n\t        },                                                                                                            // 6715\n                                                                                                                       // 6716\n\t        blockSize: 1                                                                                                  // 6717\n\t    });                                                                                                               // 6718\n                                                                                                                       // 6719\n\t    /**                                                                                                               // 6720\n\t     * Mode namespace.                                                                                                // 6721\n\t     */                                                                                                               // 6722\n\t    var C_mode = C.mode = {};                                                                                         // 6723\n                                                                                                                       // 6724\n\t    /**                                                                                                               // 6725\n\t     * Abstract base block cipher mode template.                                                                      // 6726\n\t     */                                                                                                               // 6727\n\t    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({                                                       // 6728\n\t        /**                                                                                                           // 6729\n\t         * Creates this mode for encryption.                                                                          // 6730\n\t         *                                                                                                            // 6731\n\t         * @param {Cipher} cipher A block cipher instance.                                                            // 6732\n\t         * @param {Array} iv The IV words.                                                                            // 6733\n\t         *                                                                                                            // 6734\n\t         * @static                                                                                                    // 6735\n\t         *                                                                                                            // 6736\n\t         * @example                                                                                                   // 6737\n\t         *                                                                                                            // 6738\n\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);                                        // 6739\n\t         */                                                                                                           // 6740\n\t        createEncryptor: function (cipher, iv) {                                                                      // 6741\n\t            return this.Encryptor.create(cipher, iv);                                                                 // 6742\n\t        },                                                                                                            // 6743\n                                                                                                                       // 6744\n\t        /**                                                                                                           // 6745\n\t         * Creates this mode for decryption.                                                                          // 6746\n\t         *                                                                                                            // 6747\n\t         * @param {Cipher} cipher A block cipher instance.                                                            // 6748\n\t         * @param {Array} iv The IV words.                                                                            // 6749\n\t         *                                                                                                            // 6750\n\t         * @static                                                                                                    // 6751\n\t         *                                                                                                            // 6752\n\t         * @example                                                                                                   // 6753\n\t         *                                                                                                            // 6754\n\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);                                        // 6755\n\t         */                                                                                                           // 6756\n\t        createDecryptor: function (cipher, iv) {                                                                      // 6757\n\t            return this.Decryptor.create(cipher, iv);                                                                 // 6758\n\t        },                                                                                                            // 6759\n                                                                                                                       // 6760\n\t        /**                                                                                                           // 6761\n\t         * Initializes a newly created mode.                                                                          // 6762\n\t         *                                                                                                            // 6763\n\t         * @param {Cipher} cipher A block cipher instance.                                                            // 6764\n\t         * @param {Array} iv The IV words.                                                                            // 6765\n\t         *                                                                                                            // 6766\n\t         * @example                                                                                                   // 6767\n\t         *                                                                                                            // 6768\n\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);                                       // 6769\n\t         */                                                                                                           // 6770\n\t        init: function (cipher, iv) {                                                                                 // 6771\n\t            this._cipher = cipher;                                                                                    // 6772\n\t            this._iv = iv;                                                                                            // 6773\n\t        }                                                                                                             // 6774\n\t    });                                                                                                               // 6775\n                                                                                                                       // 6776\n\t    /**                                                                                                               // 6777\n\t     * Cipher Block Chaining mode.                                                                                    // 6778\n\t     */                                                                                                               // 6779\n\t    var CBC = C_mode.CBC = (function () {                                                                             // 6780\n\t        /**                                                                                                           // 6781\n\t         * Abstract base CBC mode.                                                                                    // 6782\n\t         */                                                                                                           // 6783\n\t        var CBC = BlockCipherMode.extend();                                                                           // 6784\n                                                                                                                       // 6785\n\t        /**                                                                                                           // 6786\n\t         * CBC encryptor.                                                                                             // 6787\n\t         */                                                                                                           // 6788\n\t        CBC.Encryptor = CBC.extend({                                                                                  // 6789\n\t            /**                                                                                                       // 6790\n\t             * Processes the data block at offset.                                                                    // 6791\n\t             *                                                                                                        // 6792\n\t             * @param {Array} words The data words to operate on.                                                     // 6793\n\t             * @param {number} offset The offset where the block starts.                                              // 6794\n\t             *                                                                                                        // 6795\n\t             * @example                                                                                               // 6796\n\t             *                                                                                                        // 6797\n\t             *     mode.processBlock(data.words, offset);                                                             // 6798\n\t             */                                                                                                       // 6799\n\t            processBlock: function (words, offset) {                                                                  // 6800\n\t                // Shortcuts                                                                                          // 6801\n\t                var cipher = this._cipher;                                                                            // 6802\n\t                var blockSize = cipher.blockSize;                                                                     // 6803\n                                                                                                                       // 6804\n\t                // XOR and encrypt                                                                                    // 6805\n\t                xorBlock.call(this, words, offset, blockSize);                                                        // 6806\n\t                cipher.encryptBlock(words, offset);                                                                   // 6807\n                                                                                                                       // 6808\n\t                // Remember this block to use with next block                                                         // 6809\n\t                this._prevBlock = words.slice(offset, offset + blockSize);                                            // 6810\n\t            }                                                                                                         // 6811\n\t        });                                                                                                           // 6812\n                                                                                                                       // 6813\n\t        /**                                                                                                           // 6814\n\t         * CBC decryptor.                                                                                             // 6815\n\t         */                                                                                                           // 6816\n\t        CBC.Decryptor = CBC.extend({                                                                                  // 6817\n\t            /**                                                                                                       // 6818\n\t             * Processes the data block at offset.                                                                    // 6819\n\t             *                                                                                                        // 6820\n\t             * @param {Array} words The data words to operate on.                                                     // 6821\n\t             * @param {number} offset The offset where the block starts.                                              // 6822\n\t             *                                                                                                        // 6823\n\t             * @example                                                                                               // 6824\n\t             *                                                                                                        // 6825\n\t             *     mode.processBlock(data.words, offset);                                                             // 6826\n\t             */                                                                                                       // 6827\n\t            processBlock: function (words, offset) {                                                                  // 6828\n\t                // Shortcuts                                                                                          // 6829\n\t                var cipher = this._cipher;                                                                            // 6830\n\t                var blockSize = cipher.blockSize;                                                                     // 6831\n                                                                                                                       // 6832\n\t                // Remember this block to use with next block                                                         // 6833\n\t                var thisBlock = words.slice(offset, offset + blockSize);                                              // 6834\n                                                                                                                       // 6835\n\t                // Decrypt and XOR                                                                                    // 6836\n\t                cipher.decryptBlock(words, offset);                                                                   // 6837\n\t                xorBlock.call(this, words, offset, blockSize);                                                        // 6838\n                                                                                                                       // 6839\n\t                // This block becomes the previous block                                                              // 6840\n\t                this._prevBlock = thisBlock;                                                                          // 6841\n\t            }                                                                                                         // 6842\n\t        });                                                                                                           // 6843\n                                                                                                                       // 6844\n\t        function xorBlock(words, offset, blockSize) {                                                                 // 6845\n\t            // Shortcut                                                                                               // 6846\n\t            var iv = this._iv;                                                                                        // 6847\n                                                                                                                       // 6848\n\t            // Choose mixing block                                                                                    // 6849\n\t            if (iv) {                                                                                                 // 6850\n\t                var block = iv;                                                                                       // 6851\n                                                                                                                       // 6852\n\t                // Remove IV for subsequent blocks                                                                    // 6853\n\t                this._iv = undefined;                                                                                 // 6854\n\t            } else {                                                                                                  // 6855\n\t                var block = this._prevBlock;                                                                          // 6856\n\t            }                                                                                                         // 6857\n                                                                                                                       // 6858\n\t            // XOR blocks                                                                                             // 6859\n\t            for (var i = 0; i < blockSize; i++) {                                                                     // 6860\n\t                words[offset + i] ^= block[i];                                                                        // 6861\n\t            }                                                                                                         // 6862\n\t        }                                                                                                             // 6863\n                                                                                                                       // 6864\n\t        return CBC;                                                                                                   // 6865\n\t    }());                                                                                                             // 6866\n                                                                                                                       // 6867\n\t    /**                                                                                                               // 6868\n\t     * Padding namespace.                                                                                             // 6869\n\t     */                                                                                                               // 6870\n\t    var C_pad = C.pad = {};                                                                                           // 6871\n                                                                                                                       // 6872\n\t    /**                                                                                                               // 6873\n\t     * PKCS #5/7 padding strategy.                                                                                    // 6874\n\t     */                                                                                                               // 6875\n\t    var Pkcs7 = C_pad.Pkcs7 = {                                                                                       // 6876\n\t        /**                                                                                                           // 6877\n\t         * Pads data using the algorithm defined in PKCS #5/7.                                                        // 6878\n\t         *                                                                                                            // 6879\n\t         * @param {WordArray} data The data to pad.                                                                   // 6880\n\t         * @param {number} blockSize The multiple that the data should be padded to.                                  // 6881\n\t         *                                                                                                            // 6882\n\t         * @static                                                                                                    // 6883\n\t         *                                                                                                            // 6884\n\t         * @example                                                                                                   // 6885\n\t         *                                                                                                            // 6886\n\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);                                                                  // 6887\n\t         */                                                                                                           // 6888\n\t        pad: function (data, blockSize) {                                                                             // 6889\n\t            // Shortcut                                                                                               // 6890\n\t            var blockSizeBytes = blockSize * 4;                                                                       // 6891\n                                                                                                                       // 6892\n\t            // Count padding bytes                                                                                    // 6893\n\t            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;                                      // 6894\n                                                                                                                       // 6895\n\t            // Create padding word                                                                                    // 6896\n\t            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;   // 6897\n                                                                                                                       // 6898\n\t            // Create padding                                                                                         // 6899\n\t            var paddingWords = [];                                                                                    // 6900\n\t            for (var i = 0; i < nPaddingBytes; i += 4) {                                                              // 6901\n\t                paddingWords.push(paddingWord);                                                                       // 6902\n\t            }                                                                                                         // 6903\n\t            var padding = WordArray.create(paddingWords, nPaddingBytes);                                              // 6904\n                                                                                                                       // 6905\n\t            // Add padding                                                                                            // 6906\n\t            data.concat(padding);                                                                                     // 6907\n\t        },                                                                                                            // 6908\n                                                                                                                       // 6909\n\t        /**                                                                                                           // 6910\n\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.                                 // 6911\n\t         *                                                                                                            // 6912\n\t         * @param {WordArray} data The data to unpad.                                                                 // 6913\n\t         *                                                                                                            // 6914\n\t         * @static                                                                                                    // 6915\n\t         *                                                                                                            // 6916\n\t         * @example                                                                                                   // 6917\n\t         *                                                                                                            // 6918\n\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);                                                                   // 6919\n\t         */                                                                                                           // 6920\n\t        unpad: function (data) {                                                                                      // 6921\n\t            // Get number of padding bytes from last byte                                                             // 6922\n\t            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                         // 6923\n                                                                                                                       // 6924\n\t            // Remove padding                                                                                         // 6925\n\t            data.sigBytes -= nPaddingBytes;                                                                           // 6926\n\t        }                                                                                                             // 6927\n\t    };                                                                                                                // 6928\n                                                                                                                       // 6929\n\t    /**                                                                                                               // 6930\n\t     * Abstract base block cipher template.                                                                           // 6931\n\t     *                                                                                                                // 6932\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)         // 6933\n\t     */                                                                                                               // 6934\n\t    var BlockCipher = C_lib.BlockCipher = Cipher.extend({                                                             // 6935\n\t        /**                                                                                                           // 6936\n\t         * Configuration options.                                                                                     // 6937\n\t         *                                                                                                            // 6938\n\t         * @property {Mode} mode The block mode to use. Default: CBC                                                  // 6939\n\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7                                    // 6940\n\t         */                                                                                                           // 6941\n\t        cfg: Cipher.cfg.extend({                                                                                      // 6942\n\t            mode: CBC,                                                                                                // 6943\n\t            padding: Pkcs7                                                                                            // 6944\n\t        }),                                                                                                           // 6945\n                                                                                                                       // 6946\n\t        reset: function () {                                                                                          // 6947\n\t            // Reset cipher                                                                                           // 6948\n\t            Cipher.reset.call(this);                                                                                  // 6949\n                                                                                                                       // 6950\n\t            // Shortcuts                                                                                              // 6951\n\t            var cfg = this.cfg;                                                                                       // 6952\n\t            var iv = cfg.iv;                                                                                          // 6953\n\t            var mode = cfg.mode;                                                                                      // 6954\n                                                                                                                       // 6955\n\t            // Reset block mode                                                                                       // 6956\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {                                                            // 6957\n\t                var modeCreator = mode.createEncryptor;                                                               // 6958\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {                                               // 6959\n\t                var modeCreator = mode.createDecryptor;                                                               // 6960\n                                                                                                                       // 6961\n\t                // Keep at least one block in the buffer for unpadding                                                // 6962\n\t                this._minBufferSize = 1;                                                                              // 6963\n\t            }                                                                                                         // 6964\n\t            this._mode = modeCreator.call(mode, this, iv && iv.words);                                                // 6965\n\t        },                                                                                                            // 6966\n                                                                                                                       // 6967\n\t        _doProcessBlock: function (words, offset) {                                                                   // 6968\n\t            this._mode.processBlock(words, offset);                                                                   // 6969\n\t        },                                                                                                            // 6970\n                                                                                                                       // 6971\n\t        _doFinalize: function () {                                                                                    // 6972\n\t            // Shortcut                                                                                               // 6973\n\t            var padding = this.cfg.padding;                                                                           // 6974\n                                                                                                                       // 6975\n\t            // Finalize                                                                                               // 6976\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {                                                            // 6977\n\t                // Pad data                                                                                           // 6978\n\t                padding.pad(this._data, this.blockSize);                                                              // 6979\n                                                                                                                       // 6980\n\t                // Process final blocks                                                                               // 6981\n\t                var finalProcessedBlocks = this._process(!!'flush');                                                  // 6982\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {                                               // 6983\n\t                // Process final blocks                                                                               // 6984\n\t                var finalProcessedBlocks = this._process(!!'flush');                                                  // 6985\n                                                                                                                       // 6986\n\t                // Unpad data                                                                                         // 6987\n\t                padding.unpad(finalProcessedBlocks);                                                                  // 6988\n\t            }                                                                                                         // 6989\n                                                                                                                       // 6990\n\t            return finalProcessedBlocks;                                                                              // 6991\n\t        },                                                                                                            // 6992\n                                                                                                                       // 6993\n\t        blockSize: 128/32                                                                                             // 6994\n\t    });                                                                                                               // 6995\n                                                                                                                       // 6996\n\t    /**                                                                                                               // 6997\n\t     * A collection of cipher parameters.                                                                             // 6998\n\t     *                                                                                                                // 6999\n\t     * @property {WordArray} ciphertext The raw ciphertext.                                                           // 7000\n\t     * @property {WordArray} key The key to this ciphertext.                                                          // 7001\n\t     * @property {WordArray} iv The IV used in the ciphering operation.                                               // 7002\n\t     * @property {WordArray} salt The salt used with a key derivation function.                                       // 7003\n\t     * @property {Cipher} algorithm The cipher algorithm.                                                             // 7004\n\t     * @property {Mode} mode The block mode used in the ciphering operation.                                          // 7005\n\t     * @property {Padding} padding The padding scheme used in the ciphering operation.                                // 7006\n\t     * @property {number} blockSize The block size of the cipher.                                                     // 7007\n\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n\t     */                                                                                                               // 7009\n\t    var CipherParams = C_lib.CipherParams = Base.extend({                                                             // 7010\n\t        /**                                                                                                           // 7011\n\t         * Initializes a newly created cipher params object.                                                          // 7012\n\t         *                                                                                                            // 7013\n\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.                         // 7014\n\t         *                                                                                                            // 7015\n\t         * @example                                                                                                   // 7016\n\t         *                                                                                                            // 7017\n\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({                                                  // 7018\n\t         *         ciphertext: ciphertextWordArray,                                                                   // 7019\n\t         *         key: keyWordArray,                                                                                 // 7020\n\t         *         iv: ivWordArray,                                                                                   // 7021\n\t         *         salt: saltWordArray,                                                                               // 7022\n\t         *         algorithm: CryptoJS.algo.AES,                                                                      // 7023\n\t         *         mode: CryptoJS.mode.CBC,                                                                           // 7024\n\t         *         padding: CryptoJS.pad.PKCS7,                                                                       // 7025\n\t         *         blockSize: 4,                                                                                      // 7026\n\t         *         formatter: CryptoJS.format.OpenSSL                                                                 // 7027\n\t         *     });                                                                                                    // 7028\n\t         */                                                                                                           // 7029\n\t        init: function (cipherParams) {                                                                               // 7030\n\t            this.mixIn(cipherParams);                                                                                 // 7031\n\t        },                                                                                                            // 7032\n                                                                                                                       // 7033\n\t        /**                                                                                                           // 7034\n\t         * Converts this cipher params object to a string.                                                            // 7035\n\t         *                                                                                                            // 7036\n\t         * @param {Format} formatter (Optional) The formatting strategy to use.                                       // 7037\n\t         *                                                                                                            // 7038\n\t         * @return {string} The stringified cipher params.                                                            // 7039\n\t         *                                                                                                            // 7040\n\t         * @throws Error If neither the formatter nor the default formatter is set.                                   // 7041\n\t         *                                                                                                            // 7042\n\t         * @example                                                                                                   // 7043\n\t         *                                                                                                            // 7044\n\t         *     var string = cipherParams + '';                                                                        // 7045\n\t         *     var string = cipherParams.toString();                                                                  // 7046\n\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);                                           // 7047\n\t         */                                                                                                           // 7048\n\t        toString: function (formatter) {                                                                              // 7049\n\t            return (formatter || this.formatter).stringify(this);                                                     // 7050\n\t        }                                                                                                             // 7051\n\t    });                                                                                                               // 7052\n                                                                                                                       // 7053\n\t    /**                                                                                                               // 7054\n\t     * Format namespace.                                                                                              // 7055\n\t     */                                                                                                               // 7056\n\t    var C_format = C.format = {};                                                                                     // 7057\n                                                                                                                       // 7058\n\t    /**                                                                                                               // 7059\n\t     * OpenSSL formatting strategy.                                                                                   // 7060\n\t     */                                                                                                               // 7061\n\t    var OpenSSLFormatter = C_format.OpenSSL = {                                                                       // 7062\n\t        /**                                                                                                           // 7063\n\t         * Converts a cipher params object to an OpenSSL-compatible string.                                           // 7064\n\t         *                                                                                                            // 7065\n\t         * @param {CipherParams} cipherParams The cipher params object.                                               // 7066\n\t         *                                                                                                            // 7067\n\t         * @return {string} The OpenSSL-compatible string.                                                            // 7068\n\t         *                                                                                                            // 7069\n\t         * @static                                                                                                    // 7070\n\t         *                                                                                                            // 7071\n\t         * @example                                                                                                   // 7072\n\t         *                                                                                                            // 7073\n\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);                                   // 7074\n\t         */                                                                                                           // 7075\n\t        stringify: function (cipherParams) {                                                                          // 7076\n\t            // Shortcuts                                                                                              // 7077\n\t            var ciphertext = cipherParams.ciphertext;                                                                 // 7078\n\t            var salt = cipherParams.salt;                                                                             // 7079\n                                                                                                                       // 7080\n\t            // Format                                                                                                 // 7081\n\t            if (salt) {                                                                                               // 7082\n\t                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);           // 7083\n\t            } else {                                                                                                  // 7084\n\t                var wordArray = ciphertext;                                                                           // 7085\n\t            }                                                                                                         // 7086\n                                                                                                                       // 7087\n\t            return wordArray.toString(Base64);                                                                        // 7088\n\t        },                                                                                                            // 7089\n                                                                                                                       // 7090\n\t        /**                                                                                                           // 7091\n\t         * Converts an OpenSSL-compatible string to a cipher params object.                                           // 7092\n\t         *                                                                                                            // 7093\n\t         * @param {string} openSSLStr The OpenSSL-compatible string.                                                  // 7094\n\t         *                                                                                                            // 7095\n\t         * @return {CipherParams} The cipher params object.                                                           // 7096\n\t         *                                                                                                            // 7097\n\t         * @static                                                                                                    // 7098\n\t         *                                                                                                            // 7099\n\t         * @example                                                                                                   // 7100\n\t         *                                                                                                            // 7101\n\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);                                       // 7102\n\t         */                                                                                                           // 7103\n\t        parse: function (openSSLStr) {                                                                                // 7104\n\t            // Parse base64                                                                                           // 7105\n\t            var ciphertext = Base64.parse(openSSLStr);                                                                // 7106\n                                                                                                                       // 7107\n\t            // Shortcut                                                                                               // 7108\n\t            var ciphertextWords = ciphertext.words;                                                                   // 7109\n                                                                                                                       // 7110\n\t            // Test for salt                                                                                          // 7111\n\t            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {                               // 7112\n\t                // Extract salt                                                                                       // 7113\n\t                var salt = WordArray.create(ciphertextWords.slice(2, 4));                                             // 7114\n                                                                                                                       // 7115\n\t                // Remove salt from ciphertext                                                                        // 7116\n\t                ciphertextWords.splice(0, 4);                                                                         // 7117\n\t                ciphertext.sigBytes -= 16;                                                                            // 7118\n\t            }                                                                                                         // 7119\n                                                                                                                       // 7120\n\t            return CipherParams.create({ ciphertext: ciphertext, salt: salt });                                       // 7121\n\t        }                                                                                                             // 7122\n\t    };                                                                                                                // 7123\n                                                                                                                       // 7124\n\t    /**                                                                                                               // 7125\n\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.                               // 7126\n\t     */                                                                                                               // 7127\n\t    var SerializableCipher = C_lib.SerializableCipher = Base.extend({                                                 // 7128\n\t        /**                                                                                                           // 7129\n\t         * Configuration options.                                                                                     // 7130\n\t         *                                                                                                            // 7131\n\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n\t         */                                                                                                           // 7133\n\t        cfg: Base.extend({                                                                                            // 7134\n\t            format: OpenSSLFormatter                                                                                  // 7135\n\t        }),                                                                                                           // 7136\n                                                                                                                       // 7137\n\t        /**                                                                                                           // 7138\n\t         * Encrypts a message.                                                                                        // 7139\n\t         *                                                                                                            // 7140\n\t         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7141\n\t         * @param {WordArray|string} message The message to encrypt.                                                  // 7142\n\t         * @param {WordArray} key The key.                                                                            // 7143\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7144\n\t         *                                                                                                            // 7145\n\t         * @return {CipherParams} A cipher params object.                                                             // 7146\n\t         *                                                                                                            // 7147\n\t         * @static                                                                                                    // 7148\n\t         *                                                                                                            // 7149\n\t         * @example                                                                                                   // 7150\n\t         *                                                                                                            // 7151\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);       // 7152\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */                                                                                                           // 7155\n\t        encrypt: function (cipher, message, key, cfg) {                                                               // 7156\n\t            // Apply config defaults                                                                                  // 7157\n\t            cfg = this.cfg.extend(cfg);                                                                               // 7158\n                                                                                                                       // 7159\n\t            // Encrypt                                                                                                // 7160\n\t            var encryptor = cipher.createEncryptor(key, cfg);                                                         // 7161\n\t            var ciphertext = encryptor.finalize(message);                                                             // 7162\n                                                                                                                       // 7163\n\t            // Shortcut                                                                                               // 7164\n\t            var cipherCfg = encryptor.cfg;                                                                            // 7165\n                                                                                                                       // 7166\n\t            // Create and return serializable cipher params                                                           // 7167\n\t            return CipherParams.create({                                                                              // 7168\n\t                ciphertext: ciphertext,                                                                               // 7169\n\t                key: key,                                                                                             // 7170\n\t                iv: cipherCfg.iv,                                                                                     // 7171\n\t                algorithm: cipher,                                                                                    // 7172\n\t                mode: cipherCfg.mode,                                                                                 // 7173\n\t                padding: cipherCfg.padding,                                                                           // 7174\n\t                blockSize: cipher.blockSize,                                                                          // 7175\n\t                formatter: cfg.format                                                                                 // 7176\n\t            });                                                                                                       // 7177\n\t        },                                                                                                            // 7178\n                                                                                                                       // 7179\n\t        /**                                                                                                           // 7180\n\t         * Decrypts serialized ciphertext.                                                                            // 7181\n\t         *                                                                                                            // 7182\n\t         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7183\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.                                         // 7184\n\t         * @param {WordArray} key The key.                                                                            // 7185\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7186\n\t         *                                                                                                            // 7187\n\t         * @return {WordArray} The plaintext.                                                                         // 7188\n\t         *                                                                                                            // 7189\n\t         * @static                                                                                                    // 7190\n\t         *                                                                                                            // 7191\n\t         * @example                                                                                                   // 7192\n\t         *                                                                                                            // 7193\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */                                                                                                           // 7196\n\t        decrypt: function (cipher, ciphertext, key, cfg) {                                                            // 7197\n\t            // Apply config defaults                                                                                  // 7198\n\t            cfg = this.cfg.extend(cfg);                                                                               // 7199\n                                                                                                                       // 7200\n\t            // Convert string to CipherParams                                                                         // 7201\n\t            ciphertext = this._parse(ciphertext, cfg.format);                                                         // 7202\n                                                                                                                       // 7203\n\t            // Decrypt                                                                                                // 7204\n\t            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);                         // 7205\n                                                                                                                       // 7206\n\t            return plaintext;                                                                                         // 7207\n\t        },                                                                                                            // 7208\n                                                                                                                       // 7209\n\t        /**                                                                                                           // 7210\n\t         * Converts serialized ciphertext to CipherParams,                                                            // 7211\n\t         * else assumed CipherParams already and returns ciphertext unchanged.                                        // 7212\n\t         *                                                                                                            // 7213\n\t         * @param {CipherParams|string} ciphertext The ciphertext.                                                    // 7214\n\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.                   // 7215\n\t         *                                                                                                            // 7216\n\t         * @return {CipherParams} The unserialized ciphertext.                                                        // 7217\n\t         *                                                                                                            // 7218\n\t         * @static                                                                                                    // 7219\n\t         *                                                                                                            // 7220\n\t         * @example                                                                                                   // 7221\n\t         *                                                                                                            // 7222\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);       // 7223\n\t         */                                                                                                           // 7224\n\t        _parse: function (ciphertext, format) {                                                                       // 7225\n\t            if (typeof ciphertext == 'string') {                                                                      // 7226\n\t                return format.parse(ciphertext, this);                                                                // 7227\n\t            } else {                                                                                                  // 7228\n\t                return ciphertext;                                                                                    // 7229\n\t            }                                                                                                         // 7230\n\t        }                                                                                                             // 7231\n\t    });                                                                                                               // 7232\n                                                                                                                       // 7233\n\t    /**                                                                                                               // 7234\n\t     * Key derivation function namespace.                                                                             // 7235\n\t     */                                                                                                               // 7236\n\t    var C_kdf = C.kdf = {};                                                                                           // 7237\n                                                                                                                       // 7238\n\t    /**                                                                                                               // 7239\n\t     * OpenSSL key derivation function.                                                                               // 7240\n\t     */                                                                                                               // 7241\n\t    var OpenSSLKdf = C_kdf.OpenSSL = {                                                                                // 7242\n\t        /**                                                                                                           // 7243\n\t         * Derives a key and IV from a password.                                                                      // 7244\n\t         *                                                                                                            // 7245\n\t         * @param {string} password The password to derive from.                                                      // 7246\n\t         * @param {number} keySize The size in words of the key to generate.                                          // 7247\n\t         * @param {number} ivSize The size in words of the IV to generate.                                            // 7248\n\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n\t         *                                                                                                            // 7250\n\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.                                  // 7251\n\t         *                                                                                                            // 7252\n\t         * @static                                                                                                    // 7253\n\t         *                                                                                                            // 7254\n\t         * @example                                                                                                   // 7255\n\t         *                                                                                                            // 7256\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);                          // 7257\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');              // 7258\n\t         */                                                                                                           // 7259\n\t        execute: function (password, keySize, ivSize, salt) {                                                         // 7260\n\t            // Generate random salt                                                                                   // 7261\n\t            if (!salt) {                                                                                              // 7262\n\t                salt = WordArray.random(64/8);                                                                        // 7263\n\t            }                                                                                                         // 7264\n                                                                                                                       // 7265\n\t            // Derive key and IV                                                                                      // 7266\n\t            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);                           // 7267\n                                                                                                                       // 7268\n\t            // Separate key and IV                                                                                    // 7269\n\t            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);                                          // 7270\n\t            key.sigBytes = keySize * 4;                                                                               // 7271\n                                                                                                                       // 7272\n\t            // Return params                                                                                          // 7273\n\t            return CipherParams.create({ key: key, iv: iv, salt: salt });                                             // 7274\n\t        }                                                                                                             // 7275\n\t    };                                                                                                                // 7276\n                                                                                                                       // 7277\n\t    /**                                                                                                               // 7278\n\t     * A serializable cipher wrapper that derives the key from a password,                                            // 7279\n\t     * and returns ciphertext as a serializable cipher params object.                                                 // 7280\n\t     */                                                                                                               // 7281\n\t    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({                                 // 7282\n\t        /**                                                                                                           // 7283\n\t         * Configuration options.                                                                                     // 7284\n\t         *                                                                                                            // 7285\n\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n\t         */                                                                                                           // 7287\n\t        cfg: SerializableCipher.cfg.extend({                                                                          // 7288\n\t            kdf: OpenSSLKdf                                                                                           // 7289\n\t        }),                                                                                                           // 7290\n                                                                                                                       // 7291\n\t        /**                                                                                                           // 7292\n\t         * Encrypts a message using a password.                                                                       // 7293\n\t         *                                                                                                            // 7294\n\t         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7295\n\t         * @param {WordArray|string} message The message to encrypt.                                                  // 7296\n\t         * @param {string} password The password.                                                                     // 7297\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7298\n\t         *                                                                                                            // 7299\n\t         * @return {CipherParams} A cipher params object.                                                             // 7300\n\t         *                                                                                                            // 7301\n\t         * @static                                                                                                    // 7302\n\t         *                                                                                                            // 7303\n\t         * @example                                                                                                   // 7304\n\t         *                                                                                                            // 7305\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */                                                                                                           // 7308\n\t        encrypt: function (cipher, message, password, cfg) {                                                          // 7309\n\t            // Apply config defaults                                                                                  // 7310\n\t            cfg = this.cfg.extend(cfg);                                                                               // 7311\n                                                                                                                       // 7312\n\t            // Derive key and other params                                                                            // 7313\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);                             // 7314\n                                                                                                                       // 7315\n\t            // Add IV to config                                                                                       // 7316\n\t            cfg.iv = derivedParams.iv;                                                                                // 7317\n                                                                                                                       // 7318\n\t            // Encrypt                                                                                                // 7319\n\t            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);          // 7320\n                                                                                                                       // 7321\n\t            // Mix in derived params                                                                                  // 7322\n\t            ciphertext.mixIn(derivedParams);                                                                          // 7323\n                                                                                                                       // 7324\n\t            return ciphertext;                                                                                        // 7325\n\t        },                                                                                                            // 7326\n                                                                                                                       // 7327\n\t        /**                                                                                                           // 7328\n\t         * Decrypts serialized ciphertext using a password.                                                           // 7329\n\t         *                                                                                                            // 7330\n\t         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 7331\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.                                         // 7332\n\t         * @param {string} password The password.                                                                     // 7333\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 7334\n\t         *                                                                                                            // 7335\n\t         * @return {WordArray} The plaintext.                                                                         // 7336\n\t         *                                                                                                            // 7337\n\t         * @static                                                                                                    // 7338\n\t         *                                                                                                            // 7339\n\t         * @example                                                                                                   // 7340\n\t         *                                                                                                            // 7341\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */                                                                                                           // 7344\n\t        decrypt: function (cipher, ciphertext, password, cfg) {                                                       // 7345\n\t            // Apply config defaults                                                                                  // 7346\n\t            cfg = this.cfg.extend(cfg);                                                                               // 7347\n                                                                                                                       // 7348\n\t            // Convert string to CipherParams                                                                         // 7349\n\t            ciphertext = this._parse(ciphertext, cfg.format);                                                         // 7350\n                                                                                                                       // 7351\n\t            // Derive key and other params                                                                            // 7352\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);            // 7353\n                                                                                                                       // 7354\n\t            // Add IV to config                                                                                       // 7355\n\t            cfg.iv = derivedParams.iv;                                                                                // 7356\n                                                                                                                       // 7357\n\t            // Decrypt                                                                                                // 7358\n\t            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);        // 7359\n                                                                                                                       // 7360\n\t            return plaintext;                                                                                         // 7361\n\t        }                                                                                                             // 7362\n\t    });                                                                                                               // 7363\n\t}());                                                                                                                 // 7364\n                                                                                                                       // 7365\n                                                                                                                       // 7366\n}));                                                                                                                   // 7367\n},{\"./core\":51}],51:[function(require,module,exports){                                                                 // 7368\n;(function (root, factory) {                                                                                           // 7369\n\tif (typeof exports === \"object\") {                                                                                    // 7370\n\t\t// CommonJS                                                                                                          // 7371\n\t\tmodule.exports = exports = factory();                                                                                // 7372\n\t}                                                                                                                     // 7373\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 7374\n\t\t// AMD                                                                                                               // 7375\n\t\tdefine([], factory);                                                                                                 // 7376\n\t}                                                                                                                     // 7377\n\telse {                                                                                                                // 7378\n\t\t// Global (browser)                                                                                                  // 7379\n\t\troot.CryptoJS = factory();                                                                                           // 7380\n\t}                                                                                                                     // 7381\n}(this, function () {                                                                                                  // 7382\n                                                                                                                       // 7383\n\t/**                                                                                                                   // 7384\n\t * CryptoJS core components.                                                                                          // 7385\n\t */                                                                                                                   // 7386\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {                                                              // 7387\n\t    /**                                                                                                               // 7388\n\t     * CryptoJS namespace.                                                                                            // 7389\n\t     */                                                                                                               // 7390\n\t    var C = {};                                                                                                       // 7391\n                                                                                                                       // 7392\n\t    /**                                                                                                               // 7393\n\t     * Library namespace.                                                                                             // 7394\n\t     */                                                                                                               // 7395\n\t    var C_lib = C.lib = {};                                                                                           // 7396\n                                                                                                                       // 7397\n\t    /**                                                                                                               // 7398\n\t     * Base object for prototypal inheritance.                                                                        // 7399\n\t     */                                                                                                               // 7400\n\t    var Base = C_lib.Base = (function () {                                                                            // 7401\n\t        function F() {}                                                                                               // 7402\n                                                                                                                       // 7403\n\t        return {                                                                                                      // 7404\n\t            /**                                                                                                       // 7405\n\t             * Creates a new object that inherits from this object.                                                   // 7406\n\t             *                                                                                                        // 7407\n\t             * @param {Object} overrides Properties to copy into the new object.                                      // 7408\n\t             *                                                                                                        // 7409\n\t             * @return {Object} The new object.                                                                       // 7410\n\t             *                                                                                                        // 7411\n\t             * @static                                                                                                // 7412\n\t             *                                                                                                        // 7413\n\t             * @example                                                                                               // 7414\n\t             *                                                                                                        // 7415\n\t             *     var MyType = CryptoJS.lib.Base.extend({                                                            // 7416\n\t             *         field: 'value',                                                                                // 7417\n\t             *                                                                                                        // 7418\n\t             *         method: function () {                                                                          // 7419\n\t             *         }                                                                                              // 7420\n\t             *     });                                                                                                // 7421\n\t             */                                                                                                       // 7422\n\t            extend: function (overrides) {                                                                            // 7423\n\t                // Spawn                                                                                              // 7424\n\t                F.prototype = this;                                                                                   // 7425\n\t                var subtype = new F();                                                                                // 7426\n                                                                                                                       // 7427\n\t                // Augment                                                                                            // 7428\n\t                if (overrides) {                                                                                      // 7429\n\t                    subtype.mixIn(overrides);                                                                         // 7430\n\t                }                                                                                                     // 7431\n                                                                                                                       // 7432\n\t                // Create default initializer                                                                         // 7433\n\t                if (!subtype.hasOwnProperty('init')) {                                                                // 7434\n\t                    subtype.init = function () {                                                                      // 7435\n\t                        subtype.$super.init.apply(this, arguments);                                                   // 7436\n\t                    };                                                                                                // 7437\n\t                }                                                                                                     // 7438\n                                                                                                                       // 7439\n\t                // Initializer's prototype is the subtype object                                                      // 7440\n\t                subtype.init.prototype = subtype;                                                                     // 7441\n                                                                                                                       // 7442\n\t                // Reference supertype                                                                                // 7443\n\t                subtype.$super = this;                                                                                // 7444\n                                                                                                                       // 7445\n\t                return subtype;                                                                                       // 7446\n\t            },                                                                                                        // 7447\n                                                                                                                       // 7448\n\t            /**                                                                                                       // 7449\n\t             * Extends this object and runs the init method.                                                          // 7450\n\t             * Arguments to create() will be passed to init().                                                        // 7451\n\t             *                                                                                                        // 7452\n\t             * @return {Object} The new object.                                                                       // 7453\n\t             *                                                                                                        // 7454\n\t             * @static                                                                                                // 7455\n\t             *                                                                                                        // 7456\n\t             * @example                                                                                               // 7457\n\t             *                                                                                                        // 7458\n\t             *     var instance = MyType.create();                                                                    // 7459\n\t             */                                                                                                       // 7460\n\t            create: function () {                                                                                     // 7461\n\t                var instance = this.extend();                                                                         // 7462\n\t                instance.init.apply(instance, arguments);                                                             // 7463\n                                                                                                                       // 7464\n\t                return instance;                                                                                      // 7465\n\t            },                                                                                                        // 7466\n                                                                                                                       // 7467\n\t            /**                                                                                                       // 7468\n\t             * Initializes a newly created object.                                                                    // 7469\n\t             * Override this method to add some logic when your objects are created.                                  // 7470\n\t             *                                                                                                        // 7471\n\t             * @example                                                                                               // 7472\n\t             *                                                                                                        // 7473\n\t             *     var MyType = CryptoJS.lib.Base.extend({                                                            // 7474\n\t             *         init: function () {                                                                            // 7475\n\t             *             // ...                                                                                     // 7476\n\t             *         }                                                                                              // 7477\n\t             *     });                                                                                                // 7478\n\t             */                                                                                                       // 7479\n\t            init: function () {                                                                                       // 7480\n\t            },                                                                                                        // 7481\n                                                                                                                       // 7482\n\t            /**                                                                                                       // 7483\n\t             * Copies properties into this object.                                                                    // 7484\n\t             *                                                                                                        // 7485\n\t             * @param {Object} properties The properties to mix in.                                                   // 7486\n\t             *                                                                                                        // 7487\n\t             * @example                                                                                               // 7488\n\t             *                                                                                                        // 7489\n\t             *     MyType.mixIn({                                                                                     // 7490\n\t             *         field: 'value'                                                                                 // 7491\n\t             *     });                                                                                                // 7492\n\t             */                                                                                                       // 7493\n\t            mixIn: function (properties) {                                                                            // 7494\n\t                for (var propertyName in properties) {                                                                // 7495\n\t                    if (properties.hasOwnProperty(propertyName)) {                                                    // 7496\n\t                        this[propertyName] = properties[propertyName];                                                // 7497\n\t                    }                                                                                                 // 7498\n\t                }                                                                                                     // 7499\n                                                                                                                       // 7500\n\t                // IE won't copy toString using the loop above                                                        // 7501\n\t                if (properties.hasOwnProperty('toString')) {                                                          // 7502\n\t                    this.toString = properties.toString;                                                              // 7503\n\t                }                                                                                                     // 7504\n\t            },                                                                                                        // 7505\n                                                                                                                       // 7506\n\t            /**                                                                                                       // 7507\n\t             * Creates a copy of this object.                                                                         // 7508\n\t             *                                                                                                        // 7509\n\t             * @return {Object} The clone.                                                                            // 7510\n\t             *                                                                                                        // 7511\n\t             * @example                                                                                               // 7512\n\t             *                                                                                                        // 7513\n\t             *     var clone = instance.clone();                                                                      // 7514\n\t             */                                                                                                       // 7515\n\t            clone: function () {                                                                                      // 7516\n\t                return this.init.prototype.extend(this);                                                              // 7517\n\t            }                                                                                                         // 7518\n\t        };                                                                                                            // 7519\n\t    }());                                                                                                             // 7520\n                                                                                                                       // 7521\n\t    /**                                                                                                               // 7522\n\t     * An array of 32-bit words.                                                                                      // 7523\n\t     *                                                                                                                // 7524\n\t     * @property {Array} words The array of 32-bit words.                                                             // 7525\n\t     * @property {number} sigBytes The number of significant bytes in this word array.                                // 7526\n\t     */                                                                                                               // 7527\n\t    var WordArray = C_lib.WordArray = Base.extend({                                                                   // 7528\n\t        /**                                                                                                           // 7529\n\t         * Initializes a newly created word array.                                                                    // 7530\n\t         *                                                                                                            // 7531\n\t         * @param {Array} words (Optional) An array of 32-bit words.                                                  // 7532\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.                          // 7533\n\t         *                                                                                                            // 7534\n\t         * @example                                                                                                   // 7535\n\t         *                                                                                                            // 7536\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();                                                       // 7537\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);                               // 7538\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);                            // 7539\n\t         */                                                                                                           // 7540\n\t        init: function (words, sigBytes) {                                                                            // 7541\n\t            words = this.words = words || [];                                                                         // 7542\n                                                                                                                       // 7543\n\t            if (sigBytes != undefined) {                                                                              // 7544\n\t                this.sigBytes = sigBytes;                                                                             // 7545\n\t            } else {                                                                                                  // 7546\n\t                this.sigBytes = words.length * 4;                                                                     // 7547\n\t            }                                                                                                         // 7548\n\t        },                                                                                                            // 7549\n                                                                                                                       // 7550\n\t        /**                                                                                                           // 7551\n\t         * Converts this word array to a string.                                                                      // 7552\n\t         *                                                                                                            // 7553\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex                // 7554\n\t         *                                                                                                            // 7555\n\t         * @return {string} The stringified word array.                                                               // 7556\n\t         *                                                                                                            // 7557\n\t         * @example                                                                                                   // 7558\n\t         *                                                                                                            // 7559\n\t         *     var string = wordArray + '';                                                                           // 7560\n\t         *     var string = wordArray.toString();                                                                     // 7561\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);                                                    // 7562\n\t         */                                                                                                           // 7563\n\t        toString: function (encoder) {                                                                                // 7564\n\t            return (encoder || Hex).stringify(this);                                                                  // 7565\n\t        },                                                                                                            // 7566\n                                                                                                                       // 7567\n\t        /**                                                                                                           // 7568\n\t         * Concatenates a word array to this word array.                                                              // 7569\n\t         *                                                                                                            // 7570\n\t         * @param {WordArray} wordArray The word array to append.                                                     // 7571\n\t         *                                                                                                            // 7572\n\t         * @return {WordArray} This word array.                                                                       // 7573\n\t         *                                                                                                            // 7574\n\t         * @example                                                                                                   // 7575\n\t         *                                                                                                            // 7576\n\t         *     wordArray1.concat(wordArray2);                                                                         // 7577\n\t         */                                                                                                           // 7578\n\t        concat: function (wordArray) {                                                                                // 7579\n\t            // Shortcuts                                                                                              // 7580\n\t            var thisWords = this.words;                                                                               // 7581\n\t            var thatWords = wordArray.words;                                                                          // 7582\n\t            var thisSigBytes = this.sigBytes;                                                                         // 7583\n\t            var thatSigBytes = wordArray.sigBytes;                                                                    // 7584\n                                                                                                                       // 7585\n\t            // Clamp excess bits                                                                                      // 7586\n\t            this.clamp();                                                                                             // 7587\n                                                                                                                       // 7588\n\t            // Concat                                                                                                 // 7589\n\t            if (thisSigBytes % 4) {                                                                                   // 7590\n\t                // Copy one byte at a time                                                                            // 7591\n\t                for (var i = 0; i < thatSigBytes; i++) {                                                              // 7592\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                // 7593\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);           // 7594\n\t                }                                                                                                     // 7595\n\t            } else {                                                                                                  // 7596\n\t                // Copy one word at a time                                                                            // 7597\n\t                for (var i = 0; i < thatSigBytes; i += 4) {                                                           // 7598\n\t                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];                                         // 7599\n\t                }                                                                                                     // 7600\n\t            }                                                                                                         // 7601\n\t            this.sigBytes += thatSigBytes;                                                                            // 7602\n                                                                                                                       // 7603\n\t            // Chainable                                                                                              // 7604\n\t            return this;                                                                                              // 7605\n\t        },                                                                                                            // 7606\n                                                                                                                       // 7607\n\t        /**                                                                                                           // 7608\n\t         * Removes insignificant bits.                                                                                // 7609\n\t         *                                                                                                            // 7610\n\t         * @example                                                                                                   // 7611\n\t         *                                                                                                            // 7612\n\t         *     wordArray.clamp();                                                                                     // 7613\n\t         */                                                                                                           // 7614\n\t        clamp: function () {                                                                                          // 7615\n\t            // Shortcuts                                                                                              // 7616\n\t            var words = this.words;                                                                                   // 7617\n\t            var sigBytes = this.sigBytes;                                                                             // 7618\n                                                                                                                       // 7619\n\t            // Clamp                                                                                                  // 7620\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);                                         // 7621\n\t            words.length = Math.ceil(sigBytes / 4);                                                                   // 7622\n\t        },                                                                                                            // 7623\n                                                                                                                       // 7624\n\t        /**                                                                                                           // 7625\n\t         * Creates a copy of this word array.                                                                         // 7626\n\t         *                                                                                                            // 7627\n\t         * @return {WordArray} The clone.                                                                             // 7628\n\t         *                                                                                                            // 7629\n\t         * @example                                                                                                   // 7630\n\t         *                                                                                                            // 7631\n\t         *     var clone = wordArray.clone();                                                                         // 7632\n\t         */                                                                                                           // 7633\n\t        clone: function () {                                                                                          // 7634\n\t            var clone = Base.clone.call(this);                                                                        // 7635\n\t            clone.words = this.words.slice(0);                                                                        // 7636\n                                                                                                                       // 7637\n\t            return clone;                                                                                             // 7638\n\t        },                                                                                                            // 7639\n                                                                                                                       // 7640\n\t        /**                                                                                                           // 7641\n\t         * Creates a word array filled with random bytes.                                                             // 7642\n\t         *                                                                                                            // 7643\n\t         * @param {number} nBytes The number of random bytes to generate.                                             // 7644\n\t         *                                                                                                            // 7645\n\t         * @return {WordArray} The random word array.                                                                 // 7646\n\t         *                                                                                                            // 7647\n\t         * @static                                                                                                    // 7648\n\t         *                                                                                                            // 7649\n\t         * @example                                                                                                   // 7650\n\t         *                                                                                                            // 7651\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);                                                     // 7652\n\t         */                                                                                                           // 7653\n\t        random: function (nBytes) {                                                                                   // 7654\n\t            var words = [];                                                                                           // 7655\n                                                                                                                       // 7656\n\t            var r = (function (m_w) {                                                                                 // 7657\n\t                var m_w = m_w;                                                                                        // 7658\n\t                var m_z = 0x3ade68b1;                                                                                 // 7659\n\t                var mask = 0xffffffff;                                                                                // 7660\n                                                                                                                       // 7661\n\t                return function () {                                                                                  // 7662\n\t                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;                                           // 7663\n\t                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;                                           // 7664\n\t                    var result = ((m_z << 0x10) + m_w) & mask;                                                        // 7665\n\t                    result /= 0x100000000;                                                                            // 7666\n\t                    result += 0.5;                                                                                    // 7667\n\t                    return result * (Math.random() > .5 ? 1 : -1);                                                    // 7668\n\t                }                                                                                                     // 7669\n\t            });                                                                                                       // 7670\n                                                                                                                       // 7671\n\t            for (var i = 0, rcache; i < nBytes; i += 4) {                                                             // 7672\n\t                var _r = r((rcache || Math.random()) * 0x100000000);                                                  // 7673\n                                                                                                                       // 7674\n\t                rcache = _r() * 0x3ade67b7;                                                                           // 7675\n\t                words.push((_r() * 0x100000000) | 0);                                                                 // 7676\n\t            }                                                                                                         // 7677\n                                                                                                                       // 7678\n\t            return new WordArray.init(words, nBytes);                                                                 // 7679\n\t        }                                                                                                             // 7680\n\t    });                                                                                                               // 7681\n                                                                                                                       // 7682\n\t    /**                                                                                                               // 7683\n\t     * Encoder namespace.                                                                                             // 7684\n\t     */                                                                                                               // 7685\n\t    var C_enc = C.enc = {};                                                                                           // 7686\n                                                                                                                       // 7687\n\t    /**                                                                                                               // 7688\n\t     * Hex encoding strategy.                                                                                         // 7689\n\t     */                                                                                                               // 7690\n\t    var Hex = C_enc.Hex = {                                                                                           // 7691\n\t        /**                                                                                                           // 7692\n\t         * Converts a word array to a hex string.                                                                     // 7693\n\t         *                                                                                                            // 7694\n\t         * @param {WordArray} wordArray The word array.                                                               // 7695\n\t         *                                                                                                            // 7696\n\t         * @return {string} The hex string.                                                                           // 7697\n\t         *                                                                                                            // 7698\n\t         * @static                                                                                                    // 7699\n\t         *                                                                                                            // 7700\n\t         * @example                                                                                                   // 7701\n\t         *                                                                                                            // 7702\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);                                                 // 7703\n\t         */                                                                                                           // 7704\n\t        stringify: function (wordArray) {                                                                             // 7705\n\t            // Shortcuts                                                                                              // 7706\n\t            var words = wordArray.words;                                                                              // 7707\n\t            var sigBytes = wordArray.sigBytes;                                                                        // 7708\n                                                                                                                       // 7709\n\t            // Convert                                                                                                // 7710\n\t            var hexChars = [];                                                                                        // 7711\n\t            for (var i = 0; i < sigBytes; i++) {                                                                      // 7712\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                            // 7713\n\t                hexChars.push((bite >>> 4).toString(16));                                                             // 7714\n\t                hexChars.push((bite & 0x0f).toString(16));                                                            // 7715\n\t            }                                                                                                         // 7716\n                                                                                                                       // 7717\n\t            return hexChars.join('');                                                                                 // 7718\n\t        },                                                                                                            // 7719\n                                                                                                                       // 7720\n\t        /**                                                                                                           // 7721\n\t         * Converts a hex string to a word array.                                                                     // 7722\n\t         *                                                                                                            // 7723\n\t         * @param {string} hexStr The hex string.                                                                     // 7724\n\t         *                                                                                                            // 7725\n\t         * @return {WordArray} The word array.                                                                        // 7726\n\t         *                                                                                                            // 7727\n\t         * @static                                                                                                    // 7728\n\t         *                                                                                                            // 7729\n\t         * @example                                                                                                   // 7730\n\t         *                                                                                                            // 7731\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);                                                     // 7732\n\t         */                                                                                                           // 7733\n\t        parse: function (hexStr) {                                                                                    // 7734\n\t            // Shortcut                                                                                               // 7735\n\t            var hexStrLength = hexStr.length;                                                                         // 7736\n                                                                                                                       // 7737\n\t            // Convert                                                                                                // 7738\n\t            var words = [];                                                                                           // 7739\n\t            for (var i = 0; i < hexStrLength; i += 2) {                                                               // 7740\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);                            // 7741\n\t            }                                                                                                         // 7742\n                                                                                                                       // 7743\n\t            return new WordArray.init(words, hexStrLength / 2);                                                       // 7744\n\t        }                                                                                                             // 7745\n\t    };                                                                                                                // 7746\n                                                                                                                       // 7747\n\t    /**                                                                                                               // 7748\n\t     * Latin1 encoding strategy.                                                                                      // 7749\n\t     */                                                                                                               // 7750\n\t    var Latin1 = C_enc.Latin1 = {                                                                                     // 7751\n\t        /**                                                                                                           // 7752\n\t         * Converts a word array to a Latin1 string.                                                                  // 7753\n\t         *                                                                                                            // 7754\n\t         * @param {WordArray} wordArray The word array.                                                               // 7755\n\t         *                                                                                                            // 7756\n\t         * @return {string} The Latin1 string.                                                                        // 7757\n\t         *                                                                                                            // 7758\n\t         * @static                                                                                                    // 7759\n\t         *                                                                                                            // 7760\n\t         * @example                                                                                                   // 7761\n\t         *                                                                                                            // 7762\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);                                           // 7763\n\t         */                                                                                                           // 7764\n\t        stringify: function (wordArray) {                                                                             // 7765\n\t            // Shortcuts                                                                                              // 7766\n\t            var words = wordArray.words;                                                                              // 7767\n\t            var sigBytes = wordArray.sigBytes;                                                                        // 7768\n                                                                                                                       // 7769\n\t            // Convert                                                                                                // 7770\n\t            var latin1Chars = [];                                                                                     // 7771\n\t            for (var i = 0; i < sigBytes; i++) {                                                                      // 7772\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                            // 7773\n\t                latin1Chars.push(String.fromCharCode(bite));                                                          // 7774\n\t            }                                                                                                         // 7775\n                                                                                                                       // 7776\n\t            return latin1Chars.join('');                                                                              // 7777\n\t        },                                                                                                            // 7778\n                                                                                                                       // 7779\n\t        /**                                                                                                           // 7780\n\t         * Converts a Latin1 string to a word array.                                                                  // 7781\n\t         *                                                                                                            // 7782\n\t         * @param {string} latin1Str The Latin1 string.                                                               // 7783\n\t         *                                                                                                            // 7784\n\t         * @return {WordArray} The word array.                                                                        // 7785\n\t         *                                                                                                            // 7786\n\t         * @static                                                                                                    // 7787\n\t         *                                                                                                            // 7788\n\t         * @example                                                                                                   // 7789\n\t         *                                                                                                            // 7790\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);                                               // 7791\n\t         */                                                                                                           // 7792\n\t        parse: function (latin1Str) {                                                                                 // 7793\n\t            // Shortcut                                                                                               // 7794\n\t            var latin1StrLength = latin1Str.length;                                                                   // 7795\n                                                                                                                       // 7796\n\t            // Convert                                                                                                // 7797\n\t            var words = [];                                                                                           // 7798\n\t            for (var i = 0; i < latin1StrLength; i++) {                                                               // 7799\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);                             // 7800\n\t            }                                                                                                         // 7801\n                                                                                                                       // 7802\n\t            return new WordArray.init(words, latin1StrLength);                                                        // 7803\n\t        }                                                                                                             // 7804\n\t    };                                                                                                                // 7805\n                                                                                                                       // 7806\n\t    /**                                                                                                               // 7807\n\t     * UTF-8 encoding strategy.                                                                                       // 7808\n\t     */                                                                                                               // 7809\n\t    var Utf8 = C_enc.Utf8 = {                                                                                         // 7810\n\t        /**                                                                                                           // 7811\n\t         * Converts a word array to a UTF-8 string.                                                                   // 7812\n\t         *                                                                                                            // 7813\n\t         * @param {WordArray} wordArray The word array.                                                               // 7814\n\t         *                                                                                                            // 7815\n\t         * @return {string} The UTF-8 string.                                                                         // 7816\n\t         *                                                                                                            // 7817\n\t         * @static                                                                                                    // 7818\n\t         *                                                                                                            // 7819\n\t         * @example                                                                                                   // 7820\n\t         *                                                                                                            // 7821\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);                                               // 7822\n\t         */                                                                                                           // 7823\n\t        stringify: function (wordArray) {                                                                             // 7824\n\t            try {                                                                                                     // 7825\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));                                       // 7826\n\t            } catch (e) {                                                                                             // 7827\n\t                throw new Error('Malformed UTF-8 data');                                                              // 7828\n\t            }                                                                                                         // 7829\n\t        },                                                                                                            // 7830\n                                                                                                                       // 7831\n\t        /**                                                                                                           // 7832\n\t         * Converts a UTF-8 string to a word array.                                                                   // 7833\n\t         *                                                                                                            // 7834\n\t         * @param {string} utf8Str The UTF-8 string.                                                                  // 7835\n\t         *                                                                                                            // 7836\n\t         * @return {WordArray} The word array.                                                                        // 7837\n\t         *                                                                                                            // 7838\n\t         * @static                                                                                                    // 7839\n\t         *                                                                                                            // 7840\n\t         * @example                                                                                                   // 7841\n\t         *                                                                                                            // 7842\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);                                                   // 7843\n\t         */                                                                                                           // 7844\n\t        parse: function (utf8Str) {                                                                                   // 7845\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));                                               // 7846\n\t        }                                                                                                             // 7847\n\t    };                                                                                                                // 7848\n                                                                                                                       // 7849\n\t    /**                                                                                                               // 7850\n\t     * Abstract buffered block algorithm template.                                                                    // 7851\n\t     *                                                                                                                // 7852\n\t     * The property blockSize must be implemented in a concrete subtype.                                              // 7853\n\t     *                                                                                                                // 7854\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */                                                                                                               // 7856\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({                                         // 7857\n\t        /**                                                                                                           // 7858\n\t         * Resets this block algorithm's data buffer to its initial state.                                            // 7859\n\t         *                                                                                                            // 7860\n\t         * @example                                                                                                   // 7861\n\t         *                                                                                                            // 7862\n\t         *     bufferedBlockAlgorithm.reset();                                                                        // 7863\n\t         */                                                                                                           // 7864\n\t        reset: function () {                                                                                          // 7865\n\t            // Initial values                                                                                         // 7866\n\t            this._data = new WordArray.init();                                                                        // 7867\n\t            this._nDataBytes = 0;                                                                                     // 7868\n\t        },                                                                                                            // 7869\n                                                                                                                       // 7870\n\t        /**                                                                                                           // 7871\n\t         * Adds new data to this block algorithm's buffer.                                                            // 7872\n\t         *                                                                                                            // 7873\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.       // 7874\n\t         *                                                                                                            // 7875\n\t         * @example                                                                                                   // 7876\n\t         *                                                                                                            // 7877\n\t         *     bufferedBlockAlgorithm._append('data');                                                                // 7878\n\t         *     bufferedBlockAlgorithm._append(wordArray);                                                             // 7879\n\t         */                                                                                                           // 7880\n\t        _append: function (data) {                                                                                    // 7881\n\t            // Convert string to WordArray, else assume WordArray already                                             // 7882\n\t            if (typeof data == 'string') {                                                                            // 7883\n\t                data = Utf8.parse(data);                                                                              // 7884\n\t            }                                                                                                         // 7885\n                                                                                                                       // 7886\n\t            // Append                                                                                                 // 7887\n\t            this._data.concat(data);                                                                                  // 7888\n\t            this._nDataBytes += data.sigBytes;                                                                        // 7889\n\t        },                                                                                                            // 7890\n                                                                                                                       // 7891\n\t        /**                                                                                                           // 7892\n\t         * Processes available data blocks.                                                                           // 7893\n\t         *                                                                                                            // 7894\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.              // 7895\n\t         *                                                                                                            // 7896\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.                        // 7897\n\t         *                                                                                                            // 7898\n\t         * @return {WordArray} The processed data.                                                                    // 7899\n\t         *                                                                                                            // 7900\n\t         * @example                                                                                                   // 7901\n\t         *                                                                                                            // 7902\n\t         *     var processedData = bufferedBlockAlgorithm._process();                                                 // 7903\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');                                        // 7904\n\t         */                                                                                                           // 7905\n\t        _process: function (doFlush) {                                                                                // 7906\n\t            // Shortcuts                                                                                              // 7907\n\t            var data = this._data;                                                                                    // 7908\n\t            var dataWords = data.words;                                                                               // 7909\n\t            var dataSigBytes = data.sigBytes;                                                                         // 7910\n\t            var blockSize = this.blockSize;                                                                           // 7911\n\t            var blockSizeBytes = blockSize * 4;                                                                       // 7912\n                                                                                                                       // 7913\n\t            // Count blocks ready                                                                                     // 7914\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;                                                         // 7915\n\t            if (doFlush) {                                                                                            // 7916\n\t                // Round up to include partial blocks                                                                 // 7917\n\t                nBlocksReady = Math.ceil(nBlocksReady);                                                               // 7918\n\t            } else {                                                                                                  // 7919\n\t                // Round down to include only full blocks,                                                            // 7920\n\t                // less the number of blocks that must remain in the buffer                                           // 7921\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);                                 // 7922\n\t            }                                                                                                         // 7923\n                                                                                                                       // 7924\n\t            // Count words ready                                                                                      // 7925\n\t            var nWordsReady = nBlocksReady * blockSize;                                                               // 7926\n                                                                                                                       // 7927\n\t            // Count bytes ready                                                                                      // 7928\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);                                                // 7929\n                                                                                                                       // 7930\n\t            // Process blocks                                                                                         // 7931\n\t            if (nWordsReady) {                                                                                        // 7932\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {                                     // 7933\n\t                    // Perform concrete-algorithm logic                                                               // 7934\n\t                    this._doProcessBlock(dataWords, offset);                                                          // 7935\n\t                }                                                                                                     // 7936\n                                                                                                                       // 7937\n\t                // Remove processed words                                                                             // 7938\n\t                var processedWords = dataWords.splice(0, nWordsReady);                                                // 7939\n\t                data.sigBytes -= nBytesReady;                                                                         // 7940\n\t            }                                                                                                         // 7941\n                                                                                                                       // 7942\n\t            // Return processed words                                                                                 // 7943\n\t            return new WordArray.init(processedWords, nBytesReady);                                                   // 7944\n\t        },                                                                                                            // 7945\n                                                                                                                       // 7946\n\t        /**                                                                                                           // 7947\n\t         * Creates a copy of this object.                                                                             // 7948\n\t         *                                                                                                            // 7949\n\t         * @return {Object} The clone.                                                                                // 7950\n\t         *                                                                                                            // 7951\n\t         * @example                                                                                                   // 7952\n\t         *                                                                                                            // 7953\n\t         *     var clone = bufferedBlockAlgorithm.clone();                                                            // 7954\n\t         */                                                                                                           // 7955\n\t        clone: function () {                                                                                          // 7956\n\t            var clone = Base.clone.call(this);                                                                        // 7957\n\t            clone._data = this._data.clone();                                                                         // 7958\n                                                                                                                       // 7959\n\t            return clone;                                                                                             // 7960\n\t        },                                                                                                            // 7961\n                                                                                                                       // 7962\n\t        _minBufferSize: 0                                                                                             // 7963\n\t    });                                                                                                               // 7964\n                                                                                                                       // 7965\n\t    /**                                                                                                               // 7966\n\t     * Abstract hasher template.                                                                                      // 7967\n\t     *                                                                                                                // 7968\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)        // 7969\n\t     */                                                                                                               // 7970\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({                                                       // 7971\n\t        /**                                                                                                           // 7972\n\t         * Configuration options.                                                                                     // 7973\n\t         */                                                                                                           // 7974\n\t        cfg: Base.extend(),                                                                                           // 7975\n                                                                                                                       // 7976\n\t        /**                                                                                                           // 7977\n\t         * Initializes a newly created hasher.                                                                        // 7978\n\t         *                                                                                                            // 7979\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.                 // 7980\n\t         *                                                                                                            // 7981\n\t         * @example                                                                                                   // 7982\n\t         *                                                                                                            // 7983\n\t         *     var hasher = CryptoJS.algo.SHA256.create();                                                            // 7984\n\t         */                                                                                                           // 7985\n\t        init: function (cfg) {                                                                                        // 7986\n\t            // Apply config defaults                                                                                  // 7987\n\t            this.cfg = this.cfg.extend(cfg);                                                                          // 7988\n                                                                                                                       // 7989\n\t            // Set initial values                                                                                     // 7990\n\t            this.reset();                                                                                             // 7991\n\t        },                                                                                                            // 7992\n                                                                                                                       // 7993\n\t        /**                                                                                                           // 7994\n\t         * Resets this hasher to its initial state.                                                                   // 7995\n\t         *                                                                                                            // 7996\n\t         * @example                                                                                                   // 7997\n\t         *                                                                                                            // 7998\n\t         *     hasher.reset();                                                                                        // 7999\n\t         */                                                                                                           // 8000\n\t        reset: function () {                                                                                          // 8001\n\t            // Reset data buffer                                                                                      // 8002\n\t            BufferedBlockAlgorithm.reset.call(this);                                                                  // 8003\n                                                                                                                       // 8004\n\t            // Perform concrete-hasher logic                                                                          // 8005\n\t            this._doReset();                                                                                          // 8006\n\t        },                                                                                                            // 8007\n                                                                                                                       // 8008\n\t        /**                                                                                                           // 8009\n\t         * Updates this hasher with a message.                                                                        // 8010\n\t         *                                                                                                            // 8011\n\t         * @param {WordArray|string} messageUpdate The message to append.                                             // 8012\n\t         *                                                                                                            // 8013\n\t         * @return {Hasher} This hasher.                                                                              // 8014\n\t         *                                                                                                            // 8015\n\t         * @example                                                                                                   // 8016\n\t         *                                                                                                            // 8017\n\t         *     hasher.update('message');                                                                              // 8018\n\t         *     hasher.update(wordArray);                                                                              // 8019\n\t         */                                                                                                           // 8020\n\t        update: function (messageUpdate) {                                                                            // 8021\n\t            // Append                                                                                                 // 8022\n\t            this._append(messageUpdate);                                                                              // 8023\n                                                                                                                       // 8024\n\t            // Update the hash                                                                                        // 8025\n\t            this._process();                                                                                          // 8026\n                                                                                                                       // 8027\n\t            // Chainable                                                                                              // 8028\n\t            return this;                                                                                              // 8029\n\t        },                                                                                                            // 8030\n                                                                                                                       // 8031\n\t        /**                                                                                                           // 8032\n\t         * Finalizes the hash computation.                                                                            // 8033\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 8034\n\t         *                                                                                                            // 8035\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.                                 // 8036\n\t         *                                                                                                            // 8037\n\t         * @return {WordArray} The hash.                                                                              // 8038\n\t         *                                                                                                            // 8039\n\t         * @example                                                                                                   // 8040\n\t         *                                                                                                            // 8041\n\t         *     var hash = hasher.finalize();                                                                          // 8042\n\t         *     var hash = hasher.finalize('message');                                                                 // 8043\n\t         *     var hash = hasher.finalize(wordArray);                                                                 // 8044\n\t         */                                                                                                           // 8045\n\t        finalize: function (messageUpdate) {                                                                          // 8046\n\t            // Final message update                                                                                   // 8047\n\t            if (messageUpdate) {                                                                                      // 8048\n\t                this._append(messageUpdate);                                                                          // 8049\n\t            }                                                                                                         // 8050\n                                                                                                                       // 8051\n\t            // Perform concrete-hasher logic                                                                          // 8052\n\t            var hash = this._doFinalize();                                                                            // 8053\n                                                                                                                       // 8054\n\t            return hash;                                                                                              // 8055\n\t        },                                                                                                            // 8056\n                                                                                                                       // 8057\n\t        blockSize: 512/32,                                                                                            // 8058\n                                                                                                                       // 8059\n\t        /**                                                                                                           // 8060\n\t         * Creates a shortcut function to a hasher's object interface.                                                // 8061\n\t         *                                                                                                            // 8062\n\t         * @param {Hasher} hasher The hasher to create a helper for.                                                  // 8063\n\t         *                                                                                                            // 8064\n\t         * @return {Function} The shortcut function.                                                                  // 8065\n\t         *                                                                                                            // 8066\n\t         * @static                                                                                                    // 8067\n\t         *                                                                                                            // 8068\n\t         * @example                                                                                                   // 8069\n\t         *                                                                                                            // 8070\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);                                  // 8071\n\t         */                                                                                                           // 8072\n\t        _createHelper: function (hasher) {                                                                            // 8073\n\t            return function (message, cfg) {                                                                          // 8074\n\t                return new hasher.init(cfg).finalize(message);                                                        // 8075\n\t            };                                                                                                        // 8076\n\t        },                                                                                                            // 8077\n                                                                                                                       // 8078\n\t        /**                                                                                                           // 8079\n\t         * Creates a shortcut function to the HMAC's object interface.                                                // 8080\n\t         *                                                                                                            // 8081\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.                                              // 8082\n\t         *                                                                                                            // 8083\n\t         * @return {Function} The shortcut function.                                                                  // 8084\n\t         *                                                                                                            // 8085\n\t         * @static                                                                                                    // 8086\n\t         *                                                                                                            // 8087\n\t         * @example                                                                                                   // 8088\n\t         *                                                                                                            // 8089\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);                          // 8090\n\t         */                                                                                                           // 8091\n\t        _createHmacHelper: function (hasher) {                                                                        // 8092\n\t            return function (message, key) {                                                                          // 8093\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);                                           // 8094\n\t            };                                                                                                        // 8095\n\t        }                                                                                                             // 8096\n\t    });                                                                                                               // 8097\n                                                                                                                       // 8098\n\t    /**                                                                                                               // 8099\n\t     * Algorithm namespace.                                                                                           // 8100\n\t     */                                                                                                               // 8101\n\t    var C_algo = C.algo = {};                                                                                         // 8102\n                                                                                                                       // 8103\n\t    return C;                                                                                                         // 8104\n\t}(Math));                                                                                                             // 8105\n                                                                                                                       // 8106\n                                                                                                                       // 8107\n\treturn CryptoJS;                                                                                                      // 8108\n                                                                                                                       // 8109\n}));                                                                                                                   // 8110\n},{}],52:[function(require,module,exports){                                                                            // 8111\n;(function (root, factory) {                                                                                           // 8112\n\tif (typeof exports === \"object\") {                                                                                    // 8113\n\t\t// CommonJS                                                                                                          // 8114\n\t\tmodule.exports = exports = factory(require(\"./core\"));                                                               // 8115\n\t}                                                                                                                     // 8116\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 8117\n\t\t// AMD                                                                                                               // 8118\n\t\tdefine([\"./core\"], factory);                                                                                         // 8119\n\t}                                                                                                                     // 8120\n\telse {                                                                                                                // 8121\n\t\t// Global (browser)                                                                                                  // 8122\n\t\tfactory(root.CryptoJS);                                                                                              // 8123\n\t}                                                                                                                     // 8124\n}(this, function (CryptoJS) {                                                                                          // 8125\n                                                                                                                       // 8126\n\t(function () {                                                                                                        // 8127\n\t    // Shortcuts                                                                                                      // 8128\n\t    var C = CryptoJS;                                                                                                 // 8129\n\t    var C_lib = C.lib;                                                                                                // 8130\n\t    var WordArray = C_lib.WordArray;                                                                                  // 8131\n\t    var C_enc = C.enc;                                                                                                // 8132\n                                                                                                                       // 8133\n\t    /**                                                                                                               // 8134\n\t     * Base64 encoding strategy.                                                                                      // 8135\n\t     */                                                                                                               // 8136\n\t    var Base64 = C_enc.Base64 = {                                                                                     // 8137\n\t        /**                                                                                                           // 8138\n\t         * Converts a word array to a Base64 string.                                                                  // 8139\n\t         *                                                                                                            // 8140\n\t         * @param {WordArray} wordArray The word array.                                                               // 8141\n\t         *                                                                                                            // 8142\n\t         * @return {string} The Base64 string.                                                                        // 8143\n\t         *                                                                                                            // 8144\n\t         * @static                                                                                                    // 8145\n\t         *                                                                                                            // 8146\n\t         * @example                                                                                                   // 8147\n\t         *                                                                                                            // 8148\n\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);                                           // 8149\n\t         */                                                                                                           // 8150\n\t        stringify: function (wordArray) {                                                                             // 8151\n\t            // Shortcuts                                                                                              // 8152\n\t            var words = wordArray.words;                                                                              // 8153\n\t            var sigBytes = wordArray.sigBytes;                                                                        // 8154\n\t            var map = this._map;                                                                                      // 8155\n                                                                                                                       // 8156\n\t            // Clamp excess bits                                                                                      // 8157\n\t            wordArray.clamp();                                                                                        // 8158\n                                                                                                                       // 8159\n\t            // Convert                                                                                                // 8160\n\t            var base64Chars = [];                                                                                     // 8161\n\t            for (var i = 0; i < sigBytes; i += 3) {                                                                   // 8162\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;                               // 8163\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;                               // 8164\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;                               // 8165\n                                                                                                                       // 8166\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;                                                   // 8167\n                                                                                                                       // 8168\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {                                          // 8169\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));                                 // 8170\n\t                }                                                                                                     // 8171\n\t            }                                                                                                         // 8172\n                                                                                                                       // 8173\n\t            // Add padding                                                                                            // 8174\n\t            var paddingChar = map.charAt(64);                                                                         // 8175\n\t            if (paddingChar) {                                                                                        // 8176\n\t                while (base64Chars.length % 4) {                                                                      // 8177\n\t                    base64Chars.push(paddingChar);                                                                    // 8178\n\t                }                                                                                                     // 8179\n\t            }                                                                                                         // 8180\n                                                                                                                       // 8181\n\t            return base64Chars.join('');                                                                              // 8182\n\t        },                                                                                                            // 8183\n                                                                                                                       // 8184\n\t        /**                                                                                                           // 8185\n\t         * Converts a Base64 string to a word array.                                                                  // 8186\n\t         *                                                                                                            // 8187\n\t         * @param {string} base64Str The Base64 string.                                                               // 8188\n\t         *                                                                                                            // 8189\n\t         * @return {WordArray} The word array.                                                                        // 8190\n\t         *                                                                                                            // 8191\n\t         * @static                                                                                                    // 8192\n\t         *                                                                                                            // 8193\n\t         * @example                                                                                                   // 8194\n\t         *                                                                                                            // 8195\n\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);                                               // 8196\n\t         */                                                                                                           // 8197\n\t        parse: function (base64Str) {                                                                                 // 8198\n\t            // Shortcuts                                                                                              // 8199\n\t            var base64StrLength = base64Str.length;                                                                   // 8200\n\t            var map = this._map;                                                                                      // 8201\n                                                                                                                       // 8202\n\t            // Ignore padding                                                                                         // 8203\n\t            var paddingChar = map.charAt(64);                                                                         // 8204\n\t            if (paddingChar) {                                                                                        // 8205\n\t                var paddingIndex = base64Str.indexOf(paddingChar);                                                    // 8206\n\t                if (paddingIndex != -1) {                                                                             // 8207\n\t                    base64StrLength = paddingIndex;                                                                   // 8208\n\t                }                                                                                                     // 8209\n\t            }                                                                                                         // 8210\n                                                                                                                       // 8211\n\t            // Convert                                                                                                // 8212\n\t            var words = [];                                                                                           // 8213\n\t            var nBytes = 0;                                                                                           // 8214\n\t            for (var i = 0; i < base64StrLength; i++) {                                                               // 8215\n\t                if (i % 4) {                                                                                          // 8216\n\t                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);                                // 8217\n\t                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);                               // 8218\n\t                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);                                // 8219\n\t                    nBytes++;                                                                                         // 8220\n\t                }                                                                                                     // 8221\n\t            }                                                                                                         // 8222\n                                                                                                                       // 8223\n\t            return WordArray.create(words, nBytes);                                                                   // 8224\n\t        },                                                                                                            // 8225\n                                                                                                                       // 8226\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='                                     // 8227\n\t    };                                                                                                                // 8228\n\t}());                                                                                                                 // 8229\n                                                                                                                       // 8230\n                                                                                                                       // 8231\n\treturn CryptoJS.enc.Base64;                                                                                           // 8232\n                                                                                                                       // 8233\n}));                                                                                                                   // 8234\n},{\"./core\":51}],53:[function(require,module,exports){                                                                 // 8235\n;(function (root, factory) {                                                                                           // 8236\n\tif (typeof exports === \"object\") {                                                                                    // 8237\n\t\t// CommonJS                                                                                                          // 8238\n\t\tmodule.exports = exports = factory(require(\"./core\"));                                                               // 8239\n\t}                                                                                                                     // 8240\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 8241\n\t\t// AMD                                                                                                               // 8242\n\t\tdefine([\"./core\"], factory);                                                                                         // 8243\n\t}                                                                                                                     // 8244\n\telse {                                                                                                                // 8245\n\t\t// Global (browser)                                                                                                  // 8246\n\t\tfactory(root.CryptoJS);                                                                                              // 8247\n\t}                                                                                                                     // 8248\n}(this, function (CryptoJS) {                                                                                          // 8249\n                                                                                                                       // 8250\n\t(function () {                                                                                                        // 8251\n\t    // Shortcuts                                                                                                      // 8252\n\t    var C = CryptoJS;                                                                                                 // 8253\n\t    var C_lib = C.lib;                                                                                                // 8254\n\t    var WordArray = C_lib.WordArray;                                                                                  // 8255\n\t    var C_enc = C.enc;                                                                                                // 8256\n                                                                                                                       // 8257\n\t    /**                                                                                                               // 8258\n\t     * UTF-16 BE encoding strategy.                                                                                   // 8259\n\t     */                                                                                                               // 8260\n\t    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {                                                                     // 8261\n\t        /**                                                                                                           // 8262\n\t         * Converts a word array to a UTF-16 BE string.                                                               // 8263\n\t         *                                                                                                            // 8264\n\t         * @param {WordArray} wordArray The word array.                                                               // 8265\n\t         *                                                                                                            // 8266\n\t         * @return {string} The UTF-16 BE string.                                                                     // 8267\n\t         *                                                                                                            // 8268\n\t         * @static                                                                                                    // 8269\n\t         *                                                                                                            // 8270\n\t         * @example                                                                                                   // 8271\n\t         *                                                                                                            // 8272\n\t         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);                                             // 8273\n\t         */                                                                                                           // 8274\n\t        stringify: function (wordArray) {                                                                             // 8275\n\t            // Shortcuts                                                                                              // 8276\n\t            var words = wordArray.words;                                                                              // 8277\n\t            var sigBytes = wordArray.sigBytes;                                                                        // 8278\n                                                                                                                       // 8279\n\t            // Convert                                                                                                // 8280\n\t            var utf16Chars = [];                                                                                      // 8281\n\t            for (var i = 0; i < sigBytes; i += 2) {                                                                   // 8282\n\t                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;                                     // 8283\n\t                utf16Chars.push(String.fromCharCode(codePoint));                                                      // 8284\n\t            }                                                                                                         // 8285\n                                                                                                                       // 8286\n\t            return utf16Chars.join('');                                                                               // 8287\n\t        },                                                                                                            // 8288\n                                                                                                                       // 8289\n\t        /**                                                                                                           // 8290\n\t         * Converts a UTF-16 BE string to a word array.                                                               // 8291\n\t         *                                                                                                            // 8292\n\t         * @param {string} utf16Str The UTF-16 BE string.                                                             // 8293\n\t         *                                                                                                            // 8294\n\t         * @return {WordArray} The word array.                                                                        // 8295\n\t         *                                                                                                            // 8296\n\t         * @static                                                                                                    // 8297\n\t         *                                                                                                            // 8298\n\t         * @example                                                                                                   // 8299\n\t         *                                                                                                            // 8300\n\t         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);                                                 // 8301\n\t         */                                                                                                           // 8302\n\t        parse: function (utf16Str) {                                                                                  // 8303\n\t            // Shortcut                                                                                               // 8304\n\t            var utf16StrLength = utf16Str.length;                                                                     // 8305\n                                                                                                                       // 8306\n\t            // Convert                                                                                                // 8307\n\t            var words = [];                                                                                           // 8308\n\t            for (var i = 0; i < utf16StrLength; i++) {                                                                // 8309\n\t                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);                                      // 8310\n\t            }                                                                                                         // 8311\n                                                                                                                       // 8312\n\t            return WordArray.create(words, utf16StrLength * 2);                                                       // 8313\n\t        }                                                                                                             // 8314\n\t    };                                                                                                                // 8315\n                                                                                                                       // 8316\n\t    /**                                                                                                               // 8317\n\t     * UTF-16 LE encoding strategy.                                                                                   // 8318\n\t     */                                                                                                               // 8319\n\t    C_enc.Utf16LE = {                                                                                                 // 8320\n\t        /**                                                                                                           // 8321\n\t         * Converts a word array to a UTF-16 LE string.                                                               // 8322\n\t         *                                                                                                            // 8323\n\t         * @param {WordArray} wordArray The word array.                                                               // 8324\n\t         *                                                                                                            // 8325\n\t         * @return {string} The UTF-16 LE string.                                                                     // 8326\n\t         *                                                                                                            // 8327\n\t         * @static                                                                                                    // 8328\n\t         *                                                                                                            // 8329\n\t         * @example                                                                                                   // 8330\n\t         *                                                                                                            // 8331\n\t         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);                                              // 8332\n\t         */                                                                                                           // 8333\n\t        stringify: function (wordArray) {                                                                             // 8334\n\t            // Shortcuts                                                                                              // 8335\n\t            var words = wordArray.words;                                                                              // 8336\n\t            var sigBytes = wordArray.sigBytes;                                                                        // 8337\n                                                                                                                       // 8338\n\t            // Convert                                                                                                // 8339\n\t            var utf16Chars = [];                                                                                      // 8340\n\t            for (var i = 0; i < sigBytes; i += 2) {                                                                   // 8341\n\t                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);                         // 8342\n\t                utf16Chars.push(String.fromCharCode(codePoint));                                                      // 8343\n\t            }                                                                                                         // 8344\n                                                                                                                       // 8345\n\t            return utf16Chars.join('');                                                                               // 8346\n\t        },                                                                                                            // 8347\n                                                                                                                       // 8348\n\t        /**                                                                                                           // 8349\n\t         * Converts a UTF-16 LE string to a word array.                                                               // 8350\n\t         *                                                                                                            // 8351\n\t         * @param {string} utf16Str The UTF-16 LE string.                                                             // 8352\n\t         *                                                                                                            // 8353\n\t         * @return {WordArray} The word array.                                                                        // 8354\n\t         *                                                                                                            // 8355\n\t         * @static                                                                                                    // 8356\n\t         *                                                                                                            // 8357\n\t         * @example                                                                                                   // 8358\n\t         *                                                                                                            // 8359\n\t         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);                                                  // 8360\n\t         */                                                                                                           // 8361\n\t        parse: function (utf16Str) {                                                                                  // 8362\n\t            // Shortcut                                                                                               // 8363\n\t            var utf16StrLength = utf16Str.length;                                                                     // 8364\n                                                                                                                       // 8365\n\t            // Convert                                                                                                // 8366\n\t            var words = [];                                                                                           // 8367\n\t            for (var i = 0; i < utf16StrLength; i++) {                                                                // 8368\n\t                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));                          // 8369\n\t            }                                                                                                         // 8370\n                                                                                                                       // 8371\n\t            return WordArray.create(words, utf16StrLength * 2);                                                       // 8372\n\t        }                                                                                                             // 8373\n\t    };                                                                                                                // 8374\n                                                                                                                       // 8375\n\t    function swapEndian(word) {                                                                                       // 8376\n\t        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);                                              // 8377\n\t    }                                                                                                                 // 8378\n\t}());                                                                                                                 // 8379\n                                                                                                                       // 8380\n                                                                                                                       // 8381\n\treturn CryptoJS.enc.Utf16;                                                                                            // 8382\n                                                                                                                       // 8383\n}));                                                                                                                   // 8384\n},{\"./core\":51}],54:[function(require,module,exports){                                                                 // 8385\n;(function (root, factory, undef) {                                                                                    // 8386\n\tif (typeof exports === \"object\") {                                                                                    // 8387\n\t\t// CommonJS                                                                                                          // 8388\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));                         // 8389\n\t}                                                                                                                     // 8390\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 8391\n\t\t// AMD                                                                                                               // 8392\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);                                                                     // 8393\n\t}                                                                                                                     // 8394\n\telse {                                                                                                                // 8395\n\t\t// Global (browser)                                                                                                  // 8396\n\t\tfactory(root.CryptoJS);                                                                                              // 8397\n\t}                                                                                                                     // 8398\n}(this, function (CryptoJS) {                                                                                          // 8399\n                                                                                                                       // 8400\n\t(function () {                                                                                                        // 8401\n\t    // Shortcuts                                                                                                      // 8402\n\t    var C = CryptoJS;                                                                                                 // 8403\n\t    var C_lib = C.lib;                                                                                                // 8404\n\t    var Base = C_lib.Base;                                                                                            // 8405\n\t    var WordArray = C_lib.WordArray;                                                                                  // 8406\n\t    var C_algo = C.algo;                                                                                              // 8407\n\t    var MD5 = C_algo.MD5;                                                                                             // 8408\n                                                                                                                       // 8409\n\t    /**                                                                                                               // 8410\n\t     * This key derivation function is meant to conform with EVP_BytesToKey.                                          // 8411\n\t     * www.openssl.org/docs/crypto/EVP_BytesToKey.html                                                                // 8412\n\t     */                                                                                                               // 8413\n\t    var EvpKDF = C_algo.EvpKDF = Base.extend({                                                                        // 8414\n\t        /**                                                                                                           // 8415\n\t         * Configuration options.                                                                                     // 8416\n\t         *                                                                                                            // 8417\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)                        // 8418\n\t         * @property {Hasher} hasher The hash algorithm to use. Default: MD5                                          // 8419\n\t         * @property {number} iterations The number of iterations to perform. Default: 1                              // 8420\n\t         */                                                                                                           // 8421\n\t        cfg: Base.extend({                                                                                            // 8422\n\t            keySize: 128/32,                                                                                          // 8423\n\t            hasher: MD5,                                                                                              // 8424\n\t            iterations: 1                                                                                             // 8425\n\t        }),                                                                                                           // 8426\n                                                                                                                       // 8427\n\t        /**                                                                                                           // 8428\n\t         * Initializes a newly created key derivation function.                                                       // 8429\n\t         *                                                                                                            // 8430\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.                        // 8431\n\t         *                                                                                                            // 8432\n\t         * @example                                                                                                   // 8433\n\t         *                                                                                                            // 8434\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create();                                                               // 8435\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });                                                 // 8436\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });                               // 8437\n\t         */                                                                                                           // 8438\n\t        init: function (cfg) {                                                                                        // 8439\n\t            this.cfg = this.cfg.extend(cfg);                                                                          // 8440\n\t        },                                                                                                            // 8441\n                                                                                                                       // 8442\n\t        /**                                                                                                           // 8443\n\t         * Derives a key from a password.                                                                             // 8444\n\t         *                                                                                                            // 8445\n\t         * @param {WordArray|string} password The password.                                                           // 8446\n\t         * @param {WordArray|string} salt A salt.                                                                     // 8447\n\t         *                                                                                                            // 8448\n\t         * @return {WordArray} The derived key.                                                                       // 8449\n\t         *                                                                                                            // 8450\n\t         * @example                                                                                                   // 8451\n\t         *                                                                                                            // 8452\n\t         *     var key = kdf.compute(password, salt);                                                                 // 8453\n\t         */                                                                                                           // 8454\n\t        compute: function (password, salt) {                                                                          // 8455\n\t            // Shortcut                                                                                               // 8456\n\t            var cfg = this.cfg;                                                                                       // 8457\n                                                                                                                       // 8458\n\t            // Init hasher                                                                                            // 8459\n\t            var hasher = cfg.hasher.create();                                                                         // 8460\n                                                                                                                       // 8461\n\t            // Initial values                                                                                         // 8462\n\t            var derivedKey = WordArray.create();                                                                      // 8463\n                                                                                                                       // 8464\n\t            // Shortcuts                                                                                              // 8465\n\t            var derivedKeyWords = derivedKey.words;                                                                   // 8466\n\t            var keySize = cfg.keySize;                                                                                // 8467\n\t            var iterations = cfg.iterations;                                                                          // 8468\n                                                                                                                       // 8469\n\t            // Generate key                                                                                           // 8470\n\t            while (derivedKeyWords.length < keySize) {                                                                // 8471\n\t                if (block) {                                                                                          // 8472\n\t                    hasher.update(block);                                                                             // 8473\n\t                }                                                                                                     // 8474\n\t                var block = hasher.update(password).finalize(salt);                                                   // 8475\n\t                hasher.reset();                                                                                       // 8476\n                                                                                                                       // 8477\n\t                // Iterations                                                                                         // 8478\n\t                for (var i = 1; i < iterations; i++) {                                                                // 8479\n\t                    block = hasher.finalize(block);                                                                   // 8480\n\t                    hasher.reset();                                                                                   // 8481\n\t                }                                                                                                     // 8482\n                                                                                                                       // 8483\n\t                derivedKey.concat(block);                                                                             // 8484\n\t            }                                                                                                         // 8485\n\t            derivedKey.sigBytes = keySize * 4;                                                                        // 8486\n                                                                                                                       // 8487\n\t            return derivedKey;                                                                                        // 8488\n\t        }                                                                                                             // 8489\n\t    });                                                                                                               // 8490\n                                                                                                                       // 8491\n\t    /**                                                                                                               // 8492\n\t     * Derives a key from a password.                                                                                 // 8493\n\t     *                                                                                                                // 8494\n\t     * @param {WordArray|string} password The password.                                                               // 8495\n\t     * @param {WordArray|string} salt A salt.                                                                         // 8496\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.                          // 8497\n\t     *                                                                                                                // 8498\n\t     * @return {WordArray} The derived key.                                                                           // 8499\n\t     *                                                                                                                // 8500\n\t     * @static                                                                                                        // 8501\n\t     *                                                                                                                // 8502\n\t     * @example                                                                                                       // 8503\n\t     *                                                                                                                // 8504\n\t     *     var key = CryptoJS.EvpKDF(password, salt);                                                                 // 8505\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });                                                 // 8506\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });                               // 8507\n\t     */                                                                                                               // 8508\n\t    C.EvpKDF = function (password, salt, cfg) {                                                                       // 8509\n\t        return EvpKDF.create(cfg).compute(password, salt);                                                            // 8510\n\t    };                                                                                                                // 8511\n\t}());                                                                                                                 // 8512\n                                                                                                                       // 8513\n                                                                                                                       // 8514\n\treturn CryptoJS.EvpKDF;                                                                                               // 8515\n                                                                                                                       // 8516\n}));                                                                                                                   // 8517\n},{\"./core\":51,\"./hmac\":56,\"./sha1\":75}],55:[function(require,module,exports){                                         // 8518\n;(function (root, factory, undef) {                                                                                    // 8519\n\tif (typeof exports === \"object\") {                                                                                    // 8520\n\t\t// CommonJS                                                                                                          // 8521\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 8522\n\t}                                                                                                                     // 8523\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 8524\n\t\t// AMD                                                                                                               // 8525\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 8526\n\t}                                                                                                                     // 8527\n\telse {                                                                                                                // 8528\n\t\t// Global (browser)                                                                                                  // 8529\n\t\tfactory(root.CryptoJS);                                                                                              // 8530\n\t}                                                                                                                     // 8531\n}(this, function (CryptoJS) {                                                                                          // 8532\n                                                                                                                       // 8533\n\t(function (undefined) {                                                                                               // 8534\n\t    // Shortcuts                                                                                                      // 8535\n\t    var C = CryptoJS;                                                                                                 // 8536\n\t    var C_lib = C.lib;                                                                                                // 8537\n\t    var CipherParams = C_lib.CipherParams;                                                                            // 8538\n\t    var C_enc = C.enc;                                                                                                // 8539\n\t    var Hex = C_enc.Hex;                                                                                              // 8540\n\t    var C_format = C.format;                                                                                          // 8541\n                                                                                                                       // 8542\n\t    var HexFormatter = C_format.Hex = {                                                                               // 8543\n\t        /**                                                                                                           // 8544\n\t         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.                       // 8545\n\t         *                                                                                                            // 8546\n\t         * @param {CipherParams} cipherParams The cipher params object.                                               // 8547\n\t         *                                                                                                            // 8548\n\t         * @return {string} The hexadecimally encoded string.                                                         // 8549\n\t         *                                                                                                            // 8550\n\t         * @static                                                                                                    // 8551\n\t         *                                                                                                            // 8552\n\t         * @example                                                                                                   // 8553\n\t         *                                                                                                            // 8554\n\t         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);                                           // 8555\n\t         */                                                                                                           // 8556\n\t        stringify: function (cipherParams) {                                                                          // 8557\n\t            return cipherParams.ciphertext.toString(Hex);                                                             // 8558\n\t        },                                                                                                            // 8559\n                                                                                                                       // 8560\n\t        /**                                                                                                           // 8561\n\t         * Converts a hexadecimally encoded ciphertext string to a cipher params object.                              // 8562\n\t         *                                                                                                            // 8563\n\t         * @param {string} input The hexadecimally encoded string.                                                    // 8564\n\t         *                                                                                                            // 8565\n\t         * @return {CipherParams} The cipher params object.                                                           // 8566\n\t         *                                                                                                            // 8567\n\t         * @static                                                                                                    // 8568\n\t         *                                                                                                            // 8569\n\t         * @example                                                                                                   // 8570\n\t         *                                                                                                            // 8571\n\t         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);                                               // 8572\n\t         */                                                                                                           // 8573\n\t        parse: function (input) {                                                                                     // 8574\n\t            var ciphertext = Hex.parse(input);                                                                        // 8575\n\t            return CipherParams.create({ ciphertext: ciphertext });                                                   // 8576\n\t        }                                                                                                             // 8577\n\t    };                                                                                                                // 8578\n\t}());                                                                                                                 // 8579\n                                                                                                                       // 8580\n                                                                                                                       // 8581\n\treturn CryptoJS.format.Hex;                                                                                           // 8582\n                                                                                                                       // 8583\n}));                                                                                                                   // 8584\n},{\"./cipher-core\":50,\"./core\":51}],56:[function(require,module,exports){                                              // 8585\n;(function (root, factory) {                                                                                           // 8586\n\tif (typeof exports === \"object\") {                                                                                    // 8587\n\t\t// CommonJS                                                                                                          // 8588\n\t\tmodule.exports = exports = factory(require(\"./core\"));                                                               // 8589\n\t}                                                                                                                     // 8590\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 8591\n\t\t// AMD                                                                                                               // 8592\n\t\tdefine([\"./core\"], factory);                                                                                         // 8593\n\t}                                                                                                                     // 8594\n\telse {                                                                                                                // 8595\n\t\t// Global (browser)                                                                                                  // 8596\n\t\tfactory(root.CryptoJS);                                                                                              // 8597\n\t}                                                                                                                     // 8598\n}(this, function (CryptoJS) {                                                                                          // 8599\n                                                                                                                       // 8600\n\t(function () {                                                                                                        // 8601\n\t    // Shortcuts                                                                                                      // 8602\n\t    var C = CryptoJS;                                                                                                 // 8603\n\t    var C_lib = C.lib;                                                                                                // 8604\n\t    var Base = C_lib.Base;                                                                                            // 8605\n\t    var C_enc = C.enc;                                                                                                // 8606\n\t    var Utf8 = C_enc.Utf8;                                                                                            // 8607\n\t    var C_algo = C.algo;                                                                                              // 8608\n                                                                                                                       // 8609\n\t    /**                                                                                                               // 8610\n\t     * HMAC algorithm.                                                                                                // 8611\n\t     */                                                                                                               // 8612\n\t    var HMAC = C_algo.HMAC = Base.extend({                                                                            // 8613\n\t        /**                                                                                                           // 8614\n\t         * Initializes a newly created HMAC.                                                                          // 8615\n\t         *                                                                                                            // 8616\n\t         * @param {Hasher} hasher The hash algorithm to use.                                                          // 8617\n\t         * @param {WordArray|string} key The secret key.                                                              // 8618\n\t         *                                                                                                            // 8619\n\t         * @example                                                                                                   // 8620\n\t         *                                                                                                            // 8621\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);                                 // 8622\n\t         */                                                                                                           // 8623\n\t        init: function (hasher, key) {                                                                                // 8624\n\t            // Init hasher                                                                                            // 8625\n\t            hasher = this._hasher = new hasher.init();                                                                // 8626\n                                                                                                                       // 8627\n\t            // Convert string to WordArray, else assume WordArray already                                             // 8628\n\t            if (typeof key == 'string') {                                                                             // 8629\n\t                key = Utf8.parse(key);                                                                                // 8630\n\t            }                                                                                                         // 8631\n                                                                                                                       // 8632\n\t            // Shortcuts                                                                                              // 8633\n\t            var hasherBlockSize = hasher.blockSize;                                                                   // 8634\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;                                                           // 8635\n                                                                                                                       // 8636\n\t            // Allow arbitrary length keys                                                                            // 8637\n\t            if (key.sigBytes > hasherBlockSizeBytes) {                                                                // 8638\n\t                key = hasher.finalize(key);                                                                           // 8639\n\t            }                                                                                                         // 8640\n                                                                                                                       // 8641\n\t            // Clamp excess bits                                                                                      // 8642\n\t            key.clamp();                                                                                              // 8643\n                                                                                                                       // 8644\n\t            // Clone key for inner and outer pads                                                                     // 8645\n\t            var oKey = this._oKey = key.clone();                                                                      // 8646\n\t            var iKey = this._iKey = key.clone();                                                                      // 8647\n                                                                                                                       // 8648\n\t            // Shortcuts                                                                                              // 8649\n\t            var oKeyWords = oKey.words;                                                                               // 8650\n\t            var iKeyWords = iKey.words;                                                                               // 8651\n                                                                                                                       // 8652\n\t            // XOR keys with pad constants                                                                            // 8653\n\t            for (var i = 0; i < hasherBlockSize; i++) {                                                               // 8654\n\t                oKeyWords[i] ^= 0x5c5c5c5c;                                                                           // 8655\n\t                iKeyWords[i] ^= 0x36363636;                                                                           // 8656\n\t            }                                                                                                         // 8657\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;                                                     // 8658\n                                                                                                                       // 8659\n\t            // Set initial values                                                                                     // 8660\n\t            this.reset();                                                                                             // 8661\n\t        },                                                                                                            // 8662\n                                                                                                                       // 8663\n\t        /**                                                                                                           // 8664\n\t         * Resets this HMAC to its initial state.                                                                     // 8665\n\t         *                                                                                                            // 8666\n\t         * @example                                                                                                   // 8667\n\t         *                                                                                                            // 8668\n\t         *     hmacHasher.reset();                                                                                    // 8669\n\t         */                                                                                                           // 8670\n\t        reset: function () {                                                                                          // 8671\n\t            // Shortcut                                                                                               // 8672\n\t            var hasher = this._hasher;                                                                                // 8673\n                                                                                                                       // 8674\n\t            // Reset                                                                                                  // 8675\n\t            hasher.reset();                                                                                           // 8676\n\t            hasher.update(this._iKey);                                                                                // 8677\n\t        },                                                                                                            // 8678\n                                                                                                                       // 8679\n\t        /**                                                                                                           // 8680\n\t         * Updates this HMAC with a message.                                                                          // 8681\n\t         *                                                                                                            // 8682\n\t         * @param {WordArray|string} messageUpdate The message to append.                                             // 8683\n\t         *                                                                                                            // 8684\n\t         * @return {HMAC} This HMAC instance.                                                                         // 8685\n\t         *                                                                                                            // 8686\n\t         * @example                                                                                                   // 8687\n\t         *                                                                                                            // 8688\n\t         *     hmacHasher.update('message');                                                                          // 8689\n\t         *     hmacHasher.update(wordArray);                                                                          // 8690\n\t         */                                                                                                           // 8691\n\t        update: function (messageUpdate) {                                                                            // 8692\n\t            this._hasher.update(messageUpdate);                                                                       // 8693\n                                                                                                                       // 8694\n\t            // Chainable                                                                                              // 8695\n\t            return this;                                                                                              // 8696\n\t        },                                                                                                            // 8697\n                                                                                                                       // 8698\n\t        /**                                                                                                           // 8699\n\t         * Finalizes the HMAC computation.                                                                            // 8700\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 8701\n\t         *                                                                                                            // 8702\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.                                 // 8703\n\t         *                                                                                                            // 8704\n\t         * @return {WordArray} The HMAC.                                                                              // 8705\n\t         *                                                                                                            // 8706\n\t         * @example                                                                                                   // 8707\n\t         *                                                                                                            // 8708\n\t         *     var hmac = hmacHasher.finalize();                                                                      // 8709\n\t         *     var hmac = hmacHasher.finalize('message');                                                             // 8710\n\t         *     var hmac = hmacHasher.finalize(wordArray);                                                             // 8711\n\t         */                                                                                                           // 8712\n\t        finalize: function (messageUpdate) {                                                                          // 8713\n\t            // Shortcut                                                                                               // 8714\n\t            var hasher = this._hasher;                                                                                // 8715\n                                                                                                                       // 8716\n\t            // Compute HMAC                                                                                           // 8717\n\t            var innerHash = hasher.finalize(messageUpdate);                                                           // 8718\n\t            hasher.reset();                                                                                           // 8719\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));                                         // 8720\n                                                                                                                       // 8721\n\t            return hmac;                                                                                              // 8722\n\t        }                                                                                                             // 8723\n\t    });                                                                                                               // 8724\n\t}());                                                                                                                 // 8725\n                                                                                                                       // 8726\n                                                                                                                       // 8727\n}));                                                                                                                   // 8728\n},{\"./core\":51}],57:[function(require,module,exports){                                                                 // 8729\n;(function (root, factory, undef) {                                                                                    // 8730\n\tif (typeof exports === \"object\") {                                                                                    // 8731\n\t\t// CommonJS                                                                                                          // 8732\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"), require(\"./lib-typedarrays\"), require(\"./enc-utf16\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./sha1\"), require(\"./sha256\"), require(\"./sha224\"), require(\"./sha512\"), require(\"./sha384\"), require(\"./sha3\"), require(\"./ripemd160\"), require(\"./hmac\"), require(\"./pbkdf2\"), require(\"./evpkdf\"), require(\"./cipher-core\"), require(\"./mode-cfb\"), require(\"./mode-ctr\"), require(\"./mode-ctr-gladman\"), require(\"./mode-ofb\"), require(\"./mode-ecb\"), require(\"./pad-ansix923\"), require(\"./pad-iso10126\"), require(\"./pad-iso97971\"), require(\"./pad-zeropadding\"), require(\"./pad-nopadding\"), require(\"./format-hex\"), require(\"./aes\"), require(\"./tripledes\"), require(\"./rc4\"), require(\"./rabbit\"), require(\"./rabbit-legacy\"));\n\t}                                                                                                                     // 8734\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 8735\n\t\t// AMD                                                                                                               // 8736\n\t\tdefine([\"./core\", \"./x64-core\", \"./lib-typedarrays\", \"./enc-utf16\", \"./enc-base64\", \"./md5\", \"./sha1\", \"./sha256\", \"./sha224\", \"./sha512\", \"./sha384\", \"./sha3\", \"./ripemd160\", \"./hmac\", \"./pbkdf2\", \"./evpkdf\", \"./cipher-core\", \"./mode-cfb\", \"./mode-ctr\", \"./mode-ctr-gladman\", \"./mode-ofb\", \"./mode-ecb\", \"./pad-ansix923\", \"./pad-iso10126\", \"./pad-iso97971\", \"./pad-zeropadding\", \"./pad-nopadding\", \"./format-hex\", \"./aes\", \"./tripledes\", \"./rc4\", \"./rabbit\", \"./rabbit-legacy\"], factory);\n\t}                                                                                                                     // 8738\n\telse {                                                                                                                // 8739\n\t\t// Global (browser)                                                                                                  // 8740\n\t\troot.CryptoJS = factory(root.CryptoJS);                                                                              // 8741\n\t}                                                                                                                     // 8742\n}(this, function (CryptoJS) {                                                                                          // 8743\n                                                                                                                       // 8744\n\treturn CryptoJS;                                                                                                      // 8745\n                                                                                                                       // 8746\n}));                                                                                                                   // 8747\n},{\"./aes\":49,\"./cipher-core\":50,\"./core\":51,\"./enc-base64\":52,\"./enc-utf16\":53,\"./evpkdf\":54,\"./format-hex\":55,\"./hmac\":56,\"./lib-typedarrays\":58,\"./md5\":59,\"./mode-cfb\":60,\"./mode-ctr\":62,\"./mode-ctr-gladman\":61,\"./mode-ecb\":63,\"./mode-ofb\":64,\"./pad-ansix923\":65,\"./pad-iso10126\":66,\"./pad-iso97971\":67,\"./pad-nopadding\":68,\"./pad-zeropadding\":69,\"./pbkdf2\":70,\"./rabbit\":72,\"./rabbit-legacy\":71,\"./rc4\":73,\"./ripemd160\":74,\"./sha1\":75,\"./sha224\":76,\"./sha256\":77,\"./sha3\":78,\"./sha384\":79,\"./sha512\":80,\"./tripledes\":81,\"./x64-core\":82}],58:[function(require,module,exports){\n;(function (root, factory) {                                                                                           // 8749\n\tif (typeof exports === \"object\") {                                                                                    // 8750\n\t\t// CommonJS                                                                                                          // 8751\n\t\tmodule.exports = exports = factory(require(\"./core\"));                                                               // 8752\n\t}                                                                                                                     // 8753\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 8754\n\t\t// AMD                                                                                                               // 8755\n\t\tdefine([\"./core\"], factory);                                                                                         // 8756\n\t}                                                                                                                     // 8757\n\telse {                                                                                                                // 8758\n\t\t// Global (browser)                                                                                                  // 8759\n\t\tfactory(root.CryptoJS);                                                                                              // 8760\n\t}                                                                                                                     // 8761\n}(this, function (CryptoJS) {                                                                                          // 8762\n                                                                                                                       // 8763\n\t(function () {                                                                                                        // 8764\n\t    // Check if typed arrays are supported                                                                            // 8765\n\t    if (typeof ArrayBuffer != 'function') {                                                                           // 8766\n\t        return;                                                                                                       // 8767\n\t    }                                                                                                                 // 8768\n                                                                                                                       // 8769\n\t    // Shortcuts                                                                                                      // 8770\n\t    var C = CryptoJS;                                                                                                 // 8771\n\t    var C_lib = C.lib;                                                                                                // 8772\n\t    var WordArray = C_lib.WordArray;                                                                                  // 8773\n                                                                                                                       // 8774\n\t    // Reference original init                                                                                        // 8775\n\t    var superInit = WordArray.init;                                                                                   // 8776\n                                                                                                                       // 8777\n\t    // Augment WordArray.init to handle typed arrays                                                                  // 8778\n\t    var subInit = WordArray.init = function (typedArray) {                                                            // 8779\n\t        // Convert buffers to uint8                                                                                   // 8780\n\t        if (typedArray instanceof ArrayBuffer) {                                                                      // 8781\n\t            typedArray = new Uint8Array(typedArray);                                                                  // 8782\n\t        }                                                                                                             // 8783\n                                                                                                                       // 8784\n\t        // Convert other array views to uint8                                                                         // 8785\n\t        if (                                                                                                          // 8786\n\t            typedArray instanceof Int8Array ||                                                                        // 8787\n\t            (typeof Uint8ClampedArray !== \"undefined\" && typedArray instanceof Uint8ClampedArray) ||                  // 8788\n\t            typedArray instanceof Int16Array ||                                                                       // 8789\n\t            typedArray instanceof Uint16Array ||                                                                      // 8790\n\t            typedArray instanceof Int32Array ||                                                                       // 8791\n\t            typedArray instanceof Uint32Array ||                                                                      // 8792\n\t            typedArray instanceof Float32Array ||                                                                     // 8793\n\t            typedArray instanceof Float64Array                                                                        // 8794\n\t        ) {                                                                                                           // 8795\n\t            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);             // 8796\n\t        }                                                                                                             // 8797\n                                                                                                                       // 8798\n\t        // Handle Uint8Array                                                                                          // 8799\n\t        if (typedArray instanceof Uint8Array) {                                                                       // 8800\n\t            // Shortcut                                                                                               // 8801\n\t            var typedArrayByteLength = typedArray.byteLength;                                                         // 8802\n                                                                                                                       // 8803\n\t            // Extract bytes                                                                                          // 8804\n\t            var words = [];                                                                                           // 8805\n\t            for (var i = 0; i < typedArrayByteLength; i++) {                                                          // 8806\n\t                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);                                                // 8807\n\t            }                                                                                                         // 8808\n                                                                                                                       // 8809\n\t            // Initialize this word array                                                                             // 8810\n\t            superInit.call(this, words, typedArrayByteLength);                                                        // 8811\n\t        } else {                                                                                                      // 8812\n\t            // Else call normal init                                                                                  // 8813\n\t            superInit.apply(this, arguments);                                                                         // 8814\n\t        }                                                                                                             // 8815\n\t    };                                                                                                                // 8816\n                                                                                                                       // 8817\n\t    subInit.prototype = WordArray;                                                                                    // 8818\n\t}());                                                                                                                 // 8819\n                                                                                                                       // 8820\n                                                                                                                       // 8821\n\treturn CryptoJS.lib.WordArray;                                                                                        // 8822\n                                                                                                                       // 8823\n}));                                                                                                                   // 8824\n},{\"./core\":51}],59:[function(require,module,exports){                                                                 // 8825\n;(function (root, factory) {                                                                                           // 8826\n\tif (typeof exports === \"object\") {                                                                                    // 8827\n\t\t// CommonJS                                                                                                          // 8828\n\t\tmodule.exports = exports = factory(require(\"./core\"));                                                               // 8829\n\t}                                                                                                                     // 8830\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 8831\n\t\t// AMD                                                                                                               // 8832\n\t\tdefine([\"./core\"], factory);                                                                                         // 8833\n\t}                                                                                                                     // 8834\n\telse {                                                                                                                // 8835\n\t\t// Global (browser)                                                                                                  // 8836\n\t\tfactory(root.CryptoJS);                                                                                              // 8837\n\t}                                                                                                                     // 8838\n}(this, function (CryptoJS) {                                                                                          // 8839\n                                                                                                                       // 8840\n\t(function (Math) {                                                                                                    // 8841\n\t    // Shortcuts                                                                                                      // 8842\n\t    var C = CryptoJS;                                                                                                 // 8843\n\t    var C_lib = C.lib;                                                                                                // 8844\n\t    var WordArray = C_lib.WordArray;                                                                                  // 8845\n\t    var Hasher = C_lib.Hasher;                                                                                        // 8846\n\t    var C_algo = C.algo;                                                                                              // 8847\n                                                                                                                       // 8848\n\t    // Constants table                                                                                                // 8849\n\t    var T = [];                                                                                                       // 8850\n                                                                                                                       // 8851\n\t    // Compute constants                                                                                              // 8852\n\t    (function () {                                                                                                    // 8853\n\t        for (var i = 0; i < 64; i++) {                                                                                // 8854\n\t            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;                                                     // 8855\n\t        }                                                                                                             // 8856\n\t    }());                                                                                                             // 8857\n                                                                                                                       // 8858\n\t    /**                                                                                                               // 8859\n\t     * MD5 hash algorithm.                                                                                            // 8860\n\t     */                                                                                                               // 8861\n\t    var MD5 = C_algo.MD5 = Hasher.extend({                                                                            // 8862\n\t        _doReset: function () {                                                                                       // 8863\n\t            this._hash = new WordArray.init([                                                                         // 8864\n\t                0x67452301, 0xefcdab89,                                                                               // 8865\n\t                0x98badcfe, 0x10325476                                                                                // 8866\n\t            ]);                                                                                                       // 8867\n\t        },                                                                                                            // 8868\n                                                                                                                       // 8869\n\t        _doProcessBlock: function (M, offset) {                                                                       // 8870\n\t            // Swap endian                                                                                            // 8871\n\t            for (var i = 0; i < 16; i++) {                                                                            // 8872\n\t                // Shortcuts                                                                                          // 8873\n\t                var offset_i = offset + i;                                                                            // 8874\n\t                var M_offset_i = M[offset_i];                                                                         // 8875\n                                                                                                                       // 8876\n\t                M[offset_i] = (                                                                                       // 8877\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |                                       // 8878\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)                                         // 8879\n\t                );                                                                                                    // 8880\n\t            }                                                                                                         // 8881\n                                                                                                                       // 8882\n\t            // Shortcuts                                                                                              // 8883\n\t            var H = this._hash.words;                                                                                 // 8884\n                                                                                                                       // 8885\n\t            var M_offset_0  = M[offset + 0];                                                                          // 8886\n\t            var M_offset_1  = M[offset + 1];                                                                          // 8887\n\t            var M_offset_2  = M[offset + 2];                                                                          // 8888\n\t            var M_offset_3  = M[offset + 3];                                                                          // 8889\n\t            var M_offset_4  = M[offset + 4];                                                                          // 8890\n\t            var M_offset_5  = M[offset + 5];                                                                          // 8891\n\t            var M_offset_6  = M[offset + 6];                                                                          // 8892\n\t            var M_offset_7  = M[offset + 7];                                                                          // 8893\n\t            var M_offset_8  = M[offset + 8];                                                                          // 8894\n\t            var M_offset_9  = M[offset + 9];                                                                          // 8895\n\t            var M_offset_10 = M[offset + 10];                                                                         // 8896\n\t            var M_offset_11 = M[offset + 11];                                                                         // 8897\n\t            var M_offset_12 = M[offset + 12];                                                                         // 8898\n\t            var M_offset_13 = M[offset + 13];                                                                         // 8899\n\t            var M_offset_14 = M[offset + 14];                                                                         // 8900\n\t            var M_offset_15 = M[offset + 15];                                                                         // 8901\n                                                                                                                       // 8902\n\t            // Working varialbes                                                                                      // 8903\n\t            var a = H[0];                                                                                             // 8904\n\t            var b = H[1];                                                                                             // 8905\n\t            var c = H[2];                                                                                             // 8906\n\t            var d = H[3];                                                                                             // 8907\n                                                                                                                       // 8908\n\t            // Computation                                                                                            // 8909\n\t            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);                                                                // 8910\n\t            d = FF(d, a, b, c, M_offset_1,  12, T[1]);                                                                // 8911\n\t            c = FF(c, d, a, b, M_offset_2,  17, T[2]);                                                                // 8912\n\t            b = FF(b, c, d, a, M_offset_3,  22, T[3]);                                                                // 8913\n\t            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);                                                                // 8914\n\t            d = FF(d, a, b, c, M_offset_5,  12, T[5]);                                                                // 8915\n\t            c = FF(c, d, a, b, M_offset_6,  17, T[6]);                                                                // 8916\n\t            b = FF(b, c, d, a, M_offset_7,  22, T[7]);                                                                // 8917\n\t            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);                                                                // 8918\n\t            d = FF(d, a, b, c, M_offset_9,  12, T[9]);                                                                // 8919\n\t            c = FF(c, d, a, b, M_offset_10, 17, T[10]);                                                               // 8920\n\t            b = FF(b, c, d, a, M_offset_11, 22, T[11]);                                                               // 8921\n\t            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);                                                               // 8922\n\t            d = FF(d, a, b, c, M_offset_13, 12, T[13]);                                                               // 8923\n\t            c = FF(c, d, a, b, M_offset_14, 17, T[14]);                                                               // 8924\n\t            b = FF(b, c, d, a, M_offset_15, 22, T[15]);                                                               // 8925\n                                                                                                                       // 8926\n\t            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);                                                               // 8927\n\t            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);                                                               // 8928\n\t            c = GG(c, d, a, b, M_offset_11, 14, T[18]);                                                               // 8929\n\t            b = GG(b, c, d, a, M_offset_0,  20, T[19]);                                                               // 8930\n\t            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);                                                               // 8931\n\t            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);                                                               // 8932\n\t            c = GG(c, d, a, b, M_offset_15, 14, T[22]);                                                               // 8933\n\t            b = GG(b, c, d, a, M_offset_4,  20, T[23]);                                                               // 8934\n\t            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);                                                               // 8935\n\t            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);                                                               // 8936\n\t            c = GG(c, d, a, b, M_offset_3,  14, T[26]);                                                               // 8937\n\t            b = GG(b, c, d, a, M_offset_8,  20, T[27]);                                                               // 8938\n\t            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);                                                               // 8939\n\t            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);                                                               // 8940\n\t            c = GG(c, d, a, b, M_offset_7,  14, T[30]);                                                               // 8941\n\t            b = GG(b, c, d, a, M_offset_12, 20, T[31]);                                                               // 8942\n                                                                                                                       // 8943\n\t            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);                                                               // 8944\n\t            d = HH(d, a, b, c, M_offset_8,  11, T[33]);                                                               // 8945\n\t            c = HH(c, d, a, b, M_offset_11, 16, T[34]);                                                               // 8946\n\t            b = HH(b, c, d, a, M_offset_14, 23, T[35]);                                                               // 8947\n\t            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);                                                               // 8948\n\t            d = HH(d, a, b, c, M_offset_4,  11, T[37]);                                                               // 8949\n\t            c = HH(c, d, a, b, M_offset_7,  16, T[38]);                                                               // 8950\n\t            b = HH(b, c, d, a, M_offset_10, 23, T[39]);                                                               // 8951\n\t            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);                                                               // 8952\n\t            d = HH(d, a, b, c, M_offset_0,  11, T[41]);                                                               // 8953\n\t            c = HH(c, d, a, b, M_offset_3,  16, T[42]);                                                               // 8954\n\t            b = HH(b, c, d, a, M_offset_6,  23, T[43]);                                                               // 8955\n\t            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);                                                               // 8956\n\t            d = HH(d, a, b, c, M_offset_12, 11, T[45]);                                                               // 8957\n\t            c = HH(c, d, a, b, M_offset_15, 16, T[46]);                                                               // 8958\n\t            b = HH(b, c, d, a, M_offset_2,  23, T[47]);                                                               // 8959\n                                                                                                                       // 8960\n\t            a = II(a, b, c, d, M_offset_0,  6,  T[48]);                                                               // 8961\n\t            d = II(d, a, b, c, M_offset_7,  10, T[49]);                                                               // 8962\n\t            c = II(c, d, a, b, M_offset_14, 15, T[50]);                                                               // 8963\n\t            b = II(b, c, d, a, M_offset_5,  21, T[51]);                                                               // 8964\n\t            a = II(a, b, c, d, M_offset_12, 6,  T[52]);                                                               // 8965\n\t            d = II(d, a, b, c, M_offset_3,  10, T[53]);                                                               // 8966\n\t            c = II(c, d, a, b, M_offset_10, 15, T[54]);                                                               // 8967\n\t            b = II(b, c, d, a, M_offset_1,  21, T[55]);                                                               // 8968\n\t            a = II(a, b, c, d, M_offset_8,  6,  T[56]);                                                               // 8969\n\t            d = II(d, a, b, c, M_offset_15, 10, T[57]);                                                               // 8970\n\t            c = II(c, d, a, b, M_offset_6,  15, T[58]);                                                               // 8971\n\t            b = II(b, c, d, a, M_offset_13, 21, T[59]);                                                               // 8972\n\t            a = II(a, b, c, d, M_offset_4,  6,  T[60]);                                                               // 8973\n\t            d = II(d, a, b, c, M_offset_11, 10, T[61]);                                                               // 8974\n\t            c = II(c, d, a, b, M_offset_2,  15, T[62]);                                                               // 8975\n\t            b = II(b, c, d, a, M_offset_9,  21, T[63]);                                                               // 8976\n                                                                                                                       // 8977\n\t            // Intermediate hash value                                                                                // 8978\n\t            H[0] = (H[0] + a) | 0;                                                                                    // 8979\n\t            H[1] = (H[1] + b) | 0;                                                                                    // 8980\n\t            H[2] = (H[2] + c) | 0;                                                                                    // 8981\n\t            H[3] = (H[3] + d) | 0;                                                                                    // 8982\n\t        },                                                                                                            // 8983\n                                                                                                                       // 8984\n\t        _doFinalize: function () {                                                                                    // 8985\n\t            // Shortcuts                                                                                              // 8986\n\t            var data = this._data;                                                                                    // 8987\n\t            var dataWords = data.words;                                                                               // 8988\n                                                                                                                       // 8989\n\t            var nBitsTotal = this._nDataBytes * 8;                                                                    // 8990\n\t            var nBitsLeft = data.sigBytes * 8;                                                                        // 8991\n                                                                                                                       // 8992\n\t            // Add padding                                                                                            // 8993\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 8994\n                                                                                                                       // 8995\n\t            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);                                                   // 8996\n\t            var nBitsTotalL = nBitsTotal;                                                                             // 8997\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (                                                       // 8998\n\t                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |                                         // 8999\n\t                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)                                           // 9000\n\t            );                                                                                                        // 9001\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (                                                       // 9002\n\t                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |                                         // 9003\n\t                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)                                           // 9004\n\t            );                                                                                                        // 9005\n                                                                                                                       // 9006\n\t            data.sigBytes = (dataWords.length + 1) * 4;                                                               // 9007\n                                                                                                                       // 9008\n\t            // Hash final blocks                                                                                      // 9009\n\t            this._process();                                                                                          // 9010\n                                                                                                                       // 9011\n\t            // Shortcuts                                                                                              // 9012\n\t            var hash = this._hash;                                                                                    // 9013\n\t            var H = hash.words;                                                                                       // 9014\n                                                                                                                       // 9015\n\t            // Swap endian                                                                                            // 9016\n\t            for (var i = 0; i < 4; i++) {                                                                             // 9017\n\t                // Shortcut                                                                                           // 9018\n\t                var H_i = H[i];                                                                                       // 9019\n                                                                                                                       // 9020\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |                                                  // 9021\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);                                                   // 9022\n\t            }                                                                                                         // 9023\n                                                                                                                       // 9024\n\t            // Return final computed hash                                                                             // 9025\n\t            return hash;                                                                                              // 9026\n\t        },                                                                                                            // 9027\n                                                                                                                       // 9028\n\t        clone: function () {                                                                                          // 9029\n\t            var clone = Hasher.clone.call(this);                                                                      // 9030\n\t            clone._hash = this._hash.clone();                                                                         // 9031\n                                                                                                                       // 9032\n\t            return clone;                                                                                             // 9033\n\t        }                                                                                                             // 9034\n\t    });                                                                                                               // 9035\n                                                                                                                       // 9036\n\t    function FF(a, b, c, d, x, s, t) {                                                                                // 9037\n\t        var n = a + ((b & c) | (~b & d)) + x + t;                                                                     // 9038\n\t        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9039\n\t    }                                                                                                                 // 9040\n                                                                                                                       // 9041\n\t    function GG(a, b, c, d, x, s, t) {                                                                                // 9042\n\t        var n = a + ((b & d) | (c & ~d)) + x + t;                                                                     // 9043\n\t        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9044\n\t    }                                                                                                                 // 9045\n                                                                                                                       // 9046\n\t    function HH(a, b, c, d, x, s, t) {                                                                                // 9047\n\t        var n = a + (b ^ c ^ d) + x + t;                                                                              // 9048\n\t        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9049\n\t    }                                                                                                                 // 9050\n                                                                                                                       // 9051\n\t    function II(a, b, c, d, x, s, t) {                                                                                // 9052\n\t        var n = a + (c ^ (b | ~d)) + x + t;                                                                           // 9053\n\t        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 9054\n\t    }                                                                                                                 // 9055\n                                                                                                                       // 9056\n\t    /**                                                                                                               // 9057\n\t     * Shortcut function to the hasher's object interface.                                                            // 9058\n\t     *                                                                                                                // 9059\n\t     * @param {WordArray|string} message The message to hash.                                                         // 9060\n\t     *                                                                                                                // 9061\n\t     * @return {WordArray} The hash.                                                                                  // 9062\n\t     *                                                                                                                // 9063\n\t     * @static                                                                                                        // 9064\n\t     *                                                                                                                // 9065\n\t     * @example                                                                                                       // 9066\n\t     *                                                                                                                // 9067\n\t     *     var hash = CryptoJS.MD5('message');                                                                        // 9068\n\t     *     var hash = CryptoJS.MD5(wordArray);                                                                        // 9069\n\t     */                                                                                                               // 9070\n\t    C.MD5 = Hasher._createHelper(MD5);                                                                                // 9071\n                                                                                                                       // 9072\n\t    /**                                                                                                               // 9073\n\t     * Shortcut function to the HMAC's object interface.                                                              // 9074\n\t     *                                                                                                                // 9075\n\t     * @param {WordArray|string} message The message to hash.                                                         // 9076\n\t     * @param {WordArray|string} key The secret key.                                                                  // 9077\n\t     *                                                                                                                // 9078\n\t     * @return {WordArray} The HMAC.                                                                                  // 9079\n\t     *                                                                                                                // 9080\n\t     * @static                                                                                                        // 9081\n\t     *                                                                                                                // 9082\n\t     * @example                                                                                                       // 9083\n\t     *                                                                                                                // 9084\n\t     *     var hmac = CryptoJS.HmacMD5(message, key);                                                                 // 9085\n\t     */                                                                                                               // 9086\n\t    C.HmacMD5 = Hasher._createHmacHelper(MD5);                                                                        // 9087\n\t}(Math));                                                                                                             // 9088\n                                                                                                                       // 9089\n                                                                                                                       // 9090\n\treturn CryptoJS.MD5;                                                                                                  // 9091\n                                                                                                                       // 9092\n}));                                                                                                                   // 9093\n},{\"./core\":51}],60:[function(require,module,exports){                                                                 // 9094\n;(function (root, factory, undef) {                                                                                    // 9095\n\tif (typeof exports === \"object\") {                                                                                    // 9096\n\t\t// CommonJS                                                                                                          // 9097\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 9098\n\t}                                                                                                                     // 9099\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 9100\n\t\t// AMD                                                                                                               // 9101\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 9102\n\t}                                                                                                                     // 9103\n\telse {                                                                                                                // 9104\n\t\t// Global (browser)                                                                                                  // 9105\n\t\tfactory(root.CryptoJS);                                                                                              // 9106\n\t}                                                                                                                     // 9107\n}(this, function (CryptoJS) {                                                                                          // 9108\n                                                                                                                       // 9109\n\t/**                                                                                                                   // 9110\n\t * Cipher Feedback block mode.                                                                                        // 9111\n\t */                                                                                                                   // 9112\n\tCryptoJS.mode.CFB = (function () {                                                                                    // 9113\n\t    var CFB = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9114\n                                                                                                                       // 9115\n\t    CFB.Encryptor = CFB.extend({                                                                                      // 9116\n\t        processBlock: function (words, offset) {                                                                      // 9117\n\t            // Shortcuts                                                                                              // 9118\n\t            var cipher = this._cipher;                                                                                // 9119\n\t            var blockSize = cipher.blockSize;                                                                         // 9120\n                                                                                                                       // 9121\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);                                 // 9122\n                                                                                                                       // 9123\n\t            // Remember this block to use with next block                                                             // 9124\n\t            this._prevBlock = words.slice(offset, offset + blockSize);                                                // 9125\n\t        }                                                                                                             // 9126\n\t    });                                                                                                               // 9127\n                                                                                                                       // 9128\n\t    CFB.Decryptor = CFB.extend({                                                                                      // 9129\n\t        processBlock: function (words, offset) {                                                                      // 9130\n\t            // Shortcuts                                                                                              // 9131\n\t            var cipher = this._cipher;                                                                                // 9132\n\t            var blockSize = cipher.blockSize;                                                                         // 9133\n                                                                                                                       // 9134\n\t            // Remember this block to use with next block                                                             // 9135\n\t            var thisBlock = words.slice(offset, offset + blockSize);                                                  // 9136\n                                                                                                                       // 9137\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);                                 // 9138\n                                                                                                                       // 9139\n\t            // This block becomes the previous block                                                                  // 9140\n\t            this._prevBlock = thisBlock;                                                                              // 9141\n\t        }                                                                                                             // 9142\n\t    });                                                                                                               // 9143\n                                                                                                                       // 9144\n\t    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {                                          // 9145\n\t        // Shortcut                                                                                                   // 9146\n\t        var iv = this._iv;                                                                                            // 9147\n                                                                                                                       // 9148\n\t        // Generate keystream                                                                                         // 9149\n\t        if (iv) {                                                                                                     // 9150\n\t            var keystream = iv.slice(0);                                                                              // 9151\n                                                                                                                       // 9152\n\t            // Remove IV for subsequent blocks                                                                        // 9153\n\t            this._iv = undefined;                                                                                     // 9154\n\t        } else {                                                                                                      // 9155\n\t            var keystream = this._prevBlock;                                                                          // 9156\n\t        }                                                                                                             // 9157\n\t        cipher.encryptBlock(keystream, 0);                                                                            // 9158\n                                                                                                                       // 9159\n\t        // Encrypt                                                                                                    // 9160\n\t        for (var i = 0; i < blockSize; i++) {                                                                         // 9161\n\t            words[offset + i] ^= keystream[i];                                                                        // 9162\n\t        }                                                                                                             // 9163\n\t    }                                                                                                                 // 9164\n                                                                                                                       // 9165\n\t    return CFB;                                                                                                       // 9166\n\t}());                                                                                                                 // 9167\n                                                                                                                       // 9168\n                                                                                                                       // 9169\n\treturn CryptoJS.mode.CFB;                                                                                             // 9170\n                                                                                                                       // 9171\n}));                                                                                                                   // 9172\n},{\"./cipher-core\":50,\"./core\":51}],61:[function(require,module,exports){                                              // 9173\n;(function (root, factory, undef) {                                                                                    // 9174\n\tif (typeof exports === \"object\") {                                                                                    // 9175\n\t\t// CommonJS                                                                                                          // 9176\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 9177\n\t}                                                                                                                     // 9178\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 9179\n\t\t// AMD                                                                                                               // 9180\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 9181\n\t}                                                                                                                     // 9182\n\telse {                                                                                                                // 9183\n\t\t// Global (browser)                                                                                                  // 9184\n\t\tfactory(root.CryptoJS);                                                                                              // 9185\n\t}                                                                                                                     // 9186\n}(this, function (CryptoJS) {                                                                                          // 9187\n                                                                                                                       // 9188\n\t/** @preserve                                                                                                         // 9189\n\t * Counter block mode compatible with  Dr Brian Gladman fileenc.c                                                     // 9190\n\t * derived from CryptoJS.mode.CTR                                                                                     // 9191\n\t * Jan Hruby jhruby.web@gmail.com                                                                                     // 9192\n\t */                                                                                                                   // 9193\n\tCryptoJS.mode.CTRGladman = (function () {                                                                             // 9194\n\t    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();                                                           // 9195\n                                                                                                                       // 9196\n\t\tfunction incWord(word)                                                                                               // 9197\n\t\t{                                                                                                                    // 9198\n\t\t\tif (((word >> 24) & 0xff) === 0xff) { //overflow                                                                    // 9199\n\t\t\tvar b1 = (word >> 16)&0xff;                                                                                         // 9200\n\t\t\tvar b2 = (word >> 8)&0xff;                                                                                          // 9201\n\t\t\tvar b3 = word & 0xff;                                                                                               // 9202\n                                                                                                                       // 9203\n\t\t\tif (b1 === 0xff) // overflow b1                                                                                     // 9204\n\t\t\t{                                                                                                                   // 9205\n\t\t\tb1 = 0;                                                                                                             // 9206\n\t\t\tif (b2 === 0xff)                                                                                                    // 9207\n\t\t\t{                                                                                                                   // 9208\n\t\t\t\tb2 = 0;                                                                                                            // 9209\n\t\t\t\tif (b3 === 0xff)                                                                                                   // 9210\n\t\t\t\t{                                                                                                                  // 9211\n\t\t\t\t\tb3 = 0;                                                                                                           // 9212\n\t\t\t\t}                                                                                                                  // 9213\n\t\t\t\telse                                                                                                               // 9214\n\t\t\t\t{                                                                                                                  // 9215\n\t\t\t\t\t++b3;                                                                                                             // 9216\n\t\t\t\t}                                                                                                                  // 9217\n\t\t\t}                                                                                                                   // 9218\n\t\t\telse                                                                                                                // 9219\n\t\t\t{                                                                                                                   // 9220\n\t\t\t\t++b2;                                                                                                              // 9221\n\t\t\t}                                                                                                                   // 9222\n\t\t\t}                                                                                                                   // 9223\n\t\t\telse                                                                                                                // 9224\n\t\t\t{                                                                                                                   // 9225\n\t\t\t++b1;                                                                                                               // 9226\n\t\t\t}                                                                                                                   // 9227\n                                                                                                                       // 9228\n\t\t\tword = 0;                                                                                                           // 9229\n\t\t\tword += (b1 << 16);                                                                                                 // 9230\n\t\t\tword += (b2 << 8);                                                                                                  // 9231\n\t\t\tword += b3;                                                                                                         // 9232\n\t\t\t}                                                                                                                   // 9233\n\t\t\telse                                                                                                                // 9234\n\t\t\t{                                                                                                                   // 9235\n\t\t\tword += (0x01 << 24);                                                                                               // 9236\n\t\t\t}                                                                                                                   // 9237\n\t\t\treturn word;                                                                                                        // 9238\n\t\t}                                                                                                                    // 9239\n                                                                                                                       // 9240\n\t\tfunction incCounter(counter)                                                                                         // 9241\n\t\t{                                                                                                                    // 9242\n\t\t\tif ((counter[0] = incWord(counter[0])) === 0)                                                                       // 9243\n\t\t\t{                                                                                                                   // 9244\n\t\t\t\t// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8                                    // 9245\n\t\t\t\tcounter[1] = incWord(counter[1]);                                                                                  // 9246\n\t\t\t}                                                                                                                   // 9247\n\t\t\treturn counter;                                                                                                     // 9248\n\t\t}                                                                                                                    // 9249\n                                                                                                                       // 9250\n\t    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({                                                        // 9251\n\t        processBlock: function (words, offset) {                                                                      // 9252\n\t            // Shortcuts                                                                                              // 9253\n\t            var cipher = this._cipher                                                                                 // 9254\n\t            var blockSize = cipher.blockSize;                                                                         // 9255\n\t            var iv = this._iv;                                                                                        // 9256\n\t            var counter = this._counter;                                                                              // 9257\n                                                                                                                       // 9258\n\t            // Generate keystream                                                                                     // 9259\n\t            if (iv) {                                                                                                 // 9260\n\t                counter = this._counter = iv.slice(0);                                                                // 9261\n                                                                                                                       // 9262\n\t                // Remove IV for subsequent blocks                                                                    // 9263\n\t                this._iv = undefined;                                                                                 // 9264\n\t            }                                                                                                         // 9265\n                                                                                                                       // 9266\n\t\t\t\tincCounter(counter);                                                                                               // 9267\n                                                                                                                       // 9268\n\t\t\t\tvar keystream = counter.slice(0);                                                                                  // 9269\n\t            cipher.encryptBlock(keystream, 0);                                                                        // 9270\n                                                                                                                       // 9271\n\t            // Encrypt                                                                                                // 9272\n\t            for (var i = 0; i < blockSize; i++) {                                                                     // 9273\n\t                words[offset + i] ^= keystream[i];                                                                    // 9274\n\t            }                                                                                                         // 9275\n\t        }                                                                                                             // 9276\n\t    });                                                                                                               // 9277\n                                                                                                                       // 9278\n\t    CTRGladman.Decryptor = Encryptor;                                                                                 // 9279\n                                                                                                                       // 9280\n\t    return CTRGladman;                                                                                                // 9281\n\t}());                                                                                                                 // 9282\n                                                                                                                       // 9283\n                                                                                                                       // 9284\n                                                                                                                       // 9285\n                                                                                                                       // 9286\n\treturn CryptoJS.mode.CTRGladman;                                                                                      // 9287\n                                                                                                                       // 9288\n}));                                                                                                                   // 9289\n},{\"./cipher-core\":50,\"./core\":51}],62:[function(require,module,exports){                                              // 9290\n;(function (root, factory, undef) {                                                                                    // 9291\n\tif (typeof exports === \"object\") {                                                                                    // 9292\n\t\t// CommonJS                                                                                                          // 9293\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 9294\n\t}                                                                                                                     // 9295\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 9296\n\t\t// AMD                                                                                                               // 9297\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 9298\n\t}                                                                                                                     // 9299\n\telse {                                                                                                                // 9300\n\t\t// Global (browser)                                                                                                  // 9301\n\t\tfactory(root.CryptoJS);                                                                                              // 9302\n\t}                                                                                                                     // 9303\n}(this, function (CryptoJS) {                                                                                          // 9304\n                                                                                                                       // 9305\n\t/**                                                                                                                   // 9306\n\t * Counter block mode.                                                                                                // 9307\n\t */                                                                                                                   // 9308\n\tCryptoJS.mode.CTR = (function () {                                                                                    // 9309\n\t    var CTR = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9310\n                                                                                                                       // 9311\n\t    var Encryptor = CTR.Encryptor = CTR.extend({                                                                      // 9312\n\t        processBlock: function (words, offset) {                                                                      // 9313\n\t            // Shortcuts                                                                                              // 9314\n\t            var cipher = this._cipher                                                                                 // 9315\n\t            var blockSize = cipher.blockSize;                                                                         // 9316\n\t            var iv = this._iv;                                                                                        // 9317\n\t            var counter = this._counter;                                                                              // 9318\n                                                                                                                       // 9319\n\t            // Generate keystream                                                                                     // 9320\n\t            if (iv) {                                                                                                 // 9321\n\t                counter = this._counter = iv.slice(0);                                                                // 9322\n                                                                                                                       // 9323\n\t                // Remove IV for subsequent blocks                                                                    // 9324\n\t                this._iv = undefined;                                                                                 // 9325\n\t            }                                                                                                         // 9326\n\t            var keystream = counter.slice(0);                                                                         // 9327\n\t            cipher.encryptBlock(keystream, 0);                                                                        // 9328\n                                                                                                                       // 9329\n\t            // Increment counter                                                                                      // 9330\n\t            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0                                                 // 9331\n                                                                                                                       // 9332\n\t            // Encrypt                                                                                                // 9333\n\t            for (var i = 0; i < blockSize; i++) {                                                                     // 9334\n\t                words[offset + i] ^= keystream[i];                                                                    // 9335\n\t            }                                                                                                         // 9336\n\t        }                                                                                                             // 9337\n\t    });                                                                                                               // 9338\n                                                                                                                       // 9339\n\t    CTR.Decryptor = Encryptor;                                                                                        // 9340\n                                                                                                                       // 9341\n\t    return CTR;                                                                                                       // 9342\n\t}());                                                                                                                 // 9343\n                                                                                                                       // 9344\n                                                                                                                       // 9345\n\treturn CryptoJS.mode.CTR;                                                                                             // 9346\n                                                                                                                       // 9347\n}));                                                                                                                   // 9348\n},{\"./cipher-core\":50,\"./core\":51}],63:[function(require,module,exports){                                              // 9349\n;(function (root, factory, undef) {                                                                                    // 9350\n\tif (typeof exports === \"object\") {                                                                                    // 9351\n\t\t// CommonJS                                                                                                          // 9352\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 9353\n\t}                                                                                                                     // 9354\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 9355\n\t\t// AMD                                                                                                               // 9356\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 9357\n\t}                                                                                                                     // 9358\n\telse {                                                                                                                // 9359\n\t\t// Global (browser)                                                                                                  // 9360\n\t\tfactory(root.CryptoJS);                                                                                              // 9361\n\t}                                                                                                                     // 9362\n}(this, function (CryptoJS) {                                                                                          // 9363\n                                                                                                                       // 9364\n\t/**                                                                                                                   // 9365\n\t * Electronic Codebook block mode.                                                                                    // 9366\n\t */                                                                                                                   // 9367\n\tCryptoJS.mode.ECB = (function () {                                                                                    // 9368\n\t    var ECB = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9369\n                                                                                                                       // 9370\n\t    ECB.Encryptor = ECB.extend({                                                                                      // 9371\n\t        processBlock: function (words, offset) {                                                                      // 9372\n\t            this._cipher.encryptBlock(words, offset);                                                                 // 9373\n\t        }                                                                                                             // 9374\n\t    });                                                                                                               // 9375\n                                                                                                                       // 9376\n\t    ECB.Decryptor = ECB.extend({                                                                                      // 9377\n\t        processBlock: function (words, offset) {                                                                      // 9378\n\t            this._cipher.decryptBlock(words, offset);                                                                 // 9379\n\t        }                                                                                                             // 9380\n\t    });                                                                                                               // 9381\n                                                                                                                       // 9382\n\t    return ECB;                                                                                                       // 9383\n\t}());                                                                                                                 // 9384\n                                                                                                                       // 9385\n                                                                                                                       // 9386\n\treturn CryptoJS.mode.ECB;                                                                                             // 9387\n                                                                                                                       // 9388\n}));                                                                                                                   // 9389\n},{\"./cipher-core\":50,\"./core\":51}],64:[function(require,module,exports){                                              // 9390\n;(function (root, factory, undef) {                                                                                    // 9391\n\tif (typeof exports === \"object\") {                                                                                    // 9392\n\t\t// CommonJS                                                                                                          // 9393\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 9394\n\t}                                                                                                                     // 9395\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 9396\n\t\t// AMD                                                                                                               // 9397\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 9398\n\t}                                                                                                                     // 9399\n\telse {                                                                                                                // 9400\n\t\t// Global (browser)                                                                                                  // 9401\n\t\tfactory(root.CryptoJS);                                                                                              // 9402\n\t}                                                                                                                     // 9403\n}(this, function (CryptoJS) {                                                                                          // 9404\n                                                                                                                       // 9405\n\t/**                                                                                                                   // 9406\n\t * Output Feedback block mode.                                                                                        // 9407\n\t */                                                                                                                   // 9408\n\tCryptoJS.mode.OFB = (function () {                                                                                    // 9409\n\t    var OFB = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 9410\n                                                                                                                       // 9411\n\t    var Encryptor = OFB.Encryptor = OFB.extend({                                                                      // 9412\n\t        processBlock: function (words, offset) {                                                                      // 9413\n\t            // Shortcuts                                                                                              // 9414\n\t            var cipher = this._cipher                                                                                 // 9415\n\t            var blockSize = cipher.blockSize;                                                                         // 9416\n\t            var iv = this._iv;                                                                                        // 9417\n\t            var keystream = this._keystream;                                                                          // 9418\n                                                                                                                       // 9419\n\t            // Generate keystream                                                                                     // 9420\n\t            if (iv) {                                                                                                 // 9421\n\t                keystream = this._keystream = iv.slice(0);                                                            // 9422\n                                                                                                                       // 9423\n\t                // Remove IV for subsequent blocks                                                                    // 9424\n\t                this._iv = undefined;                                                                                 // 9425\n\t            }                                                                                                         // 9426\n\t            cipher.encryptBlock(keystream, 0);                                                                        // 9427\n                                                                                                                       // 9428\n\t            // Encrypt                                                                                                // 9429\n\t            for (var i = 0; i < blockSize; i++) {                                                                     // 9430\n\t                words[offset + i] ^= keystream[i];                                                                    // 9431\n\t            }                                                                                                         // 9432\n\t        }                                                                                                             // 9433\n\t    });                                                                                                               // 9434\n                                                                                                                       // 9435\n\t    OFB.Decryptor = Encryptor;                                                                                        // 9436\n                                                                                                                       // 9437\n\t    return OFB;                                                                                                       // 9438\n\t}());                                                                                                                 // 9439\n                                                                                                                       // 9440\n                                                                                                                       // 9441\n\treturn CryptoJS.mode.OFB;                                                                                             // 9442\n                                                                                                                       // 9443\n}));                                                                                                                   // 9444\n},{\"./cipher-core\":50,\"./core\":51}],65:[function(require,module,exports){                                              // 9445\n;(function (root, factory, undef) {                                                                                    // 9446\n\tif (typeof exports === \"object\") {                                                                                    // 9447\n\t\t// CommonJS                                                                                                          // 9448\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 9449\n\t}                                                                                                                     // 9450\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 9451\n\t\t// AMD                                                                                                               // 9452\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 9453\n\t}                                                                                                                     // 9454\n\telse {                                                                                                                // 9455\n\t\t// Global (browser)                                                                                                  // 9456\n\t\tfactory(root.CryptoJS);                                                                                              // 9457\n\t}                                                                                                                     // 9458\n}(this, function (CryptoJS) {                                                                                          // 9459\n                                                                                                                       // 9460\n\t/**                                                                                                                   // 9461\n\t * ANSI X.923 padding strategy.                                                                                       // 9462\n\t */                                                                                                                   // 9463\n\tCryptoJS.pad.AnsiX923 = {                                                                                             // 9464\n\t    pad: function (data, blockSize) {                                                                                 // 9465\n\t        // Shortcuts                                                                                                  // 9466\n\t        var dataSigBytes = data.sigBytes;                                                                             // 9467\n\t        var blockSizeBytes = blockSize * 4;                                                                           // 9468\n                                                                                                                       // 9469\n\t        // Count padding bytes                                                                                        // 9470\n\t        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;                                           // 9471\n                                                                                                                       // 9472\n\t        // Compute last byte position                                                                                 // 9473\n\t        var lastBytePos = dataSigBytes + nPaddingBytes - 1;                                                           // 9474\n                                                                                                                       // 9475\n\t        // Pad                                                                                                        // 9476\n\t        data.clamp();                                                                                                 // 9477\n\t        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);                               // 9478\n\t        data.sigBytes += nPaddingBytes;                                                                               // 9479\n\t    },                                                                                                                // 9480\n                                                                                                                       // 9481\n\t    unpad: function (data) {                                                                                          // 9482\n\t        // Get number of padding bytes from last byte                                                                 // 9483\n\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                             // 9484\n                                                                                                                       // 9485\n\t        // Remove padding                                                                                             // 9486\n\t        data.sigBytes -= nPaddingBytes;                                                                               // 9487\n\t    }                                                                                                                 // 9488\n\t};                                                                                                                    // 9489\n                                                                                                                       // 9490\n                                                                                                                       // 9491\n\treturn CryptoJS.pad.Ansix923;                                                                                         // 9492\n                                                                                                                       // 9493\n}));                                                                                                                   // 9494\n},{\"./cipher-core\":50,\"./core\":51}],66:[function(require,module,exports){                                              // 9495\n;(function (root, factory, undef) {                                                                                    // 9496\n\tif (typeof exports === \"object\") {                                                                                    // 9497\n\t\t// CommonJS                                                                                                          // 9498\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 9499\n\t}                                                                                                                     // 9500\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 9501\n\t\t// AMD                                                                                                               // 9502\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 9503\n\t}                                                                                                                     // 9504\n\telse {                                                                                                                // 9505\n\t\t// Global (browser)                                                                                                  // 9506\n\t\tfactory(root.CryptoJS);                                                                                              // 9507\n\t}                                                                                                                     // 9508\n}(this, function (CryptoJS) {                                                                                          // 9509\n                                                                                                                       // 9510\n\t/**                                                                                                                   // 9511\n\t * ISO 10126 padding strategy.                                                                                        // 9512\n\t */                                                                                                                   // 9513\n\tCryptoJS.pad.Iso10126 = {                                                                                             // 9514\n\t    pad: function (data, blockSize) {                                                                                 // 9515\n\t        // Shortcut                                                                                                   // 9516\n\t        var blockSizeBytes = blockSize * 4;                                                                           // 9517\n                                                                                                                       // 9518\n\t        // Count padding bytes                                                                                        // 9519\n\t        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;                                          // 9520\n                                                                                                                       // 9521\n\t        // Pad                                                                                                        // 9522\n\t        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).                                                // 9523\n\t             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));                                         // 9524\n\t    },                                                                                                                // 9525\n                                                                                                                       // 9526\n\t    unpad: function (data) {                                                                                          // 9527\n\t        // Get number of padding bytes from last byte                                                                 // 9528\n\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                             // 9529\n                                                                                                                       // 9530\n\t        // Remove padding                                                                                             // 9531\n\t        data.sigBytes -= nPaddingBytes;                                                                               // 9532\n\t    }                                                                                                                 // 9533\n\t};                                                                                                                    // 9534\n                                                                                                                       // 9535\n                                                                                                                       // 9536\n\treturn CryptoJS.pad.Iso10126;                                                                                         // 9537\n                                                                                                                       // 9538\n}));                                                                                                                   // 9539\n},{\"./cipher-core\":50,\"./core\":51}],67:[function(require,module,exports){                                              // 9540\n;(function (root, factory, undef) {                                                                                    // 9541\n\tif (typeof exports === \"object\") {                                                                                    // 9542\n\t\t// CommonJS                                                                                                          // 9543\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 9544\n\t}                                                                                                                     // 9545\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 9546\n\t\t// AMD                                                                                                               // 9547\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 9548\n\t}                                                                                                                     // 9549\n\telse {                                                                                                                // 9550\n\t\t// Global (browser)                                                                                                  // 9551\n\t\tfactory(root.CryptoJS);                                                                                              // 9552\n\t}                                                                                                                     // 9553\n}(this, function (CryptoJS) {                                                                                          // 9554\n                                                                                                                       // 9555\n\t/**                                                                                                                   // 9556\n\t * ISO/IEC 9797-1 Padding Method 2.                                                                                   // 9557\n\t */                                                                                                                   // 9558\n\tCryptoJS.pad.Iso97971 = {                                                                                             // 9559\n\t    pad: function (data, blockSize) {                                                                                 // 9560\n\t        // Add 0x80 byte                                                                                              // 9561\n\t        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));                                                  // 9562\n                                                                                                                       // 9563\n\t        // Zero pad the rest                                                                                          // 9564\n\t        CryptoJS.pad.ZeroPadding.pad(data, blockSize);                                                                // 9565\n\t    },                                                                                                                // 9566\n                                                                                                                       // 9567\n\t    unpad: function (data) {                                                                                          // 9568\n\t        // Remove zero padding                                                                                        // 9569\n\t        CryptoJS.pad.ZeroPadding.unpad(data);                                                                         // 9570\n                                                                                                                       // 9571\n\t        // Remove one more byte -- the 0x80 byte                                                                      // 9572\n\t        data.sigBytes--;                                                                                              // 9573\n\t    }                                                                                                                 // 9574\n\t};                                                                                                                    // 9575\n                                                                                                                       // 9576\n                                                                                                                       // 9577\n\treturn CryptoJS.pad.Iso97971;                                                                                         // 9578\n                                                                                                                       // 9579\n}));                                                                                                                   // 9580\n},{\"./cipher-core\":50,\"./core\":51}],68:[function(require,module,exports){                                              // 9581\n;(function (root, factory, undef) {                                                                                    // 9582\n\tif (typeof exports === \"object\") {                                                                                    // 9583\n\t\t// CommonJS                                                                                                          // 9584\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 9585\n\t}                                                                                                                     // 9586\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 9587\n\t\t// AMD                                                                                                               // 9588\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 9589\n\t}                                                                                                                     // 9590\n\telse {                                                                                                                // 9591\n\t\t// Global (browser)                                                                                                  // 9592\n\t\tfactory(root.CryptoJS);                                                                                              // 9593\n\t}                                                                                                                     // 9594\n}(this, function (CryptoJS) {                                                                                          // 9595\n                                                                                                                       // 9596\n\t/**                                                                                                                   // 9597\n\t * A noop padding strategy.                                                                                           // 9598\n\t */                                                                                                                   // 9599\n\tCryptoJS.pad.NoPadding = {                                                                                            // 9600\n\t    pad: function () {                                                                                                // 9601\n\t    },                                                                                                                // 9602\n                                                                                                                       // 9603\n\t    unpad: function () {                                                                                              // 9604\n\t    }                                                                                                                 // 9605\n\t};                                                                                                                    // 9606\n                                                                                                                       // 9607\n                                                                                                                       // 9608\n\treturn CryptoJS.pad.NoPadding;                                                                                        // 9609\n                                                                                                                       // 9610\n}));                                                                                                                   // 9611\n},{\"./cipher-core\":50,\"./core\":51}],69:[function(require,module,exports){                                              // 9612\n;(function (root, factory, undef) {                                                                                    // 9613\n\tif (typeof exports === \"object\") {                                                                                    // 9614\n\t\t// CommonJS                                                                                                          // 9615\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 9616\n\t}                                                                                                                     // 9617\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 9618\n\t\t// AMD                                                                                                               // 9619\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 9620\n\t}                                                                                                                     // 9621\n\telse {                                                                                                                // 9622\n\t\t// Global (browser)                                                                                                  // 9623\n\t\tfactory(root.CryptoJS);                                                                                              // 9624\n\t}                                                                                                                     // 9625\n}(this, function (CryptoJS) {                                                                                          // 9626\n                                                                                                                       // 9627\n\t/**                                                                                                                   // 9628\n\t * Zero padding strategy.                                                                                             // 9629\n\t */                                                                                                                   // 9630\n\tCryptoJS.pad.ZeroPadding = {                                                                                          // 9631\n\t    pad: function (data, blockSize) {                                                                                 // 9632\n\t        // Shortcut                                                                                                   // 9633\n\t        var blockSizeBytes = blockSize * 4;                                                                           // 9634\n                                                                                                                       // 9635\n\t        // Pad                                                                                                        // 9636\n\t        data.clamp();                                                                                                 // 9637\n\t        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);                       // 9638\n\t    },                                                                                                                // 9639\n                                                                                                                       // 9640\n\t    unpad: function (data) {                                                                                          // 9641\n\t        // Shortcut                                                                                                   // 9642\n\t        var dataWords = data.words;                                                                                   // 9643\n                                                                                                                       // 9644\n\t        // Unpad                                                                                                      // 9645\n\t        var i = data.sigBytes - 1;                                                                                    // 9646\n\t        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {                                               // 9647\n\t            i--;                                                                                                      // 9648\n\t        }                                                                                                             // 9649\n\t        data.sigBytes = i + 1;                                                                                        // 9650\n\t    }                                                                                                                 // 9651\n\t};                                                                                                                    // 9652\n                                                                                                                       // 9653\n                                                                                                                       // 9654\n\treturn CryptoJS.pad.ZeroPadding;                                                                                      // 9655\n                                                                                                                       // 9656\n}));                                                                                                                   // 9657\n},{\"./cipher-core\":50,\"./core\":51}],70:[function(require,module,exports){                                              // 9658\n;(function (root, factory, undef) {                                                                                    // 9659\n\tif (typeof exports === \"object\") {                                                                                    // 9660\n\t\t// CommonJS                                                                                                          // 9661\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));                         // 9662\n\t}                                                                                                                     // 9663\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 9664\n\t\t// AMD                                                                                                               // 9665\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);                                                                     // 9666\n\t}                                                                                                                     // 9667\n\telse {                                                                                                                // 9668\n\t\t// Global (browser)                                                                                                  // 9669\n\t\tfactory(root.CryptoJS);                                                                                              // 9670\n\t}                                                                                                                     // 9671\n}(this, function (CryptoJS) {                                                                                          // 9672\n                                                                                                                       // 9673\n\t(function () {                                                                                                        // 9674\n\t    // Shortcuts                                                                                                      // 9675\n\t    var C = CryptoJS;                                                                                                 // 9676\n\t    var C_lib = C.lib;                                                                                                // 9677\n\t    var Base = C_lib.Base;                                                                                            // 9678\n\t    var WordArray = C_lib.WordArray;                                                                                  // 9679\n\t    var C_algo = C.algo;                                                                                              // 9680\n\t    var SHA1 = C_algo.SHA1;                                                                                           // 9681\n\t    var HMAC = C_algo.HMAC;                                                                                           // 9682\n                                                                                                                       // 9683\n\t    /**                                                                                                               // 9684\n\t     * Password-Based Key Derivation Function 2 algorithm.                                                            // 9685\n\t     */                                                                                                               // 9686\n\t    var PBKDF2 = C_algo.PBKDF2 = Base.extend({                                                                        // 9687\n\t        /**                                                                                                           // 9688\n\t         * Configuration options.                                                                                     // 9689\n\t         *                                                                                                            // 9690\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)                        // 9691\n\t         * @property {Hasher} hasher The hasher to use. Default: SHA1                                                 // 9692\n\t         * @property {number} iterations The number of iterations to perform. Default: 1                              // 9693\n\t         */                                                                                                           // 9694\n\t        cfg: Base.extend({                                                                                            // 9695\n\t            keySize: 128/32,                                                                                          // 9696\n\t            hasher: SHA1,                                                                                             // 9697\n\t            iterations: 1                                                                                             // 9698\n\t        }),                                                                                                           // 9699\n                                                                                                                       // 9700\n\t        /**                                                                                                           // 9701\n\t         * Initializes a newly created key derivation function.                                                       // 9702\n\t         *                                                                                                            // 9703\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.                        // 9704\n\t         *                                                                                                            // 9705\n\t         * @example                                                                                                   // 9706\n\t         *                                                                                                            // 9707\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create();                                                               // 9708\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });                                                 // 9709\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });                               // 9710\n\t         */                                                                                                           // 9711\n\t        init: function (cfg) {                                                                                        // 9712\n\t            this.cfg = this.cfg.extend(cfg);                                                                          // 9713\n\t        },                                                                                                            // 9714\n                                                                                                                       // 9715\n\t        /**                                                                                                           // 9716\n\t         * Computes the Password-Based Key Derivation Function 2.                                                     // 9717\n\t         *                                                                                                            // 9718\n\t         * @param {WordArray|string} password The password.                                                           // 9719\n\t         * @param {WordArray|string} salt A salt.                                                                     // 9720\n\t         *                                                                                                            // 9721\n\t         * @return {WordArray} The derived key.                                                                       // 9722\n\t         *                                                                                                            // 9723\n\t         * @example                                                                                                   // 9724\n\t         *                                                                                                            // 9725\n\t         *     var key = kdf.compute(password, salt);                                                                 // 9726\n\t         */                                                                                                           // 9727\n\t        compute: function (password, salt) {                                                                          // 9728\n\t            // Shortcut                                                                                               // 9729\n\t            var cfg = this.cfg;                                                                                       // 9730\n                                                                                                                       // 9731\n\t            // Init HMAC                                                                                              // 9732\n\t            var hmac = HMAC.create(cfg.hasher, password);                                                             // 9733\n                                                                                                                       // 9734\n\t            // Initial values                                                                                         // 9735\n\t            var derivedKey = WordArray.create();                                                                      // 9736\n\t            var blockIndex = WordArray.create([0x00000001]);                                                          // 9737\n                                                                                                                       // 9738\n\t            // Shortcuts                                                                                              // 9739\n\t            var derivedKeyWords = derivedKey.words;                                                                   // 9740\n\t            var blockIndexWords = blockIndex.words;                                                                   // 9741\n\t            var keySize = cfg.keySize;                                                                                // 9742\n\t            var iterations = cfg.iterations;                                                                          // 9743\n                                                                                                                       // 9744\n\t            // Generate key                                                                                           // 9745\n\t            while (derivedKeyWords.length < keySize) {                                                                // 9746\n\t                var block = hmac.update(salt).finalize(blockIndex);                                                   // 9747\n\t                hmac.reset();                                                                                         // 9748\n                                                                                                                       // 9749\n\t                // Shortcuts                                                                                          // 9750\n\t                var blockWords = block.words;                                                                         // 9751\n\t                var blockWordsLength = blockWords.length;                                                             // 9752\n                                                                                                                       // 9753\n\t                // Iterations                                                                                         // 9754\n\t                var intermediate = block;                                                                             // 9755\n\t                for (var i = 1; i < iterations; i++) {                                                                // 9756\n\t                    intermediate = hmac.finalize(intermediate);                                                       // 9757\n\t                    hmac.reset();                                                                                     // 9758\n                                                                                                                       // 9759\n\t                    // Shortcut                                                                                       // 9760\n\t                    var intermediateWords = intermediate.words;                                                       // 9761\n                                                                                                                       // 9762\n\t                    // XOR intermediate with block                                                                    // 9763\n\t                    for (var j = 0; j < blockWordsLength; j++) {                                                      // 9764\n\t                        blockWords[j] ^= intermediateWords[j];                                                        // 9765\n\t                    }                                                                                                 // 9766\n\t                }                                                                                                     // 9767\n                                                                                                                       // 9768\n\t                derivedKey.concat(block);                                                                             // 9769\n\t                blockIndexWords[0]++;                                                                                 // 9770\n\t            }                                                                                                         // 9771\n\t            derivedKey.sigBytes = keySize * 4;                                                                        // 9772\n                                                                                                                       // 9773\n\t            return derivedKey;                                                                                        // 9774\n\t        }                                                                                                             // 9775\n\t    });                                                                                                               // 9776\n                                                                                                                       // 9777\n\t    /**                                                                                                               // 9778\n\t     * Computes the Password-Based Key Derivation Function 2.                                                         // 9779\n\t     *                                                                                                                // 9780\n\t     * @param {WordArray|string} password The password.                                                               // 9781\n\t     * @param {WordArray|string} salt A salt.                                                                         // 9782\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.                          // 9783\n\t     *                                                                                                                // 9784\n\t     * @return {WordArray} The derived key.                                                                           // 9785\n\t     *                                                                                                                // 9786\n\t     * @static                                                                                                        // 9787\n\t     *                                                                                                                // 9788\n\t     * @example                                                                                                       // 9789\n\t     *                                                                                                                // 9790\n\t     *     var key = CryptoJS.PBKDF2(password, salt);                                                                 // 9791\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });                                                 // 9792\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });                               // 9793\n\t     */                                                                                                               // 9794\n\t    C.PBKDF2 = function (password, salt, cfg) {                                                                       // 9795\n\t        return PBKDF2.create(cfg).compute(password, salt);                                                            // 9796\n\t    };                                                                                                                // 9797\n\t}());                                                                                                                 // 9798\n                                                                                                                       // 9799\n                                                                                                                       // 9800\n\treturn CryptoJS.PBKDF2;                                                                                               // 9801\n                                                                                                                       // 9802\n}));                                                                                                                   // 9803\n},{\"./core\":51,\"./hmac\":56,\"./sha1\":75}],71:[function(require,module,exports){                                         // 9804\n;(function (root, factory, undef) {                                                                                    // 9805\n\tif (typeof exports === \"object\") {                                                                                    // 9806\n\t\t// CommonJS                                                                                                          // 9807\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}                                                                                                                     // 9809\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 9810\n\t\t// AMD                                                                                                               // 9811\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);                                   // 9812\n\t}                                                                                                                     // 9813\n\telse {                                                                                                                // 9814\n\t\t// Global (browser)                                                                                                  // 9815\n\t\tfactory(root.CryptoJS);                                                                                              // 9816\n\t}                                                                                                                     // 9817\n}(this, function (CryptoJS) {                                                                                          // 9818\n                                                                                                                       // 9819\n\t(function () {                                                                                                        // 9820\n\t    // Shortcuts                                                                                                      // 9821\n\t    var C = CryptoJS;                                                                                                 // 9822\n\t    var C_lib = C.lib;                                                                                                // 9823\n\t    var StreamCipher = C_lib.StreamCipher;                                                                            // 9824\n\t    var C_algo = C.algo;                                                                                              // 9825\n                                                                                                                       // 9826\n\t    // Reusable objects                                                                                               // 9827\n\t    var S  = [];                                                                                                      // 9828\n\t    var C_ = [];                                                                                                      // 9829\n\t    var G  = [];                                                                                                      // 9830\n                                                                                                                       // 9831\n\t    /**                                                                                                               // 9832\n\t     * Rabbit stream cipher algorithm.                                                                                // 9833\n\t     *                                                                                                                // 9834\n\t     * This is a legacy version that neglected to convert the key to little-endian.                                   // 9835\n\t     * This error doesn't affect the cipher's security,                                                               // 9836\n\t     * but it does affect its compatibility with other implementations.                                               // 9837\n\t     */                                                                                                               // 9838\n\t    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({                                                    // 9839\n\t        _doReset: function () {                                                                                       // 9840\n\t            // Shortcuts                                                                                              // 9841\n\t            var K = this._key.words;                                                                                  // 9842\n\t            var iv = this.cfg.iv;                                                                                     // 9843\n                                                                                                                       // 9844\n\t            // Generate initial state values                                                                          // 9845\n\t            var X = this._X = [                                                                                       // 9846\n\t                K[0], (K[3] << 16) | (K[2] >>> 16),                                                                   // 9847\n\t                K[1], (K[0] << 16) | (K[3] >>> 16),                                                                   // 9848\n\t                K[2], (K[1] << 16) | (K[0] >>> 16),                                                                   // 9849\n\t                K[3], (K[2] << 16) | (K[1] >>> 16)                                                                    // 9850\n\t            ];                                                                                                        // 9851\n                                                                                                                       // 9852\n\t            // Generate initial counter values                                                                        // 9853\n\t            var C = this._C = [                                                                                       // 9854\n\t                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),                              // 9855\n\t                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),                              // 9856\n\t                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),                              // 9857\n\t                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)                               // 9858\n\t            ];                                                                                                        // 9859\n                                                                                                                       // 9860\n\t            // Carry bit                                                                                              // 9861\n\t            this._b = 0;                                                                                              // 9862\n                                                                                                                       // 9863\n\t            // Iterate the system four times                                                                          // 9864\n\t            for (var i = 0; i < 4; i++) {                                                                             // 9865\n\t                nextState.call(this);                                                                                 // 9866\n\t            }                                                                                                         // 9867\n                                                                                                                       // 9868\n\t            // Modify the counters                                                                                    // 9869\n\t            for (var i = 0; i < 8; i++) {                                                                             // 9870\n\t                C[i] ^= X[(i + 4) & 7];                                                                               // 9871\n\t            }                                                                                                         // 9872\n                                                                                                                       // 9873\n\t            // IV setup                                                                                               // 9874\n\t            if (iv) {                                                                                                 // 9875\n\t                // Shortcuts                                                                                          // 9876\n\t                var IV = iv.words;                                                                                    // 9877\n\t                var IV_0 = IV[0];                                                                                     // 9878\n\t                var IV_1 = IV[1];                                                                                     // 9879\n                                                                                                                       // 9880\n\t                // Generate four subvectors                                                                           // 9881\n\t                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);\n\t                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);\n\t                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);                                                             // 9884\n\t                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);                                                             // 9885\n                                                                                                                       // 9886\n\t                // Modify counter values                                                                              // 9887\n\t                C[0] ^= i0;                                                                                           // 9888\n\t                C[1] ^= i1;                                                                                           // 9889\n\t                C[2] ^= i2;                                                                                           // 9890\n\t                C[3] ^= i3;                                                                                           // 9891\n\t                C[4] ^= i0;                                                                                           // 9892\n\t                C[5] ^= i1;                                                                                           // 9893\n\t                C[6] ^= i2;                                                                                           // 9894\n\t                C[7] ^= i3;                                                                                           // 9895\n                                                                                                                       // 9896\n\t                // Iterate the system four times                                                                      // 9897\n\t                for (var i = 0; i < 4; i++) {                                                                         // 9898\n\t                    nextState.call(this);                                                                             // 9899\n\t                }                                                                                                     // 9900\n\t            }                                                                                                         // 9901\n\t        },                                                                                                            // 9902\n                                                                                                                       // 9903\n\t        _doProcessBlock: function (M, offset) {                                                                       // 9904\n\t            // Shortcut                                                                                               // 9905\n\t            var X = this._X;                                                                                          // 9906\n                                                                                                                       // 9907\n\t            // Iterate the system                                                                                     // 9908\n\t            nextState.call(this);                                                                                     // 9909\n                                                                                                                       // 9910\n\t            // Generate four keystream words                                                                          // 9911\n\t            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);                                                               // 9912\n\t            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);                                                               // 9913\n\t            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);                                                               // 9914\n\t            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);                                                               // 9915\n                                                                                                                       // 9916\n\t            for (var i = 0; i < 4; i++) {                                                                             // 9917\n\t                // Swap endian                                                                                        // 9918\n\t                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |                                                // 9919\n\t                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);                                                 // 9920\n                                                                                                                       // 9921\n\t                // Encrypt                                                                                            // 9922\n\t                M[offset + i] ^= S[i];                                                                                // 9923\n\t            }                                                                                                         // 9924\n\t        },                                                                                                            // 9925\n                                                                                                                       // 9926\n\t        blockSize: 128/32,                                                                                            // 9927\n                                                                                                                       // 9928\n\t        ivSize: 64/32                                                                                                 // 9929\n\t    });                                                                                                               // 9930\n                                                                                                                       // 9931\n\t    function nextState() {                                                                                            // 9932\n\t        // Shortcuts                                                                                                  // 9933\n\t        var X = this._X;                                                                                              // 9934\n\t        var C = this._C;                                                                                              // 9935\n                                                                                                                       // 9936\n\t        // Save old counter values                                                                                    // 9937\n\t        for (var i = 0; i < 8; i++) {                                                                                 // 9938\n\t            C_[i] = C[i];                                                                                             // 9939\n\t        }                                                                                                             // 9940\n                                                                                                                       // 9941\n\t        // Calculate new counter values                                                                               // 9942\n\t        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;                                                                     // 9943\n\t        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;                                      // 9944\n\t        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;                                      // 9945\n\t        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;                                      // 9946\n\t        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;                                      // 9947\n\t        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;                                      // 9948\n\t        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;                                      // 9949\n\t        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;                                      // 9950\n\t        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;                                                               // 9951\n                                                                                                                       // 9952\n\t        // Calculate the g-values                                                                                     // 9953\n\t        for (var i = 0; i < 8; i++) {                                                                                 // 9954\n\t            var gx = X[i] + C[i];                                                                                     // 9955\n                                                                                                                       // 9956\n\t            // Construct high and low argument for squaring                                                           // 9957\n\t            var ga = gx & 0xffff;                                                                                     // 9958\n\t            var gb = gx >>> 16;                                                                                       // 9959\n                                                                                                                       // 9960\n\t            // Calculate high and low result of squaring                                                              // 9961\n\t            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;                                               // 9962\n\t            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);                                 // 9963\n                                                                                                                       // 9964\n\t            // High XOR low                                                                                           // 9965\n\t            G[i] = gh ^ gl;                                                                                           // 9966\n\t        }                                                                                                             // 9967\n                                                                                                                       // 9968\n\t        // Calculate new state values                                                                                 // 9969\n\t        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;                          // 9970\n\t        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;                                                    // 9971\n\t        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;                          // 9972\n\t        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;                                                    // 9973\n\t        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;                          // 9974\n\t        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;                                                    // 9975\n\t        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;                          // 9976\n\t        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;                                                    // 9977\n\t    }                                                                                                                 // 9978\n                                                                                                                       // 9979\n\t    /**                                                                                                               // 9980\n\t     * Shortcut functions to the cipher's object interface.                                                           // 9981\n\t     *                                                                                                                // 9982\n\t     * @example                                                                                                       // 9983\n\t     *                                                                                                                // 9984\n\t     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);                                         // 9985\n\t     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);                                      // 9986\n\t     */                                                                                                               // 9987\n\t    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);                                                        // 9988\n\t}());                                                                                                                 // 9989\n                                                                                                                       // 9990\n                                                                                                                       // 9991\n\treturn CryptoJS.RabbitLegacy;                                                                                         // 9992\n                                                                                                                       // 9993\n}));                                                                                                                   // 9994\n},{\"./cipher-core\":50,\"./core\":51,\"./enc-base64\":52,\"./evpkdf\":54,\"./md5\":59}],72:[function(require,module,exports){   // 9995\n;(function (root, factory, undef) {                                                                                    // 9996\n\tif (typeof exports === \"object\") {                                                                                    // 9997\n\t\t// CommonJS                                                                                                          // 9998\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}                                                                                                                     // 10000\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 10001\n\t\t// AMD                                                                                                               // 10002\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);                                   // 10003\n\t}                                                                                                                     // 10004\n\telse {                                                                                                                // 10005\n\t\t// Global (browser)                                                                                                  // 10006\n\t\tfactory(root.CryptoJS);                                                                                              // 10007\n\t}                                                                                                                     // 10008\n}(this, function (CryptoJS) {                                                                                          // 10009\n                                                                                                                       // 10010\n\t(function () {                                                                                                        // 10011\n\t    // Shortcuts                                                                                                      // 10012\n\t    var C = CryptoJS;                                                                                                 // 10013\n\t    var C_lib = C.lib;                                                                                                // 10014\n\t    var StreamCipher = C_lib.StreamCipher;                                                                            // 10015\n\t    var C_algo = C.algo;                                                                                              // 10016\n                                                                                                                       // 10017\n\t    // Reusable objects                                                                                               // 10018\n\t    var S  = [];                                                                                                      // 10019\n\t    var C_ = [];                                                                                                      // 10020\n\t    var G  = [];                                                                                                      // 10021\n                                                                                                                       // 10022\n\t    /**                                                                                                               // 10023\n\t     * Rabbit stream cipher algorithm                                                                                 // 10024\n\t     */                                                                                                               // 10025\n\t    var Rabbit = C_algo.Rabbit = StreamCipher.extend({                                                                // 10026\n\t        _doReset: function () {                                                                                       // 10027\n\t            // Shortcuts                                                                                              // 10028\n\t            var K = this._key.words;                                                                                  // 10029\n\t            var iv = this.cfg.iv;                                                                                     // 10030\n                                                                                                                       // 10031\n\t            // Swap endian                                                                                            // 10032\n\t            for (var i = 0; i < 4; i++) {                                                                             // 10033\n\t                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |                                                // 10034\n\t                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);                                                 // 10035\n\t            }                                                                                                         // 10036\n                                                                                                                       // 10037\n\t            // Generate initial state values                                                                          // 10038\n\t            var X = this._X = [                                                                                       // 10039\n\t                K[0], (K[3] << 16) | (K[2] >>> 16),                                                                   // 10040\n\t                K[1], (K[0] << 16) | (K[3] >>> 16),                                                                   // 10041\n\t                K[2], (K[1] << 16) | (K[0] >>> 16),                                                                   // 10042\n\t                K[3], (K[2] << 16) | (K[1] >>> 16)                                                                    // 10043\n\t            ];                                                                                                        // 10044\n                                                                                                                       // 10045\n\t            // Generate initial counter values                                                                        // 10046\n\t            var C = this._C = [                                                                                       // 10047\n\t                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),                              // 10048\n\t                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),                              // 10049\n\t                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),                              // 10050\n\t                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)                               // 10051\n\t            ];                                                                                                        // 10052\n                                                                                                                       // 10053\n\t            // Carry bit                                                                                              // 10054\n\t            this._b = 0;                                                                                              // 10055\n                                                                                                                       // 10056\n\t            // Iterate the system four times                                                                          // 10057\n\t            for (var i = 0; i < 4; i++) {                                                                             // 10058\n\t                nextState.call(this);                                                                                 // 10059\n\t            }                                                                                                         // 10060\n                                                                                                                       // 10061\n\t            // Modify the counters                                                                                    // 10062\n\t            for (var i = 0; i < 8; i++) {                                                                             // 10063\n\t                C[i] ^= X[(i + 4) & 7];                                                                               // 10064\n\t            }                                                                                                         // 10065\n                                                                                                                       // 10066\n\t            // IV setup                                                                                               // 10067\n\t            if (iv) {                                                                                                 // 10068\n\t                // Shortcuts                                                                                          // 10069\n\t                var IV = iv.words;                                                                                    // 10070\n\t                var IV_0 = IV[0];                                                                                     // 10071\n\t                var IV_1 = IV[1];                                                                                     // 10072\n                                                                                                                       // 10073\n\t                // Generate four subvectors                                                                           // 10074\n\t                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);\n\t                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);\n\t                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);                                                             // 10077\n\t                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);                                                             // 10078\n                                                                                                                       // 10079\n\t                // Modify counter values                                                                              // 10080\n\t                C[0] ^= i0;                                                                                           // 10081\n\t                C[1] ^= i1;                                                                                           // 10082\n\t                C[2] ^= i2;                                                                                           // 10083\n\t                C[3] ^= i3;                                                                                           // 10084\n\t                C[4] ^= i0;                                                                                           // 10085\n\t                C[5] ^= i1;                                                                                           // 10086\n\t                C[6] ^= i2;                                                                                           // 10087\n\t                C[7] ^= i3;                                                                                           // 10088\n                                                                                                                       // 10089\n\t                // Iterate the system four times                                                                      // 10090\n\t                for (var i = 0; i < 4; i++) {                                                                         // 10091\n\t                    nextState.call(this);                                                                             // 10092\n\t                }                                                                                                     // 10093\n\t            }                                                                                                         // 10094\n\t        },                                                                                                            // 10095\n                                                                                                                       // 10096\n\t        _doProcessBlock: function (M, offset) {                                                                       // 10097\n\t            // Shortcut                                                                                               // 10098\n\t            var X = this._X;                                                                                          // 10099\n                                                                                                                       // 10100\n\t            // Iterate the system                                                                                     // 10101\n\t            nextState.call(this);                                                                                     // 10102\n                                                                                                                       // 10103\n\t            // Generate four keystream words                                                                          // 10104\n\t            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);                                                               // 10105\n\t            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);                                                               // 10106\n\t            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);                                                               // 10107\n\t            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);                                                               // 10108\n                                                                                                                       // 10109\n\t            for (var i = 0; i < 4; i++) {                                                                             // 10110\n\t                // Swap endian                                                                                        // 10111\n\t                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |                                                // 10112\n\t                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);                                                 // 10113\n                                                                                                                       // 10114\n\t                // Encrypt                                                                                            // 10115\n\t                M[offset + i] ^= S[i];                                                                                // 10116\n\t            }                                                                                                         // 10117\n\t        },                                                                                                            // 10118\n                                                                                                                       // 10119\n\t        blockSize: 128/32,                                                                                            // 10120\n                                                                                                                       // 10121\n\t        ivSize: 64/32                                                                                                 // 10122\n\t    });                                                                                                               // 10123\n                                                                                                                       // 10124\n\t    function nextState() {                                                                                            // 10125\n\t        // Shortcuts                                                                                                  // 10126\n\t        var X = this._X;                                                                                              // 10127\n\t        var C = this._C;                                                                                              // 10128\n                                                                                                                       // 10129\n\t        // Save old counter values                                                                                    // 10130\n\t        for (var i = 0; i < 8; i++) {                                                                                 // 10131\n\t            C_[i] = C[i];                                                                                             // 10132\n\t        }                                                                                                             // 10133\n                                                                                                                       // 10134\n\t        // Calculate new counter values                                                                               // 10135\n\t        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;                                                                     // 10136\n\t        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;                                      // 10137\n\t        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;                                      // 10138\n\t        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;                                      // 10139\n\t        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;                                      // 10140\n\t        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;                                      // 10141\n\t        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;                                      // 10142\n\t        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;                                      // 10143\n\t        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;                                                               // 10144\n                                                                                                                       // 10145\n\t        // Calculate the g-values                                                                                     // 10146\n\t        for (var i = 0; i < 8; i++) {                                                                                 // 10147\n\t            var gx = X[i] + C[i];                                                                                     // 10148\n                                                                                                                       // 10149\n\t            // Construct high and low argument for squaring                                                           // 10150\n\t            var ga = gx & 0xffff;                                                                                     // 10151\n\t            var gb = gx >>> 16;                                                                                       // 10152\n                                                                                                                       // 10153\n\t            // Calculate high and low result of squaring                                                              // 10154\n\t            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;                                               // 10155\n\t            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);                                 // 10156\n                                                                                                                       // 10157\n\t            // High XOR low                                                                                           // 10158\n\t            G[i] = gh ^ gl;                                                                                           // 10159\n\t        }                                                                                                             // 10160\n                                                                                                                       // 10161\n\t        // Calculate new state values                                                                                 // 10162\n\t        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;                          // 10163\n\t        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;                                                    // 10164\n\t        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;                          // 10165\n\t        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;                                                    // 10166\n\t        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;                          // 10167\n\t        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;                                                    // 10168\n\t        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;                          // 10169\n\t        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;                                                    // 10170\n\t    }                                                                                                                 // 10171\n                                                                                                                       // 10172\n\t    /**                                                                                                               // 10173\n\t     * Shortcut functions to the cipher's object interface.                                                           // 10174\n\t     *                                                                                                                // 10175\n\t     * @example                                                                                                       // 10176\n\t     *                                                                                                                // 10177\n\t     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);                                               // 10178\n\t     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);                                            // 10179\n\t     */                                                                                                               // 10180\n\t    C.Rabbit = StreamCipher._createHelper(Rabbit);                                                                    // 10181\n\t}());                                                                                                                 // 10182\n                                                                                                                       // 10183\n                                                                                                                       // 10184\n\treturn CryptoJS.Rabbit;                                                                                               // 10185\n                                                                                                                       // 10186\n}));                                                                                                                   // 10187\n},{\"./cipher-core\":50,\"./core\":51,\"./enc-base64\":52,\"./evpkdf\":54,\"./md5\":59}],73:[function(require,module,exports){   // 10188\n;(function (root, factory, undef) {                                                                                    // 10189\n\tif (typeof exports === \"object\") {                                                                                    // 10190\n\t\t// CommonJS                                                                                                          // 10191\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}                                                                                                                     // 10193\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 10194\n\t\t// AMD                                                                                                               // 10195\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);                                   // 10196\n\t}                                                                                                                     // 10197\n\telse {                                                                                                                // 10198\n\t\t// Global (browser)                                                                                                  // 10199\n\t\tfactory(root.CryptoJS);                                                                                              // 10200\n\t}                                                                                                                     // 10201\n}(this, function (CryptoJS) {                                                                                          // 10202\n                                                                                                                       // 10203\n\t(function () {                                                                                                        // 10204\n\t    // Shortcuts                                                                                                      // 10205\n\t    var C = CryptoJS;                                                                                                 // 10206\n\t    var C_lib = C.lib;                                                                                                // 10207\n\t    var StreamCipher = C_lib.StreamCipher;                                                                            // 10208\n\t    var C_algo = C.algo;                                                                                              // 10209\n                                                                                                                       // 10210\n\t    /**                                                                                                               // 10211\n\t     * RC4 stream cipher algorithm.                                                                                   // 10212\n\t     */                                                                                                               // 10213\n\t    var RC4 = C_algo.RC4 = StreamCipher.extend({                                                                      // 10214\n\t        _doReset: function () {                                                                                       // 10215\n\t            // Shortcuts                                                                                              // 10216\n\t            var key = this._key;                                                                                      // 10217\n\t            var keyWords = key.words;                                                                                 // 10218\n\t            var keySigBytes = key.sigBytes;                                                                           // 10219\n                                                                                                                       // 10220\n\t            // Init sbox                                                                                              // 10221\n\t            var S = this._S = [];                                                                                     // 10222\n\t            for (var i = 0; i < 256; i++) {                                                                           // 10223\n\t                S[i] = i;                                                                                             // 10224\n\t            }                                                                                                         // 10225\n                                                                                                                       // 10226\n\t            // Key setup                                                                                              // 10227\n\t            for (var i = 0, j = 0; i < 256; i++) {                                                                    // 10228\n\t                var keyByteIndex = i % keySigBytes;                                                                   // 10229\n\t                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;                // 10230\n                                                                                                                       // 10231\n\t                j = (j + S[i] + keyByte) % 256;                                                                       // 10232\n                                                                                                                       // 10233\n\t                // Swap                                                                                               // 10234\n\t                var t = S[i];                                                                                         // 10235\n\t                S[i] = S[j];                                                                                          // 10236\n\t                S[j] = t;                                                                                             // 10237\n\t            }                                                                                                         // 10238\n                                                                                                                       // 10239\n\t            // Counters                                                                                               // 10240\n\t            this._i = this._j = 0;                                                                                    // 10241\n\t        },                                                                                                            // 10242\n                                                                                                                       // 10243\n\t        _doProcessBlock: function (M, offset) {                                                                       // 10244\n\t            M[offset] ^= generateKeystreamWord.call(this);                                                            // 10245\n\t        },                                                                                                            // 10246\n                                                                                                                       // 10247\n\t        keySize: 256/32,                                                                                              // 10248\n                                                                                                                       // 10249\n\t        ivSize: 0                                                                                                     // 10250\n\t    });                                                                                                               // 10251\n                                                                                                                       // 10252\n\t    function generateKeystreamWord() {                                                                                // 10253\n\t        // Shortcuts                                                                                                  // 10254\n\t        var S = this._S;                                                                                              // 10255\n\t        var i = this._i;                                                                                              // 10256\n\t        var j = this._j;                                                                                              // 10257\n                                                                                                                       // 10258\n\t        // Generate keystream word                                                                                    // 10259\n\t        var keystreamWord = 0;                                                                                        // 10260\n\t        for (var n = 0; n < 4; n++) {                                                                                 // 10261\n\t            i = (i + 1) % 256;                                                                                        // 10262\n\t            j = (j + S[i]) % 256;                                                                                     // 10263\n                                                                                                                       // 10264\n\t            // Swap                                                                                                   // 10265\n\t            var t = S[i];                                                                                             // 10266\n\t            S[i] = S[j];                                                                                              // 10267\n\t            S[j] = t;                                                                                                 // 10268\n                                                                                                                       // 10269\n\t            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);                                                  // 10270\n\t        }                                                                                                             // 10271\n                                                                                                                       // 10272\n\t        // Update counters                                                                                            // 10273\n\t        this._i = i;                                                                                                  // 10274\n\t        this._j = j;                                                                                                  // 10275\n                                                                                                                       // 10276\n\t        return keystreamWord;                                                                                         // 10277\n\t    }                                                                                                                 // 10278\n                                                                                                                       // 10279\n\t    /**                                                                                                               // 10280\n\t     * Shortcut functions to the cipher's object interface.                                                           // 10281\n\t     *                                                                                                                // 10282\n\t     * @example                                                                                                       // 10283\n\t     *                                                                                                                // 10284\n\t     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);                                                  // 10285\n\t     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);                                               // 10286\n\t     */                                                                                                               // 10287\n\t    C.RC4 = StreamCipher._createHelper(RC4);                                                                          // 10288\n                                                                                                                       // 10289\n\t    /**                                                                                                               // 10290\n\t     * Modified RC4 stream cipher algorithm.                                                                          // 10291\n\t     */                                                                                                               // 10292\n\t    var RC4Drop = C_algo.RC4Drop = RC4.extend({                                                                       // 10293\n\t        /**                                                                                                           // 10294\n\t         * Configuration options.                                                                                     // 10295\n\t         *                                                                                                            // 10296\n\t         * @property {number} drop The number of keystream words to drop. Default 192                                 // 10297\n\t         */                                                                                                           // 10298\n\t        cfg: RC4.cfg.extend({                                                                                         // 10299\n\t            drop: 192                                                                                                 // 10300\n\t        }),                                                                                                           // 10301\n                                                                                                                       // 10302\n\t        _doReset: function () {                                                                                       // 10303\n\t            RC4._doReset.call(this);                                                                                  // 10304\n                                                                                                                       // 10305\n\t            // Drop                                                                                                   // 10306\n\t            for (var i = this.cfg.drop; i > 0; i--) {                                                                 // 10307\n\t                generateKeystreamWord.call(this);                                                                     // 10308\n\t            }                                                                                                         // 10309\n\t        }                                                                                                             // 10310\n\t    });                                                                                                               // 10311\n                                                                                                                       // 10312\n\t    /**                                                                                                               // 10313\n\t     * Shortcut functions to the cipher's object interface.                                                           // 10314\n\t     *                                                                                                                // 10315\n\t     * @example                                                                                                       // 10316\n\t     *                                                                                                                // 10317\n\t     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);                                              // 10318\n\t     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);                                           // 10319\n\t     */                                                                                                               // 10320\n\t    C.RC4Drop = StreamCipher._createHelper(RC4Drop);                                                                  // 10321\n\t}());                                                                                                                 // 10322\n                                                                                                                       // 10323\n                                                                                                                       // 10324\n\treturn CryptoJS.RC4;                                                                                                  // 10325\n                                                                                                                       // 10326\n}));                                                                                                                   // 10327\n},{\"./cipher-core\":50,\"./core\":51,\"./enc-base64\":52,\"./evpkdf\":54,\"./md5\":59}],74:[function(require,module,exports){   // 10328\n;(function (root, factory) {                                                                                           // 10329\n\tif (typeof exports === \"object\") {                                                                                    // 10330\n\t\t// CommonJS                                                                                                          // 10331\n\t\tmodule.exports = exports = factory(require(\"./core\"));                                                               // 10332\n\t}                                                                                                                     // 10333\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 10334\n\t\t// AMD                                                                                                               // 10335\n\t\tdefine([\"./core\"], factory);                                                                                         // 10336\n\t}                                                                                                                     // 10337\n\telse {                                                                                                                // 10338\n\t\t// Global (browser)                                                                                                  // 10339\n\t\tfactory(root.CryptoJS);                                                                                              // 10340\n\t}                                                                                                                     // 10341\n}(this, function (CryptoJS) {                                                                                          // 10342\n                                                                                                                       // 10343\n\t/** @preserve                                                                                                         // 10344\n\t(c) 2012 by Cédric Mesnil. All rights reserved.                                                                       // 10345\n                                                                                                                       // 10346\n\tRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n                                                                                                                       // 10348\n\t    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\t    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n                                                                                                                       // 10351\n\tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t*/                                                                                                                    // 10353\n                                                                                                                       // 10354\n\t(function (Math) {                                                                                                    // 10355\n\t    // Shortcuts                                                                                                      // 10356\n\t    var C = CryptoJS;                                                                                                 // 10357\n\t    var C_lib = C.lib;                                                                                                // 10358\n\t    var WordArray = C_lib.WordArray;                                                                                  // 10359\n\t    var Hasher = C_lib.Hasher;                                                                                        // 10360\n\t    var C_algo = C.algo;                                                                                              // 10361\n                                                                                                                       // 10362\n\t    // Constants table                                                                                                // 10363\n\t    var _zl = WordArray.create([                                                                                      // 10364\n\t        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,                                                // 10365\n\t        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,                                                // 10366\n\t        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,                                                // 10367\n\t        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,                                                // 10368\n\t        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);                                              // 10369\n\t    var _zr = WordArray.create([                                                                                      // 10370\n\t        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,                                                // 10371\n\t        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,                                                // 10372\n\t        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,                                               // 10373\n\t        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,                                                // 10374\n\t        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);                                             // 10375\n\t    var _sl = WordArray.create([                                                                                      // 10376\n\t         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,                                              // 10377\n\t        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,                                                // 10378\n\t        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,                                               // 10379\n\t          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,                                             // 10380\n\t        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);                                             // 10381\n\t    var _sr = WordArray.create([                                                                                      // 10382\n\t        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,                                                // 10383\n\t        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,                                                // 10384\n\t        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,                                                // 10385\n\t        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,                                               // 10386\n\t        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);                                             // 10387\n                                                                                                                       // 10388\n\t    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);                       // 10389\n\t    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);                       // 10390\n                                                                                                                       // 10391\n\t    /**                                                                                                               // 10392\n\t     * RIPEMD160 hash algorithm.                                                                                      // 10393\n\t     */                                                                                                               // 10394\n\t    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({                                                                // 10395\n\t        _doReset: function () {                                                                                       // 10396\n\t            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);             // 10397\n\t        },                                                                                                            // 10398\n                                                                                                                       // 10399\n\t        _doProcessBlock: function (M, offset) {                                                                       // 10400\n                                                                                                                       // 10401\n\t            // Swap endian                                                                                            // 10402\n\t            for (var i = 0; i < 16; i++) {                                                                            // 10403\n\t                // Shortcuts                                                                                          // 10404\n\t                var offset_i = offset + i;                                                                            // 10405\n\t                var M_offset_i = M[offset_i];                                                                         // 10406\n                                                                                                                       // 10407\n\t                // Swap                                                                                               // 10408\n\t                M[offset_i] = (                                                                                       // 10409\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |                                       // 10410\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)                                         // 10411\n\t                );                                                                                                    // 10412\n\t            }                                                                                                         // 10413\n\t            // Shortcut                                                                                               // 10414\n\t            var H  = this._hash.words;                                                                                // 10415\n\t            var hl = _hl.words;                                                                                       // 10416\n\t            var hr = _hr.words;                                                                                       // 10417\n\t            var zl = _zl.words;                                                                                       // 10418\n\t            var zr = _zr.words;                                                                                       // 10419\n\t            var sl = _sl.words;                                                                                       // 10420\n\t            var sr = _sr.words;                                                                                       // 10421\n                                                                                                                       // 10422\n\t            // Working variables                                                                                      // 10423\n\t            var al, bl, cl, dl, el;                                                                                   // 10424\n\t            var ar, br, cr, dr, er;                                                                                   // 10425\n                                                                                                                       // 10426\n\t            ar = al = H[0];                                                                                           // 10427\n\t            br = bl = H[1];                                                                                           // 10428\n\t            cr = cl = H[2];                                                                                           // 10429\n\t            dr = dl = H[3];                                                                                           // 10430\n\t            er = el = H[4];                                                                                           // 10431\n\t            // Computation                                                                                            // 10432\n\t            var t;                                                                                                    // 10433\n\t            for (var i = 0; i < 80; i += 1) {                                                                         // 10434\n\t                t = (al +  M[offset+zl[i]])|0;                                                                        // 10435\n\t                if (i<16){                                                                                            // 10436\n\t\t            t +=  f1(bl,cl,dl) + hl[0];                                                                              // 10437\n\t                } else if (i<32) {                                                                                    // 10438\n\t\t            t +=  f2(bl,cl,dl) + hl[1];                                                                              // 10439\n\t                } else if (i<48) {                                                                                    // 10440\n\t\t            t +=  f3(bl,cl,dl) + hl[2];                                                                              // 10441\n\t                } else if (i<64) {                                                                                    // 10442\n\t\t            t +=  f4(bl,cl,dl) + hl[3];                                                                              // 10443\n\t                } else {// if (i<80) {                                                                                // 10444\n\t\t            t +=  f5(bl,cl,dl) + hl[4];                                                                              // 10445\n\t                }                                                                                                     // 10446\n\t                t = t|0;                                                                                              // 10447\n\t                t =  rotl(t,sl[i]);                                                                                   // 10448\n\t                t = (t+el)|0;                                                                                         // 10449\n\t                al = el;                                                                                              // 10450\n\t                el = dl;                                                                                              // 10451\n\t                dl = rotl(cl, 10);                                                                                    // 10452\n\t                cl = bl;                                                                                              // 10453\n\t                bl = t;                                                                                               // 10454\n                                                                                                                       // 10455\n\t                t = (ar + M[offset+zr[i]])|0;                                                                         // 10456\n\t                if (i<16){                                                                                            // 10457\n\t\t            t +=  f5(br,cr,dr) + hr[0];                                                                              // 10458\n\t                } else if (i<32) {                                                                                    // 10459\n\t\t            t +=  f4(br,cr,dr) + hr[1];                                                                              // 10460\n\t                } else if (i<48) {                                                                                    // 10461\n\t\t            t +=  f3(br,cr,dr) + hr[2];                                                                              // 10462\n\t                } else if (i<64) {                                                                                    // 10463\n\t\t            t +=  f2(br,cr,dr) + hr[3];                                                                              // 10464\n\t                } else {// if (i<80) {                                                                                // 10465\n\t\t            t +=  f1(br,cr,dr) + hr[4];                                                                              // 10466\n\t                }                                                                                                     // 10467\n\t                t = t|0;                                                                                              // 10468\n\t                t =  rotl(t,sr[i]) ;                                                                                  // 10469\n\t                t = (t+er)|0;                                                                                         // 10470\n\t                ar = er;                                                                                              // 10471\n\t                er = dr;                                                                                              // 10472\n\t                dr = rotl(cr, 10);                                                                                    // 10473\n\t                cr = br;                                                                                              // 10474\n\t                br = t;                                                                                               // 10475\n\t            }                                                                                                         // 10476\n\t            // Intermediate hash value                                                                                // 10477\n\t            t    = (H[1] + cl + dr)|0;                                                                                // 10478\n\t            H[1] = (H[2] + dl + er)|0;                                                                                // 10479\n\t            H[2] = (H[3] + el + ar)|0;                                                                                // 10480\n\t            H[3] = (H[4] + al + br)|0;                                                                                // 10481\n\t            H[4] = (H[0] + bl + cr)|0;                                                                                // 10482\n\t            H[0] =  t;                                                                                                // 10483\n\t        },                                                                                                            // 10484\n                                                                                                                       // 10485\n\t        _doFinalize: function () {                                                                                    // 10486\n\t            // Shortcuts                                                                                              // 10487\n\t            var data = this._data;                                                                                    // 10488\n\t            var dataWords = data.words;                                                                               // 10489\n                                                                                                                       // 10490\n\t            var nBitsTotal = this._nDataBytes * 8;                                                                    // 10491\n\t            var nBitsLeft = data.sigBytes * 8;                                                                        // 10492\n                                                                                                                       // 10493\n\t            // Add padding                                                                                            // 10494\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 10495\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (                                                       // 10496\n\t                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |                                           // 10497\n\t                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)                                             // 10498\n\t            );                                                                                                        // 10499\n\t            data.sigBytes = (dataWords.length + 1) * 4;                                                               // 10500\n                                                                                                                       // 10501\n\t            // Hash final blocks                                                                                      // 10502\n\t            this._process();                                                                                          // 10503\n                                                                                                                       // 10504\n\t            // Shortcuts                                                                                              // 10505\n\t            var hash = this._hash;                                                                                    // 10506\n\t            var H = hash.words;                                                                                       // 10507\n                                                                                                                       // 10508\n\t            // Swap endian                                                                                            // 10509\n\t            for (var i = 0; i < 5; i++) {                                                                             // 10510\n\t                // Shortcut                                                                                           // 10511\n\t                var H_i = H[i];                                                                                       // 10512\n                                                                                                                       // 10513\n\t                // Swap                                                                                               // 10514\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |                                                  // 10515\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);                                                   // 10516\n\t            }                                                                                                         // 10517\n                                                                                                                       // 10518\n\t            // Return final computed hash                                                                             // 10519\n\t            return hash;                                                                                              // 10520\n\t        },                                                                                                            // 10521\n                                                                                                                       // 10522\n\t        clone: function () {                                                                                          // 10523\n\t            var clone = Hasher.clone.call(this);                                                                      // 10524\n\t            clone._hash = this._hash.clone();                                                                         // 10525\n                                                                                                                       // 10526\n\t            return clone;                                                                                             // 10527\n\t        }                                                                                                             // 10528\n\t    });                                                                                                               // 10529\n                                                                                                                       // 10530\n                                                                                                                       // 10531\n\t    function f1(x, y, z) {                                                                                            // 10532\n\t        return ((x) ^ (y) ^ (z));                                                                                     // 10533\n                                                                                                                       // 10534\n\t    }                                                                                                                 // 10535\n                                                                                                                       // 10536\n\t    function f2(x, y, z) {                                                                                            // 10537\n\t        return (((x)&(y)) | ((~x)&(z)));                                                                              // 10538\n\t    }                                                                                                                 // 10539\n                                                                                                                       // 10540\n\t    function f3(x, y, z) {                                                                                            // 10541\n\t        return (((x) | (~(y))) ^ (z));                                                                                // 10542\n\t    }                                                                                                                 // 10543\n                                                                                                                       // 10544\n\t    function f4(x, y, z) {                                                                                            // 10545\n\t        return (((x) & (z)) | ((y)&(~(z))));                                                                          // 10546\n\t    }                                                                                                                 // 10547\n                                                                                                                       // 10548\n\t    function f5(x, y, z) {                                                                                            // 10549\n\t        return ((x) ^ ((y) |(~(z))));                                                                                 // 10550\n                                                                                                                       // 10551\n\t    }                                                                                                                 // 10552\n                                                                                                                       // 10553\n\t    function rotl(x,n) {                                                                                              // 10554\n\t        return (x<<n) | (x>>>(32-n));                                                                                 // 10555\n\t    }                                                                                                                 // 10556\n                                                                                                                       // 10557\n                                                                                                                       // 10558\n\t    /**                                                                                                               // 10559\n\t     * Shortcut function to the hasher's object interface.                                                            // 10560\n\t     *                                                                                                                // 10561\n\t     * @param {WordArray|string} message The message to hash.                                                         // 10562\n\t     *                                                                                                                // 10563\n\t     * @return {WordArray} The hash.                                                                                  // 10564\n\t     *                                                                                                                // 10565\n\t     * @static                                                                                                        // 10566\n\t     *                                                                                                                // 10567\n\t     * @example                                                                                                       // 10568\n\t     *                                                                                                                // 10569\n\t     *     var hash = CryptoJS.RIPEMD160('message');                                                                  // 10570\n\t     *     var hash = CryptoJS.RIPEMD160(wordArray);                                                                  // 10571\n\t     */                                                                                                               // 10572\n\t    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);                                                                    // 10573\n                                                                                                                       // 10574\n\t    /**                                                                                                               // 10575\n\t     * Shortcut function to the HMAC's object interface.                                                              // 10576\n\t     *                                                                                                                // 10577\n\t     * @param {WordArray|string} message The message to hash.                                                         // 10578\n\t     * @param {WordArray|string} key The secret key.                                                                  // 10579\n\t     *                                                                                                                // 10580\n\t     * @return {WordArray} The HMAC.                                                                                  // 10581\n\t     *                                                                                                                // 10582\n\t     * @static                                                                                                        // 10583\n\t     *                                                                                                                // 10584\n\t     * @example                                                                                                       // 10585\n\t     *                                                                                                                // 10586\n\t     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);                                                           // 10587\n\t     */                                                                                                               // 10588\n\t    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);                                                            // 10589\n\t}(Math));                                                                                                             // 10590\n                                                                                                                       // 10591\n                                                                                                                       // 10592\n\treturn CryptoJS.RIPEMD160;                                                                                            // 10593\n                                                                                                                       // 10594\n}));                                                                                                                   // 10595\n},{\"./core\":51}],75:[function(require,module,exports){                                                                 // 10596\n;(function (root, factory) {                                                                                           // 10597\n\tif (typeof exports === \"object\") {                                                                                    // 10598\n\t\t// CommonJS                                                                                                          // 10599\n\t\tmodule.exports = exports = factory(require(\"./core\"));                                                               // 10600\n\t}                                                                                                                     // 10601\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 10602\n\t\t// AMD                                                                                                               // 10603\n\t\tdefine([\"./core\"], factory);                                                                                         // 10604\n\t}                                                                                                                     // 10605\n\telse {                                                                                                                // 10606\n\t\t// Global (browser)                                                                                                  // 10607\n\t\tfactory(root.CryptoJS);                                                                                              // 10608\n\t}                                                                                                                     // 10609\n}(this, function (CryptoJS) {                                                                                          // 10610\n                                                                                                                       // 10611\n\t(function () {                                                                                                        // 10612\n\t    // Shortcuts                                                                                                      // 10613\n\t    var C = CryptoJS;                                                                                                 // 10614\n\t    var C_lib = C.lib;                                                                                                // 10615\n\t    var WordArray = C_lib.WordArray;                                                                                  // 10616\n\t    var Hasher = C_lib.Hasher;                                                                                        // 10617\n\t    var C_algo = C.algo;                                                                                              // 10618\n                                                                                                                       // 10619\n\t    // Reusable object                                                                                                // 10620\n\t    var W = [];                                                                                                       // 10621\n                                                                                                                       // 10622\n\t    /**                                                                                                               // 10623\n\t     * SHA-1 hash algorithm.                                                                                          // 10624\n\t     */                                                                                                               // 10625\n\t    var SHA1 = C_algo.SHA1 = Hasher.extend({                                                                          // 10626\n\t        _doReset: function () {                                                                                       // 10627\n\t            this._hash = new WordArray.init([                                                                         // 10628\n\t                0x67452301, 0xefcdab89,                                                                               // 10629\n\t                0x98badcfe, 0x10325476,                                                                               // 10630\n\t                0xc3d2e1f0                                                                                            // 10631\n\t            ]);                                                                                                       // 10632\n\t        },                                                                                                            // 10633\n                                                                                                                       // 10634\n\t        _doProcessBlock: function (M, offset) {                                                                       // 10635\n\t            // Shortcut                                                                                               // 10636\n\t            var H = this._hash.words;                                                                                 // 10637\n                                                                                                                       // 10638\n\t            // Working variables                                                                                      // 10639\n\t            var a = H[0];                                                                                             // 10640\n\t            var b = H[1];                                                                                             // 10641\n\t            var c = H[2];                                                                                             // 10642\n\t            var d = H[3];                                                                                             // 10643\n\t            var e = H[4];                                                                                             // 10644\n                                                                                                                       // 10645\n\t            // Computation                                                                                            // 10646\n\t            for (var i = 0; i < 80; i++) {                                                                            // 10647\n\t                if (i < 16) {                                                                                         // 10648\n\t                    W[i] = M[offset + i] | 0;                                                                         // 10649\n\t                } else {                                                                                              // 10650\n\t                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];                                              // 10651\n\t                    W[i] = (n << 1) | (n >>> 31);                                                                     // 10652\n\t                }                                                                                                     // 10653\n                                                                                                                       // 10654\n\t                var t = ((a << 5) | (a >>> 27)) + e + W[i];                                                           // 10655\n\t                if (i < 20) {                                                                                         // 10656\n\t                    t += ((b & c) | (~b & d)) + 0x5a827999;                                                           // 10657\n\t                } else if (i < 40) {                                                                                  // 10658\n\t                    t += (b ^ c ^ d) + 0x6ed9eba1;                                                                    // 10659\n\t                } else if (i < 60) {                                                                                  // 10660\n\t                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;                                                  // 10661\n\t                } else /* if (i < 80) */ {                                                                            // 10662\n\t                    t += (b ^ c ^ d) - 0x359d3e2a;                                                                    // 10663\n\t                }                                                                                                     // 10664\n                                                                                                                       // 10665\n\t                e = d;                                                                                                // 10666\n\t                d = c;                                                                                                // 10667\n\t                c = (b << 30) | (b >>> 2);                                                                            // 10668\n\t                b = a;                                                                                                // 10669\n\t                a = t;                                                                                                // 10670\n\t            }                                                                                                         // 10671\n                                                                                                                       // 10672\n\t            // Intermediate hash value                                                                                // 10673\n\t            H[0] = (H[0] + a) | 0;                                                                                    // 10674\n\t            H[1] = (H[1] + b) | 0;                                                                                    // 10675\n\t            H[2] = (H[2] + c) | 0;                                                                                    // 10676\n\t            H[3] = (H[3] + d) | 0;                                                                                    // 10677\n\t            H[4] = (H[4] + e) | 0;                                                                                    // 10678\n\t        },                                                                                                            // 10679\n                                                                                                                       // 10680\n\t        _doFinalize: function () {                                                                                    // 10681\n\t            // Shortcuts                                                                                              // 10682\n\t            var data = this._data;                                                                                    // 10683\n\t            var dataWords = data.words;                                                                               // 10684\n                                                                                                                       // 10685\n\t            var nBitsTotal = this._nDataBytes * 8;                                                                    // 10686\n\t            var nBitsLeft = data.sigBytes * 8;                                                                        // 10687\n                                                                                                                       // 10688\n\t            // Add padding                                                                                            // 10689\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 10690\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);                   // 10691\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;                                             // 10692\n\t            data.sigBytes = dataWords.length * 4;                                                                     // 10693\n                                                                                                                       // 10694\n\t            // Hash final blocks                                                                                      // 10695\n\t            this._process();                                                                                          // 10696\n                                                                                                                       // 10697\n\t            // Return final computed hash                                                                             // 10698\n\t            return this._hash;                                                                                        // 10699\n\t        },                                                                                                            // 10700\n                                                                                                                       // 10701\n\t        clone: function () {                                                                                          // 10702\n\t            var clone = Hasher.clone.call(this);                                                                      // 10703\n\t            clone._hash = this._hash.clone();                                                                         // 10704\n                                                                                                                       // 10705\n\t            return clone;                                                                                             // 10706\n\t        }                                                                                                             // 10707\n\t    });                                                                                                               // 10708\n                                                                                                                       // 10709\n\t    /**                                                                                                               // 10710\n\t     * Shortcut function to the hasher's object interface.                                                            // 10711\n\t     *                                                                                                                // 10712\n\t     * @param {WordArray|string} message The message to hash.                                                         // 10713\n\t     *                                                                                                                // 10714\n\t     * @return {WordArray} The hash.                                                                                  // 10715\n\t     *                                                                                                                // 10716\n\t     * @static                                                                                                        // 10717\n\t     *                                                                                                                // 10718\n\t     * @example                                                                                                       // 10719\n\t     *                                                                                                                // 10720\n\t     *     var hash = CryptoJS.SHA1('message');                                                                       // 10721\n\t     *     var hash = CryptoJS.SHA1(wordArray);                                                                       // 10722\n\t     */                                                                                                               // 10723\n\t    C.SHA1 = Hasher._createHelper(SHA1);                                                                              // 10724\n                                                                                                                       // 10725\n\t    /**                                                                                                               // 10726\n\t     * Shortcut function to the HMAC's object interface.                                                              // 10727\n\t     *                                                                                                                // 10728\n\t     * @param {WordArray|string} message The message to hash.                                                         // 10729\n\t     * @param {WordArray|string} key The secret key.                                                                  // 10730\n\t     *                                                                                                                // 10731\n\t     * @return {WordArray} The HMAC.                                                                                  // 10732\n\t     *                                                                                                                // 10733\n\t     * @static                                                                                                        // 10734\n\t     *                                                                                                                // 10735\n\t     * @example                                                                                                       // 10736\n\t     *                                                                                                                // 10737\n\t     *     var hmac = CryptoJS.HmacSHA1(message, key);                                                                // 10738\n\t     */                                                                                                               // 10739\n\t    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);                                                                      // 10740\n\t}());                                                                                                                 // 10741\n                                                                                                                       // 10742\n                                                                                                                       // 10743\n\treturn CryptoJS.SHA1;                                                                                                 // 10744\n                                                                                                                       // 10745\n}));                                                                                                                   // 10746\n},{\"./core\":51}],76:[function(require,module,exports){                                                                 // 10747\n;(function (root, factory, undef) {                                                                                    // 10748\n\tif (typeof exports === \"object\") {                                                                                    // 10749\n\t\t// CommonJS                                                                                                          // 10750\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha256\"));                                          // 10751\n\t}                                                                                                                     // 10752\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 10753\n\t\t// AMD                                                                                                               // 10754\n\t\tdefine([\"./core\", \"./sha256\"], factory);                                                                             // 10755\n\t}                                                                                                                     // 10756\n\telse {                                                                                                                // 10757\n\t\t// Global (browser)                                                                                                  // 10758\n\t\tfactory(root.CryptoJS);                                                                                              // 10759\n\t}                                                                                                                     // 10760\n}(this, function (CryptoJS) {                                                                                          // 10761\n                                                                                                                       // 10762\n\t(function () {                                                                                                        // 10763\n\t    // Shortcuts                                                                                                      // 10764\n\t    var C = CryptoJS;                                                                                                 // 10765\n\t    var C_lib = C.lib;                                                                                                // 10766\n\t    var WordArray = C_lib.WordArray;                                                                                  // 10767\n\t    var C_algo = C.algo;                                                                                              // 10768\n\t    var SHA256 = C_algo.SHA256;                                                                                       // 10769\n                                                                                                                       // 10770\n\t    /**                                                                                                               // 10771\n\t     * SHA-224 hash algorithm.                                                                                        // 10772\n\t     */                                                                                                               // 10773\n\t    var SHA224 = C_algo.SHA224 = SHA256.extend({                                                                      // 10774\n\t        _doReset: function () {                                                                                       // 10775\n\t            this._hash = new WordArray.init([                                                                         // 10776\n\t                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,                                                       // 10777\n\t                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4                                                        // 10778\n\t            ]);                                                                                                       // 10779\n\t        },                                                                                                            // 10780\n                                                                                                                       // 10781\n\t        _doFinalize: function () {                                                                                    // 10782\n\t            var hash = SHA256._doFinalize.call(this);                                                                 // 10783\n                                                                                                                       // 10784\n\t            hash.sigBytes -= 4;                                                                                       // 10785\n                                                                                                                       // 10786\n\t            return hash;                                                                                              // 10787\n\t        }                                                                                                             // 10788\n\t    });                                                                                                               // 10789\n                                                                                                                       // 10790\n\t    /**                                                                                                               // 10791\n\t     * Shortcut function to the hasher's object interface.                                                            // 10792\n\t     *                                                                                                                // 10793\n\t     * @param {WordArray|string} message The message to hash.                                                         // 10794\n\t     *                                                                                                                // 10795\n\t     * @return {WordArray} The hash.                                                                                  // 10796\n\t     *                                                                                                                // 10797\n\t     * @static                                                                                                        // 10798\n\t     *                                                                                                                // 10799\n\t     * @example                                                                                                       // 10800\n\t     *                                                                                                                // 10801\n\t     *     var hash = CryptoJS.SHA224('message');                                                                     // 10802\n\t     *     var hash = CryptoJS.SHA224(wordArray);                                                                     // 10803\n\t     */                                                                                                               // 10804\n\t    C.SHA224 = SHA256._createHelper(SHA224);                                                                          // 10805\n                                                                                                                       // 10806\n\t    /**                                                                                                               // 10807\n\t     * Shortcut function to the HMAC's object interface.                                                              // 10808\n\t     *                                                                                                                // 10809\n\t     * @param {WordArray|string} message The message to hash.                                                         // 10810\n\t     * @param {WordArray|string} key The secret key.                                                                  // 10811\n\t     *                                                                                                                // 10812\n\t     * @return {WordArray} The HMAC.                                                                                  // 10813\n\t     *                                                                                                                // 10814\n\t     * @static                                                                                                        // 10815\n\t     *                                                                                                                // 10816\n\t     * @example                                                                                                       // 10817\n\t     *                                                                                                                // 10818\n\t     *     var hmac = CryptoJS.HmacSHA224(message, key);                                                              // 10819\n\t     */                                                                                                               // 10820\n\t    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);                                                                  // 10821\n\t}());                                                                                                                 // 10822\n                                                                                                                       // 10823\n                                                                                                                       // 10824\n\treturn CryptoJS.SHA224;                                                                                               // 10825\n                                                                                                                       // 10826\n}));                                                                                                                   // 10827\n},{\"./core\":51,\"./sha256\":77}],77:[function(require,module,exports){                                                   // 10828\n;(function (root, factory) {                                                                                           // 10829\n\tif (typeof exports === \"object\") {                                                                                    // 10830\n\t\t// CommonJS                                                                                                          // 10831\n\t\tmodule.exports = exports = factory(require(\"./core\"));                                                               // 10832\n\t}                                                                                                                     // 10833\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 10834\n\t\t// AMD                                                                                                               // 10835\n\t\tdefine([\"./core\"], factory);                                                                                         // 10836\n\t}                                                                                                                     // 10837\n\telse {                                                                                                                // 10838\n\t\t// Global (browser)                                                                                                  // 10839\n\t\tfactory(root.CryptoJS);                                                                                              // 10840\n\t}                                                                                                                     // 10841\n}(this, function (CryptoJS) {                                                                                          // 10842\n                                                                                                                       // 10843\n\t(function (Math) {                                                                                                    // 10844\n\t    // Shortcuts                                                                                                      // 10845\n\t    var C = CryptoJS;                                                                                                 // 10846\n\t    var C_lib = C.lib;                                                                                                // 10847\n\t    var WordArray = C_lib.WordArray;                                                                                  // 10848\n\t    var Hasher = C_lib.Hasher;                                                                                        // 10849\n\t    var C_algo = C.algo;                                                                                              // 10850\n                                                                                                                       // 10851\n\t    // Initialization and round constants tables                                                                      // 10852\n\t    var H = [];                                                                                                       // 10853\n\t    var K = [];                                                                                                       // 10854\n                                                                                                                       // 10855\n\t    // Compute constants                                                                                              // 10856\n\t    (function () {                                                                                                    // 10857\n\t        function isPrime(n) {                                                                                         // 10858\n\t            var sqrtN = Math.sqrt(n);                                                                                 // 10859\n\t            for (var factor = 2; factor <= sqrtN; factor++) {                                                         // 10860\n\t                if (!(n % factor)) {                                                                                  // 10861\n\t                    return false;                                                                                     // 10862\n\t                }                                                                                                     // 10863\n\t            }                                                                                                         // 10864\n                                                                                                                       // 10865\n\t            return true;                                                                                              // 10866\n\t        }                                                                                                             // 10867\n                                                                                                                       // 10868\n\t        function getFractionalBits(n) {                                                                               // 10869\n\t            return ((n - (n | 0)) * 0x100000000) | 0;                                                                 // 10870\n\t        }                                                                                                             // 10871\n                                                                                                                       // 10872\n\t        var n = 2;                                                                                                    // 10873\n\t        var nPrime = 0;                                                                                               // 10874\n\t        while (nPrime < 64) {                                                                                         // 10875\n\t            if (isPrime(n)) {                                                                                         // 10876\n\t                if (nPrime < 8) {                                                                                     // 10877\n\t                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));                                                // 10878\n\t                }                                                                                                     // 10879\n\t                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));                                                    // 10880\n                                                                                                                       // 10881\n\t                nPrime++;                                                                                             // 10882\n\t            }                                                                                                         // 10883\n                                                                                                                       // 10884\n\t            n++;                                                                                                      // 10885\n\t        }                                                                                                             // 10886\n\t    }());                                                                                                             // 10887\n                                                                                                                       // 10888\n\t    // Reusable object                                                                                                // 10889\n\t    var W = [];                                                                                                       // 10890\n                                                                                                                       // 10891\n\t    /**                                                                                                               // 10892\n\t     * SHA-256 hash algorithm.                                                                                        // 10893\n\t     */                                                                                                               // 10894\n\t    var SHA256 = C_algo.SHA256 = Hasher.extend({                                                                      // 10895\n\t        _doReset: function () {                                                                                       // 10896\n\t            this._hash = new WordArray.init(H.slice(0));                                                              // 10897\n\t        },                                                                                                            // 10898\n                                                                                                                       // 10899\n\t        _doProcessBlock: function (M, offset) {                                                                       // 10900\n\t            // Shortcut                                                                                               // 10901\n\t            var H = this._hash.words;                                                                                 // 10902\n                                                                                                                       // 10903\n\t            // Working variables                                                                                      // 10904\n\t            var a = H[0];                                                                                             // 10905\n\t            var b = H[1];                                                                                             // 10906\n\t            var c = H[2];                                                                                             // 10907\n\t            var d = H[3];                                                                                             // 10908\n\t            var e = H[4];                                                                                             // 10909\n\t            var f = H[5];                                                                                             // 10910\n\t            var g = H[6];                                                                                             // 10911\n\t            var h = H[7];                                                                                             // 10912\n                                                                                                                       // 10913\n\t            // Computation                                                                                            // 10914\n\t            for (var i = 0; i < 64; i++) {                                                                            // 10915\n\t                if (i < 16) {                                                                                         // 10916\n\t                    W[i] = M[offset + i] | 0;                                                                         // 10917\n\t                } else {                                                                                              // 10918\n\t                    var gamma0x = W[i - 15];                                                                          // 10919\n\t                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^                                              // 10920\n\t                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^                                              // 10921\n\t                                   (gamma0x >>> 3);                                                                   // 10922\n                                                                                                                       // 10923\n\t                    var gamma1x = W[i - 2];                                                                           // 10924\n\t                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^                                              // 10925\n\t                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^                                              // 10926\n\t                                   (gamma1x >>> 10);                                                                  // 10927\n                                                                                                                       // 10928\n\t                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];                                                    // 10929\n\t                }                                                                                                     // 10930\n                                                                                                                       // 10931\n\t                var ch  = (e & f) ^ (~e & g);                                                                         // 10932\n\t                var maj = (a & b) ^ (a & c) ^ (b & c);                                                                // 10933\n                                                                                                                       // 10934\n\t                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));           // 10935\n\t                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));           // 10936\n                                                                                                                       // 10937\n\t                var t1 = h + sigma1 + ch + K[i] + W[i];                                                               // 10938\n\t                var t2 = sigma0 + maj;                                                                                // 10939\n                                                                                                                       // 10940\n\t                h = g;                                                                                                // 10941\n\t                g = f;                                                                                                // 10942\n\t                f = e;                                                                                                // 10943\n\t                e = (d + t1) | 0;                                                                                     // 10944\n\t                d = c;                                                                                                // 10945\n\t                c = b;                                                                                                // 10946\n\t                b = a;                                                                                                // 10947\n\t                a = (t1 + t2) | 0;                                                                                    // 10948\n\t            }                                                                                                         // 10949\n                                                                                                                       // 10950\n\t            // Intermediate hash value                                                                                // 10951\n\t            H[0] = (H[0] + a) | 0;                                                                                    // 10952\n\t            H[1] = (H[1] + b) | 0;                                                                                    // 10953\n\t            H[2] = (H[2] + c) | 0;                                                                                    // 10954\n\t            H[3] = (H[3] + d) | 0;                                                                                    // 10955\n\t            H[4] = (H[4] + e) | 0;                                                                                    // 10956\n\t            H[5] = (H[5] + f) | 0;                                                                                    // 10957\n\t            H[6] = (H[6] + g) | 0;                                                                                    // 10958\n\t            H[7] = (H[7] + h) | 0;                                                                                    // 10959\n\t        },                                                                                                            // 10960\n                                                                                                                       // 10961\n\t        _doFinalize: function () {                                                                                    // 10962\n\t            // Shortcuts                                                                                              // 10963\n\t            var data = this._data;                                                                                    // 10964\n\t            var dataWords = data.words;                                                                               // 10965\n                                                                                                                       // 10966\n\t            var nBitsTotal = this._nDataBytes * 8;                                                                    // 10967\n\t            var nBitsLeft = data.sigBytes * 8;                                                                        // 10968\n                                                                                                                       // 10969\n\t            // Add padding                                                                                            // 10970\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 10971\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);                   // 10972\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;                                             // 10973\n\t            data.sigBytes = dataWords.length * 4;                                                                     // 10974\n                                                                                                                       // 10975\n\t            // Hash final blocks                                                                                      // 10976\n\t            this._process();                                                                                          // 10977\n                                                                                                                       // 10978\n\t            // Return final computed hash                                                                             // 10979\n\t            return this._hash;                                                                                        // 10980\n\t        },                                                                                                            // 10981\n                                                                                                                       // 10982\n\t        clone: function () {                                                                                          // 10983\n\t            var clone = Hasher.clone.call(this);                                                                      // 10984\n\t            clone._hash = this._hash.clone();                                                                         // 10985\n                                                                                                                       // 10986\n\t            return clone;                                                                                             // 10987\n\t        }                                                                                                             // 10988\n\t    });                                                                                                               // 10989\n                                                                                                                       // 10990\n\t    /**                                                                                                               // 10991\n\t     * Shortcut function to the hasher's object interface.                                                            // 10992\n\t     *                                                                                                                // 10993\n\t     * @param {WordArray|string} message The message to hash.                                                         // 10994\n\t     *                                                                                                                // 10995\n\t     * @return {WordArray} The hash.                                                                                  // 10996\n\t     *                                                                                                                // 10997\n\t     * @static                                                                                                        // 10998\n\t     *                                                                                                                // 10999\n\t     * @example                                                                                                       // 11000\n\t     *                                                                                                                // 11001\n\t     *     var hash = CryptoJS.SHA256('message');                                                                     // 11002\n\t     *     var hash = CryptoJS.SHA256(wordArray);                                                                     // 11003\n\t     */                                                                                                               // 11004\n\t    C.SHA256 = Hasher._createHelper(SHA256);                                                                          // 11005\n                                                                                                                       // 11006\n\t    /**                                                                                                               // 11007\n\t     * Shortcut function to the HMAC's object interface.                                                              // 11008\n\t     *                                                                                                                // 11009\n\t     * @param {WordArray|string} message The message to hash.                                                         // 11010\n\t     * @param {WordArray|string} key The secret key.                                                                  // 11011\n\t     *                                                                                                                // 11012\n\t     * @return {WordArray} The HMAC.                                                                                  // 11013\n\t     *                                                                                                                // 11014\n\t     * @static                                                                                                        // 11015\n\t     *                                                                                                                // 11016\n\t     * @example                                                                                                       // 11017\n\t     *                                                                                                                // 11018\n\t     *     var hmac = CryptoJS.HmacSHA256(message, key);                                                              // 11019\n\t     */                                                                                                               // 11020\n\t    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);                                                                  // 11021\n\t}(Math));                                                                                                             // 11022\n                                                                                                                       // 11023\n                                                                                                                       // 11024\n\treturn CryptoJS.SHA256;                                                                                               // 11025\n                                                                                                                       // 11026\n}));                                                                                                                   // 11027\n},{\"./core\":51}],78:[function(require,module,exports){                                                                 // 11028\n;(function (root, factory, undef) {                                                                                    // 11029\n\tif (typeof exports === \"object\") {                                                                                    // 11030\n\t\t// CommonJS                                                                                                          // 11031\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"));                                        // 11032\n\t}                                                                                                                     // 11033\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 11034\n\t\t// AMD                                                                                                               // 11035\n\t\tdefine([\"./core\", \"./x64-core\"], factory);                                                                           // 11036\n\t}                                                                                                                     // 11037\n\telse {                                                                                                                // 11038\n\t\t// Global (browser)                                                                                                  // 11039\n\t\tfactory(root.CryptoJS);                                                                                              // 11040\n\t}                                                                                                                     // 11041\n}(this, function (CryptoJS) {                                                                                          // 11042\n                                                                                                                       // 11043\n\t(function (Math) {                                                                                                    // 11044\n\t    // Shortcuts                                                                                                      // 11045\n\t    var C = CryptoJS;                                                                                                 // 11046\n\t    var C_lib = C.lib;                                                                                                // 11047\n\t    var WordArray = C_lib.WordArray;                                                                                  // 11048\n\t    var Hasher = C_lib.Hasher;                                                                                        // 11049\n\t    var C_x64 = C.x64;                                                                                                // 11050\n\t    var X64Word = C_x64.Word;                                                                                         // 11051\n\t    var C_algo = C.algo;                                                                                              // 11052\n                                                                                                                       // 11053\n\t    // Constants tables                                                                                               // 11054\n\t    var RHO_OFFSETS = [];                                                                                             // 11055\n\t    var PI_INDEXES  = [];                                                                                             // 11056\n\t    var ROUND_CONSTANTS = [];                                                                                         // 11057\n                                                                                                                       // 11058\n\t    // Compute Constants                                                                                              // 11059\n\t    (function () {                                                                                                    // 11060\n\t        // Compute rho offset constants                                                                               // 11061\n\t        var x = 1, y = 0;                                                                                             // 11062\n\t        for (var t = 0; t < 24; t++) {                                                                                // 11063\n\t            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;                                                    // 11064\n                                                                                                                       // 11065\n\t            var newX = y % 5;                                                                                         // 11066\n\t            var newY = (2 * x + 3 * y) % 5;                                                                           // 11067\n\t            x = newX;                                                                                                 // 11068\n\t            y = newY;                                                                                                 // 11069\n\t        }                                                                                                             // 11070\n                                                                                                                       // 11071\n\t        // Compute pi index constants                                                                                 // 11072\n\t        for (var x = 0; x < 5; x++) {                                                                                 // 11073\n\t            for (var y = 0; y < 5; y++) {                                                                             // 11074\n\t                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;                                                // 11075\n\t            }                                                                                                         // 11076\n\t        }                                                                                                             // 11077\n                                                                                                                       // 11078\n\t        // Compute round constants                                                                                    // 11079\n\t        var LFSR = 0x01;                                                                                              // 11080\n\t        for (var i = 0; i < 24; i++) {                                                                                // 11081\n\t            var roundConstantMsw = 0;                                                                                 // 11082\n\t            var roundConstantLsw = 0;                                                                                 // 11083\n                                                                                                                       // 11084\n\t            for (var j = 0; j < 7; j++) {                                                                             // 11085\n\t                if (LFSR & 0x01) {                                                                                    // 11086\n\t                    var bitPosition = (1 << j) - 1;                                                                   // 11087\n\t                    if (bitPosition < 32) {                                                                           // 11088\n\t                        roundConstantLsw ^= 1 << bitPosition;                                                         // 11089\n\t                    } else /* if (bitPosition >= 32) */ {                                                             // 11090\n\t                        roundConstantMsw ^= 1 << (bitPosition - 32);                                                  // 11091\n\t                    }                                                                                                 // 11092\n\t                }                                                                                                     // 11093\n                                                                                                                       // 11094\n\t                // Compute next LFSR                                                                                  // 11095\n\t                if (LFSR & 0x80) {                                                                                    // 11096\n\t                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1                                     // 11097\n\t                    LFSR = (LFSR << 1) ^ 0x71;                                                                        // 11098\n\t                } else {                                                                                              // 11099\n\t                    LFSR <<= 1;                                                                                       // 11100\n\t                }                                                                                                     // 11101\n\t            }                                                                                                         // 11102\n                                                                                                                       // 11103\n\t            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);                                  // 11104\n\t        }                                                                                                             // 11105\n\t    }());                                                                                                             // 11106\n                                                                                                                       // 11107\n\t    // Reusable objects for temporary values                                                                          // 11108\n\t    var T = [];                                                                                                       // 11109\n\t    (function () {                                                                                                    // 11110\n\t        for (var i = 0; i < 25; i++) {                                                                                // 11111\n\t            T[i] = X64Word.create();                                                                                  // 11112\n\t        }                                                                                                             // 11113\n\t    }());                                                                                                             // 11114\n                                                                                                                       // 11115\n\t    /**                                                                                                               // 11116\n\t     * SHA-3 hash algorithm.                                                                                          // 11117\n\t     */                                                                                                               // 11118\n\t    var SHA3 = C_algo.SHA3 = Hasher.extend({                                                                          // 11119\n\t        /**                                                                                                           // 11120\n\t         * Configuration options.                                                                                     // 11121\n\t         *                                                                                                            // 11122\n\t         * @property {number} outputLength                                                                            // 11123\n\t         *   The desired number of bits in the output hash.                                                           // 11124\n\t         *   Only values permitted are: 224, 256, 384, 512.                                                           // 11125\n\t         *   Default: 512                                                                                             // 11126\n\t         */                                                                                                           // 11127\n\t        cfg: Hasher.cfg.extend({                                                                                      // 11128\n\t            outputLength: 512                                                                                         // 11129\n\t        }),                                                                                                           // 11130\n                                                                                                                       // 11131\n\t        _doReset: function () {                                                                                       // 11132\n\t            var state = this._state = []                                                                              // 11133\n\t            for (var i = 0; i < 25; i++) {                                                                            // 11134\n\t                state[i] = new X64Word.init();                                                                        // 11135\n\t            }                                                                                                         // 11136\n                                                                                                                       // 11137\n\t            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;                                                 // 11138\n\t        },                                                                                                            // 11139\n                                                                                                                       // 11140\n\t        _doProcessBlock: function (M, offset) {                                                                       // 11141\n\t            // Shortcuts                                                                                              // 11142\n\t            var state = this._state;                                                                                  // 11143\n\t            var nBlockSizeLanes = this.blockSize / 2;                                                                 // 11144\n                                                                                                                       // 11145\n\t            // Absorb                                                                                                 // 11146\n\t            for (var i = 0; i < nBlockSizeLanes; i++) {                                                               // 11147\n\t                // Shortcuts                                                                                          // 11148\n\t                var M2i  = M[offset + 2 * i];                                                                         // 11149\n\t                var M2i1 = M[offset + 2 * i + 1];                                                                     // 11150\n                                                                                                                       // 11151\n\t                // Swap endian                                                                                        // 11152\n\t                M2i = (                                                                                               // 11153\n\t                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |                                                     // 11154\n\t                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)                                                       // 11155\n\t                );                                                                                                    // 11156\n\t                M2i1 = (                                                                                              // 11157\n\t                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |                                                   // 11158\n\t                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)                                                     // 11159\n\t                );                                                                                                    // 11160\n                                                                                                                       // 11161\n\t                // Absorb message into state                                                                          // 11162\n\t                var lane = state[i];                                                                                  // 11163\n\t                lane.high ^= M2i1;                                                                                    // 11164\n\t                lane.low  ^= M2i;                                                                                     // 11165\n\t            }                                                                                                         // 11166\n                                                                                                                       // 11167\n\t            // Rounds                                                                                                 // 11168\n\t            for (var round = 0; round < 24; round++) {                                                                // 11169\n\t                // Theta                                                                                              // 11170\n\t                for (var x = 0; x < 5; x++) {                                                                         // 11171\n\t                    // Mix column lanes                                                                               // 11172\n\t                    var tMsw = 0, tLsw = 0;                                                                           // 11173\n\t                    for (var y = 0; y < 5; y++) {                                                                     // 11174\n\t                        var lane = state[x + 5 * y];                                                                  // 11175\n\t                        tMsw ^= lane.high;                                                                            // 11176\n\t                        tLsw ^= lane.low;                                                                             // 11177\n\t                    }                                                                                                 // 11178\n                                                                                                                       // 11179\n\t                    // Temporary values                                                                               // 11180\n\t                    var Tx = T[x];                                                                                    // 11181\n\t                    Tx.high = tMsw;                                                                                   // 11182\n\t                    Tx.low  = tLsw;                                                                                   // 11183\n\t                }                                                                                                     // 11184\n\t                for (var x = 0; x < 5; x++) {                                                                         // 11185\n\t                    // Shortcuts                                                                                      // 11186\n\t                    var Tx4 = T[(x + 4) % 5];                                                                         // 11187\n\t                    var Tx1 = T[(x + 1) % 5];                                                                         // 11188\n\t                    var Tx1Msw = Tx1.high;                                                                            // 11189\n\t                    var Tx1Lsw = Tx1.low;                                                                             // 11190\n                                                                                                                       // 11191\n\t                    // Mix surrounding columns                                                                        // 11192\n\t                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));                                          // 11193\n\t                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));                                          // 11194\n\t                    for (var y = 0; y < 5; y++) {                                                                     // 11195\n\t                        var lane = state[x + 5 * y];                                                                  // 11196\n\t                        lane.high ^= tMsw;                                                                            // 11197\n\t                        lane.low  ^= tLsw;                                                                            // 11198\n\t                    }                                                                                                 // 11199\n\t                }                                                                                                     // 11200\n                                                                                                                       // 11201\n\t                // Rho Pi                                                                                             // 11202\n\t                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {                                                // 11203\n\t                    // Shortcuts                                                                                      // 11204\n\t                    var lane = state[laneIndex];                                                                      // 11205\n\t                    var laneMsw = lane.high;                                                                          // 11206\n\t                    var laneLsw = lane.low;                                                                           // 11207\n\t                    var rhoOffset = RHO_OFFSETS[laneIndex];                                                           // 11208\n                                                                                                                       // 11209\n\t                    // Rotate lanes                                                                                   // 11210\n\t                    if (rhoOffset < 32) {                                                                             // 11211\n\t                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));                           // 11212\n\t                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));                           // 11213\n\t                    } else /* if (rhoOffset >= 32) */ {                                                               // 11214\n\t                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));                    // 11215\n\t                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));                    // 11216\n\t                    }                                                                                                 // 11217\n                                                                                                                       // 11218\n\t                    // Transpose lanes                                                                                // 11219\n\t                    var TPiLane = T[PI_INDEXES[laneIndex]];                                                           // 11220\n\t                    TPiLane.high = tMsw;                                                                              // 11221\n\t                    TPiLane.low  = tLsw;                                                                              // 11222\n\t                }                                                                                                     // 11223\n                                                                                                                       // 11224\n\t                // Rho pi at x = y = 0                                                                                // 11225\n\t                var T0 = T[0];                                                                                        // 11226\n\t                var state0 = state[0];                                                                                // 11227\n\t                T0.high = state0.high;                                                                                // 11228\n\t                T0.low  = state0.low;                                                                                 // 11229\n                                                                                                                       // 11230\n\t                // Chi                                                                                                // 11231\n\t                for (var x = 0; x < 5; x++) {                                                                         // 11232\n\t                    for (var y = 0; y < 5; y++) {                                                                     // 11233\n\t                        // Shortcuts                                                                                  // 11234\n\t                        var laneIndex = x + 5 * y;                                                                    // 11235\n\t                        var lane = state[laneIndex];                                                                  // 11236\n\t                        var TLane = T[laneIndex];                                                                     // 11237\n\t                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];                                                       // 11238\n\t                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];                                                       // 11239\n                                                                                                                       // 11240\n\t                        // Mix rows                                                                                   // 11241\n\t                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);                                      // 11242\n\t                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);                                       // 11243\n\t                    }                                                                                                 // 11244\n\t                }                                                                                                     // 11245\n                                                                                                                       // 11246\n\t                // Iota                                                                                               // 11247\n\t                var lane = state[0];                                                                                  // 11248\n\t                var roundConstant = ROUND_CONSTANTS[round];                                                           // 11249\n\t                lane.high ^= roundConstant.high;                                                                      // 11250\n\t                lane.low  ^= roundConstant.low;;                                                                      // 11251\n\t            }                                                                                                         // 11252\n\t        },                                                                                                            // 11253\n                                                                                                                       // 11254\n\t        _doFinalize: function () {                                                                                    // 11255\n\t            // Shortcuts                                                                                              // 11256\n\t            var data = this._data;                                                                                    // 11257\n\t            var dataWords = data.words;                                                                               // 11258\n\t            var nBitsTotal = this._nDataBytes * 8;                                                                    // 11259\n\t            var nBitsLeft = data.sigBytes * 8;                                                                        // 11260\n\t            var blockSizeBits = this.blockSize * 32;                                                                  // 11261\n                                                                                                                       // 11262\n\t            // Add padding                                                                                            // 11263\n\t            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);                                               // 11264\n\t            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;              // 11265\n\t            data.sigBytes = dataWords.length * 4;                                                                     // 11266\n                                                                                                                       // 11267\n\t            // Hash final blocks                                                                                      // 11268\n\t            this._process();                                                                                          // 11269\n                                                                                                                       // 11270\n\t            // Shortcuts                                                                                              // 11271\n\t            var state = this._state;                                                                                  // 11272\n\t            var outputLengthBytes = this.cfg.outputLength / 8;                                                        // 11273\n\t            var outputLengthLanes = outputLengthBytes / 8;                                                            // 11274\n                                                                                                                       // 11275\n\t            // Squeeze                                                                                                // 11276\n\t            var hashWords = [];                                                                                       // 11277\n\t            for (var i = 0; i < outputLengthLanes; i++) {                                                             // 11278\n\t                // Shortcuts                                                                                          // 11279\n\t                var lane = state[i];                                                                                  // 11280\n\t                var laneMsw = lane.high;                                                                              // 11281\n\t                var laneLsw = lane.low;                                                                               // 11282\n                                                                                                                       // 11283\n\t                // Swap endian                                                                                        // 11284\n\t                laneMsw = (                                                                                           // 11285\n\t                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |                                             // 11286\n\t                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)                                               // 11287\n\t                );                                                                                                    // 11288\n\t                laneLsw = (                                                                                           // 11289\n\t                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |                                             // 11290\n\t                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)                                               // 11291\n\t                );                                                                                                    // 11292\n                                                                                                                       // 11293\n\t                // Squeeze state to retrieve hash                                                                     // 11294\n\t                hashWords.push(laneLsw);                                                                              // 11295\n\t                hashWords.push(laneMsw);                                                                              // 11296\n\t            }                                                                                                         // 11297\n                                                                                                                       // 11298\n\t            // Return final computed hash                                                                             // 11299\n\t            return new WordArray.init(hashWords, outputLengthBytes);                                                  // 11300\n\t        },                                                                                                            // 11301\n                                                                                                                       // 11302\n\t        clone: function () {                                                                                          // 11303\n\t            var clone = Hasher.clone.call(this);                                                                      // 11304\n                                                                                                                       // 11305\n\t            var state = clone._state = this._state.slice(0);                                                          // 11306\n\t            for (var i = 0; i < 25; i++) {                                                                            // 11307\n\t                state[i] = state[i].clone();                                                                          // 11308\n\t            }                                                                                                         // 11309\n                                                                                                                       // 11310\n\t            return clone;                                                                                             // 11311\n\t        }                                                                                                             // 11312\n\t    });                                                                                                               // 11313\n                                                                                                                       // 11314\n\t    /**                                                                                                               // 11315\n\t     * Shortcut function to the hasher's object interface.                                                            // 11316\n\t     *                                                                                                                // 11317\n\t     * @param {WordArray|string} message The message to hash.                                                         // 11318\n\t     *                                                                                                                // 11319\n\t     * @return {WordArray} The hash.                                                                                  // 11320\n\t     *                                                                                                                // 11321\n\t     * @static                                                                                                        // 11322\n\t     *                                                                                                                // 11323\n\t     * @example                                                                                                       // 11324\n\t     *                                                                                                                // 11325\n\t     *     var hash = CryptoJS.SHA3('message');                                                                       // 11326\n\t     *     var hash = CryptoJS.SHA3(wordArray);                                                                       // 11327\n\t     */                                                                                                               // 11328\n\t    C.SHA3 = Hasher._createHelper(SHA3);                                                                              // 11329\n                                                                                                                       // 11330\n\t    /**                                                                                                               // 11331\n\t     * Shortcut function to the HMAC's object interface.                                                              // 11332\n\t     *                                                                                                                // 11333\n\t     * @param {WordArray|string} message The message to hash.                                                         // 11334\n\t     * @param {WordArray|string} key The secret key.                                                                  // 11335\n\t     *                                                                                                                // 11336\n\t     * @return {WordArray} The HMAC.                                                                                  // 11337\n\t     *                                                                                                                // 11338\n\t     * @static                                                                                                        // 11339\n\t     *                                                                                                                // 11340\n\t     * @example                                                                                                       // 11341\n\t     *                                                                                                                // 11342\n\t     *     var hmac = CryptoJS.HmacSHA3(message, key);                                                                // 11343\n\t     */                                                                                                               // 11344\n\t    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);                                                                      // 11345\n\t}(Math));                                                                                                             // 11346\n                                                                                                                       // 11347\n                                                                                                                       // 11348\n\treturn CryptoJS.SHA3;                                                                                                 // 11349\n                                                                                                                       // 11350\n}));                                                                                                                   // 11351\n},{\"./core\":51,\"./x64-core\":82}],79:[function(require,module,exports){                                                 // 11352\n;(function (root, factory, undef) {                                                                                    // 11353\n\tif (typeof exports === \"object\") {                                                                                    // 11354\n\t\t// CommonJS                                                                                                          // 11355\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"), require(\"./sha512\"));                   // 11356\n\t}                                                                                                                     // 11357\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 11358\n\t\t// AMD                                                                                                               // 11359\n\t\tdefine([\"./core\", \"./x64-core\", \"./sha512\"], factory);                                                               // 11360\n\t}                                                                                                                     // 11361\n\telse {                                                                                                                // 11362\n\t\t// Global (browser)                                                                                                  // 11363\n\t\tfactory(root.CryptoJS);                                                                                              // 11364\n\t}                                                                                                                     // 11365\n}(this, function (CryptoJS) {                                                                                          // 11366\n                                                                                                                       // 11367\n\t(function () {                                                                                                        // 11368\n\t    // Shortcuts                                                                                                      // 11369\n\t    var C = CryptoJS;                                                                                                 // 11370\n\t    var C_x64 = C.x64;                                                                                                // 11371\n\t    var X64Word = C_x64.Word;                                                                                         // 11372\n\t    var X64WordArray = C_x64.WordArray;                                                                               // 11373\n\t    var C_algo = C.algo;                                                                                              // 11374\n\t    var SHA512 = C_algo.SHA512;                                                                                       // 11375\n                                                                                                                       // 11376\n\t    /**                                                                                                               // 11377\n\t     * SHA-384 hash algorithm.                                                                                        // 11378\n\t     */                                                                                                               // 11379\n\t    var SHA384 = C_algo.SHA384 = SHA512.extend({                                                                      // 11380\n\t        _doReset: function () {                                                                                       // 11381\n\t            this._hash = new X64WordArray.init([                                                                      // 11382\n\t                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),                   // 11383\n\t                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),                   // 11384\n\t                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),                   // 11385\n\t                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)                    // 11386\n\t            ]);                                                                                                       // 11387\n\t        },                                                                                                            // 11388\n                                                                                                                       // 11389\n\t        _doFinalize: function () {                                                                                    // 11390\n\t            var hash = SHA512._doFinalize.call(this);                                                                 // 11391\n                                                                                                                       // 11392\n\t            hash.sigBytes -= 16;                                                                                      // 11393\n                                                                                                                       // 11394\n\t            return hash;                                                                                              // 11395\n\t        }                                                                                                             // 11396\n\t    });                                                                                                               // 11397\n                                                                                                                       // 11398\n\t    /**                                                                                                               // 11399\n\t     * Shortcut function to the hasher's object interface.                                                            // 11400\n\t     *                                                                                                                // 11401\n\t     * @param {WordArray|string} message The message to hash.                                                         // 11402\n\t     *                                                                                                                // 11403\n\t     * @return {WordArray} The hash.                                                                                  // 11404\n\t     *                                                                                                                // 11405\n\t     * @static                                                                                                        // 11406\n\t     *                                                                                                                // 11407\n\t     * @example                                                                                                       // 11408\n\t     *                                                                                                                // 11409\n\t     *     var hash = CryptoJS.SHA384('message');                                                                     // 11410\n\t     *     var hash = CryptoJS.SHA384(wordArray);                                                                     // 11411\n\t     */                                                                                                               // 11412\n\t    C.SHA384 = SHA512._createHelper(SHA384);                                                                          // 11413\n                                                                                                                       // 11414\n\t    /**                                                                                                               // 11415\n\t     * Shortcut function to the HMAC's object interface.                                                              // 11416\n\t     *                                                                                                                // 11417\n\t     * @param {WordArray|string} message The message to hash.                                                         // 11418\n\t     * @param {WordArray|string} key The secret key.                                                                  // 11419\n\t     *                                                                                                                // 11420\n\t     * @return {WordArray} The HMAC.                                                                                  // 11421\n\t     *                                                                                                                // 11422\n\t     * @static                                                                                                        // 11423\n\t     *                                                                                                                // 11424\n\t     * @example                                                                                                       // 11425\n\t     *                                                                                                                // 11426\n\t     *     var hmac = CryptoJS.HmacSHA384(message, key);                                                              // 11427\n\t     */                                                                                                               // 11428\n\t    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);                                                                  // 11429\n\t}());                                                                                                                 // 11430\n                                                                                                                       // 11431\n                                                                                                                       // 11432\n\treturn CryptoJS.SHA384;                                                                                               // 11433\n                                                                                                                       // 11434\n}));                                                                                                                   // 11435\n},{\"./core\":51,\"./sha512\":80,\"./x64-core\":82}],80:[function(require,module,exports){                                   // 11436\n;(function (root, factory, undef) {                                                                                    // 11437\n\tif (typeof exports === \"object\") {                                                                                    // 11438\n\t\t// CommonJS                                                                                                          // 11439\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"));                                        // 11440\n\t}                                                                                                                     // 11441\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 11442\n\t\t// AMD                                                                                                               // 11443\n\t\tdefine([\"./core\", \"./x64-core\"], factory);                                                                           // 11444\n\t}                                                                                                                     // 11445\n\telse {                                                                                                                // 11446\n\t\t// Global (browser)                                                                                                  // 11447\n\t\tfactory(root.CryptoJS);                                                                                              // 11448\n\t}                                                                                                                     // 11449\n}(this, function (CryptoJS) {                                                                                          // 11450\n                                                                                                                       // 11451\n\t(function () {                                                                                                        // 11452\n\t    // Shortcuts                                                                                                      // 11453\n\t    var C = CryptoJS;                                                                                                 // 11454\n\t    var C_lib = C.lib;                                                                                                // 11455\n\t    var Hasher = C_lib.Hasher;                                                                                        // 11456\n\t    var C_x64 = C.x64;                                                                                                // 11457\n\t    var X64Word = C_x64.Word;                                                                                         // 11458\n\t    var X64WordArray = C_x64.WordArray;                                                                               // 11459\n\t    var C_algo = C.algo;                                                                                              // 11460\n                                                                                                                       // 11461\n\t    function X64Word_create() {                                                                                       // 11462\n\t        return X64Word.create.apply(X64Word, arguments);                                                              // 11463\n\t    }                                                                                                                 // 11464\n                                                                                                                       // 11465\n\t    // Constants                                                                                                      // 11466\n\t    var K = [                                                                                                         // 11467\n\t        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),                               // 11468\n\t        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),                               // 11469\n\t        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),                               // 11470\n\t        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),                               // 11471\n\t        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),                               // 11472\n\t        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),                               // 11473\n\t        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),                               // 11474\n\t        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),                               // 11475\n\t        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),                               // 11476\n\t        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),                               // 11477\n\t        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),                               // 11478\n\t        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),                               // 11479\n\t        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),                               // 11480\n\t        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),                               // 11481\n\t        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),                               // 11482\n\t        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),                               // 11483\n\t        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),                               // 11484\n\t        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),                               // 11485\n\t        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),                               // 11486\n\t        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),                               // 11487\n\t        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),                               // 11488\n\t        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),                               // 11489\n\t        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),                               // 11490\n\t        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),                               // 11491\n\t        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),                               // 11492\n\t        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),                               // 11493\n\t        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),                               // 11494\n\t        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),                               // 11495\n\t        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),                               // 11496\n\t        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),                               // 11497\n\t        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),                               // 11498\n\t        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),                               // 11499\n\t        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),                               // 11500\n\t        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),                               // 11501\n\t        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),                               // 11502\n\t        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),                               // 11503\n\t        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),                               // 11504\n\t        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),                               // 11505\n\t        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),                               // 11506\n\t        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)                                // 11507\n\t    ];                                                                                                                // 11508\n                                                                                                                       // 11509\n\t    // Reusable objects                                                                                               // 11510\n\t    var W = [];                                                                                                       // 11511\n\t    (function () {                                                                                                    // 11512\n\t        for (var i = 0; i < 80; i++) {                                                                                // 11513\n\t            W[i] = X64Word_create();                                                                                  // 11514\n\t        }                                                                                                             // 11515\n\t    }());                                                                                                             // 11516\n                                                                                                                       // 11517\n\t    /**                                                                                                               // 11518\n\t     * SHA-512 hash algorithm.                                                                                        // 11519\n\t     */                                                                                                               // 11520\n\t    var SHA512 = C_algo.SHA512 = Hasher.extend({                                                                      // 11521\n\t        _doReset: function () {                                                                                       // 11522\n\t            this._hash = new X64WordArray.init([                                                                      // 11523\n\t                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),                   // 11524\n\t                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),                   // 11525\n\t                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),                   // 11526\n\t                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)                    // 11527\n\t            ]);                                                                                                       // 11528\n\t        },                                                                                                            // 11529\n                                                                                                                       // 11530\n\t        _doProcessBlock: function (M, offset) {                                                                       // 11531\n\t            // Shortcuts                                                                                              // 11532\n\t            var H = this._hash.words;                                                                                 // 11533\n                                                                                                                       // 11534\n\t            var H0 = H[0];                                                                                            // 11535\n\t            var H1 = H[1];                                                                                            // 11536\n\t            var H2 = H[2];                                                                                            // 11537\n\t            var H3 = H[3];                                                                                            // 11538\n\t            var H4 = H[4];                                                                                            // 11539\n\t            var H5 = H[5];                                                                                            // 11540\n\t            var H6 = H[6];                                                                                            // 11541\n\t            var H7 = H[7];                                                                                            // 11542\n                                                                                                                       // 11543\n\t            var H0h = H0.high;                                                                                        // 11544\n\t            var H0l = H0.low;                                                                                         // 11545\n\t            var H1h = H1.high;                                                                                        // 11546\n\t            var H1l = H1.low;                                                                                         // 11547\n\t            var H2h = H2.high;                                                                                        // 11548\n\t            var H2l = H2.low;                                                                                         // 11549\n\t            var H3h = H3.high;                                                                                        // 11550\n\t            var H3l = H3.low;                                                                                         // 11551\n\t            var H4h = H4.high;                                                                                        // 11552\n\t            var H4l = H4.low;                                                                                         // 11553\n\t            var H5h = H5.high;                                                                                        // 11554\n\t            var H5l = H5.low;                                                                                         // 11555\n\t            var H6h = H6.high;                                                                                        // 11556\n\t            var H6l = H6.low;                                                                                         // 11557\n\t            var H7h = H7.high;                                                                                        // 11558\n\t            var H7l = H7.low;                                                                                         // 11559\n                                                                                                                       // 11560\n\t            // Working variables                                                                                      // 11561\n\t            var ah = H0h;                                                                                             // 11562\n\t            var al = H0l;                                                                                             // 11563\n\t            var bh = H1h;                                                                                             // 11564\n\t            var bl = H1l;                                                                                             // 11565\n\t            var ch = H2h;                                                                                             // 11566\n\t            var cl = H2l;                                                                                             // 11567\n\t            var dh = H3h;                                                                                             // 11568\n\t            var dl = H3l;                                                                                             // 11569\n\t            var eh = H4h;                                                                                             // 11570\n\t            var el = H4l;                                                                                             // 11571\n\t            var fh = H5h;                                                                                             // 11572\n\t            var fl = H5l;                                                                                             // 11573\n\t            var gh = H6h;                                                                                             // 11574\n\t            var gl = H6l;                                                                                             // 11575\n\t            var hh = H7h;                                                                                             // 11576\n\t            var hl = H7l;                                                                                             // 11577\n                                                                                                                       // 11578\n\t            // Rounds                                                                                                 // 11579\n\t            for (var i = 0; i < 80; i++) {                                                                            // 11580\n\t                // Shortcut                                                                                           // 11581\n\t                var Wi = W[i];                                                                                        // 11582\n                                                                                                                       // 11583\n\t                // Extend message                                                                                     // 11584\n\t                if (i < 16) {                                                                                         // 11585\n\t                    var Wih = Wi.high = M[offset + i * 2]     | 0;                                                    // 11586\n\t                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;                                                    // 11587\n\t                } else {                                                                                              // 11588\n\t                    // Gamma0                                                                                         // 11589\n\t                    var gamma0x  = W[i - 15];                                                                         // 11590\n\t                    var gamma0xh = gamma0x.high;                                                                      // 11591\n\t                    var gamma0xl = gamma0x.low;                                                                       // 11592\n\t                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);\n\t                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));\n                                                                                                                       // 11595\n\t                    // Gamma1                                                                                         // 11596\n\t                    var gamma1x  = W[i - 2];                                                                          // 11597\n\t                    var gamma1xh = gamma1x.high;                                                                      // 11598\n\t                    var gamma1xl = gamma1x.low;                                                                       // 11599\n\t                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);\n\t                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));\n                                                                                                                       // 11602\n\t                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]                                                  // 11603\n\t                    var Wi7  = W[i - 7];                                                                              // 11604\n\t                    var Wi7h = Wi7.high;                                                                              // 11605\n\t                    var Wi7l = Wi7.low;                                                                               // 11606\n                                                                                                                       // 11607\n\t                    var Wi16  = W[i - 16];                                                                            // 11608\n\t                    var Wi16h = Wi16.high;                                                                            // 11609\n\t                    var Wi16l = Wi16.low;                                                                             // 11610\n                                                                                                                       // 11611\n\t                    var Wil = gamma0l + Wi7l;                                                                         // 11612\n\t                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);                               // 11613\n\t                    var Wil = Wil + gamma1l;                                                                          // 11614\n\t                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);                                // 11615\n\t                    var Wil = Wil + Wi16l;                                                                            // 11616\n\t                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);                                    // 11617\n                                                                                                                       // 11618\n\t                    Wi.high = Wih;                                                                                    // 11619\n\t                    Wi.low  = Wil;                                                                                    // 11620\n\t                }                                                                                                     // 11621\n                                                                                                                       // 11622\n\t                var chh  = (eh & fh) ^ (~eh & gh);                                                                    // 11623\n\t                var chl  = (el & fl) ^ (~el & gl);                                                                    // 11624\n\t                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);                                                         // 11625\n\t                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);                                                         // 11626\n                                                                                                                       // 11627\n\t                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));    // 11628\n\t                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));    // 11629\n\t                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));    // 11630\n\t                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));    // 11631\n                                                                                                                       // 11632\n\t                // t1 = h + sigma1 + ch + K[i] + W[i]                                                                 // 11633\n\t                var Ki  = K[i];                                                                                       // 11634\n\t                var Kih = Ki.high;                                                                                    // 11635\n\t                var Kil = Ki.low;                                                                                     // 11636\n                                                                                                                       // 11637\n\t                var t1l = hl + sigma1l;                                                                               // 11638\n\t                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);                                          // 11639\n\t                var t1l = t1l + chl;                                                                                  // 11640\n\t                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);                                            // 11641\n\t                var t1l = t1l + Kil;                                                                                  // 11642\n\t                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);                                            // 11643\n\t                var t1l = t1l + Wil;                                                                                  // 11644\n\t                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);                                            // 11645\n                                                                                                                       // 11646\n\t                // t2 = sigma0 + maj                                                                                  // 11647\n\t                var t2l = sigma0l + majl;                                                                             // 11648\n\t                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);                                   // 11649\n                                                                                                                       // 11650\n\t                // Update working variables                                                                           // 11651\n\t                hh = gh;                                                                                              // 11652\n\t                hl = gl;                                                                                              // 11653\n\t                gh = fh;                                                                                              // 11654\n\t                gl = fl;                                                                                              // 11655\n\t                fh = eh;                                                                                              // 11656\n\t                fl = el;                                                                                              // 11657\n\t                el = (dl + t1l) | 0;                                                                                  // 11658\n\t                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;                                              // 11659\n\t                dh = ch;                                                                                              // 11660\n\t                dl = cl;                                                                                              // 11661\n\t                ch = bh;                                                                                              // 11662\n\t                cl = bl;                                                                                              // 11663\n\t                bh = ah;                                                                                              // 11664\n\t                bl = al;                                                                                              // 11665\n\t                al = (t1l + t2l) | 0;                                                                                 // 11666\n\t                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;                                            // 11667\n\t            }                                                                                                         // 11668\n                                                                                                                       // 11669\n\t            // Intermediate hash value                                                                                // 11670\n\t            H0l = H0.low  = (H0l + al);                                                                               // 11671\n\t            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));                                                // 11672\n\t            H1l = H1.low  = (H1l + bl);                                                                               // 11673\n\t            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));                                                // 11674\n\t            H2l = H2.low  = (H2l + cl);                                                                               // 11675\n\t            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));                                                // 11676\n\t            H3l = H3.low  = (H3l + dl);                                                                               // 11677\n\t            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));                                                // 11678\n\t            H4l = H4.low  = (H4l + el);                                                                               // 11679\n\t            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));                                                // 11680\n\t            H5l = H5.low  = (H5l + fl);                                                                               // 11681\n\t            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));                                                // 11682\n\t            H6l = H6.low  = (H6l + gl);                                                                               // 11683\n\t            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));                                                // 11684\n\t            H7l = H7.low  = (H7l + hl);                                                                               // 11685\n\t            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));                                                // 11686\n\t        },                                                                                                            // 11687\n                                                                                                                       // 11688\n\t        _doFinalize: function () {                                                                                    // 11689\n\t            // Shortcuts                                                                                              // 11690\n\t            var data = this._data;                                                                                    // 11691\n\t            var dataWords = data.words;                                                                               // 11692\n                                                                                                                       // 11693\n\t            var nBitsTotal = this._nDataBytes * 8;                                                                    // 11694\n\t            var nBitsLeft = data.sigBytes * 8;                                                                        // 11695\n                                                                                                                       // 11696\n\t            // Add padding                                                                                            // 11697\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 11698\n\t            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);                 // 11699\n\t            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;                                           // 11700\n\t            data.sigBytes = dataWords.length * 4;                                                                     // 11701\n                                                                                                                       // 11702\n\t            // Hash final blocks                                                                                      // 11703\n\t            this._process();                                                                                          // 11704\n                                                                                                                       // 11705\n\t            // Convert hash to 32-bit word array before returning                                                     // 11706\n\t            var hash = this._hash.toX32();                                                                            // 11707\n                                                                                                                       // 11708\n\t            // Return final computed hash                                                                             // 11709\n\t            return hash;                                                                                              // 11710\n\t        },                                                                                                            // 11711\n                                                                                                                       // 11712\n\t        clone: function () {                                                                                          // 11713\n\t            var clone = Hasher.clone.call(this);                                                                      // 11714\n\t            clone._hash = this._hash.clone();                                                                         // 11715\n                                                                                                                       // 11716\n\t            return clone;                                                                                             // 11717\n\t        },                                                                                                            // 11718\n                                                                                                                       // 11719\n\t        blockSize: 1024/32                                                                                            // 11720\n\t    });                                                                                                               // 11721\n                                                                                                                       // 11722\n\t    /**                                                                                                               // 11723\n\t     * Shortcut function to the hasher's object interface.                                                            // 11724\n\t     *                                                                                                                // 11725\n\t     * @param {WordArray|string} message The message to hash.                                                         // 11726\n\t     *                                                                                                                // 11727\n\t     * @return {WordArray} The hash.                                                                                  // 11728\n\t     *                                                                                                                // 11729\n\t     * @static                                                                                                        // 11730\n\t     *                                                                                                                // 11731\n\t     * @example                                                                                                       // 11732\n\t     *                                                                                                                // 11733\n\t     *     var hash = CryptoJS.SHA512('message');                                                                     // 11734\n\t     *     var hash = CryptoJS.SHA512(wordArray);                                                                     // 11735\n\t     */                                                                                                               // 11736\n\t    C.SHA512 = Hasher._createHelper(SHA512);                                                                          // 11737\n                                                                                                                       // 11738\n\t    /**                                                                                                               // 11739\n\t     * Shortcut function to the HMAC's object interface.                                                              // 11740\n\t     *                                                                                                                // 11741\n\t     * @param {WordArray|string} message The message to hash.                                                         // 11742\n\t     * @param {WordArray|string} key The secret key.                                                                  // 11743\n\t     *                                                                                                                // 11744\n\t     * @return {WordArray} The HMAC.                                                                                  // 11745\n\t     *                                                                                                                // 11746\n\t     * @static                                                                                                        // 11747\n\t     *                                                                                                                // 11748\n\t     * @example                                                                                                       // 11749\n\t     *                                                                                                                // 11750\n\t     *     var hmac = CryptoJS.HmacSHA512(message, key);                                                              // 11751\n\t     */                                                                                                               // 11752\n\t    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);                                                                  // 11753\n\t}());                                                                                                                 // 11754\n                                                                                                                       // 11755\n                                                                                                                       // 11756\n\treturn CryptoJS.SHA512;                                                                                               // 11757\n                                                                                                                       // 11758\n}));                                                                                                                   // 11759\n},{\"./core\":51,\"./x64-core\":82}],81:[function(require,module,exports){                                                 // 11760\n;(function (root, factory, undef) {                                                                                    // 11761\n\tif (typeof exports === \"object\") {                                                                                    // 11762\n\t\t// CommonJS                                                                                                          // 11763\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}                                                                                                                     // 11765\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 11766\n\t\t// AMD                                                                                                               // 11767\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);                                   // 11768\n\t}                                                                                                                     // 11769\n\telse {                                                                                                                // 11770\n\t\t// Global (browser)                                                                                                  // 11771\n\t\tfactory(root.CryptoJS);                                                                                              // 11772\n\t}                                                                                                                     // 11773\n}(this, function (CryptoJS) {                                                                                          // 11774\n                                                                                                                       // 11775\n\t(function () {                                                                                                        // 11776\n\t    // Shortcuts                                                                                                      // 11777\n\t    var C = CryptoJS;                                                                                                 // 11778\n\t    var C_lib = C.lib;                                                                                                // 11779\n\t    var WordArray = C_lib.WordArray;                                                                                  // 11780\n\t    var BlockCipher = C_lib.BlockCipher;                                                                              // 11781\n\t    var C_algo = C.algo;                                                                                              // 11782\n                                                                                                                       // 11783\n\t    // Permuted Choice 1 constants                                                                                    // 11784\n\t    var PC1 = [                                                                                                       // 11785\n\t        57, 49, 41, 33, 25, 17, 9,  1,                                                                                // 11786\n\t        58, 50, 42, 34, 26, 18, 10, 2,                                                                                // 11787\n\t        59, 51, 43, 35, 27, 19, 11, 3,                                                                                // 11788\n\t        60, 52, 44, 36, 63, 55, 47, 39,                                                                               // 11789\n\t        31, 23, 15, 7,  62, 54, 46, 38,                                                                               // 11790\n\t        30, 22, 14, 6,  61, 53, 45, 37,                                                                               // 11791\n\t        29, 21, 13, 5,  28, 20, 12, 4                                                                                 // 11792\n\t    ];                                                                                                                // 11793\n                                                                                                                       // 11794\n\t    // Permuted Choice 2 constants                                                                                    // 11795\n\t    var PC2 = [                                                                                                       // 11796\n\t        14, 17, 11, 24, 1,  5,                                                                                        // 11797\n\t        3,  28, 15, 6,  21, 10,                                                                                       // 11798\n\t        23, 19, 12, 4,  26, 8,                                                                                        // 11799\n\t        16, 7,  27, 20, 13, 2,                                                                                        // 11800\n\t        41, 52, 31, 37, 47, 55,                                                                                       // 11801\n\t        30, 40, 51, 45, 33, 48,                                                                                       // 11802\n\t        44, 49, 39, 56, 34, 53,                                                                                       // 11803\n\t        46, 42, 50, 36, 29, 32                                                                                        // 11804\n\t    ];                                                                                                                // 11805\n                                                                                                                       // 11806\n\t    // Cumulative bit shift constants                                                                                 // 11807\n\t    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];                                // 11808\n                                                                                                                       // 11809\n\t    // SBOXes and round permutation constants                                                                         // 11810\n\t    var SBOX_P = [                                                                                                    // 11811\n\t        {                                                                                                             // 11812\n\t            0x0: 0x808200,                                                                                            // 11813\n\t            0x10000000: 0x8000,                                                                                       // 11814\n\t            0x20000000: 0x808002,                                                                                     // 11815\n\t            0x30000000: 0x2,                                                                                          // 11816\n\t            0x40000000: 0x200,                                                                                        // 11817\n\t            0x50000000: 0x808202,                                                                                     // 11818\n\t            0x60000000: 0x800202,                                                                                     // 11819\n\t            0x70000000: 0x800000,                                                                                     // 11820\n\t            0x80000000: 0x202,                                                                                        // 11821\n\t            0x90000000: 0x800200,                                                                                     // 11822\n\t            0xa0000000: 0x8200,                                                                                       // 11823\n\t            0xb0000000: 0x808000,                                                                                     // 11824\n\t            0xc0000000: 0x8002,                                                                                       // 11825\n\t            0xd0000000: 0x800002,                                                                                     // 11826\n\t            0xe0000000: 0x0,                                                                                          // 11827\n\t            0xf0000000: 0x8202,                                                                                       // 11828\n\t            0x8000000: 0x0,                                                                                           // 11829\n\t            0x18000000: 0x808202,                                                                                     // 11830\n\t            0x28000000: 0x8202,                                                                                       // 11831\n\t            0x38000000: 0x8000,                                                                                       // 11832\n\t            0x48000000: 0x808200,                                                                                     // 11833\n\t            0x58000000: 0x200,                                                                                        // 11834\n\t            0x68000000: 0x808002,                                                                                     // 11835\n\t            0x78000000: 0x2,                                                                                          // 11836\n\t            0x88000000: 0x800200,                                                                                     // 11837\n\t            0x98000000: 0x8200,                                                                                       // 11838\n\t            0xa8000000: 0x808000,                                                                                     // 11839\n\t            0xb8000000: 0x800202,                                                                                     // 11840\n\t            0xc8000000: 0x800002,                                                                                     // 11841\n\t            0xd8000000: 0x8002,                                                                                       // 11842\n\t            0xe8000000: 0x202,                                                                                        // 11843\n\t            0xf8000000: 0x800000,                                                                                     // 11844\n\t            0x1: 0x8000,                                                                                              // 11845\n\t            0x10000001: 0x2,                                                                                          // 11846\n\t            0x20000001: 0x808200,                                                                                     // 11847\n\t            0x30000001: 0x800000,                                                                                     // 11848\n\t            0x40000001: 0x808002,                                                                                     // 11849\n\t            0x50000001: 0x8200,                                                                                       // 11850\n\t            0x60000001: 0x200,                                                                                        // 11851\n\t            0x70000001: 0x800202,                                                                                     // 11852\n\t            0x80000001: 0x808202,                                                                                     // 11853\n\t            0x90000001: 0x808000,                                                                                     // 11854\n\t            0xa0000001: 0x800002,                                                                                     // 11855\n\t            0xb0000001: 0x8202,                                                                                       // 11856\n\t            0xc0000001: 0x202,                                                                                        // 11857\n\t            0xd0000001: 0x800200,                                                                                     // 11858\n\t            0xe0000001: 0x8002,                                                                                       // 11859\n\t            0xf0000001: 0x0,                                                                                          // 11860\n\t            0x8000001: 0x808202,                                                                                      // 11861\n\t            0x18000001: 0x808000,                                                                                     // 11862\n\t            0x28000001: 0x800000,                                                                                     // 11863\n\t            0x38000001: 0x200,                                                                                        // 11864\n\t            0x48000001: 0x8000,                                                                                       // 11865\n\t            0x58000001: 0x800002,                                                                                     // 11866\n\t            0x68000001: 0x2,                                                                                          // 11867\n\t            0x78000001: 0x8202,                                                                                       // 11868\n\t            0x88000001: 0x8002,                                                                                       // 11869\n\t            0x98000001: 0x800202,                                                                                     // 11870\n\t            0xa8000001: 0x202,                                                                                        // 11871\n\t            0xb8000001: 0x808200,                                                                                     // 11872\n\t            0xc8000001: 0x800200,                                                                                     // 11873\n\t            0xd8000001: 0x0,                                                                                          // 11874\n\t            0xe8000001: 0x8200,                                                                                       // 11875\n\t            0xf8000001: 0x808002                                                                                      // 11876\n\t        },                                                                                                            // 11877\n\t        {                                                                                                             // 11878\n\t            0x0: 0x40084010,                                                                                          // 11879\n\t            0x1000000: 0x4000,                                                                                        // 11880\n\t            0x2000000: 0x80000,                                                                                       // 11881\n\t            0x3000000: 0x40080010,                                                                                    // 11882\n\t            0x4000000: 0x40000010,                                                                                    // 11883\n\t            0x5000000: 0x40084000,                                                                                    // 11884\n\t            0x6000000: 0x40004000,                                                                                    // 11885\n\t            0x7000000: 0x10,                                                                                          // 11886\n\t            0x8000000: 0x84000,                                                                                       // 11887\n\t            0x9000000: 0x40004010,                                                                                    // 11888\n\t            0xa000000: 0x40000000,                                                                                    // 11889\n\t            0xb000000: 0x84010,                                                                                       // 11890\n\t            0xc000000: 0x80010,                                                                                       // 11891\n\t            0xd000000: 0x0,                                                                                           // 11892\n\t            0xe000000: 0x4010,                                                                                        // 11893\n\t            0xf000000: 0x40080000,                                                                                    // 11894\n\t            0x800000: 0x40004000,                                                                                     // 11895\n\t            0x1800000: 0x84010,                                                                                       // 11896\n\t            0x2800000: 0x10,                                                                                          // 11897\n\t            0x3800000: 0x40004010,                                                                                    // 11898\n\t            0x4800000: 0x40084010,                                                                                    // 11899\n\t            0x5800000: 0x40000000,                                                                                    // 11900\n\t            0x6800000: 0x80000,                                                                                       // 11901\n\t            0x7800000: 0x40080010,                                                                                    // 11902\n\t            0x8800000: 0x80010,                                                                                       // 11903\n\t            0x9800000: 0x0,                                                                                           // 11904\n\t            0xa800000: 0x4000,                                                                                        // 11905\n\t            0xb800000: 0x40080000,                                                                                    // 11906\n\t            0xc800000: 0x40000010,                                                                                    // 11907\n\t            0xd800000: 0x84000,                                                                                       // 11908\n\t            0xe800000: 0x40084000,                                                                                    // 11909\n\t            0xf800000: 0x4010,                                                                                        // 11910\n\t            0x10000000: 0x0,                                                                                          // 11911\n\t            0x11000000: 0x40080010,                                                                                   // 11912\n\t            0x12000000: 0x40004010,                                                                                   // 11913\n\t            0x13000000: 0x40084000,                                                                                   // 11914\n\t            0x14000000: 0x40080000,                                                                                   // 11915\n\t            0x15000000: 0x10,                                                                                         // 11916\n\t            0x16000000: 0x84010,                                                                                      // 11917\n\t            0x17000000: 0x4000,                                                                                       // 11918\n\t            0x18000000: 0x4010,                                                                                       // 11919\n\t            0x19000000: 0x80000,                                                                                      // 11920\n\t            0x1a000000: 0x80010,                                                                                      // 11921\n\t            0x1b000000: 0x40000010,                                                                                   // 11922\n\t            0x1c000000: 0x84000,                                                                                      // 11923\n\t            0x1d000000: 0x40004000,                                                                                   // 11924\n\t            0x1e000000: 0x40000000,                                                                                   // 11925\n\t            0x1f000000: 0x40084010,                                                                                   // 11926\n\t            0x10800000: 0x84010,                                                                                      // 11927\n\t            0x11800000: 0x80000,                                                                                      // 11928\n\t            0x12800000: 0x40080000,                                                                                   // 11929\n\t            0x13800000: 0x4000,                                                                                       // 11930\n\t            0x14800000: 0x40004000,                                                                                   // 11931\n\t            0x15800000: 0x40084010,                                                                                   // 11932\n\t            0x16800000: 0x10,                                                                                         // 11933\n\t            0x17800000: 0x40000000,                                                                                   // 11934\n\t            0x18800000: 0x40084000,                                                                                   // 11935\n\t            0x19800000: 0x40000010,                                                                                   // 11936\n\t            0x1a800000: 0x40004010,                                                                                   // 11937\n\t            0x1b800000: 0x80010,                                                                                      // 11938\n\t            0x1c800000: 0x0,                                                                                          // 11939\n\t            0x1d800000: 0x4010,                                                                                       // 11940\n\t            0x1e800000: 0x40080010,                                                                                   // 11941\n\t            0x1f800000: 0x84000                                                                                       // 11942\n\t        },                                                                                                            // 11943\n\t        {                                                                                                             // 11944\n\t            0x0: 0x104,                                                                                               // 11945\n\t            0x100000: 0x0,                                                                                            // 11946\n\t            0x200000: 0x4000100,                                                                                      // 11947\n\t            0x300000: 0x10104,                                                                                        // 11948\n\t            0x400000: 0x10004,                                                                                        // 11949\n\t            0x500000: 0x4000004,                                                                                      // 11950\n\t            0x600000: 0x4010104,                                                                                      // 11951\n\t            0x700000: 0x4010000,                                                                                      // 11952\n\t            0x800000: 0x4000000,                                                                                      // 11953\n\t            0x900000: 0x4010100,                                                                                      // 11954\n\t            0xa00000: 0x10100,                                                                                        // 11955\n\t            0xb00000: 0x4010004,                                                                                      // 11956\n\t            0xc00000: 0x4000104,                                                                                      // 11957\n\t            0xd00000: 0x10000,                                                                                        // 11958\n\t            0xe00000: 0x4,                                                                                            // 11959\n\t            0xf00000: 0x100,                                                                                          // 11960\n\t            0x80000: 0x4010100,                                                                                       // 11961\n\t            0x180000: 0x4010004,                                                                                      // 11962\n\t            0x280000: 0x0,                                                                                            // 11963\n\t            0x380000: 0x4000100,                                                                                      // 11964\n\t            0x480000: 0x4000004,                                                                                      // 11965\n\t            0x580000: 0x10000,                                                                                        // 11966\n\t            0x680000: 0x10004,                                                                                        // 11967\n\t            0x780000: 0x104,                                                                                          // 11968\n\t            0x880000: 0x4,                                                                                            // 11969\n\t            0x980000: 0x100,                                                                                          // 11970\n\t            0xa80000: 0x4010000,                                                                                      // 11971\n\t            0xb80000: 0x10104,                                                                                        // 11972\n\t            0xc80000: 0x10100,                                                                                        // 11973\n\t            0xd80000: 0x4000104,                                                                                      // 11974\n\t            0xe80000: 0x4010104,                                                                                      // 11975\n\t            0xf80000: 0x4000000,                                                                                      // 11976\n\t            0x1000000: 0x4010100,                                                                                     // 11977\n\t            0x1100000: 0x10004,                                                                                       // 11978\n\t            0x1200000: 0x10000,                                                                                       // 11979\n\t            0x1300000: 0x4000100,                                                                                     // 11980\n\t            0x1400000: 0x100,                                                                                         // 11981\n\t            0x1500000: 0x4010104,                                                                                     // 11982\n\t            0x1600000: 0x4000004,                                                                                     // 11983\n\t            0x1700000: 0x0,                                                                                           // 11984\n\t            0x1800000: 0x4000104,                                                                                     // 11985\n\t            0x1900000: 0x4000000,                                                                                     // 11986\n\t            0x1a00000: 0x4,                                                                                           // 11987\n\t            0x1b00000: 0x10100,                                                                                       // 11988\n\t            0x1c00000: 0x4010000,                                                                                     // 11989\n\t            0x1d00000: 0x104,                                                                                         // 11990\n\t            0x1e00000: 0x10104,                                                                                       // 11991\n\t            0x1f00000: 0x4010004,                                                                                     // 11992\n\t            0x1080000: 0x4000000,                                                                                     // 11993\n\t            0x1180000: 0x104,                                                                                         // 11994\n\t            0x1280000: 0x4010100,                                                                                     // 11995\n\t            0x1380000: 0x0,                                                                                           // 11996\n\t            0x1480000: 0x10004,                                                                                       // 11997\n\t            0x1580000: 0x4000100,                                                                                     // 11998\n\t            0x1680000: 0x100,                                                                                         // 11999\n\t            0x1780000: 0x4010004,                                                                                     // 12000\n\t            0x1880000: 0x10000,                                                                                       // 12001\n\t            0x1980000: 0x4010104,                                                                                     // 12002\n\t            0x1a80000: 0x10104,                                                                                       // 12003\n\t            0x1b80000: 0x4000004,                                                                                     // 12004\n\t            0x1c80000: 0x4000104,                                                                                     // 12005\n\t            0x1d80000: 0x4010000,                                                                                     // 12006\n\t            0x1e80000: 0x4,                                                                                           // 12007\n\t            0x1f80000: 0x10100                                                                                        // 12008\n\t        },                                                                                                            // 12009\n\t        {                                                                                                             // 12010\n\t            0x0: 0x80401000,                                                                                          // 12011\n\t            0x10000: 0x80001040,                                                                                      // 12012\n\t            0x20000: 0x401040,                                                                                        // 12013\n\t            0x30000: 0x80400000,                                                                                      // 12014\n\t            0x40000: 0x0,                                                                                             // 12015\n\t            0x50000: 0x401000,                                                                                        // 12016\n\t            0x60000: 0x80000040,                                                                                      // 12017\n\t            0x70000: 0x400040,                                                                                        // 12018\n\t            0x80000: 0x80000000,                                                                                      // 12019\n\t            0x90000: 0x400000,                                                                                        // 12020\n\t            0xa0000: 0x40,                                                                                            // 12021\n\t            0xb0000: 0x80001000,                                                                                      // 12022\n\t            0xc0000: 0x80400040,                                                                                      // 12023\n\t            0xd0000: 0x1040,                                                                                          // 12024\n\t            0xe0000: 0x1000,                                                                                          // 12025\n\t            0xf0000: 0x80401040,                                                                                      // 12026\n\t            0x8000: 0x80001040,                                                                                       // 12027\n\t            0x18000: 0x40,                                                                                            // 12028\n\t            0x28000: 0x80400040,                                                                                      // 12029\n\t            0x38000: 0x80001000,                                                                                      // 12030\n\t            0x48000: 0x401000,                                                                                        // 12031\n\t            0x58000: 0x80401040,                                                                                      // 12032\n\t            0x68000: 0x0,                                                                                             // 12033\n\t            0x78000: 0x80400000,                                                                                      // 12034\n\t            0x88000: 0x1000,                                                                                          // 12035\n\t            0x98000: 0x80401000,                                                                                      // 12036\n\t            0xa8000: 0x400000,                                                                                        // 12037\n\t            0xb8000: 0x1040,                                                                                          // 12038\n\t            0xc8000: 0x80000000,                                                                                      // 12039\n\t            0xd8000: 0x400040,                                                                                        // 12040\n\t            0xe8000: 0x401040,                                                                                        // 12041\n\t            0xf8000: 0x80000040,                                                                                      // 12042\n\t            0x100000: 0x400040,                                                                                       // 12043\n\t            0x110000: 0x401000,                                                                                       // 12044\n\t            0x120000: 0x80000040,                                                                                     // 12045\n\t            0x130000: 0x0,                                                                                            // 12046\n\t            0x140000: 0x1040,                                                                                         // 12047\n\t            0x150000: 0x80400040,                                                                                     // 12048\n\t            0x160000: 0x80401000,                                                                                     // 12049\n\t            0x170000: 0x80001040,                                                                                     // 12050\n\t            0x180000: 0x80401040,                                                                                     // 12051\n\t            0x190000: 0x80000000,                                                                                     // 12052\n\t            0x1a0000: 0x80400000,                                                                                     // 12053\n\t            0x1b0000: 0x401040,                                                                                       // 12054\n\t            0x1c0000: 0x80001000,                                                                                     // 12055\n\t            0x1d0000: 0x400000,                                                                                       // 12056\n\t            0x1e0000: 0x40,                                                                                           // 12057\n\t            0x1f0000: 0x1000,                                                                                         // 12058\n\t            0x108000: 0x80400000,                                                                                     // 12059\n\t            0x118000: 0x80401040,                                                                                     // 12060\n\t            0x128000: 0x0,                                                                                            // 12061\n\t            0x138000: 0x401000,                                                                                       // 12062\n\t            0x148000: 0x400040,                                                                                       // 12063\n\t            0x158000: 0x80000000,                                                                                     // 12064\n\t            0x168000: 0x80001040,                                                                                     // 12065\n\t            0x178000: 0x40,                                                                                           // 12066\n\t            0x188000: 0x80000040,                                                                                     // 12067\n\t            0x198000: 0x1000,                                                                                         // 12068\n\t            0x1a8000: 0x80001000,                                                                                     // 12069\n\t            0x1b8000: 0x80400040,                                                                                     // 12070\n\t            0x1c8000: 0x1040,                                                                                         // 12071\n\t            0x1d8000: 0x80401000,                                                                                     // 12072\n\t            0x1e8000: 0x400000,                                                                                       // 12073\n\t            0x1f8000: 0x401040                                                                                        // 12074\n\t        },                                                                                                            // 12075\n\t        {                                                                                                             // 12076\n\t            0x0: 0x80,                                                                                                // 12077\n\t            0x1000: 0x1040000,                                                                                        // 12078\n\t            0x2000: 0x40000,                                                                                          // 12079\n\t            0x3000: 0x20000000,                                                                                       // 12080\n\t            0x4000: 0x20040080,                                                                                       // 12081\n\t            0x5000: 0x1000080,                                                                                        // 12082\n\t            0x6000: 0x21000080,                                                                                       // 12083\n\t            0x7000: 0x40080,                                                                                          // 12084\n\t            0x8000: 0x1000000,                                                                                        // 12085\n\t            0x9000: 0x20040000,                                                                                       // 12086\n\t            0xa000: 0x20000080,                                                                                       // 12087\n\t            0xb000: 0x21040080,                                                                                       // 12088\n\t            0xc000: 0x21040000,                                                                                       // 12089\n\t            0xd000: 0x0,                                                                                              // 12090\n\t            0xe000: 0x1040080,                                                                                        // 12091\n\t            0xf000: 0x21000000,                                                                                       // 12092\n\t            0x800: 0x1040080,                                                                                         // 12093\n\t            0x1800: 0x21000080,                                                                                       // 12094\n\t            0x2800: 0x80,                                                                                             // 12095\n\t            0x3800: 0x1040000,                                                                                        // 12096\n\t            0x4800: 0x40000,                                                                                          // 12097\n\t            0x5800: 0x20040080,                                                                                       // 12098\n\t            0x6800: 0x21040000,                                                                                       // 12099\n\t            0x7800: 0x20000000,                                                                                       // 12100\n\t            0x8800: 0x20040000,                                                                                       // 12101\n\t            0x9800: 0x0,                                                                                              // 12102\n\t            0xa800: 0x21040080,                                                                                       // 12103\n\t            0xb800: 0x1000080,                                                                                        // 12104\n\t            0xc800: 0x20000080,                                                                                       // 12105\n\t            0xd800: 0x21000000,                                                                                       // 12106\n\t            0xe800: 0x1000000,                                                                                        // 12107\n\t            0xf800: 0x40080,                                                                                          // 12108\n\t            0x10000: 0x40000,                                                                                         // 12109\n\t            0x11000: 0x80,                                                                                            // 12110\n\t            0x12000: 0x20000000,                                                                                      // 12111\n\t            0x13000: 0x21000080,                                                                                      // 12112\n\t            0x14000: 0x1000080,                                                                                       // 12113\n\t            0x15000: 0x21040000,                                                                                      // 12114\n\t            0x16000: 0x20040080,                                                                                      // 12115\n\t            0x17000: 0x1000000,                                                                                       // 12116\n\t            0x18000: 0x21040080,                                                                                      // 12117\n\t            0x19000: 0x21000000,                                                                                      // 12118\n\t            0x1a000: 0x1040000,                                                                                       // 12119\n\t            0x1b000: 0x20040000,                                                                                      // 12120\n\t            0x1c000: 0x40080,                                                                                         // 12121\n\t            0x1d000: 0x20000080,                                                                                      // 12122\n\t            0x1e000: 0x0,                                                                                             // 12123\n\t            0x1f000: 0x1040080,                                                                                       // 12124\n\t            0x10800: 0x21000080,                                                                                      // 12125\n\t            0x11800: 0x1000000,                                                                                       // 12126\n\t            0x12800: 0x1040000,                                                                                       // 12127\n\t            0x13800: 0x20040080,                                                                                      // 12128\n\t            0x14800: 0x20000000,                                                                                      // 12129\n\t            0x15800: 0x1040080,                                                                                       // 12130\n\t            0x16800: 0x80,                                                                                            // 12131\n\t            0x17800: 0x21040000,                                                                                      // 12132\n\t            0x18800: 0x40080,                                                                                         // 12133\n\t            0x19800: 0x21040080,                                                                                      // 12134\n\t            0x1a800: 0x0,                                                                                             // 12135\n\t            0x1b800: 0x21000000,                                                                                      // 12136\n\t            0x1c800: 0x1000080,                                                                                       // 12137\n\t            0x1d800: 0x40000,                                                                                         // 12138\n\t            0x1e800: 0x20040000,                                                                                      // 12139\n\t            0x1f800: 0x20000080                                                                                       // 12140\n\t        },                                                                                                            // 12141\n\t        {                                                                                                             // 12142\n\t            0x0: 0x10000008,                                                                                          // 12143\n\t            0x100: 0x2000,                                                                                            // 12144\n\t            0x200: 0x10200000,                                                                                        // 12145\n\t            0x300: 0x10202008,                                                                                        // 12146\n\t            0x400: 0x10002000,                                                                                        // 12147\n\t            0x500: 0x200000,                                                                                          // 12148\n\t            0x600: 0x200008,                                                                                          // 12149\n\t            0x700: 0x10000000,                                                                                        // 12150\n\t            0x800: 0x0,                                                                                               // 12151\n\t            0x900: 0x10002008,                                                                                        // 12152\n\t            0xa00: 0x202000,                                                                                          // 12153\n\t            0xb00: 0x8,                                                                                               // 12154\n\t            0xc00: 0x10200008,                                                                                        // 12155\n\t            0xd00: 0x202008,                                                                                          // 12156\n\t            0xe00: 0x2008,                                                                                            // 12157\n\t            0xf00: 0x10202000,                                                                                        // 12158\n\t            0x80: 0x10200000,                                                                                         // 12159\n\t            0x180: 0x10202008,                                                                                        // 12160\n\t            0x280: 0x8,                                                                                               // 12161\n\t            0x380: 0x200000,                                                                                          // 12162\n\t            0x480: 0x202008,                                                                                          // 12163\n\t            0x580: 0x10000008,                                                                                        // 12164\n\t            0x680: 0x10002000,                                                                                        // 12165\n\t            0x780: 0x2008,                                                                                            // 12166\n\t            0x880: 0x200008,                                                                                          // 12167\n\t            0x980: 0x2000,                                                                                            // 12168\n\t            0xa80: 0x10002008,                                                                                        // 12169\n\t            0xb80: 0x10200008,                                                                                        // 12170\n\t            0xc80: 0x0,                                                                                               // 12171\n\t            0xd80: 0x10202000,                                                                                        // 12172\n\t            0xe80: 0x202000,                                                                                          // 12173\n\t            0xf80: 0x10000000,                                                                                        // 12174\n\t            0x1000: 0x10002000,                                                                                       // 12175\n\t            0x1100: 0x10200008,                                                                                       // 12176\n\t            0x1200: 0x10202008,                                                                                       // 12177\n\t            0x1300: 0x2008,                                                                                           // 12178\n\t            0x1400: 0x200000,                                                                                         // 12179\n\t            0x1500: 0x10000000,                                                                                       // 12180\n\t            0x1600: 0x10000008,                                                                                       // 12181\n\t            0x1700: 0x202000,                                                                                         // 12182\n\t            0x1800: 0x202008,                                                                                         // 12183\n\t            0x1900: 0x0,                                                                                              // 12184\n\t            0x1a00: 0x8,                                                                                              // 12185\n\t            0x1b00: 0x10200000,                                                                                       // 12186\n\t            0x1c00: 0x2000,                                                                                           // 12187\n\t            0x1d00: 0x10002008,                                                                                       // 12188\n\t            0x1e00: 0x10202000,                                                                                       // 12189\n\t            0x1f00: 0x200008,                                                                                         // 12190\n\t            0x1080: 0x8,                                                                                              // 12191\n\t            0x1180: 0x202000,                                                                                         // 12192\n\t            0x1280: 0x200000,                                                                                         // 12193\n\t            0x1380: 0x10000008,                                                                                       // 12194\n\t            0x1480: 0x10002000,                                                                                       // 12195\n\t            0x1580: 0x2008,                                                                                           // 12196\n\t            0x1680: 0x10202008,                                                                                       // 12197\n\t            0x1780: 0x10200000,                                                                                       // 12198\n\t            0x1880: 0x10202000,                                                                                       // 12199\n\t            0x1980: 0x10200008,                                                                                       // 12200\n\t            0x1a80: 0x2000,                                                                                           // 12201\n\t            0x1b80: 0x202008,                                                                                         // 12202\n\t            0x1c80: 0x200008,                                                                                         // 12203\n\t            0x1d80: 0x0,                                                                                              // 12204\n\t            0x1e80: 0x10000000,                                                                                       // 12205\n\t            0x1f80: 0x10002008                                                                                        // 12206\n\t        },                                                                                                            // 12207\n\t        {                                                                                                             // 12208\n\t            0x0: 0x100000,                                                                                            // 12209\n\t            0x10: 0x2000401,                                                                                          // 12210\n\t            0x20: 0x400,                                                                                              // 12211\n\t            0x30: 0x100401,                                                                                           // 12212\n\t            0x40: 0x2100401,                                                                                          // 12213\n\t            0x50: 0x0,                                                                                                // 12214\n\t            0x60: 0x1,                                                                                                // 12215\n\t            0x70: 0x2100001,                                                                                          // 12216\n\t            0x80: 0x2000400,                                                                                          // 12217\n\t            0x90: 0x100001,                                                                                           // 12218\n\t            0xa0: 0x2000001,                                                                                          // 12219\n\t            0xb0: 0x2100400,                                                                                          // 12220\n\t            0xc0: 0x2100000,                                                                                          // 12221\n\t            0xd0: 0x401,                                                                                              // 12222\n\t            0xe0: 0x100400,                                                                                           // 12223\n\t            0xf0: 0x2000000,                                                                                          // 12224\n\t            0x8: 0x2100001,                                                                                           // 12225\n\t            0x18: 0x0,                                                                                                // 12226\n\t            0x28: 0x2000401,                                                                                          // 12227\n\t            0x38: 0x2100400,                                                                                          // 12228\n\t            0x48: 0x100000,                                                                                           // 12229\n\t            0x58: 0x2000001,                                                                                          // 12230\n\t            0x68: 0x2000000,                                                                                          // 12231\n\t            0x78: 0x401,                                                                                              // 12232\n\t            0x88: 0x100401,                                                                                           // 12233\n\t            0x98: 0x2000400,                                                                                          // 12234\n\t            0xa8: 0x2100000,                                                                                          // 12235\n\t            0xb8: 0x100001,                                                                                           // 12236\n\t            0xc8: 0x400,                                                                                              // 12237\n\t            0xd8: 0x2100401,                                                                                          // 12238\n\t            0xe8: 0x1,                                                                                                // 12239\n\t            0xf8: 0x100400,                                                                                           // 12240\n\t            0x100: 0x2000000,                                                                                         // 12241\n\t            0x110: 0x100000,                                                                                          // 12242\n\t            0x120: 0x2000401,                                                                                         // 12243\n\t            0x130: 0x2100001,                                                                                         // 12244\n\t            0x140: 0x100001,                                                                                          // 12245\n\t            0x150: 0x2000400,                                                                                         // 12246\n\t            0x160: 0x2100400,                                                                                         // 12247\n\t            0x170: 0x100401,                                                                                          // 12248\n\t            0x180: 0x401,                                                                                             // 12249\n\t            0x190: 0x2100401,                                                                                         // 12250\n\t            0x1a0: 0x100400,                                                                                          // 12251\n\t            0x1b0: 0x1,                                                                                               // 12252\n\t            0x1c0: 0x0,                                                                                               // 12253\n\t            0x1d0: 0x2100000,                                                                                         // 12254\n\t            0x1e0: 0x2000001,                                                                                         // 12255\n\t            0x1f0: 0x400,                                                                                             // 12256\n\t            0x108: 0x100400,                                                                                          // 12257\n\t            0x118: 0x2000401,                                                                                         // 12258\n\t            0x128: 0x2100001,                                                                                         // 12259\n\t            0x138: 0x1,                                                                                               // 12260\n\t            0x148: 0x2000000,                                                                                         // 12261\n\t            0x158: 0x100000,                                                                                          // 12262\n\t            0x168: 0x401,                                                                                             // 12263\n\t            0x178: 0x2100400,                                                                                         // 12264\n\t            0x188: 0x2000001,                                                                                         // 12265\n\t            0x198: 0x2100000,                                                                                         // 12266\n\t            0x1a8: 0x0,                                                                                               // 12267\n\t            0x1b8: 0x2100401,                                                                                         // 12268\n\t            0x1c8: 0x100401,                                                                                          // 12269\n\t            0x1d8: 0x400,                                                                                             // 12270\n\t            0x1e8: 0x2000400,                                                                                         // 12271\n\t            0x1f8: 0x100001                                                                                           // 12272\n\t        },                                                                                                            // 12273\n\t        {                                                                                                             // 12274\n\t            0x0: 0x8000820,                                                                                           // 12275\n\t            0x1: 0x20000,                                                                                             // 12276\n\t            0x2: 0x8000000,                                                                                           // 12277\n\t            0x3: 0x20,                                                                                                // 12278\n\t            0x4: 0x20020,                                                                                             // 12279\n\t            0x5: 0x8020820,                                                                                           // 12280\n\t            0x6: 0x8020800,                                                                                           // 12281\n\t            0x7: 0x800,                                                                                               // 12282\n\t            0x8: 0x8020000,                                                                                           // 12283\n\t            0x9: 0x8000800,                                                                                           // 12284\n\t            0xa: 0x20800,                                                                                             // 12285\n\t            0xb: 0x8020020,                                                                                           // 12286\n\t            0xc: 0x820,                                                                                               // 12287\n\t            0xd: 0x0,                                                                                                 // 12288\n\t            0xe: 0x8000020,                                                                                           // 12289\n\t            0xf: 0x20820,                                                                                             // 12290\n\t            0x80000000: 0x800,                                                                                        // 12291\n\t            0x80000001: 0x8020820,                                                                                    // 12292\n\t            0x80000002: 0x8000820,                                                                                    // 12293\n\t            0x80000003: 0x8000000,                                                                                    // 12294\n\t            0x80000004: 0x8020000,                                                                                    // 12295\n\t            0x80000005: 0x20800,                                                                                      // 12296\n\t            0x80000006: 0x20820,                                                                                      // 12297\n\t            0x80000007: 0x20,                                                                                         // 12298\n\t            0x80000008: 0x8000020,                                                                                    // 12299\n\t            0x80000009: 0x820,                                                                                        // 12300\n\t            0x8000000a: 0x20020,                                                                                      // 12301\n\t            0x8000000b: 0x8020800,                                                                                    // 12302\n\t            0x8000000c: 0x0,                                                                                          // 12303\n\t            0x8000000d: 0x8020020,                                                                                    // 12304\n\t            0x8000000e: 0x8000800,                                                                                    // 12305\n\t            0x8000000f: 0x20000,                                                                                      // 12306\n\t            0x10: 0x20820,                                                                                            // 12307\n\t            0x11: 0x8020800,                                                                                          // 12308\n\t            0x12: 0x20,                                                                                               // 12309\n\t            0x13: 0x800,                                                                                              // 12310\n\t            0x14: 0x8000800,                                                                                          // 12311\n\t            0x15: 0x8000020,                                                                                          // 12312\n\t            0x16: 0x8020020,                                                                                          // 12313\n\t            0x17: 0x20000,                                                                                            // 12314\n\t            0x18: 0x0,                                                                                                // 12315\n\t            0x19: 0x20020,                                                                                            // 12316\n\t            0x1a: 0x8020000,                                                                                          // 12317\n\t            0x1b: 0x8000820,                                                                                          // 12318\n\t            0x1c: 0x8020820,                                                                                          // 12319\n\t            0x1d: 0x20800,                                                                                            // 12320\n\t            0x1e: 0x820,                                                                                              // 12321\n\t            0x1f: 0x8000000,                                                                                          // 12322\n\t            0x80000010: 0x20000,                                                                                      // 12323\n\t            0x80000011: 0x800,                                                                                        // 12324\n\t            0x80000012: 0x8020020,                                                                                    // 12325\n\t            0x80000013: 0x20820,                                                                                      // 12326\n\t            0x80000014: 0x20,                                                                                         // 12327\n\t            0x80000015: 0x8020000,                                                                                    // 12328\n\t            0x80000016: 0x8000000,                                                                                    // 12329\n\t            0x80000017: 0x8000820,                                                                                    // 12330\n\t            0x80000018: 0x8020820,                                                                                    // 12331\n\t            0x80000019: 0x8000020,                                                                                    // 12332\n\t            0x8000001a: 0x8000800,                                                                                    // 12333\n\t            0x8000001b: 0x0,                                                                                          // 12334\n\t            0x8000001c: 0x20800,                                                                                      // 12335\n\t            0x8000001d: 0x820,                                                                                        // 12336\n\t            0x8000001e: 0x20020,                                                                                      // 12337\n\t            0x8000001f: 0x8020800                                                                                     // 12338\n\t        }                                                                                                             // 12339\n\t    ];                                                                                                                // 12340\n                                                                                                                       // 12341\n\t    // Masks that select the SBOX input                                                                               // 12342\n\t    var SBOX_MASK = [                                                                                                 // 12343\n\t        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,                                                               // 12344\n\t        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f                                                                // 12345\n\t    ];                                                                                                                // 12346\n                                                                                                                       // 12347\n\t    /**                                                                                                               // 12348\n\t     * DES block cipher algorithm.                                                                                    // 12349\n\t     */                                                                                                               // 12350\n\t    var DES = C_algo.DES = BlockCipher.extend({                                                                       // 12351\n\t        _doReset: function () {                                                                                       // 12352\n\t            // Shortcuts                                                                                              // 12353\n\t            var key = this._key;                                                                                      // 12354\n\t            var keyWords = key.words;                                                                                 // 12355\n                                                                                                                       // 12356\n\t            // Select 56 bits according to PC1                                                                        // 12357\n\t            var keyBits = [];                                                                                         // 12358\n\t            for (var i = 0; i < 56; i++) {                                                                            // 12359\n\t                var keyBitPos = PC1[i] - 1;                                                                           // 12360\n\t                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;                               // 12361\n\t            }                                                                                                         // 12362\n                                                                                                                       // 12363\n\t            // Assemble 16 subkeys                                                                                    // 12364\n\t            var subKeys = this._subKeys = [];                                                                         // 12365\n\t            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {                                                          // 12366\n\t                // Create subkey                                                                                      // 12367\n\t                var subKey = subKeys[nSubKey] = [];                                                                   // 12368\n                                                                                                                       // 12369\n\t                // Shortcut                                                                                           // 12370\n\t                var bitShift = BIT_SHIFTS[nSubKey];                                                                   // 12371\n                                                                                                                       // 12372\n\t                // Select 48 bits according to PC2                                                                    // 12373\n\t                for (var i = 0; i < 24; i++) {                                                                        // 12374\n\t                    // Select from the left 28 key bits                                                               // 12375\n\t                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);                   // 12376\n                                                                                                                       // 12377\n\t                    // Select from the right 28 key bits                                                              // 12378\n\t                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);\n\t                }                                                                                                     // 12380\n                                                                                                                       // 12381\n\t                // Since each subkey is applied to an expanded 32-bit input,                                          // 12382\n\t                // the subkey can be broken into 8 values scaled to 32-bits,                                          // 12383\n\t                // which allows the key to be used without expansion                                                  // 12384\n\t                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);                                                    // 12385\n\t                for (var i = 1; i < 7; i++) {                                                                         // 12386\n\t                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);                                                      // 12387\n\t                }                                                                                                     // 12388\n\t                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);                                                    // 12389\n\t            }                                                                                                         // 12390\n                                                                                                                       // 12391\n\t            // Compute inverse subkeys                                                                                // 12392\n\t            var invSubKeys = this._invSubKeys = [];                                                                   // 12393\n\t            for (var i = 0; i < 16; i++) {                                                                            // 12394\n\t                invSubKeys[i] = subKeys[15 - i];                                                                      // 12395\n\t            }                                                                                                         // 12396\n\t        },                                                                                                            // 12397\n                                                                                                                       // 12398\n\t        encryptBlock: function (M, offset) {                                                                          // 12399\n\t            this._doCryptBlock(M, offset, this._subKeys);                                                             // 12400\n\t        },                                                                                                            // 12401\n                                                                                                                       // 12402\n\t        decryptBlock: function (M, offset) {                                                                          // 12403\n\t            this._doCryptBlock(M, offset, this._invSubKeys);                                                          // 12404\n\t        },                                                                                                            // 12405\n                                                                                                                       // 12406\n\t        _doCryptBlock: function (M, offset, subKeys) {                                                                // 12407\n\t            // Get input                                                                                              // 12408\n\t            this._lBlock = M[offset];                                                                                 // 12409\n\t            this._rBlock = M[offset + 1];                                                                             // 12410\n                                                                                                                       // 12411\n\t            // Initial permutation                                                                                    // 12412\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);                                                                    // 12413\n\t            exchangeLR.call(this, 16, 0x0000ffff);                                                                    // 12414\n\t            exchangeRL.call(this, 2,  0x33333333);                                                                    // 12415\n\t            exchangeRL.call(this, 8,  0x00ff00ff);                                                                    // 12416\n\t            exchangeLR.call(this, 1,  0x55555555);                                                                    // 12417\n                                                                                                                       // 12418\n\t            // Rounds                                                                                                 // 12419\n\t            for (var round = 0; round < 16; round++) {                                                                // 12420\n\t                // Shortcuts                                                                                          // 12421\n\t                var subKey = subKeys[round];                                                                          // 12422\n\t                var lBlock = this._lBlock;                                                                            // 12423\n\t                var rBlock = this._rBlock;                                                                            // 12424\n                                                                                                                       // 12425\n\t                // Feistel function                                                                                   // 12426\n\t                var f = 0;                                                                                            // 12427\n\t                for (var i = 0; i < 8; i++) {                                                                         // 12428\n\t                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];                                      // 12429\n\t                }                                                                                                     // 12430\n\t                this._lBlock = rBlock;                                                                                // 12431\n\t                this._rBlock = lBlock ^ f;                                                                            // 12432\n\t            }                                                                                                         // 12433\n                                                                                                                       // 12434\n\t            // Undo swap from last round                                                                              // 12435\n\t            var t = this._lBlock;                                                                                     // 12436\n\t            this._lBlock = this._rBlock;                                                                              // 12437\n\t            this._rBlock = t;                                                                                         // 12438\n                                                                                                                       // 12439\n\t            // Final permutation                                                                                      // 12440\n\t            exchangeLR.call(this, 1,  0x55555555);                                                                    // 12441\n\t            exchangeRL.call(this, 8,  0x00ff00ff);                                                                    // 12442\n\t            exchangeRL.call(this, 2,  0x33333333);                                                                    // 12443\n\t            exchangeLR.call(this, 16, 0x0000ffff);                                                                    // 12444\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);                                                                    // 12445\n                                                                                                                       // 12446\n\t            // Set output                                                                                             // 12447\n\t            M[offset] = this._lBlock;                                                                                 // 12448\n\t            M[offset + 1] = this._rBlock;                                                                             // 12449\n\t        },                                                                                                            // 12450\n                                                                                                                       // 12451\n\t        keySize: 64/32,                                                                                               // 12452\n                                                                                                                       // 12453\n\t        ivSize: 64/32,                                                                                                // 12454\n                                                                                                                       // 12455\n\t        blockSize: 64/32                                                                                              // 12456\n\t    });                                                                                                               // 12457\n                                                                                                                       // 12458\n\t    // Swap bits across the left and right words                                                                      // 12459\n\t    function exchangeLR(offset, mask) {                                                                               // 12460\n\t        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;                                                    // 12461\n\t        this._rBlock ^= t;                                                                                            // 12462\n\t        this._lBlock ^= t << offset;                                                                                  // 12463\n\t    }                                                                                                                 // 12464\n                                                                                                                       // 12465\n\t    function exchangeRL(offset, mask) {                                                                               // 12466\n\t        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;                                                    // 12467\n\t        this._lBlock ^= t;                                                                                            // 12468\n\t        this._rBlock ^= t << offset;                                                                                  // 12469\n\t    }                                                                                                                 // 12470\n                                                                                                                       // 12471\n\t    /**                                                                                                               // 12472\n\t     * Shortcut functions to the cipher's object interface.                                                           // 12473\n\t     *                                                                                                                // 12474\n\t     * @example                                                                                                       // 12475\n\t     *                                                                                                                // 12476\n\t     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);                                                  // 12477\n\t     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);                                               // 12478\n\t     */                                                                                                               // 12479\n\t    C.DES = BlockCipher._createHelper(DES);                                                                           // 12480\n                                                                                                                       // 12481\n\t    /**                                                                                                               // 12482\n\t     * Triple-DES block cipher algorithm.                                                                             // 12483\n\t     */                                                                                                               // 12484\n\t    var TripleDES = C_algo.TripleDES = BlockCipher.extend({                                                           // 12485\n\t        _doReset: function () {                                                                                       // 12486\n\t            // Shortcuts                                                                                              // 12487\n\t            var key = this._key;                                                                                      // 12488\n\t            var keyWords = key.words;                                                                                 // 12489\n                                                                                                                       // 12490\n\t            // Create DES instances                                                                                   // 12491\n\t            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));                                 // 12492\n\t            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));                                 // 12493\n\t            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));                                 // 12494\n\t        },                                                                                                            // 12495\n                                                                                                                       // 12496\n\t        encryptBlock: function (M, offset) {                                                                          // 12497\n\t            this._des1.encryptBlock(M, offset);                                                                       // 12498\n\t            this._des2.decryptBlock(M, offset);                                                                       // 12499\n\t            this._des3.encryptBlock(M, offset);                                                                       // 12500\n\t        },                                                                                                            // 12501\n                                                                                                                       // 12502\n\t        decryptBlock: function (M, offset) {                                                                          // 12503\n\t            this._des3.decryptBlock(M, offset);                                                                       // 12504\n\t            this._des2.encryptBlock(M, offset);                                                                       // 12505\n\t            this._des1.decryptBlock(M, offset);                                                                       // 12506\n\t        },                                                                                                            // 12507\n                                                                                                                       // 12508\n\t        keySize: 192/32,                                                                                              // 12509\n                                                                                                                       // 12510\n\t        ivSize: 64/32,                                                                                                // 12511\n                                                                                                                       // 12512\n\t        blockSize: 64/32                                                                                              // 12513\n\t    });                                                                                                               // 12514\n                                                                                                                       // 12515\n\t    /**                                                                                                               // 12516\n\t     * Shortcut functions to the cipher's object interface.                                                           // 12517\n\t     *                                                                                                                // 12518\n\t     * @example                                                                                                       // 12519\n\t     *                                                                                                                // 12520\n\t     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);                                            // 12521\n\t     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);                                         // 12522\n\t     */                                                                                                               // 12523\n\t    C.TripleDES = BlockCipher._createHelper(TripleDES);                                                               // 12524\n\t}());                                                                                                                 // 12525\n                                                                                                                       // 12526\n                                                                                                                       // 12527\n\treturn CryptoJS.TripleDES;                                                                                            // 12528\n                                                                                                                       // 12529\n}));                                                                                                                   // 12530\n},{\"./cipher-core\":50,\"./core\":51,\"./enc-base64\":52,\"./evpkdf\":54,\"./md5\":59}],82:[function(require,module,exports){   // 12531\n;(function (root, factory) {                                                                                           // 12532\n\tif (typeof exports === \"object\") {                                                                                    // 12533\n\t\t// CommonJS                                                                                                          // 12534\n\t\tmodule.exports = exports = factory(require(\"./core\"));                                                               // 12535\n\t}                                                                                                                     // 12536\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 12537\n\t\t// AMD                                                                                                               // 12538\n\t\tdefine([\"./core\"], factory);                                                                                         // 12539\n\t}                                                                                                                     // 12540\n\telse {                                                                                                                // 12541\n\t\t// Global (browser)                                                                                                  // 12542\n\t\tfactory(root.CryptoJS);                                                                                              // 12543\n\t}                                                                                                                     // 12544\n}(this, function (CryptoJS) {                                                                                          // 12545\n                                                                                                                       // 12546\n\t(function (undefined) {                                                                                               // 12547\n\t    // Shortcuts                                                                                                      // 12548\n\t    var C = CryptoJS;                                                                                                 // 12549\n\t    var C_lib = C.lib;                                                                                                // 12550\n\t    var Base = C_lib.Base;                                                                                            // 12551\n\t    var X32WordArray = C_lib.WordArray;                                                                               // 12552\n                                                                                                                       // 12553\n\t    /**                                                                                                               // 12554\n\t     * x64 namespace.                                                                                                 // 12555\n\t     */                                                                                                               // 12556\n\t    var C_x64 = C.x64 = {};                                                                                           // 12557\n                                                                                                                       // 12558\n\t    /**                                                                                                               // 12559\n\t     * A 64-bit word.                                                                                                 // 12560\n\t     */                                                                                                               // 12561\n\t    var X64Word = C_x64.Word = Base.extend({                                                                          // 12562\n\t        /**                                                                                                           // 12563\n\t         * Initializes a newly created 64-bit word.                                                                   // 12564\n\t         *                                                                                                            // 12565\n\t         * @param {number} high The high 32 bits.                                                                     // 12566\n\t         * @param {number} low The low 32 bits.                                                                       // 12567\n\t         *                                                                                                            // 12568\n\t         * @example                                                                                                   // 12569\n\t         *                                                                                                            // 12570\n\t         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);                                        // 12571\n\t         */                                                                                                           // 12572\n\t        init: function (high, low) {                                                                                  // 12573\n\t            this.high = high;                                                                                         // 12574\n\t            this.low = low;                                                                                           // 12575\n\t        }                                                                                                             // 12576\n                                                                                                                       // 12577\n\t        /**                                                                                                           // 12578\n\t         * Bitwise NOTs this word.                                                                                    // 12579\n\t         *                                                                                                            // 12580\n\t         * @return {X64Word} A new x64-Word object after negating.                                                    // 12581\n\t         *                                                                                                            // 12582\n\t         * @example                                                                                                   // 12583\n\t         *                                                                                                            // 12584\n\t         *     var negated = x64Word.not();                                                                           // 12585\n\t         */                                                                                                           // 12586\n\t        // not: function () {                                                                                         // 12587\n\t            // var high = ~this.high;                                                                                 // 12588\n\t            // var low = ~this.low;                                                                                   // 12589\n                                                                                                                       // 12590\n\t            // return X64Word.create(high, low);                                                                      // 12591\n\t        // },                                                                                                         // 12592\n                                                                                                                       // 12593\n\t        /**                                                                                                           // 12594\n\t         * Bitwise ANDs this word with the passed word.                                                               // 12595\n\t         *                                                                                                            // 12596\n\t         * @param {X64Word} word The x64-Word to AND with this word.                                                  // 12597\n\t         *                                                                                                            // 12598\n\t         * @return {X64Word} A new x64-Word object after ANDing.                                                      // 12599\n\t         *                                                                                                            // 12600\n\t         * @example                                                                                                   // 12601\n\t         *                                                                                                            // 12602\n\t         *     var anded = x64Word.and(anotherX64Word);                                                               // 12603\n\t         */                                                                                                           // 12604\n\t        // and: function (word) {                                                                                     // 12605\n\t            // var high = this.high & word.high;                                                                      // 12606\n\t            // var low = this.low & word.low;                                                                         // 12607\n                                                                                                                       // 12608\n\t            // return X64Word.create(high, low);                                                                      // 12609\n\t        // },                                                                                                         // 12610\n                                                                                                                       // 12611\n\t        /**                                                                                                           // 12612\n\t         * Bitwise ORs this word with the passed word.                                                                // 12613\n\t         *                                                                                                            // 12614\n\t         * @param {X64Word} word The x64-Word to OR with this word.                                                   // 12615\n\t         *                                                                                                            // 12616\n\t         * @return {X64Word} A new x64-Word object after ORing.                                                       // 12617\n\t         *                                                                                                            // 12618\n\t         * @example                                                                                                   // 12619\n\t         *                                                                                                            // 12620\n\t         *     var ored = x64Word.or(anotherX64Word);                                                                 // 12621\n\t         */                                                                                                           // 12622\n\t        // or: function (word) {                                                                                      // 12623\n\t            // var high = this.high | word.high;                                                                      // 12624\n\t            // var low = this.low | word.low;                                                                         // 12625\n                                                                                                                       // 12626\n\t            // return X64Word.create(high, low);                                                                      // 12627\n\t        // },                                                                                                         // 12628\n                                                                                                                       // 12629\n\t        /**                                                                                                           // 12630\n\t         * Bitwise XORs this word with the passed word.                                                               // 12631\n\t         *                                                                                                            // 12632\n\t         * @param {X64Word} word The x64-Word to XOR with this word.                                                  // 12633\n\t         *                                                                                                            // 12634\n\t         * @return {X64Word} A new x64-Word object after XORing.                                                      // 12635\n\t         *                                                                                                            // 12636\n\t         * @example                                                                                                   // 12637\n\t         *                                                                                                            // 12638\n\t         *     var xored = x64Word.xor(anotherX64Word);                                                               // 12639\n\t         */                                                                                                           // 12640\n\t        // xor: function (word) {                                                                                     // 12641\n\t            // var high = this.high ^ word.high;                                                                      // 12642\n\t            // var low = this.low ^ word.low;                                                                         // 12643\n                                                                                                                       // 12644\n\t            // return X64Word.create(high, low);                                                                      // 12645\n\t        // },                                                                                                         // 12646\n                                                                                                                       // 12647\n\t        /**                                                                                                           // 12648\n\t         * Shifts this word n bits to the left.                                                                       // 12649\n\t         *                                                                                                            // 12650\n\t         * @param {number} n The number of bits to shift.                                                             // 12651\n\t         *                                                                                                            // 12652\n\t         * @return {X64Word} A new x64-Word object after shifting.                                                    // 12653\n\t         *                                                                                                            // 12654\n\t         * @example                                                                                                   // 12655\n\t         *                                                                                                            // 12656\n\t         *     var shifted = x64Word.shiftL(25);                                                                      // 12657\n\t         */                                                                                                           // 12658\n\t        // shiftL: function (n) {                                                                                     // 12659\n\t            // if (n < 32) {                                                                                          // 12660\n\t                // var high = (this.high << n) | (this.low >>> (32 - n));                                             // 12661\n\t                // var low = this.low << n;                                                                           // 12662\n\t            // } else {                                                                                               // 12663\n\t                // var high = this.low << (n - 32);                                                                   // 12664\n\t                // var low = 0;                                                                                       // 12665\n\t            // }                                                                                                      // 12666\n                                                                                                                       // 12667\n\t            // return X64Word.create(high, low);                                                                      // 12668\n\t        // },                                                                                                         // 12669\n                                                                                                                       // 12670\n\t        /**                                                                                                           // 12671\n\t         * Shifts this word n bits to the right.                                                                      // 12672\n\t         *                                                                                                            // 12673\n\t         * @param {number} n The number of bits to shift.                                                             // 12674\n\t         *                                                                                                            // 12675\n\t         * @return {X64Word} A new x64-Word object after shifting.                                                    // 12676\n\t         *                                                                                                            // 12677\n\t         * @example                                                                                                   // 12678\n\t         *                                                                                                            // 12679\n\t         *     var shifted = x64Word.shiftR(7);                                                                       // 12680\n\t         */                                                                                                           // 12681\n\t        // shiftR: function (n) {                                                                                     // 12682\n\t            // if (n < 32) {                                                                                          // 12683\n\t                // var low = (this.low >>> n) | (this.high << (32 - n));                                              // 12684\n\t                // var high = this.high >>> n;                                                                        // 12685\n\t            // } else {                                                                                               // 12686\n\t                // var low = this.high >>> (n - 32);                                                                  // 12687\n\t                // var high = 0;                                                                                      // 12688\n\t            // }                                                                                                      // 12689\n                                                                                                                       // 12690\n\t            // return X64Word.create(high, low);                                                                      // 12691\n\t        // },                                                                                                         // 12692\n                                                                                                                       // 12693\n\t        /**                                                                                                           // 12694\n\t         * Rotates this word n bits to the left.                                                                      // 12695\n\t         *                                                                                                            // 12696\n\t         * @param {number} n The number of bits to rotate.                                                            // 12697\n\t         *                                                                                                            // 12698\n\t         * @return {X64Word} A new x64-Word object after rotating.                                                    // 12699\n\t         *                                                                                                            // 12700\n\t         * @example                                                                                                   // 12701\n\t         *                                                                                                            // 12702\n\t         *     var rotated = x64Word.rotL(25);                                                                        // 12703\n\t         */                                                                                                           // 12704\n\t        // rotL: function (n) {                                                                                       // 12705\n\t            // return this.shiftL(n).or(this.shiftR(64 - n));                                                         // 12706\n\t        // },                                                                                                         // 12707\n                                                                                                                       // 12708\n\t        /**                                                                                                           // 12709\n\t         * Rotates this word n bits to the right.                                                                     // 12710\n\t         *                                                                                                            // 12711\n\t         * @param {number} n The number of bits to rotate.                                                            // 12712\n\t         *                                                                                                            // 12713\n\t         * @return {X64Word} A new x64-Word object after rotating.                                                    // 12714\n\t         *                                                                                                            // 12715\n\t         * @example                                                                                                   // 12716\n\t         *                                                                                                            // 12717\n\t         *     var rotated = x64Word.rotR(7);                                                                         // 12718\n\t         */                                                                                                           // 12719\n\t        // rotR: function (n) {                                                                                       // 12720\n\t            // return this.shiftR(n).or(this.shiftL(64 - n));                                                         // 12721\n\t        // },                                                                                                         // 12722\n                                                                                                                       // 12723\n\t        /**                                                                                                           // 12724\n\t         * Adds this word with the passed word.                                                                       // 12725\n\t         *                                                                                                            // 12726\n\t         * @param {X64Word} word The x64-Word to add with this word.                                                  // 12727\n\t         *                                                                                                            // 12728\n\t         * @return {X64Word} A new x64-Word object after adding.                                                      // 12729\n\t         *                                                                                                            // 12730\n\t         * @example                                                                                                   // 12731\n\t         *                                                                                                            // 12732\n\t         *     var added = x64Word.add(anotherX64Word);                                                               // 12733\n\t         */                                                                                                           // 12734\n\t        // add: function (word) {                                                                                     // 12735\n\t            // var low = (this.low + word.low) | 0;                                                                   // 12736\n\t            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;                                                    // 12737\n\t            // var high = (this.high + word.high + carry) | 0;                                                        // 12738\n                                                                                                                       // 12739\n\t            // return X64Word.create(high, low);                                                                      // 12740\n\t        // }                                                                                                          // 12741\n\t    });                                                                                                               // 12742\n                                                                                                                       // 12743\n\t    /**                                                                                                               // 12744\n\t     * An array of 64-bit words.                                                                                      // 12745\n\t     *                                                                                                                // 12746\n\t     * @property {Array} words The array of CryptoJS.x64.Word objects.                                                // 12747\n\t     * @property {number} sigBytes The number of significant bytes in this word array.                                // 12748\n\t     */                                                                                                               // 12749\n\t    var X64WordArray = C_x64.WordArray = Base.extend({                                                                // 12750\n\t        /**                                                                                                           // 12751\n\t         * Initializes a newly created word array.                                                                    // 12752\n\t         *                                                                                                            // 12753\n\t         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.                                     // 12754\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.                          // 12755\n\t         *                                                                                                            // 12756\n\t         * @example                                                                                                   // 12757\n\t         *                                                                                                            // 12758\n\t         *     var wordArray = CryptoJS.x64.WordArray.create();                                                       // 12759\n\t         *                                                                                                            // 12760\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([                                                        // 12761\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),                                                  // 12762\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)                                                   // 12763\n\t         *     ]);                                                                                                    // 12764\n\t         *                                                                                                            // 12765\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([                                                        // 12766\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),                                                  // 12767\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)                                                   // 12768\n\t         *     ], 10);                                                                                                // 12769\n\t         */                                                                                                           // 12770\n\t        init: function (words, sigBytes) {                                                                            // 12771\n\t            words = this.words = words || [];                                                                         // 12772\n                                                                                                                       // 12773\n\t            if (sigBytes != undefined) {                                                                              // 12774\n\t                this.sigBytes = sigBytes;                                                                             // 12775\n\t            } else {                                                                                                  // 12776\n\t                this.sigBytes = words.length * 8;                                                                     // 12777\n\t            }                                                                                                         // 12778\n\t        },                                                                                                            // 12779\n                                                                                                                       // 12780\n\t        /**                                                                                                           // 12781\n\t         * Converts this 64-bit word array to a 32-bit word array.                                                    // 12782\n\t         *                                                                                                            // 12783\n\t         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.                            // 12784\n\t         *                                                                                                            // 12785\n\t         * @example                                                                                                   // 12786\n\t         *                                                                                                            // 12787\n\t         *     var x32WordArray = x64WordArray.toX32();                                                               // 12788\n\t         */                                                                                                           // 12789\n\t        toX32: function () {                                                                                          // 12790\n\t            // Shortcuts                                                                                              // 12791\n\t            var x64Words = this.words;                                                                                // 12792\n\t            var x64WordsLength = x64Words.length;                                                                     // 12793\n                                                                                                                       // 12794\n\t            // Convert                                                                                                // 12795\n\t            var x32Words = [];                                                                                        // 12796\n\t            for (var i = 0; i < x64WordsLength; i++) {                                                                // 12797\n\t                var x64Word = x64Words[i];                                                                            // 12798\n\t                x32Words.push(x64Word.high);                                                                          // 12799\n\t                x32Words.push(x64Word.low);                                                                           // 12800\n\t            }                                                                                                         // 12801\n                                                                                                                       // 12802\n\t            return X32WordArray.create(x32Words, this.sigBytes);                                                      // 12803\n\t        },                                                                                                            // 12804\n                                                                                                                       // 12805\n\t        /**                                                                                                           // 12806\n\t         * Creates a copy of this word array.                                                                         // 12807\n\t         *                                                                                                            // 12808\n\t         * @return {X64WordArray} The clone.                                                                          // 12809\n\t         *                                                                                                            // 12810\n\t         * @example                                                                                                   // 12811\n\t         *                                                                                                            // 12812\n\t         *     var clone = x64WordArray.clone();                                                                      // 12813\n\t         */                                                                                                           // 12814\n\t        clone: function () {                                                                                          // 12815\n\t            var clone = Base.clone.call(this);                                                                        // 12816\n                                                                                                                       // 12817\n\t            // Clone \"words\" array                                                                                    // 12818\n\t            var words = clone.words = this.words.slice(0);                                                            // 12819\n                                                                                                                       // 12820\n\t            // Clone each X64Word object                                                                              // 12821\n\t            var wordsLength = words.length;                                                                           // 12822\n\t            for (var i = 0; i < wordsLength; i++) {                                                                   // 12823\n\t                words[i] = words[i].clone();                                                                          // 12824\n\t            }                                                                                                         // 12825\n                                                                                                                       // 12826\n\t            return clone;                                                                                             // 12827\n\t        }                                                                                                             // 12828\n\t    });                                                                                                               // 12829\n\t}());                                                                                                                 // 12830\n                                                                                                                       // 12831\n                                                                                                                       // 12832\n\treturn CryptoJS;                                                                                                      // 12833\n                                                                                                                       // 12834\n}));                                                                                                                   // 12835\n},{\"./core\":51}],83:[function(require,module,exports){                                                                 // 12836\n/*! https://mths.be/utf8js v2.0.0 by @mathias */                                                                       // 12837\n;(function(root) {                                                                                                     // 12838\n                                                                                                                       // 12839\n\t// Detect free variables `exports`                                                                                    // 12840\n\tvar freeExports = typeof exports == 'object' && exports;                                                              // 12841\n                                                                                                                       // 12842\n\t// Detect free variable `module`                                                                                      // 12843\n\tvar freeModule = typeof module == 'object' && module &&                                                               // 12844\n\t\tmodule.exports == freeExports && module;                                                                             // 12845\n                                                                                                                       // 12846\n\t// Detect free variable `global`, from Node.js or Browserified code,                                                  // 12847\n\t// and use it as `root`                                                                                               // 12848\n\tvar freeGlobal = typeof global == 'object' && global;                                                                 // 12849\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {                                           // 12850\n\t\troot = freeGlobal;                                                                                                   // 12851\n\t}                                                                                                                     // 12852\n                                                                                                                       // 12853\n\t/*--------------------------------------------------------------------------*/                                        // 12854\n                                                                                                                       // 12855\n\tvar stringFromCharCode = String.fromCharCode;                                                                         // 12856\n                                                                                                                       // 12857\n\t// Taken from https://mths.be/punycode                                                                                // 12858\n\tfunction ucs2decode(string) {                                                                                         // 12859\n\t\tvar output = [];                                                                                                     // 12860\n\t\tvar counter = 0;                                                                                                     // 12861\n\t\tvar length = string.length;                                                                                          // 12862\n\t\tvar value;                                                                                                           // 12863\n\t\tvar extra;                                                                                                           // 12864\n\t\twhile (counter < length) {                                                                                           // 12865\n\t\t\tvalue = string.charCodeAt(counter++);                                                                               // 12866\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {                                                       // 12867\n\t\t\t\t// high surrogate, and there is a next character                                                                   // 12868\n\t\t\t\textra = string.charCodeAt(counter++);                                                                              // 12869\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate                                                                 // 12870\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);                                                 // 12871\n\t\t\t\t} else {                                                                                                           // 12872\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next                                              // 12873\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair                                                            // 12874\n\t\t\t\t\toutput.push(value);                                                                                               // 12875\n\t\t\t\t\tcounter--;                                                                                                        // 12876\n\t\t\t\t}                                                                                                                  // 12877\n\t\t\t} else {                                                                                                            // 12878\n\t\t\t\toutput.push(value);                                                                                                // 12879\n\t\t\t}                                                                                                                   // 12880\n\t\t}                                                                                                                    // 12881\n\t\treturn output;                                                                                                       // 12882\n\t}                                                                                                                     // 12883\n                                                                                                                       // 12884\n\t// Taken from https://mths.be/punycode                                                                                // 12885\n\tfunction ucs2encode(array) {                                                                                          // 12886\n\t\tvar length = array.length;                                                                                           // 12887\n\t\tvar index = -1;                                                                                                      // 12888\n\t\tvar value;                                                                                                           // 12889\n\t\tvar output = '';                                                                                                     // 12890\n\t\twhile (++index < length) {                                                                                           // 12891\n\t\t\tvalue = array[index];                                                                                               // 12892\n\t\t\tif (value > 0xFFFF) {                                                                                               // 12893\n\t\t\t\tvalue -= 0x10000;                                                                                                  // 12894\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);                                                       // 12895\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;                                                                                    // 12896\n\t\t\t}                                                                                                                   // 12897\n\t\t\toutput += stringFromCharCode(value);                                                                                // 12898\n\t\t}                                                                                                                    // 12899\n\t\treturn output;                                                                                                       // 12900\n\t}                                                                                                                     // 12901\n                                                                                                                       // 12902\n\tfunction checkScalarValue(codePoint) {                                                                                // 12903\n\t\tif (codePoint >= 0xD800 && codePoint <= 0xDFFF) {                                                                    // 12904\n\t\t\tthrow Error(                                                                                                        // 12905\n\t\t\t\t'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +                                                       // 12906\n\t\t\t\t' is not a scalar value'                                                                                           // 12907\n\t\t\t);                                                                                                                  // 12908\n\t\t}                                                                                                                    // 12909\n\t}                                                                                                                     // 12910\n\t/*--------------------------------------------------------------------------*/                                        // 12911\n                                                                                                                       // 12912\n\tfunction createByte(codePoint, shift) {                                                                               // 12913\n\t\treturn stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);                                                     // 12914\n\t}                                                                                                                     // 12915\n                                                                                                                       // 12916\n\tfunction encodeCodePoint(codePoint) {                                                                                 // 12917\n\t\tif ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence                                                              // 12918\n\t\t\treturn stringFromCharCode(codePoint);                                                                               // 12919\n\t\t}                                                                                                                    // 12920\n\t\tvar symbol = '';                                                                                                     // 12921\n\t\tif ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence                                                              // 12922\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);                                                      // 12923\n\t\t}                                                                                                                    // 12924\n\t\telse if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence                                                         // 12925\n\t\t\tcheckScalarValue(codePoint);                                                                                        // 12926\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);                                                     // 12927\n\t\t\tsymbol += createByte(codePoint, 6);                                                                                 // 12928\n\t\t}                                                                                                                    // 12929\n\t\telse if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence                                                         // 12930\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);                                                     // 12931\n\t\t\tsymbol += createByte(codePoint, 12);                                                                                // 12932\n\t\t\tsymbol += createByte(codePoint, 6);                                                                                 // 12933\n\t\t}                                                                                                                    // 12934\n\t\tsymbol += stringFromCharCode((codePoint & 0x3F) | 0x80);                                                             // 12935\n\t\treturn symbol;                                                                                                       // 12936\n\t}                                                                                                                     // 12937\n                                                                                                                       // 12938\n\tfunction utf8encode(string) {                                                                                         // 12939\n\t\tvar codePoints = ucs2decode(string);                                                                                 // 12940\n\t\tvar length = codePoints.length;                                                                                      // 12941\n\t\tvar index = -1;                                                                                                      // 12942\n\t\tvar codePoint;                                                                                                       // 12943\n\t\tvar byteString = '';                                                                                                 // 12944\n\t\twhile (++index < length) {                                                                                           // 12945\n\t\t\tcodePoint = codePoints[index];                                                                                      // 12946\n\t\t\tbyteString += encodeCodePoint(codePoint);                                                                           // 12947\n\t\t}                                                                                                                    // 12948\n\t\treturn byteString;                                                                                                   // 12949\n\t}                                                                                                                     // 12950\n                                                                                                                       // 12951\n\t/*--------------------------------------------------------------------------*/                                        // 12952\n                                                                                                                       // 12953\n\tfunction readContinuationByte() {                                                                                     // 12954\n\t\tif (byteIndex >= byteCount) {                                                                                        // 12955\n\t\t\tthrow Error('Invalid byte index');                                                                                  // 12956\n\t\t}                                                                                                                    // 12957\n                                                                                                                       // 12958\n\t\tvar continuationByte = byteArray[byteIndex] & 0xFF;                                                                  // 12959\n\t\tbyteIndex++;                                                                                                         // 12960\n                                                                                                                       // 12961\n\t\tif ((continuationByte & 0xC0) == 0x80) {                                                                             // 12962\n\t\t\treturn continuationByte & 0x3F;                                                                                     // 12963\n\t\t}                                                                                                                    // 12964\n                                                                                                                       // 12965\n\t\t// If we end up here, it’s not a continuation byte                                                                   // 12966\n\t\tthrow Error('Invalid continuation byte');                                                                            // 12967\n\t}                                                                                                                     // 12968\n                                                                                                                       // 12969\n\tfunction decodeSymbol() {                                                                                             // 12970\n\t\tvar byte1;                                                                                                           // 12971\n\t\tvar byte2;                                                                                                           // 12972\n\t\tvar byte3;                                                                                                           // 12973\n\t\tvar byte4;                                                                                                           // 12974\n\t\tvar codePoint;                                                                                                       // 12975\n                                                                                                                       // 12976\n\t\tif (byteIndex > byteCount) {                                                                                         // 12977\n\t\t\tthrow Error('Invalid byte index');                                                                                  // 12978\n\t\t}                                                                                                                    // 12979\n                                                                                                                       // 12980\n\t\tif (byteIndex == byteCount) {                                                                                        // 12981\n\t\t\treturn false;                                                                                                       // 12982\n\t\t}                                                                                                                    // 12983\n                                                                                                                       // 12984\n\t\t// Read first byte                                                                                                   // 12985\n\t\tbyte1 = byteArray[byteIndex] & 0xFF;                                                                                 // 12986\n\t\tbyteIndex++;                                                                                                         // 12987\n                                                                                                                       // 12988\n\t\t// 1-byte sequence (no continuation bytes)                                                                           // 12989\n\t\tif ((byte1 & 0x80) == 0) {                                                                                           // 12990\n\t\t\treturn byte1;                                                                                                       // 12991\n\t\t}                                                                                                                    // 12992\n                                                                                                                       // 12993\n\t\t// 2-byte sequence                                                                                                   // 12994\n\t\tif ((byte1 & 0xE0) == 0xC0) {                                                                                        // 12995\n\t\t\tvar byte2 = readContinuationByte();                                                                                 // 12996\n\t\t\tcodePoint = ((byte1 & 0x1F) << 6) | byte2;                                                                          // 12997\n\t\t\tif (codePoint >= 0x80) {                                                                                            // 12998\n\t\t\t\treturn codePoint;                                                                                                  // 12999\n\t\t\t} else {                                                                                                            // 13000\n\t\t\t\tthrow Error('Invalid continuation byte');                                                                          // 13001\n\t\t\t}                                                                                                                   // 13002\n\t\t}                                                                                                                    // 13003\n                                                                                                                       // 13004\n\t\t// 3-byte sequence (may include unpaired surrogates)                                                                 // 13005\n\t\tif ((byte1 & 0xF0) == 0xE0) {                                                                                        // 13006\n\t\t\tbyte2 = readContinuationByte();                                                                                     // 13007\n\t\t\tbyte3 = readContinuationByte();                                                                                     // 13008\n\t\t\tcodePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;                                                          // 13009\n\t\t\tif (codePoint >= 0x0800) {                                                                                          // 13010\n\t\t\t\tcheckScalarValue(codePoint);                                                                                       // 13011\n\t\t\t\treturn codePoint;                                                                                                  // 13012\n\t\t\t} else {                                                                                                            // 13013\n\t\t\t\tthrow Error('Invalid continuation byte');                                                                          // 13014\n\t\t\t}                                                                                                                   // 13015\n\t\t}                                                                                                                    // 13016\n                                                                                                                       // 13017\n\t\t// 4-byte sequence                                                                                                   // 13018\n\t\tif ((byte1 & 0xF8) == 0xF0) {                                                                                        // 13019\n\t\t\tbyte2 = readContinuationByte();                                                                                     // 13020\n\t\t\tbyte3 = readContinuationByte();                                                                                     // 13021\n\t\t\tbyte4 = readContinuationByte();                                                                                     // 13022\n\t\t\tcodePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |                                                            // 13023\n\t\t\t\t(byte3 << 0x06) | byte4;                                                                                           // 13024\n\t\t\tif (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {                                                               // 13025\n\t\t\t\treturn codePoint;                                                                                                  // 13026\n\t\t\t}                                                                                                                   // 13027\n\t\t}                                                                                                                    // 13028\n                                                                                                                       // 13029\n\t\tthrow Error('Invalid UTF-8 detected');                                                                               // 13030\n\t}                                                                                                                     // 13031\n                                                                                                                       // 13032\n\tvar byteArray;                                                                                                        // 13033\n\tvar byteCount;                                                                                                        // 13034\n\tvar byteIndex;                                                                                                        // 13035\n\tfunction utf8decode(byteString) {                                                                                     // 13036\n\t\tbyteArray = ucs2decode(byteString);                                                                                  // 13037\n\t\tbyteCount = byteArray.length;                                                                                        // 13038\n\t\tbyteIndex = 0;                                                                                                       // 13039\n\t\tvar codePoints = [];                                                                                                 // 13040\n\t\tvar tmp;                                                                                                             // 13041\n\t\twhile ((tmp = decodeSymbol()) !== false) {                                                                           // 13042\n\t\t\tcodePoints.push(tmp);                                                                                               // 13043\n\t\t}                                                                                                                    // 13044\n\t\treturn ucs2encode(codePoints);                                                                                       // 13045\n\t}                                                                                                                     // 13046\n                                                                                                                       // 13047\n\t/*--------------------------------------------------------------------------*/                                        // 13048\n                                                                                                                       // 13049\n\tvar utf8 = {                                                                                                          // 13050\n\t\t'version': '2.0.0',                                                                                                  // 13051\n\t\t'encode': utf8encode,                                                                                                // 13052\n\t\t'decode': utf8decode                                                                                                 // 13053\n\t};                                                                                                                    // 13054\n                                                                                                                       // 13055\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns                                        // 13056\n\t// like the following:                                                                                                // 13057\n\tif (                                                                                                                  // 13058\n\t\ttypeof define == 'function' &&                                                                                       // 13059\n\t\ttypeof define.amd == 'object' &&                                                                                     // 13060\n\t\tdefine.amd                                                                                                           // 13061\n\t) {                                                                                                                   // 13062\n\t\tdefine(function() {                                                                                                  // 13063\n\t\t\treturn utf8;                                                                                                        // 13064\n\t\t});                                                                                                                  // 13065\n\t}\telse if (freeExports && !freeExports.nodeType) {                                                                    // 13066\n\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+                                                                   // 13067\n\t\t\tfreeModule.exports = utf8;                                                                                          // 13068\n\t\t} else { // in Narwhal or RingoJS v0.7.0-                                                                            // 13069\n\t\t\tvar object = {};                                                                                                    // 13070\n\t\t\tvar hasOwnProperty = object.hasOwnProperty;                                                                         // 13071\n\t\t\tfor (var key in utf8) {                                                                                             // 13072\n\t\t\t\thasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);                                                  // 13073\n\t\t\t}                                                                                                                   // 13074\n\t\t}                                                                                                                    // 13075\n\t} else { // in Rhino or a web browser                                                                                 // 13076\n\t\troot.utf8 = utf8;                                                                                                    // 13077\n\t}                                                                                                                     // 13078\n                                                                                                                       // 13079\n}(this));                                                                                                              // 13080\n                                                                                                                       // 13081\n},{}],\"bignumber.js\":[function(require,module,exports){                                                                // 13082\n/*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */                                             // 13083\n                                                                                                                       // 13084\n;(function (global) {                                                                                                  // 13085\n    'use strict';                                                                                                      // 13086\n                                                                                                                       // 13087\n    /*                                                                                                                 // 13088\n      bignumber.js v2.0.7                                                                                              // 13089\n      A JavaScript library for arbitrary-precision arithmetic.                                                         // 13090\n      https://github.com/MikeMcl/bignumber.js                                                                          // 13091\n      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>                                                        // 13092\n      MIT Expat Licence                                                                                                // 13093\n    */                                                                                                                 // 13094\n                                                                                                                       // 13095\n                                                                                                                       // 13096\n    var BigNumber, crypto, parseNumeric,                                                                               // 13097\n        isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,                                                            // 13098\n        mathceil = Math.ceil,                                                                                          // 13099\n        mathfloor = Math.floor,                                                                                        // 13100\n        notBool = ' not a boolean or binary digit',                                                                    // 13101\n        roundingMode = 'rounding mode',                                                                                // 13102\n        tooManyDigits = 'number type has more than 15 significant digits',                                             // 13103\n        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',                                 // 13104\n        BASE = 1e14,                                                                                                   // 13105\n        LOG_BASE = 14,                                                                                                 // 13106\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1                                                       // 13107\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1                                                       // 13108\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],                            // 13109\n        SQRT_BASE = 1e7,                                                                                               // 13110\n                                                                                                                       // 13111\n        /*                                                                                                             // 13112\n         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and                     // 13113\n         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an                         // 13114\n         * exception is thrown (if ERRORS is true).                                                                    // 13115\n         */                                                                                                            // 13116\n        MAX = 1E9;                                   // 0 to MAX_INT32                                                 // 13117\n                                                                                                                       // 13118\n                                                                                                                       // 13119\n    /*                                                                                                                 // 13120\n     * Create and return a BigNumber constructor.                                                                      // 13121\n     */                                                                                                                // 13122\n    function another(configObj) {                                                                                      // 13123\n        var div,                                                                                                       // 13124\n                                                                                                                       // 13125\n            // id tracks the caller function, so its name can be included in error messages.                           // 13126\n            id = 0,                                                                                                    // 13127\n            P = BigNumber.prototype,                                                                                   // 13128\n            ONE = new BigNumber(1),                                                                                    // 13129\n                                                                                                                       // 13130\n                                                                                                                       // 13131\n            /********************************* EDITABLE DEFAULTS **********************************/                   // 13132\n                                                                                                                       // 13133\n                                                                                                                       // 13134\n            /*                                                                                                         // 13135\n             * The default values below must be integers within the inclusive ranges stated.                           // 13136\n             * The values can also be changed at run-time using BigNumber.config.                                      // 13137\n             */                                                                                                        // 13138\n                                                                                                                       // 13139\n            // The maximum number of decimal places for operations involving division.                                 // 13140\n            DECIMAL_PLACES = 20,                     // 0 to MAX                                                       // 13141\n                                                                                                                       // 13142\n            /*                                                                                                         // 13143\n             * The rounding mode used when rounding to the above decimal places, and when using                        // 13144\n             * toExponential, toFixed, toFormat and toPrecision, and round (default value).                            // 13145\n             * UP         0 Away from zero.                                                                            // 13146\n             * DOWN       1 Towards zero.                                                                              // 13147\n             * CEIL       2 Towards +Infinity.                                                                         // 13148\n             * FLOOR      3 Towards -Infinity.                                                                         // 13149\n             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.                                             // 13150\n             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.                                           // 13151\n             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.                         // 13152\n             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.                              // 13153\n             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.                              // 13154\n             */                                                                                                        // 13155\n            ROUNDING_MODE = 4,                       // 0 to 8                                                         // 13156\n                                                                                                                       // 13157\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]                                                              // 13158\n                                                                                                                       // 13159\n            // The exponent value at and beneath which toString returns exponential notation.                          // 13160\n            // Number type: -7                                                                                         // 13161\n            TO_EXP_NEG = -7,                         // 0 to -MAX                                                      // 13162\n                                                                                                                       // 13163\n            // The exponent value at and above which toString returns exponential notation.                            // 13164\n            // Number type: 21                                                                                         // 13165\n            TO_EXP_POS = 21,                         // 0 to MAX                                                       // 13166\n                                                                                                                       // 13167\n            // RANGE : [MIN_EXP, MAX_EXP]                                                                              // 13168\n                                                                                                                       // 13169\n            // The minimum exponent value, beneath which underflow to zero occurs.                                     // 13170\n            // Number type: -324  (5e-324)                                                                             // 13171\n            MIN_EXP = -1e7,                          // -1 to -MAX                                                     // 13172\n                                                                                                                       // 13173\n            // The maximum exponent value, above which overflow to Infinity occurs.                                    // 13174\n            // Number type:  308  (1.7976931348623157e+308)                                                            // 13175\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.                               // 13176\n            MAX_EXP = 1e7,                           // 1 to MAX                                                       // 13177\n                                                                                                                       // 13178\n            // Whether BigNumber Errors are ever thrown.                                                               // 13179\n            ERRORS = true,                           // true or false                                                  // 13180\n                                                                                                                       // 13181\n            // Change to intValidatorNoErrors if ERRORS is false.                                                      // 13182\n            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors                    // 13183\n                                                                                                                       // 13184\n            // Whether to use cryptographically-secure random number generation, if available.                         // 13185\n            CRYPTO = false,                          // true or false                                                  // 13186\n                                                                                                                       // 13187\n            /*                                                                                                         // 13188\n             * The modulo mode used when calculating the modulus: a mod n.                                             // 13189\n             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.                    // 13190\n             * The remainder (r) is calculated as: r = a - n * q.                                                      // 13191\n             *                                                                                                         // 13192\n             * UP        0 The remainder is positive if the dividend is negative, else is negative.                    // 13193\n             * DOWN      1 The remainder has the same sign as the dividend.                                            // 13194\n             *             This modulo mode is commonly known as 'truncated division' and is                           // 13195\n             *             equivalent to (a % n) in JavaScript.                                                        // 13196\n             * FLOOR     3 The remainder has the same sign as the divisor (Python %).                                  // 13197\n             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.                                // 13198\n             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).                                        // 13199\n             *             The remainder is always positive.                                                           // 13200\n             *                                                                                                         // 13201\n             * The truncated division, floored division, Euclidian division and IEEE 754 remainder                     // 13202\n             * modes are commonly used for the modulus operation.                                                      // 13203\n             * Although the other rounding modes can also be used, they may not give useful results.                   // 13204\n             */                                                                                                        // 13205\n            MODULO_MODE = 1,                         // 0 to 9                                                         // 13206\n                                                                                                                       // 13207\n            // The maximum number of significant digits of the result of the toPower operation.                        // 13208\n            // If POW_PRECISION is 0, there will be unlimited significant digits.                                      // 13209\n            POW_PRECISION = 100,                     // 0 to MAX                                                       // 13210\n                                                                                                                       // 13211\n            // The format specification used by the BigNumber.prototype.toFormat method.                               // 13212\n            FORMAT = {                                                                                                 // 13213\n                decimalSeparator: '.',                                                                                 // 13214\n                groupSeparator: ',',                                                                                   // 13215\n                groupSize: 3,                                                                                          // 13216\n                secondaryGroupSize: 0,                                                                                 // 13217\n                fractionGroupSeparator: '\\xA0',      // non-breaking space                                             // 13218\n                fractionGroupSize: 0                                                                                   // 13219\n            };                                                                                                         // 13220\n                                                                                                                       // 13221\n                                                                                                                       // 13222\n        /******************************************************************************************/                   // 13223\n                                                                                                                       // 13224\n                                                                                                                       // 13225\n        // CONSTRUCTOR                                                                                                 // 13226\n                                                                                                                       // 13227\n                                                                                                                       // 13228\n        /*                                                                                                             // 13229\n         * The BigNumber constructor and exported function.                                                            // 13230\n         * Create and return a new instance of a BigNumber object.                                                     // 13231\n         *                                                                                                             // 13232\n         * n {number|string|BigNumber} A numeric value.                                                                // 13233\n         * [b] {number} The base of n. Integer, 2 to 64 inclusive.                                                     // 13234\n         */                                                                                                            // 13235\n        function BigNumber( n, b ) {                                                                                   // 13236\n            var c, e, i, num, len, str,                                                                                // 13237\n                x = this;                                                                                              // 13238\n                                                                                                                       // 13239\n            // Enable constructor usage without new.                                                                   // 13240\n            if ( !( x instanceof BigNumber ) ) {                                                                       // 13241\n                                                                                                                       // 13242\n                // 'BigNumber() constructor call without new: {n}'                                                     // 13243\n                if (ERRORS) raise( 26, 'constructor call without new', n );                                            // 13244\n                return new BigNumber( n, b );                                                                          // 13245\n            }                                                                                                          // 13246\n                                                                                                                       // 13247\n            // 'new BigNumber() base not an integer: {b}'                                                              // 13248\n            // 'new BigNumber() base out of range: {b}'                                                                // 13249\n            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {                                                  // 13250\n                                                                                                                       // 13251\n                // Duplicate.                                                                                          // 13252\n                if ( n instanceof BigNumber ) {                                                                        // 13253\n                    x.s = n.s;                                                                                         // 13254\n                    x.e = n.e;                                                                                         // 13255\n                    x.c = ( n = n.c ) ? n.slice() : n;                                                                 // 13256\n                    id = 0;                                                                                            // 13257\n                    return;                                                                                            // 13258\n                }                                                                                                      // 13259\n                                                                                                                       // 13260\n                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {                                                  // 13261\n                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;                                                              // 13262\n                                                                                                                       // 13263\n                    // Fast path for integers.                                                                         // 13264\n                    if ( n === ~~n ) {                                                                                 // 13265\n                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );                                                   // 13266\n                        x.e = e;                                                                                       // 13267\n                        x.c = [n];                                                                                     // 13268\n                        id = 0;                                                                                        // 13269\n                        return;                                                                                        // 13270\n                    }                                                                                                  // 13271\n                                                                                                                       // 13272\n                    str = n + '';                                                                                      // 13273\n                } else {                                                                                               // 13274\n                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );                         // 13275\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                   // 13276\n                }                                                                                                      // 13277\n            } else {                                                                                                   // 13278\n                b = b | 0;                                                                                             // 13279\n                str = n + '';                                                                                          // 13280\n                                                                                                                       // 13281\n                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.                               // 13282\n                // Allow exponential notation to be used with base 10 argument.                                        // 13283\n                if ( b == 10 ) {                                                                                       // 13284\n                    x = new BigNumber( n instanceof BigNumber ? n : str );                                             // 13285\n                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );                                        // 13286\n                }                                                                                                      // 13287\n                                                                                                                       // 13288\n                // Avoid potential interpretation of Infinity and NaN as base 44+ values.                              // 13289\n                // Any number in exponential form will fail due to the [Ee][+-].                                       // 13290\n                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||                                                   // 13291\n                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +                                 // 13292\n                    '(?:\\\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {                                           // 13293\n                    return parseNumeric( x, str, num, b );                                                             // 13294\n                }                                                                                                      // 13295\n                                                                                                                       // 13296\n                if (num) {                                                                                             // 13297\n                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;                                                  // 13298\n                                                                                                                       // 13299\n                    if ( ERRORS && str.replace( /^0\\.0*|\\./, '' ).length > 15 ) {                                      // 13300\n                                                                                                                       // 13301\n                        // 'new BigNumber() number type has more than 15 significant digits: {n}'                      // 13302\n                        raise( id, tooManyDigits, n );                                                                 // 13303\n                    }                                                                                                  // 13304\n                                                                                                                       // 13305\n                    // Prevent later check for length on converted number.                                             // 13306\n                    num = false;                                                                                       // 13307\n                } else {                                                                                               // 13308\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                   // 13309\n                }                                                                                                      // 13310\n                                                                                                                       // 13311\n                str = convertBase( str, 10, b, x.s );                                                                  // 13312\n            }                                                                                                          // 13313\n                                                                                                                       // 13314\n            // Decimal point?                                                                                          // 13315\n            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );                                         // 13316\n                                                                                                                       // 13317\n            // Exponential form?                                                                                       // 13318\n            if ( ( i = str.search( /e/i ) ) > 0 ) {                                                                    // 13319\n                                                                                                                       // 13320\n                // Determine exponent.                                                                                 // 13321\n                if ( e < 0 ) e = i;                                                                                    // 13322\n                e += +str.slice( i + 1 );                                                                              // 13323\n                str = str.substring( 0, i );                                                                           // 13324\n            } else if ( e < 0 ) {                                                                                      // 13325\n                                                                                                                       // 13326\n                // Integer.                                                                                            // 13327\n                e = str.length;                                                                                        // 13328\n            }                                                                                                          // 13329\n                                                                                                                       // 13330\n            // Determine leading zeros.                                                                                // 13331\n            for ( i = 0; str.charCodeAt(i) === 48; i++ );                                                              // 13332\n                                                                                                                       // 13333\n            // Determine trailing zeros.                                                                               // 13334\n            for ( len = str.length; str.charCodeAt(--len) === 48; );                                                   // 13335\n            str = str.slice( i, len + 1 );                                                                             // 13336\n                                                                                                                       // 13337\n            if (str) {                                                                                                 // 13338\n                len = str.length;                                                                                      // 13339\n                                                                                                                       // 13340\n                // Disallow numbers with over 15 significant digits if number type.                                    // 13341\n                // 'new BigNumber() number type has more than 15 significant digits: {n}'                              // 13342\n                if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );                                  // 13343\n                                                                                                                       // 13344\n                e = e - i - 1;                                                                                         // 13345\n                                                                                                                       // 13346\n                 // Overflow?                                                                                          // 13347\n                if ( e > MAX_EXP ) {                                                                                   // 13348\n                                                                                                                       // 13349\n                    // Infinity.                                                                                       // 13350\n                    x.c = x.e = null;                                                                                  // 13351\n                                                                                                                       // 13352\n                // Underflow?                                                                                          // 13353\n                } else if ( e < MIN_EXP ) {                                                                            // 13354\n                                                                                                                       // 13355\n                    // Zero.                                                                                           // 13356\n                    x.c = [ x.e = 0 ];                                                                                 // 13357\n                } else {                                                                                               // 13358\n                    x.e = e;                                                                                           // 13359\n                    x.c = [];                                                                                          // 13360\n                                                                                                                       // 13361\n                    // Transform base                                                                                  // 13362\n                                                                                                                       // 13363\n                    // e is the base 10 exponent.                                                                      // 13364\n                    // i is where to slice str to get the first element of the coefficient array.                      // 13365\n                    i = ( e + 1 ) % LOG_BASE;                                                                          // 13366\n                    if ( e < 0 ) i += LOG_BASE;                                                                        // 13367\n                                                                                                                       // 13368\n                    if ( i < len ) {                                                                                   // 13369\n                        if (i) x.c.push( +str.slice( 0, i ) );                                                         // 13370\n                                                                                                                       // 13371\n                        for ( len -= LOG_BASE; i < len; ) {                                                            // 13372\n                            x.c.push( +str.slice( i, i += LOG_BASE ) );                                                // 13373\n                        }                                                                                              // 13374\n                                                                                                                       // 13375\n                        str = str.slice(i);                                                                            // 13376\n                        i = LOG_BASE - str.length;                                                                     // 13377\n                    } else {                                                                                           // 13378\n                        i -= len;                                                                                      // 13379\n                    }                                                                                                  // 13380\n                                                                                                                       // 13381\n                    for ( ; i--; str += '0' );                                                                         // 13382\n                    x.c.push( +str );                                                                                  // 13383\n                }                                                                                                      // 13384\n            } else {                                                                                                   // 13385\n                                                                                                                       // 13386\n                // Zero.                                                                                               // 13387\n                x.c = [ x.e = 0 ];                                                                                     // 13388\n            }                                                                                                          // 13389\n                                                                                                                       // 13390\n            id = 0;                                                                                                    // 13391\n        }                                                                                                              // 13392\n                                                                                                                       // 13393\n                                                                                                                       // 13394\n        // CONSTRUCTOR PROPERTIES                                                                                      // 13395\n                                                                                                                       // 13396\n                                                                                                                       // 13397\n        BigNumber.another = another;                                                                                   // 13398\n                                                                                                                       // 13399\n        BigNumber.ROUND_UP = 0;                                                                                        // 13400\n        BigNumber.ROUND_DOWN = 1;                                                                                      // 13401\n        BigNumber.ROUND_CEIL = 2;                                                                                      // 13402\n        BigNumber.ROUND_FLOOR = 3;                                                                                     // 13403\n        BigNumber.ROUND_HALF_UP = 4;                                                                                   // 13404\n        BigNumber.ROUND_HALF_DOWN = 5;                                                                                 // 13405\n        BigNumber.ROUND_HALF_EVEN = 6;                                                                                 // 13406\n        BigNumber.ROUND_HALF_CEIL = 7;                                                                                 // 13407\n        BigNumber.ROUND_HALF_FLOOR = 8;                                                                                // 13408\n        BigNumber.EUCLID = 9;                                                                                          // 13409\n                                                                                                                       // 13410\n                                                                                                                       // 13411\n        /*                                                                                                             // 13412\n         * Configure infrequently-changing library-wide settings.                                                      // 13413\n         *                                                                                                             // 13414\n         * Accept an object or an argument list, with one or many of the following properties or                       // 13415\n         * parameters respectively:                                                                                    // 13416\n         *                                                                                                             // 13417\n         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive                                                     // 13418\n         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive                                                       // 13419\n         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or                                      // 13420\n         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]                              // 13421\n         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or                             // 13422\n         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]                     // 13423\n         *   ERRORS          {boolean|number}   true, false, 1 or 0                                                    // 13424\n         *   CRYPTO          {boolean|number}   true, false, 1 or 0                                                    // 13425\n         *   MODULO_MODE     {number}           0 to 9 inclusive                                                       // 13426\n         *   POW_PRECISION   {number}           0 to MAX inclusive                                                     // 13427\n         *   FORMAT          {object}           See BigNumber.prototype.toFormat                                       // 13428\n         *      decimalSeparator       {string}                                                                        // 13429\n         *      groupSeparator         {string}                                                                        // 13430\n         *      groupSize              {number}                                                                        // 13431\n         *      secondaryGroupSize     {number}                                                                        // 13432\n         *      fractionGroupSeparator {string}                                                                        // 13433\n         *      fractionGroupSize      {number}                                                                        // 13434\n         *                                                                                                             // 13435\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)                   // 13436\n         *                                                                                                             // 13437\n         * E.g.                                                                                                        // 13438\n         * BigNumber.config(20, 4) is equivalent to                                                                    // 13439\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })                                                // 13440\n         *                                                                                                             // 13441\n         * Ignore properties/parameters set to null or undefined.                                                      // 13442\n         * Return an object with the properties current values.                                                        // 13443\n         */                                                                                                            // 13444\n        BigNumber.config = function () {                                                                               // 13445\n            var v, p,                                                                                                  // 13446\n                i = 0,                                                                                                 // 13447\n                r = {},                                                                                                // 13448\n                a = arguments,                                                                                         // 13449\n                o = a[0],                                                                                              // 13450\n                has = o && typeof o == 'object'                                                                        // 13451\n                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }                            // 13452\n                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };                                // 13453\n                                                                                                                       // 13454\n            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.                                                    // 13455\n            // 'config() DECIMAL_PLACES not an integer: {v}'                                                           // 13456\n            // 'config() DECIMAL_PLACES out of range: {v}'                                                             // 13457\n            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                      // 13458\n                DECIMAL_PLACES = v | 0;                                                                                // 13459\n            }                                                                                                          // 13460\n            r[p] = DECIMAL_PLACES;                                                                                     // 13461\n                                                                                                                       // 13462\n            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.                                                       // 13463\n            // 'config() ROUNDING_MODE not an integer: {v}'                                                            // 13464\n            // 'config() ROUNDING_MODE out of range: {v}'                                                              // 13465\n            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {                                         // 13466\n                ROUNDING_MODE = v | 0;                                                                                 // 13467\n            }                                                                                                          // 13468\n            r[p] = ROUNDING_MODE;                                                                                      // 13469\n                                                                                                                       // 13470\n            // EXPONENTIAL_AT {number|number[]}                                                                        // 13471\n            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].                    // 13472\n            // 'config() EXPONENTIAL_AT not an integer: {v}'                                                           // 13473\n            // 'config() EXPONENTIAL_AT out of range: {v}'                                                             // 13474\n            if ( has( p = 'EXPONENTIAL_AT' ) ) {                                                                       // 13475\n                                                                                                                       // 13476\n                if ( isArray(v) ) {                                                                                    // 13477\n                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {                     // 13478\n                        TO_EXP_NEG = v[0] | 0;                                                                         // 13479\n                        TO_EXP_POS = v[1] | 0;                                                                         // 13480\n                    }                                                                                                  // 13481\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                       // 13482\n                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );                                             // 13483\n                }                                                                                                      // 13484\n            }                                                                                                          // 13485\n            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];                                                                         // 13486\n                                                                                                                       // 13487\n            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or                                      // 13488\n            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].                                             // 13489\n            // 'config() RANGE not an integer: {v}'                                                                    // 13490\n            // 'config() RANGE cannot be zero: {v}'                                                                    // 13491\n            // 'config() RANGE out of range: {v}'                                                                      // 13492\n            if ( has( p = 'RANGE' ) ) {                                                                                // 13493\n                                                                                                                       // 13494\n                if ( isArray(v) ) {                                                                                    // 13495\n                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {                    // 13496\n                        MIN_EXP = v[0] | 0;                                                                            // 13497\n                        MAX_EXP = v[1] | 0;                                                                            // 13498\n                    }                                                                                                  // 13499\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                       // 13500\n                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );                                      // 13501\n                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );                                             // 13502\n                }                                                                                                      // 13503\n            }                                                                                                          // 13504\n            r[p] = [ MIN_EXP, MAX_EXP ];                                                                               // 13505\n                                                                                                                       // 13506\n            // ERRORS {boolean|number} true, false, 1 or 0.                                                            // 13507\n            // 'config() ERRORS not a boolean or binary digit: {v}'                                                    // 13508\n            if ( has( p = 'ERRORS' ) ) {                                                                               // 13509\n                                                                                                                       // 13510\n                if ( v === !!v || v === 1 || v === 0 ) {                                                               // 13511\n                    id = 0;                                                                                            // 13512\n                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;                     // 13513\n                } else if (ERRORS) {                                                                                   // 13514\n                    raise( 2, p + notBool, v );                                                                        // 13515\n                }                                                                                                      // 13516\n            }                                                                                                          // 13517\n            r[p] = ERRORS;                                                                                             // 13518\n                                                                                                                       // 13519\n            // CRYPTO {boolean|number} true, false, 1 or 0.                                                            // 13520\n            // 'config() CRYPTO not a boolean or binary digit: {v}'                                                    // 13521\n            // 'config() crypto unavailable: {crypto}'                                                                 // 13522\n            if ( has( p = 'CRYPTO' ) ) {                                                                               // 13523\n                                                                                                                       // 13524\n                if ( v === !!v || v === 1 || v === 0 ) {                                                               // 13525\n                    CRYPTO = !!( v && crypto && typeof crypto == 'object' );                                           // 13526\n                    if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', crypto );                            // 13527\n                } else if (ERRORS) {                                                                                   // 13528\n                    raise( 2, p + notBool, v );                                                                        // 13529\n                }                                                                                                      // 13530\n            }                                                                                                          // 13531\n            r[p] = CRYPTO;                                                                                             // 13532\n                                                                                                                       // 13533\n            // MODULO_MODE {number} Integer, 0 to 9 inclusive.                                                         // 13534\n            // 'config() MODULO_MODE not an integer: {v}'                                                              // 13535\n            // 'config() MODULO_MODE out of range: {v}'                                                                // 13536\n            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {                                           // 13537\n                MODULO_MODE = v | 0;                                                                                   // 13538\n            }                                                                                                          // 13539\n            r[p] = MODULO_MODE;                                                                                        // 13540\n                                                                                                                       // 13541\n            // POW_PRECISION {number} Integer, 0 to MAX inclusive.                                                     // 13542\n            // 'config() POW_PRECISION not an integer: {v}'                                                            // 13543\n            // 'config() POW_PRECISION out of range: {v}'                                                              // 13544\n            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                       // 13545\n                POW_PRECISION = v | 0;                                                                                 // 13546\n            }                                                                                                          // 13547\n            r[p] = POW_PRECISION;                                                                                      // 13548\n                                                                                                                       // 13549\n            // FORMAT {object}                                                                                         // 13550\n            // 'config() FORMAT not an object: {v}'                                                                    // 13551\n            if ( has( p = 'FORMAT' ) ) {                                                                               // 13552\n                                                                                                                       // 13553\n                if ( typeof v == 'object' ) {                                                                          // 13554\n                    FORMAT = v;                                                                                        // 13555\n                } else if (ERRORS) {                                                                                   // 13556\n                    raise( 2, p + ' not an object', v );                                                               // 13557\n                }                                                                                                      // 13558\n            }                                                                                                          // 13559\n            r[p] = FORMAT;                                                                                             // 13560\n                                                                                                                       // 13561\n            return r;                                                                                                  // 13562\n        };                                                                                                             // 13563\n                                                                                                                       // 13564\n                                                                                                                       // 13565\n        /*                                                                                                             // 13566\n         * Return a new BigNumber whose value is the maximum of the arguments.                                         // 13567\n         *                                                                                                             // 13568\n         * arguments {number|string|BigNumber}                                                                         // 13569\n         */                                                                                                            // 13570\n        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };                                           // 13571\n                                                                                                                       // 13572\n                                                                                                                       // 13573\n        /*                                                                                                             // 13574\n         * Return a new BigNumber whose value is the minimum of the arguments.                                         // 13575\n         *                                                                                                             // 13576\n         * arguments {number|string|BigNumber}                                                                         // 13577\n         */                                                                                                            // 13578\n        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };                                           // 13579\n                                                                                                                       // 13580\n                                                                                                                       // 13581\n        /*                                                                                                             // 13582\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,                      // 13583\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing                        // 13584\n         * zeros are produced).                                                                                        // 13585\n         *                                                                                                             // 13586\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 13587\n         *                                                                                                             // 13588\n         * 'random() decimal places not an integer: {dp}'                                                              // 13589\n         * 'random() decimal places out of range: {dp}'                                                                // 13590\n         * 'random() crypto unavailable: {crypto}'                                                                     // 13591\n         */                                                                                                            // 13592\n        BigNumber.random = (function () {                                                                              // 13593\n            var pow2_53 = 0x20000000000000;                                                                            // 13594\n                                                                                                                       // 13595\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.                                             // 13596\n            // Check if Math.random() produces more than 32 bits of randomness.                                        // 13597\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.                    // 13598\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.                                             // 13599\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff                                                  // 13600\n              ? function () { return mathfloor( Math.random() * pow2_53 ); }                                           // 13601\n              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +                                   // 13602\n                  (Math.random() * 0x800000 | 0); };                                                                   // 13603\n                                                                                                                       // 13604\n            return function (dp) {                                                                                     // 13605\n                var a, b, e, k, v,                                                                                     // 13606\n                    i = 0,                                                                                             // 13607\n                    c = [],                                                                                            // 13608\n                    rand = new BigNumber(ONE);                                                                         // 13609\n                                                                                                                       // 13610\n                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;                            // 13611\n                k = mathceil( dp / LOG_BASE );                                                                         // 13612\n                                                                                                                       // 13613\n                if (CRYPTO) {                                                                                          // 13614\n                                                                                                                       // 13615\n                    // Browsers supporting crypto.getRandomValues.                                                     // 13616\n                    if ( crypto && crypto.getRandomValues ) {                                                          // 13617\n                                                                                                                       // 13618\n                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );                                       // 13619\n                                                                                                                       // 13620\n                        for ( ; i < k; ) {                                                                             // 13621\n                                                                                                                       // 13622\n                            // 53 bits:                                                                                // 13623\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)                                   // 13624\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000                             // 13625\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)                                              // 13626\n                            //                                     11111 11111111 11111111                             // 13627\n                            // 0x20000 is 2^21.                                                                        // 13628\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);                                                    // 13629\n                                                                                                                       // 13630\n                            // Rejection sampling:                                                                     // 13631\n                            // 0 <= v < 9007199254740992                                                               // 13632\n                            // Probability that v >= 9e15, is                                                          // 13633\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251                              // 13634\n                            if ( v >= 9e15 ) {                                                                         // 13635\n                                b = crypto.getRandomValues( new Uint32Array(2) );                                      // 13636\n                                a[i] = b[0];                                                                           // 13637\n                                a[i + 1] = b[1];                                                                       // 13638\n                            } else {                                                                                   // 13639\n                                                                                                                       // 13640\n                                // 0 <= v <= 8999999999999999                                                          // 13641\n                                // 0 <= (v % 1e14) <= 99999999999999                                                   // 13642\n                                c.push( v % 1e14 );                                                                    // 13643\n                                i += 2;                                                                                // 13644\n                            }                                                                                          // 13645\n                        }                                                                                              // 13646\n                        i = k / 2;                                                                                     // 13647\n                                                                                                                       // 13648\n                    // Node.js supporting crypto.randomBytes.                                                          // 13649\n                    } else if ( crypto && crypto.randomBytes ) {                                                       // 13650\n                                                                                                                       // 13651\n                        // buffer                                                                                      // 13652\n                        a = crypto.randomBytes( k *= 7 );                                                              // 13653\n                                                                                                                       // 13654\n                        for ( ; i < k; ) {                                                                             // 13655\n                                                                                                                       // 13656\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40                                          // 13657\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24                                                  // 13658\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111                             // 13659\n                            // 0 <= v < 9007199254740992                                                               // 13660\n                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +                   // 13661\n                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +                              // 13662\n                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];                                   // 13663\n                                                                                                                       // 13664\n                            if ( v >= 9e15 ) {                                                                         // 13665\n                                crypto.randomBytes(7).copy( a, i );                                                    // 13666\n                            } else {                                                                                   // 13667\n                                                                                                                       // 13668\n                                // 0 <= (v % 1e14) <= 99999999999999                                                   // 13669\n                                c.push( v % 1e14 );                                                                    // 13670\n                                i += 7;                                                                                // 13671\n                            }                                                                                          // 13672\n                        }                                                                                              // 13673\n                        i = k / 7;                                                                                     // 13674\n                    } else if (ERRORS) {                                                                               // 13675\n                        raise( 14, 'crypto unavailable', crypto );                                                     // 13676\n                    }                                                                                                  // 13677\n                }                                                                                                      // 13678\n                                                                                                                       // 13679\n                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.                      // 13680\n                if (!i) {                                                                                              // 13681\n                                                                                                                       // 13682\n                    for ( ; i < k; ) {                                                                                 // 13683\n                        v = random53bitInt();                                                                          // 13684\n                        if ( v < 9e15 ) c[i++] = v % 1e14;                                                             // 13685\n                    }                                                                                                  // 13686\n                }                                                                                                      // 13687\n                                                                                                                       // 13688\n                k = c[--i];                                                                                            // 13689\n                dp %= LOG_BASE;                                                                                        // 13690\n                                                                                                                       // 13691\n                // Convert trailing digits to zeros according to dp.                                                   // 13692\n                if ( k && dp ) {                                                                                       // 13693\n                    v = POWS_TEN[LOG_BASE - dp];                                                                       // 13694\n                    c[i] = mathfloor( k / v ) * v;                                                                     // 13695\n                }                                                                                                      // 13696\n                                                                                                                       // 13697\n                // Remove trailing elements which are zero.                                                            // 13698\n                for ( ; c[i] === 0; c.pop(), i-- );                                                                    // 13699\n                                                                                                                       // 13700\n                // Zero?                                                                                               // 13701\n                if ( i < 0 ) {                                                                                         // 13702\n                    c = [ e = 0 ];                                                                                     // 13703\n                } else {                                                                                               // 13704\n                                                                                                                       // 13705\n                    // Remove leading elements which are zero and adjust exponent accordingly.                         // 13706\n                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);                                              // 13707\n                                                                                                                       // 13708\n                    // Count the digits of the first element of c to determine leading zeros, and...                   // 13709\n                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);                                                     // 13710\n                                                                                                                       // 13711\n                    // adjust the exponent accordingly.                                                                // 13712\n                    if ( i < LOG_BASE ) e -= LOG_BASE - i;                                                             // 13713\n                }                                                                                                      // 13714\n                                                                                                                       // 13715\n                rand.e = e;                                                                                            // 13716\n                rand.c = c;                                                                                            // 13717\n                return rand;                                                                                           // 13718\n            };                                                                                                         // 13719\n        })();                                                                                                          // 13720\n                                                                                                                       // 13721\n                                                                                                                       // 13722\n        // PRIVATE FUNCTIONS                                                                                           // 13723\n                                                                                                                       // 13724\n                                                                                                                       // 13725\n        // Convert a numeric string of baseIn to a numeric string of baseOut.                                          // 13726\n        function convertBase( str, baseOut, baseIn, sign ) {                                                           // 13727\n            var d, e, k, r, x, xc, y,                                                                                  // 13728\n                i = str.indexOf( '.' ),                                                                                // 13729\n                dp = DECIMAL_PLACES,                                                                                   // 13730\n                rm = ROUNDING_MODE;                                                                                    // 13731\n                                                                                                                       // 13732\n            if ( baseIn < 37 ) str = str.toLowerCase();                                                                // 13733\n                                                                                                                       // 13734\n            // Non-integer.                                                                                            // 13735\n            if ( i >= 0 ) {                                                                                            // 13736\n                k = POW_PRECISION;                                                                                     // 13737\n                                                                                                                       // 13738\n                // Unlimited precision.                                                                                // 13739\n                POW_PRECISION = 0;                                                                                     // 13740\n                str = str.replace( '.', '' );                                                                          // 13741\n                y = new BigNumber(baseIn);                                                                             // 13742\n                x = y.pow( str.length - i );                                                                           // 13743\n                POW_PRECISION = k;                                                                                     // 13744\n                                                                                                                       // 13745\n                // Convert str as if an integer, then restore the fraction part by dividing the                        // 13746\n                // result by its base raised to a power.                                                               // 13747\n                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );                             // 13748\n                y.e = y.c.length;                                                                                      // 13749\n            }                                                                                                          // 13750\n                                                                                                                       // 13751\n            // Convert the number as integer.                                                                          // 13752\n            xc = toBaseOut( str, baseIn, baseOut );                                                                    // 13753\n            e = k = xc.length;                                                                                         // 13754\n                                                                                                                       // 13755\n            // Remove trailing zeros.                                                                                  // 13756\n            for ( ; xc[--k] == 0; xc.pop() );                                                                          // 13757\n            if ( !xc[0] ) return '0';                                                                                  // 13758\n                                                                                                                       // 13759\n            if ( i < 0 ) {                                                                                             // 13760\n                --e;                                                                                                   // 13761\n            } else {                                                                                                   // 13762\n                x.c = xc;                                                                                              // 13763\n                x.e = e;                                                                                               // 13764\n                                                                                                                       // 13765\n                // sign is needed for correct rounding.                                                                // 13766\n                x.s = sign;                                                                                            // 13767\n                x = div( x, y, dp, rm, baseOut );                                                                      // 13768\n                xc = x.c;                                                                                              // 13769\n                r = x.r;                                                                                               // 13770\n                e = x.e;                                                                                               // 13771\n            }                                                                                                          // 13772\n                                                                                                                       // 13773\n            d = e + dp + 1;                                                                                            // 13774\n                                                                                                                       // 13775\n            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.                    // 13776\n            i = xc[d];                                                                                                 // 13777\n            k = baseOut / 2;                                                                                           // 13778\n            r = r || d < 0 || xc[d + 1] != null;                                                                       // 13779\n                                                                                                                       // 13780\n            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                                // 13781\n                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||                               // 13782\n                         rm == ( x.s < 0 ? 8 : 7 ) );                                                                  // 13783\n                                                                                                                       // 13784\n            if ( d < 1 || !xc[0] ) {                                                                                   // 13785\n                                                                                                                       // 13786\n                // 1^-dp or 0.                                                                                         // 13787\n                str = r ? toFixedPoint( '1', -dp ) : '0';                                                              // 13788\n            } else {                                                                                                   // 13789\n                xc.length = d;                                                                                         // 13790\n                                                                                                                       // 13791\n                if (r) {                                                                                               // 13792\n                                                                                                                       // 13793\n                    // Rounding up may mean the previous digit has to be rounded up and so on.                         // 13794\n                    for ( --baseOut; ++xc[--d] > baseOut; ) {                                                          // 13795\n                        xc[d] = 0;                                                                                     // 13796\n                                                                                                                       // 13797\n                        if ( !d ) {                                                                                    // 13798\n                            ++e;                                                                                       // 13799\n                            xc.unshift(1);                                                                             // 13800\n                        }                                                                                              // 13801\n                    }                                                                                                  // 13802\n                }                                                                                                      // 13803\n                                                                                                                       // 13804\n                // Determine trailing zeros.                                                                           // 13805\n                for ( k = xc.length; !xc[--k]; );                                                                      // 13806\n                                                                                                                       // 13807\n                // E.g. [4, 11, 15] becomes 4bf.                                                                       // 13808\n                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );                                    // 13809\n                str = toFixedPoint( str, e );                                                                          // 13810\n            }                                                                                                          // 13811\n                                                                                                                       // 13812\n            // The caller will add the sign.                                                                           // 13813\n            return str;                                                                                                // 13814\n        }                                                                                                              // 13815\n                                                                                                                       // 13816\n                                                                                                                       // 13817\n        // Perform division in the specified base. Called by div and convertBase.                                      // 13818\n        div = (function () {                                                                                           // 13819\n                                                                                                                       // 13820\n            // Assume non-zero x and k.                                                                                // 13821\n            function multiply( x, k, base ) {                                                                          // 13822\n                var m, temp, xlo, xhi,                                                                                 // 13823\n                    carry = 0,                                                                                         // 13824\n                    i = x.length,                                                                                      // 13825\n                    klo = k % SQRT_BASE,                                                                               // 13826\n                    khi = k / SQRT_BASE | 0;                                                                           // 13827\n                                                                                                                       // 13828\n                for ( x = x.slice(); i--; ) {                                                                          // 13829\n                    xlo = x[i] % SQRT_BASE;                                                                            // 13830\n                    xhi = x[i] / SQRT_BASE | 0;                                                                        // 13831\n                    m = khi * xlo + xhi * klo;                                                                         // 13832\n                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;                                      // 13833\n                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;                                   // 13834\n                    x[i] = temp % base;                                                                                // 13835\n                }                                                                                                      // 13836\n                                                                                                                       // 13837\n                if (carry) x.unshift(carry);                                                                           // 13838\n                                                                                                                       // 13839\n                return x;                                                                                              // 13840\n            }                                                                                                          // 13841\n                                                                                                                       // 13842\n            function compare( a, b, aL, bL ) {                                                                         // 13843\n                var i, cmp;                                                                                            // 13844\n                                                                                                                       // 13845\n                if ( aL != bL ) {                                                                                      // 13846\n                    cmp = aL > bL ? 1 : -1;                                                                            // 13847\n                } else {                                                                                               // 13848\n                                                                                                                       // 13849\n                    for ( i = cmp = 0; i < aL; i++ ) {                                                                 // 13850\n                                                                                                                       // 13851\n                        if ( a[i] != b[i] ) {                                                                          // 13852\n                            cmp = a[i] > b[i] ? 1 : -1;                                                                // 13853\n                            break;                                                                                     // 13854\n                        }                                                                                              // 13855\n                    }                                                                                                  // 13856\n                }                                                                                                      // 13857\n                return cmp;                                                                                            // 13858\n            }                                                                                                          // 13859\n                                                                                                                       // 13860\n            function subtract( a, b, aL, base ) {                                                                      // 13861\n                var i = 0;                                                                                             // 13862\n                                                                                                                       // 13863\n                // Subtract b from a.                                                                                  // 13864\n                for ( ; aL--; ) {                                                                                      // 13865\n                    a[aL] -= i;                                                                                        // 13866\n                    i = a[aL] < b[aL] ? 1 : 0;                                                                         // 13867\n                    a[aL] = i * base + a[aL] - b[aL];                                                                  // 13868\n                }                                                                                                      // 13869\n                                                                                                                       // 13870\n                // Remove leading zeros.                                                                               // 13871\n                for ( ; !a[0] && a.length > 1; a.shift() );                                                            // 13872\n            }                                                                                                          // 13873\n                                                                                                                       // 13874\n            // x: dividend, y: divisor.                                                                                // 13875\n            return function ( x, y, dp, rm, base ) {                                                                   // 13876\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,                              // 13877\n                    yL, yz,                                                                                            // 13878\n                    s = x.s == y.s ? 1 : -1,                                                                           // 13879\n                    xc = x.c,                                                                                          // 13880\n                    yc = y.c;                                                                                          // 13881\n                                                                                                                       // 13882\n                // Either NaN, Infinity or 0?                                                                          // 13883\n                if ( !xc || !xc[0] || !yc || !yc[0] ) {                                                                // 13884\n                                                                                                                       // 13885\n                    return new BigNumber(                                                                              // 13886\n                                                                                                                       // 13887\n                      // Return NaN if either NaN, or both Infinity or 0.                                              // 13888\n                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :                                      // 13889\n                                                                                                                       // 13890\n                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.                     // 13891\n                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0                                                        // 13892\n                    );                                                                                                 // 13893\n                }                                                                                                      // 13894\n                                                                                                                       // 13895\n                q = new BigNumber(s);                                                                                  // 13896\n                qc = q.c = [];                                                                                         // 13897\n                e = x.e - y.e;                                                                                         // 13898\n                s = dp + e + 1;                                                                                        // 13899\n                                                                                                                       // 13900\n                if ( !base ) {                                                                                         // 13901\n                    base = BASE;                                                                                       // 13902\n                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );                                       // 13903\n                    s = s / LOG_BASE | 0;                                                                              // 13904\n                }                                                                                                      // 13905\n                                                                                                                       // 13906\n                // Result exponent may be one less then the current value of e.                                        // 13907\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.                        // 13908\n                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );                                                           // 13909\n                if ( yc[i] > ( xc[i] || 0 ) ) e--;                                                                     // 13910\n                                                                                                                       // 13911\n                if ( s < 0 ) {                                                                                         // 13912\n                    qc.push(1);                                                                                        // 13913\n                    more = true;                                                                                       // 13914\n                } else {                                                                                               // 13915\n                    xL = xc.length;                                                                                    // 13916\n                    yL = yc.length;                                                                                    // 13917\n                    i = 0;                                                                                             // 13918\n                    s += 2;                                                                                            // 13919\n                                                                                                                       // 13920\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.                                // 13921\n                                                                                                                       // 13922\n                    n = mathfloor( base / ( yc[0] + 1 ) );                                                             // 13923\n                                                                                                                       // 13924\n                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.                         // 13925\n                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {                                                  // 13926\n                    if ( n > 1 ) {                                                                                     // 13927\n                        yc = multiply( yc, n, base );                                                                  // 13928\n                        xc = multiply( xc, n, base );                                                                  // 13929\n                        yL = yc.length;                                                                                // 13930\n                        xL = xc.length;                                                                                // 13931\n                    }                                                                                                  // 13932\n                                                                                                                       // 13933\n                    xi = yL;                                                                                           // 13934\n                    rem = xc.slice( 0, yL );                                                                           // 13935\n                    remL = rem.length;                                                                                 // 13936\n                                                                                                                       // 13937\n                    // Add zeros to make remainder as long as divisor.                                                 // 13938\n                    for ( ; remL < yL; rem[remL++] = 0 );                                                              // 13939\n                    yz = yc.slice();                                                                                   // 13940\n                    yz.unshift(0);                                                                                     // 13941\n                    yc0 = yc[0];                                                                                       // 13942\n                    if ( yc[1] >= base / 2 ) yc0++;                                                                    // 13943\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.                          // 13944\n                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;                                              // 13945\n                                                                                                                       // 13946\n                    do {                                                                                               // 13947\n                        n = 0;                                                                                         // 13948\n                                                                                                                       // 13949\n                        // Compare divisor and remainder.                                                              // 13950\n                        cmp = compare( yc, rem, yL, remL );                                                            // 13951\n                                                                                                                       // 13952\n                        // If divisor < remainder.                                                                     // 13953\n                        if ( cmp < 0 ) {                                                                               // 13954\n                                                                                                                       // 13955\n                            // Calculate trial digit, n.                                                               // 13956\n                                                                                                                       // 13957\n                            rem0 = rem[0];                                                                             // 13958\n                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );                                    // 13959\n                                                                                                                       // 13960\n                            // n is how many times the divisor goes into the current remainder.                        // 13961\n                            n = mathfloor( rem0 / yc0 );                                                               // 13962\n                                                                                                                       // 13963\n                            //  Algorithm:                                                                             // 13964\n                            //  1. product = divisor * trial digit (n)                                                 // 13965\n                            //  2. if product > remainder: product -= divisor, n--                                     // 13966\n                            //  3. remainder -= product                                                                // 13967\n                            //  4. if product was < remainder at 2:                                                    // 13968\n                            //    5. compare new remainder and divisor                                                 // 13969\n                            //    6. If remainder > divisor: remainder -= divisor, n++                                 // 13970\n                                                                                                                       // 13971\n                            if ( n > 1 ) {                                                                             // 13972\n                                                                                                                       // 13973\n                                // n may be > base only when base is 3.                                                // 13974\n                                if (n >= base) n = base - 1;                                                           // 13975\n                                                                                                                       // 13976\n                                // product = divisor * trial digit.                                                    // 13977\n                                prod = multiply( yc, n, base );                                                        // 13978\n                                prodL = prod.length;                                                                   // 13979\n                                remL = rem.length;                                                                     // 13980\n                                                                                                                       // 13981\n                                // Compare product and remainder.                                                      // 13982\n                                // If product > remainder.                                                             // 13983\n                                // Trial digit n too high.                                                             // 13984\n                                // n is 1 too high about 5% of the time, and is not known to have                      // 13985\n                                // ever been more than 1 too high.                                                     // 13986\n                                while ( compare( prod, rem, prodL, remL ) == 1 ) {                                     // 13987\n                                    n--;                                                                               // 13988\n                                                                                                                       // 13989\n                                    // Subtract divisor from product.                                                  // 13990\n                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );                               // 13991\n                                    prodL = prod.length;                                                               // 13992\n                                    cmp = 1;                                                                           // 13993\n                                }                                                                                      // 13994\n                            } else {                                                                                   // 13995\n                                                                                                                       // 13996\n                                // n is 0 or 1, cmp is -1.                                                             // 13997\n                                // If n is 0, there is no need to compare yc and rem again below,                      // 13998\n                                // so change cmp to 1 to avoid it.                                                     // 13999\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.                       // 14000\n                                if ( n == 0 ) {                                                                        // 14001\n                                                                                                                       // 14002\n                                    // divisor < remainder, so n must be at least 1.                                   // 14003\n                                    cmp = n = 1;                                                                       // 14004\n                                }                                                                                      // 14005\n                                                                                                                       // 14006\n                                // product = divisor                                                                   // 14007\n                                prod = yc.slice();                                                                     // 14008\n                                prodL = prod.length;                                                                   // 14009\n                            }                                                                                          // 14010\n                                                                                                                       // 14011\n                            if ( prodL < remL ) prod.unshift(0);                                                       // 14012\n                                                                                                                       // 14013\n                            // Subtract product from remainder.                                                        // 14014\n                            subtract( rem, prod, remL, base );                                                         // 14015\n                            remL = rem.length;                                                                         // 14016\n                                                                                                                       // 14017\n                             // If product was < remainder.                                                            // 14018\n                            if ( cmp == -1 ) {                                                                         // 14019\n                                                                                                                       // 14020\n                                // Compare divisor and new remainder.                                                  // 14021\n                                // If divisor < new remainder, subtract divisor from remainder.                        // 14022\n                                // Trial digit n too low.                                                              // 14023\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.                     // 14024\n                                while ( compare( yc, rem, yL, remL ) < 1 ) {                                           // 14025\n                                    n++;                                                                               // 14026\n                                                                                                                       // 14027\n                                    // Subtract divisor from remainder.                                                // 14028\n                                    subtract( rem, yL < remL ? yz : yc, remL, base );                                  // 14029\n                                    remL = rem.length;                                                                 // 14030\n                                }                                                                                      // 14031\n                            }                                                                                          // 14032\n                        } else if ( cmp === 0 ) {                                                                      // 14033\n                            n++;                                                                                       // 14034\n                            rem = [0];                                                                                 // 14035\n                        } // else cmp === 1 and n will be 0                                                            // 14036\n                                                                                                                       // 14037\n                        // Add the next digit, n, to the result array.                                                 // 14038\n                        qc[i++] = n;                                                                                   // 14039\n                                                                                                                       // 14040\n                        // Update the remainder.                                                                       // 14041\n                        if ( rem[0] ) {                                                                                // 14042\n                            rem[remL++] = xc[xi] || 0;                                                                 // 14043\n                        } else {                                                                                       // 14044\n                            rem = [ xc[xi] ];                                                                          // 14045\n                            remL = 1;                                                                                  // 14046\n                        }                                                                                              // 14047\n                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );                                                // 14048\n                                                                                                                       // 14049\n                    more = rem[0] != null;                                                                             // 14050\n                                                                                                                       // 14051\n                    // Leading zero?                                                                                   // 14052\n                    if ( !qc[0] ) qc.shift();                                                                          // 14053\n                }                                                                                                      // 14054\n                                                                                                                       // 14055\n                if ( base == BASE ) {                                                                                  // 14056\n                                                                                                                       // 14057\n                    // To calculate q.e, first get the number of digits of qc[0].                                      // 14058\n                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );                                                   // 14059\n                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );                                     // 14060\n                                                                                                                       // 14061\n                // Caller is convertBase.                                                                              // 14062\n                } else {                                                                                               // 14063\n                    q.e = e;                                                                                           // 14064\n                    q.r = +more;                                                                                       // 14065\n                }                                                                                                      // 14066\n                                                                                                                       // 14067\n                return q;                                                                                              // 14068\n            };                                                                                                         // 14069\n        })();                                                                                                          // 14070\n                                                                                                                       // 14071\n                                                                                                                       // 14072\n        /*                                                                                                             // 14073\n         * Return a string representing the value of BigNumber n in fixed-point or exponential                         // 14074\n         * notation rounded to the specified decimal places or significant digits.                                     // 14075\n         *                                                                                                             // 14076\n         * n is a BigNumber.                                                                                           // 14077\n         * i is the index of the last digit required (i.e. the digit that may be rounded up).                          // 14078\n         * rm is the rounding mode.                                                                                    // 14079\n         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.                             // 14080\n         */                                                                                                            // 14081\n        function format( n, i, rm, caller ) {                                                                          // 14082\n            var c0, e, ne, len, str;                                                                                   // 14083\n                                                                                                                       // 14084\n            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )                                            // 14085\n              ? rm | 0 : ROUNDING_MODE;                                                                                // 14086\n                                                                                                                       // 14087\n            if ( !n.c ) return n.toString();                                                                           // 14088\n            c0 = n.c[0];                                                                                               // 14089\n            ne = n.e;                                                                                                  // 14090\n                                                                                                                       // 14091\n            if ( i == null ) {                                                                                         // 14092\n                str = coeffToString( n.c );                                                                            // 14093\n                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG                                                 // 14094\n                  ? toExponential( str, ne )                                                                           // 14095\n                  : toFixedPoint( str, ne );                                                                           // 14096\n            } else {                                                                                                   // 14097\n                n = round( new BigNumber(n), i, rm );                                                                  // 14098\n                                                                                                                       // 14099\n                // n.e may have changed if the value was rounded up.                                                   // 14100\n                e = n.e;                                                                                               // 14101\n                                                                                                                       // 14102\n                str = coeffToString( n.c );                                                                            // 14103\n                len = str.length;                                                                                      // 14104\n                                                                                                                       // 14105\n                // toPrecision returns exponential notation if the number of significant digits                        // 14106\n                // specified is less than the number of digits necessary to represent the integer                      // 14107\n                // part of the value in fixed-point notation.                                                          // 14108\n                                                                                                                       // 14109\n                // Exponential notation.                                                                               // 14110\n                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {                                 // 14111\n                                                                                                                       // 14112\n                    // Append zeros?                                                                                   // 14113\n                    for ( ; len < i; str += '0', len++ );                                                              // 14114\n                    str = toExponential( str, e );                                                                     // 14115\n                                                                                                                       // 14116\n                // Fixed-point notation.                                                                               // 14117\n                } else {                                                                                               // 14118\n                    i -= ne;                                                                                           // 14119\n                    str = toFixedPoint( str, e );                                                                      // 14120\n                                                                                                                       // 14121\n                    // Append zeros?                                                                                   // 14122\n                    if ( e + 1 > len ) {                                                                               // 14123\n                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );                                            // 14124\n                    } else {                                                                                           // 14125\n                        i += e - len;                                                                                  // 14126\n                        if ( i > 0 ) {                                                                                 // 14127\n                            if ( e + 1 == len ) str += '.';                                                            // 14128\n                            for ( ; i--; str += '0' );                                                                 // 14129\n                        }                                                                                              // 14130\n                    }                                                                                                  // 14131\n                }                                                                                                      // 14132\n            }                                                                                                          // 14133\n                                                                                                                       // 14134\n            return n.s < 0 && c0 ? '-' + str : str;                                                                    // 14135\n        }                                                                                                              // 14136\n                                                                                                                       // 14137\n                                                                                                                       // 14138\n        // Handle BigNumber.max and BigNumber.min.                                                                     // 14139\n        function maxOrMin( args, method ) {                                                                            // 14140\n            var m, n,                                                                                                  // 14141\n                i = 0;                                                                                                 // 14142\n                                                                                                                       // 14143\n            if ( isArray( args[0] ) ) args = args[0];                                                                  // 14144\n            m = new BigNumber( args[0] );                                                                              // 14145\n                                                                                                                       // 14146\n            for ( ; ++i < args.length; ) {                                                                             // 14147\n                n = new BigNumber( args[i] );                                                                          // 14148\n                                                                                                                       // 14149\n                // If any number is NaN, return NaN.                                                                   // 14150\n                if ( !n.s ) {                                                                                          // 14151\n                    m = n;                                                                                             // 14152\n                    break;                                                                                             // 14153\n                } else if ( method.call( m, n ) ) {                                                                    // 14154\n                    m = n;                                                                                             // 14155\n                }                                                                                                      // 14156\n            }                                                                                                          // 14157\n                                                                                                                       // 14158\n            return m;                                                                                                  // 14159\n        }                                                                                                              // 14160\n                                                                                                                       // 14161\n                                                                                                                       // 14162\n        /*                                                                                                             // 14163\n         * Return true if n is an integer in range, otherwise throw.                                                   // 14164\n         * Use for argument validation when ERRORS is true.                                                            // 14165\n         */                                                                                                            // 14166\n        function intValidatorWithErrors( n, min, max, caller, name ) {                                                 // 14167\n            if ( n < min || n > max || n != truncate(n) ) {                                                            // 14168\n                raise( caller, ( name || 'decimal places' ) +                                                          // 14169\n                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );                                   // 14170\n            }                                                                                                          // 14171\n                                                                                                                       // 14172\n            return true;                                                                                               // 14173\n        }                                                                                                              // 14174\n                                                                                                                       // 14175\n                                                                                                                       // 14176\n        /*                                                                                                             // 14177\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.                     // 14178\n         * Called by minus, plus and times.                                                                            // 14179\n         */                                                                                                            // 14180\n        function normalise( n, c, e ) {                                                                                // 14181\n            var i = 1,                                                                                                 // 14182\n                j = c.length;                                                                                          // 14183\n                                                                                                                       // 14184\n             // Remove trailing zeros.                                                                                 // 14185\n            for ( ; !c[--j]; c.pop() );                                                                                // 14186\n                                                                                                                       // 14187\n            // Calculate the base 10 exponent. First get the number of digits of c[0].                                 // 14188\n            for ( j = c[0]; j >= 10; j /= 10, i++ );                                                                   // 14189\n                                                                                                                       // 14190\n            // Overflow?                                                                                               // 14191\n            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {                                                            // 14192\n                                                                                                                       // 14193\n                // Infinity.                                                                                           // 14194\n                n.c = n.e = null;                                                                                      // 14195\n                                                                                                                       // 14196\n            // Underflow?                                                                                              // 14197\n            } else if ( e < MIN_EXP ) {                                                                                // 14198\n                                                                                                                       // 14199\n                // Zero.                                                                                               // 14200\n                n.c = [ n.e = 0 ];                                                                                     // 14201\n            } else {                                                                                                   // 14202\n                n.e = e;                                                                                               // 14203\n                n.c = c;                                                                                               // 14204\n            }                                                                                                          // 14205\n                                                                                                                       // 14206\n            return n;                                                                                                  // 14207\n        }                                                                                                              // 14208\n                                                                                                                       // 14209\n                                                                                                                       // 14210\n        // Handle values that fail the validity test in BigNumber.                                                     // 14211\n        parseNumeric = (function () {                                                                                  // 14212\n            var basePrefix = /^(-?)0([xbo])/i,                                                                         // 14213\n                dotAfter = /^([^.]+)\\.$/,                                                                              // 14214\n                dotBefore = /^\\.([^.]+)$/,                                                                             // 14215\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,                                                                // 14216\n                whitespaceOrPlus = /^\\s*\\+|^\\s+|\\s+$/g;                                                                // 14217\n                                                                                                                       // 14218\n            return function ( x, str, num, b ) {                                                                       // 14219\n                var base,                                                                                              // 14220\n                    s = num ? str : str.replace( whitespaceOrPlus, '' );                                               // 14221\n                                                                                                                       // 14222\n                // No exception on ±Infinity or NaN.                                                                   // 14223\n                if ( isInfinityOrNaN.test(s) ) {                                                                       // 14224\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;                                                            // 14225\n                } else {                                                                                               // 14226\n                    if ( !num ) {                                                                                      // 14227\n                                                                                                                       // 14228\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i                                                  // 14229\n                        s = s.replace( basePrefix, function ( m, p1, p2 ) {                                            // 14230\n                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;                          // 14231\n                            return !b || b == base ? p1 : m;                                                           // 14232\n                        });                                                                                            // 14233\n                                                                                                                       // 14234\n                        if (b) {                                                                                       // 14235\n                            base = b;                                                                                  // 14236\n                                                                                                                       // 14237\n                            // E.g. '1.' to '1', '.1' to '0.1'                                                         // 14238\n                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );                              // 14239\n                        }                                                                                              // 14240\n                                                                                                                       // 14241\n                        if ( str != s ) return new BigNumber( s, base );                                               // 14242\n                    }                                                                                                  // 14243\n                                                                                                                       // 14244\n                    // 'new BigNumber() not a number: {n}'                                                             // 14245\n                    // 'new BigNumber() not a base {b} number: {n}'                                                    // 14246\n                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );                     // 14247\n                    x.s = null;                                                                                        // 14248\n                }                                                                                                      // 14249\n                                                                                                                       // 14250\n                x.c = x.e = null;                                                                                      // 14251\n                id = 0;                                                                                                // 14252\n            }                                                                                                          // 14253\n        })();                                                                                                          // 14254\n                                                                                                                       // 14255\n                                                                                                                       // 14256\n        // Throw a BigNumber Error.                                                                                    // 14257\n        function raise( caller, msg, val ) {                                                                           // 14258\n            var error = new Error( [                                                                                   // 14259\n                'new BigNumber',     // 0                                                                              // 14260\n                'cmp',               // 1                                                                              // 14261\n                'config',            // 2                                                                              // 14262\n                'div',               // 3                                                                              // 14263\n                'divToInt',          // 4                                                                              // 14264\n                'eq',                // 5                                                                              // 14265\n                'gt',                // 6                                                                              // 14266\n                'gte',               // 7                                                                              // 14267\n                'lt',                // 8                                                                              // 14268\n                'lte',               // 9                                                                              // 14269\n                'minus',             // 10                                                                             // 14270\n                'mod',               // 11                                                                             // 14271\n                'plus',              // 12                                                                             // 14272\n                'precision',         // 13                                                                             // 14273\n                'random',            // 14                                                                             // 14274\n                'round',             // 15                                                                             // 14275\n                'shift',             // 16                                                                             // 14276\n                'times',             // 17                                                                             // 14277\n                'toDigits',          // 18                                                                             // 14278\n                'toExponential',     // 19                                                                             // 14279\n                'toFixed',           // 20                                                                             // 14280\n                'toFormat',          // 21                                                                             // 14281\n                'toFraction',        // 22                                                                             // 14282\n                'pow',               // 23                                                                             // 14283\n                'toPrecision',       // 24                                                                             // 14284\n                'toString',          // 25                                                                             // 14285\n                'BigNumber'          // 26                                                                             // 14286\n            ][caller] + '() ' + msg + ': ' + val );                                                                    // 14287\n                                                                                                                       // 14288\n            error.name = 'BigNumber Error';                                                                            // 14289\n            id = 0;                                                                                                    // 14290\n            throw error;                                                                                               // 14291\n        }                                                                                                              // 14292\n                                                                                                                       // 14293\n                                                                                                                       // 14294\n        /*                                                                                                             // 14295\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.                         // 14296\n         * If r is truthy, it is known that there are more digits after the rounding digit.                            // 14297\n         */                                                                                                            // 14298\n        function round( x, sd, rm, r ) {                                                                               // 14299\n            var d, i, j, k, n, ni, rd,                                                                                 // 14300\n                xc = x.c,                                                                                              // 14301\n                pows10 = POWS_TEN;                                                                                     // 14302\n                                                                                                                       // 14303\n            // if x is not Infinity or NaN...                                                                          // 14304\n            if (xc) {                                                                                                  // 14305\n                                                                                                                       // 14306\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.                    // 14307\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.                       // 14308\n                // ni is the index of n within x.c.                                                                    // 14309\n                // d is the number of digits of n.                                                                     // 14310\n                // i is the index of rd within n including leading zeros.                                              // 14311\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).                                // 14312\n                out: {                                                                                                 // 14313\n                                                                                                                       // 14314\n                    // Get the number of digits of the first element of xc.                                            // 14315\n                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );                                                   // 14316\n                    i = sd - d;                                                                                        // 14317\n                                                                                                                       // 14318\n                    // If the rounding digit is in the first element of xc...                                          // 14319\n                    if ( i < 0 ) {                                                                                     // 14320\n                        i += LOG_BASE;                                                                                 // 14321\n                        j = sd;                                                                                        // 14322\n                        n = xc[ ni = 0 ];                                                                              // 14323\n                                                                                                                       // 14324\n                        // Get the rounding digit at index j of n.                                                     // 14325\n                        rd = n / pows10[ d - j - 1 ] % 10 | 0;                                                         // 14326\n                    } else {                                                                                           // 14327\n                        ni = mathceil( ( i + 1 ) / LOG_BASE );                                                         // 14328\n                                                                                                                       // 14329\n                        if ( ni >= xc.length ) {                                                                       // 14330\n                                                                                                                       // 14331\n                            if (r) {                                                                                   // 14332\n                                                                                                                       // 14333\n                                // Needed by sqrt.                                                                     // 14334\n                                for ( ; xc.length <= ni; xc.push(0) );                                                 // 14335\n                                n = rd = 0;                                                                            // 14336\n                                d = 1;                                                                                 // 14337\n                                i %= LOG_BASE;                                                                         // 14338\n                                j = i - LOG_BASE + 1;                                                                  // 14339\n                            } else {                                                                                   // 14340\n                                break out;                                                                             // 14341\n                            }                                                                                          // 14342\n                        } else {                                                                                       // 14343\n                            n = k = xc[ni];                                                                            // 14344\n                                                                                                                       // 14345\n                            // Get the number of digits of n.                                                          // 14346\n                            for ( d = 1; k >= 10; k /= 10, d++ );                                                      // 14347\n                                                                                                                       // 14348\n                            // Get the index of rd within n.                                                           // 14349\n                            i %= LOG_BASE;                                                                             // 14350\n                                                                                                                       // 14351\n                            // Get the index of rd within n, adjusted for leading zeros.                               // 14352\n                            // The number of leading zeros of n is given by LOG_BASE - d.                              // 14353\n                            j = i - LOG_BASE + d;                                                                      // 14354\n                                                                                                                       // 14355\n                            // Get the rounding digit at index j of n.                                                 // 14356\n                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;                                         // 14357\n                        }                                                                                              // 14358\n                    }                                                                                                  // 14359\n                                                                                                                       // 14360\n                    r = r || sd < 0 ||                                                                                 // 14361\n                                                                                                                       // 14362\n                    // Are there any non-zero digits after the rounding digit?                                         // 14363\n                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right                   // 14364\n                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.                    // 14365\n                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );                                   // 14366\n                                                                                                                       // 14367\n                    r = rm < 4                                                                                         // 14368\n                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                                        // 14369\n                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&                                              // 14370\n                                                                                                                       // 14371\n                        // Check whether the digit to the left of the rounding digit is odd.                           // 14372\n                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||                       // 14373\n                          rm == ( x.s < 0 ? 8 : 7 ) );                                                                 // 14374\n                                                                                                                       // 14375\n                    if ( sd < 1 || !xc[0] ) {                                                                          // 14376\n                        xc.length = 0;                                                                                 // 14377\n                                                                                                                       // 14378\n                        if (r) {                                                                                       // 14379\n                                                                                                                       // 14380\n                            // Convert sd to decimal places.                                                           // 14381\n                            sd -= x.e + 1;                                                                             // 14382\n                                                                                                                       // 14383\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.                                                        // 14384\n                            xc[0] = pows10[ sd % LOG_BASE ];                                                           // 14385\n                            x.e = -sd || 0;                                                                            // 14386\n                        } else {                                                                                       // 14387\n                                                                                                                       // 14388\n                            // Zero.                                                                                   // 14389\n                            xc[0] = x.e = 0;                                                                           // 14390\n                        }                                                                                              // 14391\n                                                                                                                       // 14392\n                        return x;                                                                                      // 14393\n                    }                                                                                                  // 14394\n                                                                                                                       // 14395\n                    // Remove excess digits.                                                                           // 14396\n                    if ( i == 0 ) {                                                                                    // 14397\n                        xc.length = ni;                                                                                // 14398\n                        k = 1;                                                                                         // 14399\n                        ni--;                                                                                          // 14400\n                    } else {                                                                                           // 14401\n                        xc.length = ni + 1;                                                                            // 14402\n                        k = pows10[ LOG_BASE - i ];                                                                    // 14403\n                                                                                                                       // 14404\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.                                        // 14405\n                        // j > 0 means i > number of leading zeros of n.                                               // 14406\n                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;                         // 14407\n                    }                                                                                                  // 14408\n                                                                                                                       // 14409\n                    // Round up?                                                                                       // 14410\n                    if (r) {                                                                                           // 14411\n                                                                                                                       // 14412\n                        for ( ; ; ) {                                                                                  // 14413\n                                                                                                                       // 14414\n                            // If the digit to be rounded up is in the first element of xc...                          // 14415\n                            if ( ni == 0 ) {                                                                           // 14416\n                                                                                                                       // 14417\n                                // i will be the length of xc[0] before k is added.                                    // 14418\n                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );                                       // 14419\n                                j = xc[0] += k;                                                                        // 14420\n                                for ( k = 1; j >= 10; j /= 10, k++ );                                                  // 14421\n                                                                                                                       // 14422\n                                // if i != k the length has increased.                                                 // 14423\n                                if ( i != k ) {                                                                        // 14424\n                                    x.e++;                                                                             // 14425\n                                    if ( xc[0] == BASE ) xc[0] = 1;                                                    // 14426\n                                }                                                                                      // 14427\n                                                                                                                       // 14428\n                                break;                                                                                 // 14429\n                            } else {                                                                                   // 14430\n                                xc[ni] += k;                                                                           // 14431\n                                if ( xc[ni] != BASE ) break;                                                           // 14432\n                                xc[ni--] = 0;                                                                          // 14433\n                                k = 1;                                                                                 // 14434\n                            }                                                                                          // 14435\n                        }                                                                                              // 14436\n                    }                                                                                                  // 14437\n                                                                                                                       // 14438\n                    // Remove trailing zeros.                                                                          // 14439\n                    for ( i = xc.length; xc[--i] === 0; xc.pop() );                                                    // 14440\n                }                                                                                                      // 14441\n                                                                                                                       // 14442\n                // Overflow? Infinity.                                                                                 // 14443\n                if ( x.e > MAX_EXP ) {                                                                                 // 14444\n                    x.c = x.e = null;                                                                                  // 14445\n                                                                                                                       // 14446\n                // Underflow? Zero.                                                                                    // 14447\n                } else if ( x.e < MIN_EXP ) {                                                                          // 14448\n                    x.c = [ x.e = 0 ];                                                                                 // 14449\n                }                                                                                                      // 14450\n            }                                                                                                          // 14451\n                                                                                                                       // 14452\n            return x;                                                                                                  // 14453\n        }                                                                                                              // 14454\n                                                                                                                       // 14455\n                                                                                                                       // 14456\n        // PROTOTYPE/INSTANCE METHODS                                                                                  // 14457\n                                                                                                                       // 14458\n                                                                                                                       // 14459\n        /*                                                                                                             // 14460\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.                                 // 14461\n         */                                                                                                            // 14462\n        P.absoluteValue = P.abs = function () {                                                                        // 14463\n            var x = new BigNumber(this);                                                                               // 14464\n            if ( x.s < 0 ) x.s = 1;                                                                                    // 14465\n            return x;                                                                                                  // 14466\n        };                                                                                                             // 14467\n                                                                                                                       // 14468\n                                                                                                                       // 14469\n        /*                                                                                                             // 14470\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                        // 14471\n         * number in the direction of Infinity.                                                                        // 14472\n         */                                                                                                            // 14473\n        P.ceil = function () {                                                                                         // 14474\n            return round( new BigNumber(this), this.e + 1, 2 );                                                        // 14475\n        };                                                                                                             // 14476\n                                                                                                                       // 14477\n                                                                                                                       // 14478\n        /*                                                                                                             // 14479\n         * Return                                                                                                      // 14480\n         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),                              // 14481\n         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),                                // 14482\n         * 0 if they have the same value,                                                                              // 14483\n         * or null if the value of either is NaN.                                                                      // 14484\n         */                                                                                                            // 14485\n        P.comparedTo = P.cmp = function ( y, b ) {                                                                     // 14486\n            id = 1;                                                                                                    // 14487\n            return compare( this, new BigNumber( y, b ) );                                                             // 14488\n        };                                                                                                             // 14489\n                                                                                                                       // 14490\n                                                                                                                       // 14491\n        /*                                                                                                             // 14492\n         * Return the number of decimal places of the value of this BigNumber, or null if the value                    // 14493\n         * of this BigNumber is ±Infinity or NaN.                                                                      // 14494\n         */                                                                                                            // 14495\n        P.decimalPlaces = P.dp = function () {                                                                         // 14496\n            var n, v,                                                                                                  // 14497\n                c = this.c;                                                                                            // 14498\n                                                                                                                       // 14499\n            if ( !c ) return null;                                                                                     // 14500\n            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;                                   // 14501\n                                                                                                                       // 14502\n            // Subtract the number of trailing zeros of the last number.                                               // 14503\n            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );                                                       // 14504\n            if ( n < 0 ) n = 0;                                                                                        // 14505\n                                                                                                                       // 14506\n            return n;                                                                                                  // 14507\n        };                                                                                                             // 14508\n                                                                                                                       // 14509\n                                                                                                                       // 14510\n        /*                                                                                                             // 14511\n         *  n / 0 = I                                                                                                  // 14512\n         *  n / N = N                                                                                                  // 14513\n         *  n / I = 0                                                                                                  // 14514\n         *  0 / n = 0                                                                                                  // 14515\n         *  0 / 0 = N                                                                                                  // 14516\n         *  0 / N = N                                                                                                  // 14517\n         *  0 / I = 0                                                                                                  // 14518\n         *  N / n = N                                                                                                  // 14519\n         *  N / 0 = N                                                                                                  // 14520\n         *  N / N = N                                                                                                  // 14521\n         *  N / I = N                                                                                                  // 14522\n         *  I / n = I                                                                                                  // 14523\n         *  I / 0 = I                                                                                                  // 14524\n         *  I / N = N                                                                                                  // 14525\n         *  I / I = N                                                                                                  // 14526\n         *                                                                                                             // 14527\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of                   // 14528\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                     // 14529\n         */                                                                                                            // 14530\n        P.dividedBy = P.div = function ( y, b ) {                                                                      // 14531\n            id = 3;                                                                                                    // 14532\n            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );                                  // 14533\n        };                                                                                                             // 14534\n                                                                                                                       // 14535\n                                                                                                                       // 14536\n        /*                                                                                                             // 14537\n         * Return a new BigNumber whose value is the integer part of dividing the value of this                        // 14538\n         * BigNumber by the value of BigNumber(y, b).                                                                  // 14539\n         */                                                                                                            // 14540\n        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {                                                        // 14541\n            id = 4;                                                                                                    // 14542\n            return div( this, new BigNumber( y, b ), 0, 1 );                                                           // 14543\n        };                                                                                                             // 14544\n                                                                                                                       // 14545\n                                                                                                                       // 14546\n        /*                                                                                                             // 14547\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),                        // 14548\n         * otherwise returns false.                                                                                    // 14549\n         */                                                                                                            // 14550\n        P.equals = P.eq = function ( y, b ) {                                                                          // 14551\n            id = 5;                                                                                                    // 14552\n            return compare( this, new BigNumber( y, b ) ) === 0;                                                       // 14553\n        };                                                                                                             // 14554\n                                                                                                                       // 14555\n                                                                                                                       // 14556\n        /*                                                                                                             // 14557\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                        // 14558\n         * number in the direction of -Infinity.                                                                       // 14559\n         */                                                                                                            // 14560\n        P.floor = function () {                                                                                        // 14561\n            return round( new BigNumber(this), this.e + 1, 3 );                                                        // 14562\n        };                                                                                                             // 14563\n                                                                                                                       // 14564\n                                                                                                                       // 14565\n        /*                                                                                                             // 14566\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),                    // 14567\n         * otherwise returns false.                                                                                    // 14568\n         */                                                                                                            // 14569\n        P.greaterThan = P.gt = function ( y, b ) {                                                                     // 14570\n            id = 6;                                                                                                    // 14571\n            return compare( this, new BigNumber( y, b ) ) > 0;                                                         // 14572\n        };                                                                                                             // 14573\n                                                                                                                       // 14574\n                                                                                                                       // 14575\n        /*                                                                                                             // 14576\n         * Return true if the value of this BigNumber is greater than or equal to the value of                         // 14577\n         * BigNumber(y, b), otherwise returns false.                                                                   // 14578\n         */                                                                                                            // 14579\n        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {                                                           // 14580\n            id = 7;                                                                                                    // 14581\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;                                    // 14582\n                                                                                                                       // 14583\n        };                                                                                                             // 14584\n                                                                                                                       // 14585\n                                                                                                                       // 14586\n        /*                                                                                                             // 14587\n         * Return true if the value of this BigNumber is a finite number, otherwise returns false.                     // 14588\n         */                                                                                                            // 14589\n        P.isFinite = function () {                                                                                     // 14590\n            return !!this.c;                                                                                           // 14591\n        };                                                                                                             // 14592\n                                                                                                                       // 14593\n                                                                                                                       // 14594\n        /*                                                                                                             // 14595\n         * Return true if the value of this BigNumber is an integer, otherwise return false.                           // 14596\n         */                                                                                                            // 14597\n        P.isInteger = P.isInt = function () {                                                                          // 14598\n            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;                                      // 14599\n        };                                                                                                             // 14600\n                                                                                                                       // 14601\n                                                                                                                       // 14602\n        /*                                                                                                             // 14603\n         * Return true if the value of this BigNumber is NaN, otherwise returns false.                                 // 14604\n         */                                                                                                            // 14605\n        P.isNaN = function () {                                                                                        // 14606\n            return !this.s;                                                                                            // 14607\n        };                                                                                                             // 14608\n                                                                                                                       // 14609\n                                                                                                                       // 14610\n        /*                                                                                                             // 14611\n         * Return true if the value of this BigNumber is negative, otherwise returns false.                            // 14612\n         */                                                                                                            // 14613\n        P.isNegative = P.isNeg = function () {                                                                         // 14614\n            return this.s < 0;                                                                                         // 14615\n        };                                                                                                             // 14616\n                                                                                                                       // 14617\n                                                                                                                       // 14618\n        /*                                                                                                             // 14619\n         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.                             // 14620\n         */                                                                                                            // 14621\n        P.isZero = function () {                                                                                       // 14622\n            return !!this.c && this.c[0] == 0;                                                                         // 14623\n        };                                                                                                             // 14624\n                                                                                                                       // 14625\n                                                                                                                       // 14626\n        /*                                                                                                             // 14627\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),                       // 14628\n         * otherwise returns false.                                                                                    // 14629\n         */                                                                                                            // 14630\n        P.lessThan = P.lt = function ( y, b ) {                                                                        // 14631\n            id = 8;                                                                                                    // 14632\n            return compare( this, new BigNumber( y, b ) ) < 0;                                                         // 14633\n        };                                                                                                             // 14634\n                                                                                                                       // 14635\n                                                                                                                       // 14636\n        /*                                                                                                             // 14637\n         * Return true if the value of this BigNumber is less than or equal to the value of                            // 14638\n         * BigNumber(y, b), otherwise returns false.                                                                   // 14639\n         */                                                                                                            // 14640\n        P.lessThanOrEqualTo = P.lte = function ( y, b ) {                                                              // 14641\n            id = 9;                                                                                                    // 14642\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;                                   // 14643\n        };                                                                                                             // 14644\n                                                                                                                       // 14645\n                                                                                                                       // 14646\n        /*                                                                                                             // 14647\n         *  n - 0 = n                                                                                                  // 14648\n         *  n - N = N                                                                                                  // 14649\n         *  n - I = -I                                                                                                 // 14650\n         *  0 - n = -n                                                                                                 // 14651\n         *  0 - 0 = 0                                                                                                  // 14652\n         *  0 - N = N                                                                                                  // 14653\n         *  0 - I = -I                                                                                                 // 14654\n         *  N - n = N                                                                                                  // 14655\n         *  N - 0 = N                                                                                                  // 14656\n         *  N - N = N                                                                                                  // 14657\n         *  N - I = N                                                                                                  // 14658\n         *  I - n = I                                                                                                  // 14659\n         *  I - 0 = I                                                                                                  // 14660\n         *  I - N = N                                                                                                  // 14661\n         *  I - I = N                                                                                                  // 14662\n         *                                                                                                             // 14663\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of                        // 14664\n         * BigNumber(y, b).                                                                                            // 14665\n         */                                                                                                            // 14666\n        P.minus = P.sub = function ( y, b ) {                                                                          // 14667\n            var i, j, t, xLTy,                                                                                         // 14668\n                x = this,                                                                                              // 14669\n                a = x.s;                                                                                               // 14670\n                                                                                                                       // 14671\n            id = 10;                                                                                                   // 14672\n            y = new BigNumber( y, b );                                                                                 // 14673\n            b = y.s;                                                                                                   // 14674\n                                                                                                                       // 14675\n            // Either NaN?                                                                                             // 14676\n            if ( !a || !b ) return new BigNumber(NaN);                                                                 // 14677\n                                                                                                                       // 14678\n            // Signs differ?                                                                                           // 14679\n            if ( a != b ) {                                                                                            // 14680\n                y.s = -b;                                                                                              // 14681\n                return x.plus(y);                                                                                      // 14682\n            }                                                                                                          // 14683\n                                                                                                                       // 14684\n            var xe = x.e / LOG_BASE,                                                                                   // 14685\n                ye = y.e / LOG_BASE,                                                                                   // 14686\n                xc = x.c,                                                                                              // 14687\n                yc = y.c;                                                                                              // 14688\n                                                                                                                       // 14689\n            if ( !xe || !ye ) {                                                                                        // 14690\n                                                                                                                       // 14691\n                // Either Infinity?                                                                                    // 14692\n                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );                         // 14693\n                                                                                                                       // 14694\n                // Either zero?                                                                                        // 14695\n                if ( !xc[0] || !yc[0] ) {                                                                              // 14696\n                                                                                                                       // 14697\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                        // 14698\n                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :                                        // 14699\n                                                                                                                       // 14700\n                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity                                    // 14701\n                      ROUNDING_MODE == 3 ? -0 : 0 );                                                                   // 14702\n                }                                                                                                      // 14703\n            }                                                                                                          // 14704\n                                                                                                                       // 14705\n            xe = bitFloor(xe);                                                                                         // 14706\n            ye = bitFloor(ye);                                                                                         // 14707\n            xc = xc.slice();                                                                                           // 14708\n                                                                                                                       // 14709\n            // Determine which is the bigger number.                                                                   // 14710\n            if ( a = xe - ye ) {                                                                                       // 14711\n                                                                                                                       // 14712\n                if ( xLTy = a < 0 ) {                                                                                  // 14713\n                    a = -a;                                                                                            // 14714\n                    t = xc;                                                                                            // 14715\n                } else {                                                                                               // 14716\n                    ye = xe;                                                                                           // 14717\n                    t = yc;                                                                                            // 14718\n                }                                                                                                      // 14719\n                                                                                                                       // 14720\n                t.reverse();                                                                                           // 14721\n                                                                                                                       // 14722\n                // Prepend zeros to equalise exponents.                                                                // 14723\n                for ( b = a; b--; t.push(0) );                                                                         // 14724\n                t.reverse();                                                                                           // 14725\n            } else {                                                                                                   // 14726\n                                                                                                                       // 14727\n                // Exponents equal. Check digit by digit.                                                              // 14728\n                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;                                          // 14729\n                                                                                                                       // 14730\n                for ( a = b = 0; b < j; b++ ) {                                                                        // 14731\n                                                                                                                       // 14732\n                    if ( xc[b] != yc[b] ) {                                                                            // 14733\n                        xLTy = xc[b] < yc[b];                                                                          // 14734\n                        break;                                                                                         // 14735\n                    }                                                                                                  // 14736\n                }                                                                                                      // 14737\n            }                                                                                                          // 14738\n                                                                                                                       // 14739\n            // x < y? Point xc to the array of the bigger number.                                                      // 14740\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;                                                             // 14741\n                                                                                                                       // 14742\n            b = ( j = yc.length ) - ( i = xc.length );                                                                 // 14743\n                                                                                                                       // 14744\n            // Append zeros to xc if shorter.                                                                          // 14745\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.                     // 14746\n            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );                                                                   // 14747\n            b = BASE - 1;                                                                                              // 14748\n                                                                                                                       // 14749\n            // Subtract yc from xc.                                                                                    // 14750\n            for ( ; j > a; ) {                                                                                         // 14751\n                                                                                                                       // 14752\n                if ( xc[--j] < yc[j] ) {                                                                               // 14753\n                    for ( i = j; i && !xc[--i]; xc[i] = b );                                                           // 14754\n                    --xc[i];                                                                                           // 14755\n                    xc[j] += BASE;                                                                                     // 14756\n                }                                                                                                      // 14757\n                                                                                                                       // 14758\n                xc[j] -= yc[j];                                                                                        // 14759\n            }                                                                                                          // 14760\n                                                                                                                       // 14761\n            // Remove leading zeros and adjust exponent accordingly.                                                   // 14762\n            for ( ; xc[0] == 0; xc.shift(), --ye );                                                                    // 14763\n                                                                                                                       // 14764\n            // Zero?                                                                                                   // 14765\n            if ( !xc[0] ) {                                                                                            // 14766\n                                                                                                                       // 14767\n                // Following IEEE 754 (2008) 6.3,                                                                      // 14768\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.                                       // 14769\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;                                                                     // 14770\n                y.c = [ y.e = 0 ];                                                                                     // 14771\n                return y;                                                                                              // 14772\n            }                                                                                                          // 14773\n                                                                                                                       // 14774\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity                             // 14775\n            // for finite x and y.                                                                                     // 14776\n            return normalise( y, xc, ye );                                                                             // 14777\n        };                                                                                                             // 14778\n                                                                                                                       // 14779\n                                                                                                                       // 14780\n        /*                                                                                                             // 14781\n         *   n % 0 =  N                                                                                                // 14782\n         *   n % N =  N                                                                                                // 14783\n         *   n % I =  n                                                                                                // 14784\n         *   0 % n =  0                                                                                                // 14785\n         *  -0 % n = -0                                                                                                // 14786\n         *   0 % 0 =  N                                                                                                // 14787\n         *   0 % N =  N                                                                                                // 14788\n         *   0 % I =  0                                                                                                // 14789\n         *   N % n =  N                                                                                                // 14790\n         *   N % 0 =  N                                                                                                // 14791\n         *   N % N =  N                                                                                                // 14792\n         *   N % I =  N                                                                                                // 14793\n         *   I % n =  N                                                                                                // 14794\n         *   I % 0 =  N                                                                                                // 14795\n         *   I % N =  N                                                                                                // 14796\n         *   I % I =  N                                                                                                // 14797\n         *                                                                                                             // 14798\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of                       // 14799\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.                                            // 14800\n         */                                                                                                            // 14801\n        P.modulo = P.mod = function ( y, b ) {                                                                         // 14802\n            var q, s,                                                                                                  // 14803\n                x = this;                                                                                              // 14804\n                                                                                                                       // 14805\n            id = 11;                                                                                                   // 14806\n            y = new BigNumber( y, b );                                                                                 // 14807\n                                                                                                                       // 14808\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.                                                // 14809\n            if ( !x.c || !y.s || y.c && !y.c[0] ) {                                                                    // 14810\n                return new BigNumber(NaN);                                                                             // 14811\n                                                                                                                       // 14812\n            // Return x if y is Infinity or x is zero.                                                                 // 14813\n            } else if ( !y.c || x.c && !x.c[0] ) {                                                                     // 14814\n                return new BigNumber(x);                                                                               // 14815\n            }                                                                                                          // 14816\n                                                                                                                       // 14817\n            if ( MODULO_MODE == 9 ) {                                                                                  // 14818\n                                                                                                                       // 14819\n                // Euclidian division: q = sign(y) * floor(x / abs(y))                                                 // 14820\n                // r = x - qy    where  0 <= r < abs(y)                                                                // 14821\n                s = y.s;                                                                                               // 14822\n                y.s = 1;                                                                                               // 14823\n                q = div( x, y, 0, 3 );                                                                                 // 14824\n                y.s = s;                                                                                               // 14825\n                q.s *= s;                                                                                              // 14826\n            } else {                                                                                                   // 14827\n                q = div( x, y, 0, MODULO_MODE );                                                                       // 14828\n            }                                                                                                          // 14829\n                                                                                                                       // 14830\n            return x.minus( q.times(y) );                                                                              // 14831\n        };                                                                                                             // 14832\n                                                                                                                       // 14833\n                                                                                                                       // 14834\n        /*                                                                                                             // 14835\n         * Return a new BigNumber whose value is the value of this BigNumber negated,                                  // 14836\n         * i.e. multiplied by -1.                                                                                      // 14837\n         */                                                                                                            // 14838\n        P.negated = P.neg = function () {                                                                              // 14839\n            var x = new BigNumber(this);                                                                               // 14840\n            x.s = -x.s || null;                                                                                        // 14841\n            return x;                                                                                                  // 14842\n        };                                                                                                             // 14843\n                                                                                                                       // 14844\n                                                                                                                       // 14845\n        /*                                                                                                             // 14846\n         *  n + 0 = n                                                                                                  // 14847\n         *  n + N = N                                                                                                  // 14848\n         *  n + I = I                                                                                                  // 14849\n         *  0 + n = n                                                                                                  // 14850\n         *  0 + 0 = 0                                                                                                  // 14851\n         *  0 + N = N                                                                                                  // 14852\n         *  0 + I = I                                                                                                  // 14853\n         *  N + n = N                                                                                                  // 14854\n         *  N + 0 = N                                                                                                  // 14855\n         *  N + N = N                                                                                                  // 14856\n         *  N + I = N                                                                                                  // 14857\n         *  I + n = I                                                                                                  // 14858\n         *  I + 0 = I                                                                                                  // 14859\n         *  I + N = N                                                                                                  // 14860\n         *  I + I = I                                                                                                  // 14861\n         *                                                                                                             // 14862\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of                         // 14863\n         * BigNumber(y, b).                                                                                            // 14864\n         */                                                                                                            // 14865\n        P.plus = P.add = function ( y, b ) {                                                                           // 14866\n            var t,                                                                                                     // 14867\n                x = this,                                                                                              // 14868\n                a = x.s;                                                                                               // 14869\n                                                                                                                       // 14870\n            id = 12;                                                                                                   // 14871\n            y = new BigNumber( y, b );                                                                                 // 14872\n            b = y.s;                                                                                                   // 14873\n                                                                                                                       // 14874\n            // Either NaN?                                                                                             // 14875\n            if ( !a || !b ) return new BigNumber(NaN);                                                                 // 14876\n                                                                                                                       // 14877\n            // Signs differ?                                                                                           // 14878\n             if ( a != b ) {                                                                                           // 14879\n                y.s = -b;                                                                                              // 14880\n                return x.minus(y);                                                                                     // 14881\n            }                                                                                                          // 14882\n                                                                                                                       // 14883\n            var xe = x.e / LOG_BASE,                                                                                   // 14884\n                ye = y.e / LOG_BASE,                                                                                   // 14885\n                xc = x.c,                                                                                              // 14886\n                yc = y.c;                                                                                              // 14887\n                                                                                                                       // 14888\n            if ( !xe || !ye ) {                                                                                        // 14889\n                                                                                                                       // 14890\n                // Return ±Infinity if either ±Infinity.                                                               // 14891\n                if ( !xc || !yc ) return new BigNumber( a / 0 );                                                       // 14892\n                                                                                                                       // 14893\n                // Either zero?                                                                                        // 14894\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                            // 14895\n                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );                         // 14896\n            }                                                                                                          // 14897\n                                                                                                                       // 14898\n            xe = bitFloor(xe);                                                                                         // 14899\n            ye = bitFloor(ye);                                                                                         // 14900\n            xc = xc.slice();                                                                                           // 14901\n                                                                                                                       // 14902\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.                            // 14903\n            if ( a = xe - ye ) {                                                                                       // 14904\n                if ( a > 0 ) {                                                                                         // 14905\n                    ye = xe;                                                                                           // 14906\n                    t = yc;                                                                                            // 14907\n                } else {                                                                                               // 14908\n                    a = -a;                                                                                            // 14909\n                    t = xc;                                                                                            // 14910\n                }                                                                                                      // 14911\n                                                                                                                       // 14912\n                t.reverse();                                                                                           // 14913\n                for ( ; a--; t.push(0) );                                                                              // 14914\n                t.reverse();                                                                                           // 14915\n            }                                                                                                          // 14916\n                                                                                                                       // 14917\n            a = xc.length;                                                                                             // 14918\n            b = yc.length;                                                                                             // 14919\n                                                                                                                       // 14920\n            // Point xc to the longer array, and b to the shorter length.                                              // 14921\n            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;                                                           // 14922\n                                                                                                                       // 14923\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.                          // 14924\n            for ( a = 0; b; ) {                                                                                        // 14925\n                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;                                                        // 14926\n                xc[b] %= BASE;                                                                                         // 14927\n            }                                                                                                          // 14928\n                                                                                                                       // 14929\n            if (a) {                                                                                                   // 14930\n                xc.unshift(a);                                                                                         // 14931\n                ++ye;                                                                                                  // 14932\n            }                                                                                                          // 14933\n                                                                                                                       // 14934\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0                                              // 14935\n            // ye = MAX_EXP + 1 possible                                                                               // 14936\n            return normalise( y, xc, ye );                                                                             // 14937\n        };                                                                                                             // 14938\n                                                                                                                       // 14939\n                                                                                                                       // 14940\n        /*                                                                                                             // 14941\n         * Return the number of significant digits of the value of this BigNumber.                                     // 14942\n         *                                                                                                             // 14943\n         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.                     // 14944\n         */                                                                                                            // 14945\n        P.precision = P.sd = function (z) {                                                                            // 14946\n            var n, v,                                                                                                  // 14947\n                x = this,                                                                                              // 14948\n                c = x.c;                                                                                               // 14949\n                                                                                                                       // 14950\n            // 'precision() argument not a boolean or binary digit: {z}'                                               // 14951\n            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {                                                      // 14952\n                if (ERRORS) raise( 13, 'argument' + notBool, z );                                                      // 14953\n                if ( z != !!z ) z = null;                                                                              // 14954\n            }                                                                                                          // 14955\n                                                                                                                       // 14956\n            if ( !c ) return null;                                                                                     // 14957\n            v = c.length - 1;                                                                                          // 14958\n            n = v * LOG_BASE + 1;                                                                                      // 14959\n                                                                                                                       // 14960\n            if ( v = c[v] ) {                                                                                          // 14961\n                                                                                                                       // 14962\n                // Subtract the number of trailing zeros of the last element.                                          // 14963\n                for ( ; v % 10 == 0; v /= 10, n-- );                                                                   // 14964\n                                                                                                                       // 14965\n                // Add the number of digits of the first element.                                                      // 14966\n                for ( v = c[0]; v >= 10; v /= 10, n++ );                                                               // 14967\n            }                                                                                                          // 14968\n                                                                                                                       // 14969\n            if ( z && x.e + 1 > n ) n = x.e + 1;                                                                       // 14970\n                                                                                                                       // 14971\n            return n;                                                                                                  // 14972\n        };                                                                                                             // 14973\n                                                                                                                       // 14974\n                                                                                                                       // 14975\n        /*                                                                                                             // 14976\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                   // 14977\n         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if                         // 14978\n         * omitted.                                                                                                    // 14979\n         *                                                                                                             // 14980\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 14981\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 14982\n         *                                                                                                             // 14983\n         * 'round() decimal places out of range: {dp}'                                                                 // 14984\n         * 'round() decimal places not an integer: {dp}'                                                               // 14985\n         * 'round() rounding mode not an integer: {rm}'                                                                // 14986\n         * 'round() rounding mode out of range: {rm}'                                                                  // 14987\n         */                                                                                                            // 14988\n        P.round = function ( dp, rm ) {                                                                                // 14989\n            var n = new BigNumber(this);                                                                               // 14990\n                                                                                                                       // 14991\n            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {                                                        // 14992\n                round( n, ~~dp + this.e + 1, rm == null ||                                                             // 14993\n                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );                                // 14994\n            }                                                                                                          // 14995\n                                                                                                                       // 14996\n            return n;                                                                                                  // 14997\n        };                                                                                                             // 14998\n                                                                                                                       // 14999\n                                                                                                                       // 15000\n        /*                                                                                                             // 15001\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places                       // 15002\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.                                      // 15003\n         *                                                                                                             // 15004\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.                                        // 15005\n         *                                                                                                             // 15006\n         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity                      // 15007\n         * otherwise.                                                                                                  // 15008\n         *                                                                                                             // 15009\n         * 'shift() argument not an integer: {k}'                                                                      // 15010\n         * 'shift() argument out of range: {k}'                                                                        // 15011\n         */                                                                                                            // 15012\n        P.shift = function (k) {                                                                                       // 15013\n            var n = this;                                                                                              // 15014\n            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )                                // 15015\n                                                                                                                       // 15016\n              // k < 1e+21, or truncate(k) will produce exponential notation.                                          // 15017\n              ? n.times( '1e' + truncate(k) )                                                                          // 15018\n              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )                      // 15019\n                ? n.s * ( k < 0 ? 0 : 1 / 0 )                                                                          // 15020\n                : n );                                                                                                 // 15021\n        };                                                                                                             // 15022\n                                                                                                                       // 15023\n                                                                                                                       // 15024\n        /*                                                                                                             // 15025\n         *  sqrt(-n) =  N                                                                                              // 15026\n         *  sqrt( N) =  N                                                                                              // 15027\n         *  sqrt(-I) =  N                                                                                              // 15028\n         *  sqrt( I) =  I                                                                                              // 15029\n         *  sqrt( 0) =  0                                                                                              // 15030\n         *  sqrt(-0) = -0                                                                                              // 15031\n         *                                                                                                             // 15032\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,                       // 15033\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                                      // 15034\n         */                                                                                                            // 15035\n        P.squareRoot = P.sqrt = function () {                                                                          // 15036\n            var m, n, r, rep, t,                                                                                       // 15037\n                x = this,                                                                                              // 15038\n                c = x.c,                                                                                               // 15039\n                s = x.s,                                                                                               // 15040\n                e = x.e,                                                                                               // 15041\n                dp = DECIMAL_PLACES + 4,                                                                               // 15042\n                half = new BigNumber('0.5');                                                                           // 15043\n                                                                                                                       // 15044\n            // Negative/NaN/Infinity/zero?                                                                             // 15045\n            if ( s !== 1 || !c || !c[0] ) {                                                                            // 15046\n                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );                           // 15047\n            }                                                                                                          // 15048\n                                                                                                                       // 15049\n            // Initial estimate.                                                                                       // 15050\n            s = Math.sqrt( +x );                                                                                       // 15051\n                                                                                                                       // 15052\n            // Math.sqrt underflow/overflow?                                                                           // 15053\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.                                 // 15054\n            if ( s == 0 || s == 1 / 0 ) {                                                                              // 15055\n                n = coeffToString(c);                                                                                  // 15056\n                if ( ( n.length + e ) % 2 == 0 ) n += '0';                                                             // 15057\n                s = Math.sqrt(n);                                                                                      // 15058\n                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );                                                    // 15059\n                                                                                                                       // 15060\n                if ( s == 1 / 0 ) {                                                                                    // 15061\n                    n = '1e' + e;                                                                                      // 15062\n                } else {                                                                                               // 15063\n                    n = s.toExponential();                                                                             // 15064\n                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;                                                          // 15065\n                }                                                                                                      // 15066\n                                                                                                                       // 15067\n                r = new BigNumber(n);                                                                                  // 15068\n            } else {                                                                                                   // 15069\n                r = new BigNumber( s + '' );                                                                           // 15070\n            }                                                                                                          // 15071\n                                                                                                                       // 15072\n            // Check for zero.                                                                                         // 15073\n            // r could be zero if MIN_EXP is changed after the this value was created.                                 // 15074\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause                   // 15075\n            // coeffToString to throw.                                                                                 // 15076\n            if ( r.c[0] ) {                                                                                            // 15077\n                e = r.e;                                                                                               // 15078\n                s = e + dp;                                                                                            // 15079\n                if ( s < 3 ) s = 0;                                                                                    // 15080\n                                                                                                                       // 15081\n                // Newton-Raphson iteration.                                                                           // 15082\n                for ( ; ; ) {                                                                                          // 15083\n                    t = r;                                                                                             // 15084\n                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );                                                    // 15085\n                                                                                                                       // 15086\n                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =                                                // 15087\n                         coeffToString( r.c ) ).slice( 0, s ) ) {                                                      // 15088\n                                                                                                                       // 15089\n                        // The exponent of r may here be one less than the final result exponent,                      // 15090\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits                     // 15091\n                        // are indexed correctly.                                                                      // 15092\n                        if ( r.e < e ) --s;                                                                            // 15093\n                        n = n.slice( s - 3, s + 1 );                                                                   // 15094\n                                                                                                                       // 15095\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits                    // 15096\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the                        // 15097\n                        // iteration.                                                                                  // 15098\n                        if ( n == '9999' || !rep && n == '4999' ) {                                                    // 15099\n                                                                                                                       // 15100\n                            // On the first iteration only, check to see if rounding up gives the                      // 15101\n                            // exact result as the nines may infinitely repeat.                                        // 15102\n                            if ( !rep ) {                                                                              // 15103\n                                round( t, t.e + DECIMAL_PLACES + 2, 0 );                                               // 15104\n                                                                                                                       // 15105\n                                if ( t.times(t).eq(x) ) {                                                              // 15106\n                                    r = t;                                                                             // 15107\n                                    break;                                                                             // 15108\n                                }                                                                                      // 15109\n                            }                                                                                          // 15110\n                                                                                                                       // 15111\n                            dp += 4;                                                                                   // 15112\n                            s += 4;                                                                                    // 15113\n                            rep = 1;                                                                                   // 15114\n                        } else {                                                                                       // 15115\n                                                                                                                       // 15116\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact                         // 15117\n                            // result. If not, then there are further digits and m will be truthy.                     // 15118\n                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {                                         // 15119\n                                                                                                                       // 15120\n                                // Truncate to the first rounding digit.                                               // 15121\n                                round( r, r.e + DECIMAL_PLACES + 2, 1 );                                               // 15122\n                                m = !r.times(r).eq(x);                                                                 // 15123\n                            }                                                                                          // 15124\n                                                                                                                       // 15125\n                            break;                                                                                     // 15126\n                        }                                                                                              // 15127\n                    }                                                                                                  // 15128\n                }                                                                                                      // 15129\n            }                                                                                                          // 15130\n                                                                                                                       // 15131\n            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );                                             // 15132\n        };                                                                                                             // 15133\n                                                                                                                       // 15134\n                                                                                                                       // 15135\n        /*                                                                                                             // 15136\n         *  n * 0 = 0                                                                                                  // 15137\n         *  n * N = N                                                                                                  // 15138\n         *  n * I = I                                                                                                  // 15139\n         *  0 * n = 0                                                                                                  // 15140\n         *  0 * 0 = 0                                                                                                  // 15141\n         *  0 * N = N                                                                                                  // 15142\n         *  0 * I = N                                                                                                  // 15143\n         *  N * n = N                                                                                                  // 15144\n         *  N * 0 = N                                                                                                  // 15145\n         *  N * N = N                                                                                                  // 15146\n         *  N * I = N                                                                                                  // 15147\n         *  I * n = I                                                                                                  // 15148\n         *  I * 0 = N                                                                                                  // 15149\n         *  I * N = N                                                                                                  // 15150\n         *  I * I = I                                                                                                  // 15151\n         *                                                                                                             // 15152\n         * Return a new BigNumber whose value is the value of this BigNumber times the value of                        // 15153\n         * BigNumber(y, b).                                                                                            // 15154\n         */                                                                                                            // 15155\n        P.times = P.mul = function ( y, b ) {                                                                          // 15156\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,                                                    // 15157\n                base, sqrtBase,                                                                                        // 15158\n                x = this,                                                                                              // 15159\n                xc = x.c,                                                                                              // 15160\n                yc = ( id = 17, y = new BigNumber( y, b ) ).c;                                                         // 15161\n                                                                                                                       // 15162\n            // Either NaN, ±Infinity or ±0?                                                                            // 15163\n            if ( !xc || !yc || !xc[0] || !yc[0] ) {                                                                    // 15164\n                                                                                                                       // 15165\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.                                 // 15166\n                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {                                    // 15167\n                    y.c = y.e = y.s = null;                                                                            // 15168\n                } else {                                                                                               // 15169\n                    y.s *= x.s;                                                                                        // 15170\n                                                                                                                       // 15171\n                    // Return ±Infinity if either is ±Infinity.                                                        // 15172\n                    if ( !xc || !yc ) {                                                                                // 15173\n                        y.c = y.e = null;                                                                              // 15174\n                                                                                                                       // 15175\n                    // Return ±0 if either is ±0.                                                                      // 15176\n                    } else {                                                                                           // 15177\n                        y.c = [0];                                                                                     // 15178\n                        y.e = 0;                                                                                       // 15179\n                    }                                                                                                  // 15180\n                }                                                                                                      // 15181\n                                                                                                                       // 15182\n                return y;                                                                                              // 15183\n            }                                                                                                          // 15184\n                                                                                                                       // 15185\n            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );                                               // 15186\n            y.s *= x.s;                                                                                                // 15187\n            xcL = xc.length;                                                                                           // 15188\n            ycL = yc.length;                                                                                           // 15189\n                                                                                                                       // 15190\n            // Ensure xc points to longer array and xcL to its length.                                                 // 15191\n            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;                                   // 15192\n                                                                                                                       // 15193\n            // Initialise the result array with zeros.                                                                 // 15194\n            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );                                                           // 15195\n                                                                                                                       // 15196\n            base = BASE;                                                                                               // 15197\n            sqrtBase = SQRT_BASE;                                                                                      // 15198\n                                                                                                                       // 15199\n            for ( i = ycL; --i >= 0; ) {                                                                               // 15200\n                c = 0;                                                                                                 // 15201\n                ylo = yc[i] % sqrtBase;                                                                                // 15202\n                yhi = yc[i] / sqrtBase | 0;                                                                            // 15203\n                                                                                                                       // 15204\n                for ( k = xcL, j = i + k; j > i; ) {                                                                   // 15205\n                    xlo = xc[--k] % sqrtBase;                                                                          // 15206\n                    xhi = xc[k] / sqrtBase | 0;                                                                        // 15207\n                    m = yhi * xlo + xhi * ylo;                                                                         // 15208\n                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;                                     // 15209\n                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;                                         // 15210\n                    zc[j--] = xlo % base;                                                                              // 15211\n                }                                                                                                      // 15212\n                                                                                                                       // 15213\n                zc[j] = c;                                                                                             // 15214\n            }                                                                                                          // 15215\n                                                                                                                       // 15216\n            if (c) {                                                                                                   // 15217\n                ++e;                                                                                                   // 15218\n            } else {                                                                                                   // 15219\n                zc.shift();                                                                                            // 15220\n            }                                                                                                          // 15221\n                                                                                                                       // 15222\n            return normalise( y, zc, e );                                                                              // 15223\n        };                                                                                                             // 15224\n                                                                                                                       // 15225\n                                                                                                                       // 15226\n        /*                                                                                                             // 15227\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                   // 15228\n         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.                            // 15229\n         *                                                                                                             // 15230\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                              // 15231\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15232\n         *                                                                                                             // 15233\n         * 'toDigits() precision out of range: {sd}'                                                                   // 15234\n         * 'toDigits() precision not an integer: {sd}'                                                                 // 15235\n         * 'toDigits() rounding mode not an integer: {rm}'                                                             // 15236\n         * 'toDigits() rounding mode out of range: {rm}'                                                               // 15237\n         */                                                                                                            // 15238\n        P.toDigits = function ( sd, rm ) {                                                                             // 15239\n            var n = new BigNumber(this);                                                                               // 15240\n            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;                             // 15241\n            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;                     // 15242\n            return sd ? round( n, sd, rm ) : n;                                                                        // 15243\n        };                                                                                                             // 15244\n                                                                                                                       // 15245\n                                                                                                                       // 15246\n        /*                                                                                                             // 15247\n         * Return a string representing the value of this BigNumber in exponential notation and                        // 15248\n         * rounded using ROUNDING_MODE to dp fixed decimal places.                                                     // 15249\n         *                                                                                                             // 15250\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 15251\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15252\n         *                                                                                                             // 15253\n         * 'toExponential() decimal places not an integer: {dp}'                                                       // 15254\n         * 'toExponential() decimal places out of range: {dp}'                                                         // 15255\n         * 'toExponential() rounding mode not an integer: {rm}'                                                        // 15256\n         * 'toExponential() rounding mode out of range: {rm}'                                                          // 15257\n         */                                                                                                            // 15258\n        P.toExponential = function ( dp, rm ) {                                                                        // 15259\n            return format( this,                                                                                       // 15260\n              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );                                  // 15261\n        };                                                                                                             // 15262\n                                                                                                                       // 15263\n                                                                                                                       // 15264\n        /*                                                                                                             // 15265\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding                   // 15266\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.                       // 15267\n         *                                                                                                             // 15268\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',                                             // 15269\n         * but e.g. (-0.00001).toFixed(0) is '-0'.                                                                     // 15270\n         *                                                                                                             // 15271\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 15272\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15273\n         *                                                                                                             // 15274\n         * 'toFixed() decimal places not an integer: {dp}'                                                             // 15275\n         * 'toFixed() decimal places out of range: {dp}'                                                               // 15276\n         * 'toFixed() rounding mode not an integer: {rm}'                                                              // 15277\n         * 'toFixed() rounding mode out of range: {rm}'                                                                // 15278\n         */                                                                                                            // 15279\n        P.toFixed = function ( dp, rm ) {                                                                              // 15280\n            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )                                            // 15281\n              ? ~~dp + this.e + 1 : null, rm, 20 );                                                                    // 15282\n        };                                                                                                             // 15283\n                                                                                                                       // 15284\n                                                                                                                       // 15285\n        /*                                                                                                             // 15286\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded                    // 15287\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties                   // 15288\n         * of the FORMAT object (see BigNumber.config).                                                                // 15289\n         *                                                                                                             // 15290\n         * FORMAT = {                                                                                                  // 15291\n         *      decimalSeparator : '.',                                                                                // 15292\n         *      groupSeparator : ',',                                                                                  // 15293\n         *      groupSize : 3,                                                                                         // 15294\n         *      secondaryGroupSize : 0,                                                                                // 15295\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space                                              // 15296\n         *      fractionGroupSize : 0                                                                                  // 15297\n         * };                                                                                                          // 15298\n         *                                                                                                             // 15299\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 15300\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15301\n         *                                                                                                             // 15302\n         * 'toFormat() decimal places not an integer: {dp}'                                                            // 15303\n         * 'toFormat() decimal places out of range: {dp}'                                                              // 15304\n         * 'toFormat() rounding mode not an integer: {rm}'                                                             // 15305\n         * 'toFormat() rounding mode out of range: {rm}'                                                               // 15306\n         */                                                                                                            // 15307\n        P.toFormat = function ( dp, rm ) {                                                                             // 15308\n            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )                                         // 15309\n              ? ~~dp + this.e + 1 : null, rm, 21 );                                                                    // 15310\n                                                                                                                       // 15311\n            if ( this.c ) {                                                                                            // 15312\n                var i,                                                                                                 // 15313\n                    arr = str.split('.'),                                                                              // 15314\n                    g1 = +FORMAT.groupSize,                                                                            // 15315\n                    g2 = +FORMAT.secondaryGroupSize,                                                                   // 15316\n                    groupSeparator = FORMAT.groupSeparator,                                                            // 15317\n                    intPart = arr[0],                                                                                  // 15318\n                    fractionPart = arr[1],                                                                             // 15319\n                    isNeg = this.s < 0,                                                                                // 15320\n                    intDigits = isNeg ? intPart.slice(1) : intPart,                                                    // 15321\n                    len = intDigits.length;                                                                            // 15322\n                                                                                                                       // 15323\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;                                                             // 15324\n                                                                                                                       // 15325\n                if ( g1 > 0 && len > 0 ) {                                                                             // 15326\n                    i = len % g1 || g1;                                                                                // 15327\n                    intPart = intDigits.substr( 0, i );                                                                // 15328\n                                                                                                                       // 15329\n                    for ( ; i < len; i += g1 ) {                                                                       // 15330\n                        intPart += groupSeparator + intDigits.substr( i, g1 );                                         // 15331\n                    }                                                                                                  // 15332\n                                                                                                                       // 15333\n                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);                                      // 15334\n                    if (isNeg) intPart = '-' + intPart;                                                                // 15335\n                }                                                                                                      // 15336\n                                                                                                                       // 15337\n                str = fractionPart                                                                                     // 15338\n                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )                           // 15339\n                    ? fractionPart.replace( new RegExp( '\\\\d{' + g2 + '}\\\\B', 'g' ),                                   // 15340\n                      '$&' + FORMAT.fractionGroupSeparator )                                                           // 15341\n                    : fractionPart )                                                                                   // 15342\n                  : intPart;                                                                                           // 15343\n            }                                                                                                          // 15344\n                                                                                                                       // 15345\n            return str;                                                                                                // 15346\n        };                                                                                                             // 15347\n                                                                                                                       // 15348\n                                                                                                                       // 15349\n        /*                                                                                                             // 15350\n         * Return a string array representing the value of this BigNumber as a simple fraction with                    // 15351\n         * an integer numerator and an integer denominator. The denominator will be a positive                         // 15352\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum                        // 15353\n         * denominator is not specified, the denominator will be the lowest value necessary to                         // 15354\n         * represent the number exactly.                                                                               // 15355\n         *                                                                                                             // 15356\n         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.                        // 15357\n         *                                                                                                             // 15358\n         * 'toFraction() max denominator not an integer: {md}'                                                         // 15359\n         * 'toFraction() max denominator out of range: {md}'                                                           // 15360\n         */                                                                                                            // 15361\n        P.toFraction = function (md) {                                                                                 // 15362\n            var arr, d0, d2, e, exp, n, n0, q, s,                                                                      // 15363\n                k = ERRORS,                                                                                            // 15364\n                x = this,                                                                                              // 15365\n                xc = x.c,                                                                                              // 15366\n                d = new BigNumber(ONE),                                                                                // 15367\n                n1 = d0 = new BigNumber(ONE),                                                                          // 15368\n                d1 = n0 = new BigNumber(ONE);                                                                          // 15369\n                                                                                                                       // 15370\n            if ( md != null ) {                                                                                        // 15371\n                ERRORS = false;                                                                                        // 15372\n                n = new BigNumber(md);                                                                                 // 15373\n                ERRORS = k;                                                                                            // 15374\n                                                                                                                       // 15375\n                if ( !( k = n.isInt() ) || n.lt(ONE) ) {                                                               // 15376\n                                                                                                                       // 15377\n                    if (ERRORS) {                                                                                      // 15378\n                        raise( 22,                                                                                     // 15379\n                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );                        // 15380\n                    }                                                                                                  // 15381\n                                                                                                                       // 15382\n                    // ERRORS is false:                                                                                // 15383\n                    // If md is a finite non-integer >= 1, round it to an integer and use it.                          // 15384\n                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;                                      // 15385\n                }                                                                                                      // 15386\n            }                                                                                                          // 15387\n                                                                                                                       // 15388\n            if ( !xc ) return x.toString();                                                                            // 15389\n            s = coeffToString(xc);                                                                                     // 15390\n                                                                                                                       // 15391\n            // Determine initial denominator.                                                                          // 15392\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.                    // 15393\n            e = d.e = s.length - x.e - 1;                                                                              // 15394\n            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];                                    // 15395\n            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;                                                         // 15396\n                                                                                                                       // 15397\n            exp = MAX_EXP;                                                                                             // 15398\n            MAX_EXP = 1 / 0;                                                                                           // 15399\n            n = new BigNumber(s);                                                                                      // 15400\n                                                                                                                       // 15401\n            // n0 = d1 = 0                                                                                             // 15402\n            n0.c[0] = 0;                                                                                               // 15403\n                                                                                                                       // 15404\n            for ( ; ; )  {                                                                                             // 15405\n                q = div( n, d, 0, 1 );                                                                                 // 15406\n                d2 = d0.plus( q.times(d1) );                                                                           // 15407\n                if ( d2.cmp(md) == 1 ) break;                                                                          // 15408\n                d0 = d1;                                                                                               // 15409\n                d1 = d2;                                                                                               // 15410\n                n1 = n0.plus( q.times( d2 = n1 ) );                                                                    // 15411\n                n0 = d2;                                                                                               // 15412\n                d = n.minus( q.times( d2 = d ) );                                                                      // 15413\n                n = d2;                                                                                                // 15414\n            }                                                                                                          // 15415\n                                                                                                                       // 15416\n            d2 = div( md.minus(d0), d1, 0, 1 );                                                                        // 15417\n            n0 = n0.plus( d2.times(n1) );                                                                              // 15418\n            d0 = d0.plus( d2.times(d1) );                                                                              // 15419\n            n0.s = n1.s = x.s;                                                                                         // 15420\n            e *= 2;                                                                                                    // 15421\n                                                                                                                       // 15422\n            // Determine which fraction is closer to x, n0/d0 or n1/d1                                                 // 15423\n            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(                                                  // 15424\n                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1                                                 // 15425\n                    ? [ n1.toString(), d1.toString() ]                                                                 // 15426\n                    : [ n0.toString(), d0.toString() ];                                                                // 15427\n                                                                                                                       // 15428\n            MAX_EXP = exp;                                                                                             // 15429\n            return arr;                                                                                                // 15430\n        };                                                                                                             // 15431\n                                                                                                                       // 15432\n                                                                                                                       // 15433\n        /*                                                                                                             // 15434\n         * Return the value of this BigNumber converted to a number primitive.                                         // 15435\n         */                                                                                                            // 15436\n        P.toNumber = function () {                                                                                     // 15437\n            var x = this;                                                                                              // 15438\n                                                                                                                       // 15439\n            // Ensure zero has correct sign.                                                                           // 15440\n            return +x || ( x.s ? x.s * 0 : NaN );                                                                      // 15441\n        };                                                                                                             // 15442\n                                                                                                                       // 15443\n                                                                                                                       // 15444\n        /*                                                                                                             // 15445\n         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.                        // 15446\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.                                       // 15447\n         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.                                      // 15448\n         *                                                                                                             // 15449\n         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.                                        // 15450\n         * (Performs 54 loop iterations for n of 9007199254740992.)                                                    // 15451\n         *                                                                                                             // 15452\n         * 'pow() exponent not an integer: {n}'                                                                        // 15453\n         * 'pow() exponent out of range: {n}'                                                                          // 15454\n         */                                                                                                            // 15455\n        P.toPower = P.pow = function (n) {                                                                             // 15456\n            var k, y,                                                                                                  // 15457\n                i = mathfloor( n < 0 ? -n : +n ),                                                                      // 15458\n                x = this;                                                                                              // 15459\n                                                                                                                       // 15460\n            // Pass ±Infinity to Math.pow if exponent is out of range.                                                 // 15461\n            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&                              // 15462\n              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||                                                  // 15463\n                parseFloat(n) != n && !( n = NaN ) ) ) {                                                               // 15464\n                return new BigNumber( Math.pow( +x, n ) );                                                             // 15465\n            }                                                                                                          // 15466\n                                                                                                                       // 15467\n            // Truncating each coefficient array to a length of k after each multiplication equates                    // 15468\n            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a                      // 15469\n            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)                     // 15470\n            k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;                                          // 15471\n            y = new BigNumber(ONE);                                                                                    // 15472\n                                                                                                                       // 15473\n            for ( ; ; ) {                                                                                              // 15474\n                                                                                                                       // 15475\n                if ( i % 2 ) {                                                                                         // 15476\n                    y = y.times(x);                                                                                    // 15477\n                    if ( !y.c ) break;                                                                                 // 15478\n                    if ( k && y.c.length > k ) y.c.length = k;                                                         // 15479\n                }                                                                                                      // 15480\n                                                                                                                       // 15481\n                i = mathfloor( i / 2 );                                                                                // 15482\n                if ( !i ) break;                                                                                       // 15483\n                                                                                                                       // 15484\n                x = x.times(x);                                                                                        // 15485\n                if ( k && x.c && x.c.length > k ) x.c.length = k;                                                      // 15486\n            }                                                                                                          // 15487\n                                                                                                                       // 15488\n            if ( n < 0 ) y = ONE.div(y);                                                                               // 15489\n            return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;                                                   // 15490\n        };                                                                                                             // 15491\n                                                                                                                       // 15492\n                                                                                                                       // 15493\n        /*                                                                                                             // 15494\n         * Return a string representing the value of this BigNumber rounded to sd significant digits                   // 15495\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits                            // 15496\n         * necessary to represent the integer part of the value in fixed-point notation, then use                      // 15497\n         * exponential notation.                                                                                       // 15498\n         *                                                                                                             // 15499\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                              // 15500\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 15501\n         *                                                                                                             // 15502\n         * 'toPrecision() precision not an integer: {sd}'                                                              // 15503\n         * 'toPrecision() precision out of range: {sd}'                                                                // 15504\n         * 'toPrecision() rounding mode not an integer: {rm}'                                                          // 15505\n         * 'toPrecision() rounding mode out of range: {rm}'                                                            // 15506\n         */                                                                                                            // 15507\n        P.toPrecision = function ( sd, rm ) {                                                                          // 15508\n            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )                               // 15509\n              ? sd | 0 : null, rm, 24 );                                                                               // 15510\n        };                                                                                                             // 15511\n                                                                                                                       // 15512\n                                                                                                                       // 15513\n        /*                                                                                                             // 15514\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is                      // 15515\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and                   // 15516\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent                       // 15517\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than                   // 15518\n         * TO_EXP_NEG, return exponential notation.                                                                    // 15519\n         *                                                                                                             // 15520\n         * [b] {number} Integer, 2 to 64 inclusive.                                                                    // 15521\n         *                                                                                                             // 15522\n         * 'toString() base not an integer: {b}'                                                                       // 15523\n         * 'toString() base out of range: {b}'                                                                         // 15524\n         */                                                                                                            // 15525\n        P.toString = function (b) {                                                                                    // 15526\n            var str,                                                                                                   // 15527\n                n = this,                                                                                              // 15528\n                s = n.s,                                                                                               // 15529\n                e = n.e;                                                                                               // 15530\n                                                                                                                       // 15531\n            // Infinity or NaN?                                                                                        // 15532\n            if ( e === null ) {                                                                                        // 15533\n                                                                                                                       // 15534\n                if (s) {                                                                                               // 15535\n                    str = 'Infinity';                                                                                  // 15536\n                    if ( s < 0 ) str = '-' + str;                                                                      // 15537\n                } else {                                                                                               // 15538\n                    str = 'NaN';                                                                                       // 15539\n                }                                                                                                      // 15540\n            } else {                                                                                                   // 15541\n                str = coeffToString( n.c );                                                                            // 15542\n                                                                                                                       // 15543\n                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {                                              // 15544\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS                                                           // 15545\n                      ? toExponential( str, e )                                                                        // 15546\n                      : toFixedPoint( str, e );                                                                        // 15547\n                } else {                                                                                               // 15548\n                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );                                         // 15549\n                }                                                                                                      // 15550\n                                                                                                                       // 15551\n                if ( s < 0 && n.c[0] ) str = '-' + str;                                                                // 15552\n            }                                                                                                          // 15553\n                                                                                                                       // 15554\n            return str;                                                                                                // 15555\n        };                                                                                                             // 15556\n                                                                                                                       // 15557\n                                                                                                                       // 15558\n        /*                                                                                                             // 15559\n         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole                      // 15560\n         * number.                                                                                                     // 15561\n         */                                                                                                            // 15562\n        P.truncated = P.trunc = function () {                                                                          // 15563\n            return round( new BigNumber(this), this.e + 1, 1 );                                                        // 15564\n        };                                                                                                             // 15565\n                                                                                                                       // 15566\n                                                                                                                       // 15567\n                                                                                                                       // 15568\n        /*                                                                                                             // 15569\n         * Return as toString, but do not accept a base argument.                                                      // 15570\n         */                                                                                                            // 15571\n        P.valueOf = P.toJSON = function () {                                                                           // 15572\n            return this.toString();                                                                                    // 15573\n        };                                                                                                             // 15574\n                                                                                                                       // 15575\n                                                                                                                       // 15576\n        // Aliases for BigDecimal methods.                                                                             // 15577\n        //P.add = P.plus;         // P.add included above                                                              // 15578\n        //P.subtract = P.minus;   // P.sub included above                                                              // 15579\n        //P.multiply = P.times;   // P.mul included above                                                              // 15580\n        //P.divide = P.div;                                                                                            // 15581\n        //P.remainder = P.mod;                                                                                         // 15582\n        //P.compareTo = P.cmp;                                                                                         // 15583\n        //P.negate = P.neg;                                                                                            // 15584\n                                                                                                                       // 15585\n                                                                                                                       // 15586\n        if ( configObj != null ) BigNumber.config(configObj);                                                          // 15587\n                                                                                                                       // 15588\n        return BigNumber;                                                                                              // 15589\n    }                                                                                                                  // 15590\n                                                                                                                       // 15591\n                                                                                                                       // 15592\n    // PRIVATE HELPER FUNCTIONS                                                                                        // 15593\n                                                                                                                       // 15594\n                                                                                                                       // 15595\n    function bitFloor(n) {                                                                                             // 15596\n        var i = n | 0;                                                                                                 // 15597\n        return n > 0 || n === i ? i : i - 1;                                                                           // 15598\n    }                                                                                                                  // 15599\n                                                                                                                       // 15600\n                                                                                                                       // 15601\n    // Return a coefficient array as a string of base 10 digits.                                                       // 15602\n    function coeffToString(a) {                                                                                        // 15603\n        var s, z,                                                                                                      // 15604\n            i = 1,                                                                                                     // 15605\n            j = a.length,                                                                                              // 15606\n            r = a[0] + '';                                                                                             // 15607\n                                                                                                                       // 15608\n        for ( ; i < j; ) {                                                                                             // 15609\n            s = a[i++] + '';                                                                                           // 15610\n            z = LOG_BASE - s.length;                                                                                   // 15611\n            for ( ; z--; s = '0' + s );                                                                                // 15612\n            r += s;                                                                                                    // 15613\n        }                                                                                                              // 15614\n                                                                                                                       // 15615\n        // Determine trailing zeros.                                                                                   // 15616\n        for ( j = r.length; r.charCodeAt(--j) === 48; );                                                               // 15617\n        return r.slice( 0, j + 1 || 1 );                                                                               // 15618\n    }                                                                                                                  // 15619\n                                                                                                                       // 15620\n                                                                                                                       // 15621\n    // Compare the value of BigNumbers x and y.                                                                        // 15622\n    function compare( x, y ) {                                                                                         // 15623\n        var a, b,                                                                                                      // 15624\n            xc = x.c,                                                                                                  // 15625\n            yc = y.c,                                                                                                  // 15626\n            i = x.s,                                                                                                   // 15627\n            j = y.s,                                                                                                   // 15628\n            k = x.e,                                                                                                   // 15629\n            l = y.e;                                                                                                   // 15630\n                                                                                                                       // 15631\n        // Either NaN?                                                                                                 // 15632\n        if ( !i || !j ) return null;                                                                                   // 15633\n                                                                                                                       // 15634\n        a = xc && !xc[0];                                                                                              // 15635\n        b = yc && !yc[0];                                                                                              // 15636\n                                                                                                                       // 15637\n        // Either zero?                                                                                                // 15638\n        if ( a || b ) return a ? b ? 0 : -j : i;                                                                       // 15639\n                                                                                                                       // 15640\n        // Signs differ?                                                                                               // 15641\n        if ( i != j ) return i;                                                                                        // 15642\n                                                                                                                       // 15643\n        a = i < 0;                                                                                                     // 15644\n        b = k == l;                                                                                                    // 15645\n                                                                                                                       // 15646\n        // Either Infinity?                                                                                            // 15647\n        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;                                                             // 15648\n                                                                                                                       // 15649\n        // Compare exponents.                                                                                          // 15650\n        if ( !b ) return k > l ^ a ? 1 : -1;                                                                           // 15651\n                                                                                                                       // 15652\n        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;                                                             // 15653\n                                                                                                                       // 15654\n        // Compare digit by digit.                                                                                     // 15655\n        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;                             // 15656\n                                                                                                                       // 15657\n        // Compare lengths.                                                                                            // 15658\n        return k == l ? 0 : k > l ^ a ? 1 : -1;                                                                        // 15659\n    }                                                                                                                  // 15660\n                                                                                                                       // 15661\n                                                                                                                       // 15662\n    /*                                                                                                                 // 15663\n     * Return true if n is a valid number in range, otherwise false.                                                   // 15664\n     * Use for argument validation when ERRORS is false.                                                               // 15665\n     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.                                                       // 15666\n     */                                                                                                                // 15667\n    function intValidatorNoErrors( n, min, max ) {                                                                     // 15668\n        return ( n = truncate(n) ) >= min && n <= max;                                                                 // 15669\n    }                                                                                                                  // 15670\n                                                                                                                       // 15671\n                                                                                                                       // 15672\n    function isArray(obj) {                                                                                            // 15673\n        return Object.prototype.toString.call(obj) == '[object Array]';                                                // 15674\n    }                                                                                                                  // 15675\n                                                                                                                       // 15676\n                                                                                                                       // 15677\n    /*                                                                                                                 // 15678\n     * Convert string of baseIn to an array of numbers of baseOut.                                                     // 15679\n     * Eg. convertBase('255', 10, 16) returns [15, 15].                                                                // 15680\n     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].                                                                // 15681\n     */                                                                                                                // 15682\n    function toBaseOut( str, baseIn, baseOut ) {                                                                       // 15683\n        var j,                                                                                                         // 15684\n            arr = [0],                                                                                                 // 15685\n            arrL,                                                                                                      // 15686\n            i = 0,                                                                                                     // 15687\n            len = str.length;                                                                                          // 15688\n                                                                                                                       // 15689\n        for ( ; i < len; ) {                                                                                           // 15690\n            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );                                                    // 15691\n            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );                                                     // 15692\n                                                                                                                       // 15693\n            for ( ; j < arr.length; j++ ) {                                                                            // 15694\n                                                                                                                       // 15695\n                if ( arr[j] > baseOut - 1 ) {                                                                          // 15696\n                    if ( arr[j + 1] == null ) arr[j + 1] = 0;                                                          // 15697\n                    arr[j + 1] += arr[j] / baseOut | 0;                                                                // 15698\n                    arr[j] %= baseOut;                                                                                 // 15699\n                }                                                                                                      // 15700\n            }                                                                                                          // 15701\n        }                                                                                                              // 15702\n                                                                                                                       // 15703\n        return arr.reverse();                                                                                          // 15704\n    }                                                                                                                  // 15705\n                                                                                                                       // 15706\n                                                                                                                       // 15707\n    function toExponential( str, e ) {                                                                                 // 15708\n        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +                                         // 15709\n          ( e < 0 ? 'e' : 'e+' ) + e;                                                                                  // 15710\n    }                                                                                                                  // 15711\n                                                                                                                       // 15712\n                                                                                                                       // 15713\n    function toFixedPoint( str, e ) {                                                                                  // 15714\n        var len, z;                                                                                                    // 15715\n                                                                                                                       // 15716\n        // Negative exponent?                                                                                          // 15717\n        if ( e < 0 ) {                                                                                                 // 15718\n                                                                                                                       // 15719\n            // Prepend zeros.                                                                                          // 15720\n            for ( z = '0.'; ++e; z += '0' );                                                                           // 15721\n            str = z + str;                                                                                             // 15722\n                                                                                                                       // 15723\n        // Positive exponent                                                                                           // 15724\n        } else {                                                                                                       // 15725\n            len = str.length;                                                                                          // 15726\n                                                                                                                       // 15727\n            // Append zeros.                                                                                           // 15728\n            if ( ++e > len ) {                                                                                         // 15729\n                for ( z = '0', e -= len; --e; z += '0' );                                                              // 15730\n                str += z;                                                                                              // 15731\n            } else if ( e < len ) {                                                                                    // 15732\n                str = str.slice( 0, e ) + '.' + str.slice(e);                                                          // 15733\n            }                                                                                                          // 15734\n        }                                                                                                              // 15735\n                                                                                                                       // 15736\n        return str;                                                                                                    // 15737\n    }                                                                                                                  // 15738\n                                                                                                                       // 15739\n                                                                                                                       // 15740\n    function truncate(n) {                                                                                             // 15741\n        n = parseFloat(n);                                                                                             // 15742\n        return n < 0 ? mathceil(n) : mathfloor(n);                                                                     // 15743\n    }                                                                                                                  // 15744\n                                                                                                                       // 15745\n                                                                                                                       // 15746\n    // EXPORT                                                                                                          // 15747\n                                                                                                                       // 15748\n                                                                                                                       // 15749\n    BigNumber = another();                                                                                             // 15750\n                                                                                                                       // 15751\n    // AMD.                                                                                                            // 15752\n    if ( typeof define == 'function' && define.amd ) {                                                                 // 15753\n        define( function () { return BigNumber; } );                                                                   // 15754\n                                                                                                                       // 15755\n    // Node and other environments that support module.exports.                                                        // 15756\n    } else if ( typeof module != 'undefined' && module.exports ) {                                                     // 15757\n        module.exports = BigNumber;                                                                                    // 15758\n        if ( !crypto ) try { crypto = require('crypto'); } catch (e) {}                                                // 15759\n                                                                                                                       // 15760\n    // Browser.                                                                                                        // 15761\n    } else {                                                                                                           // 15762\n        global.BigNumber = BigNumber;                                                                                  // 15763\n    }                                                                                                                  // 15764\n})(this);                                                                                                              // 15765\n                                                                                                                       // 15766\n},{\"crypto\":48}],\"web3\":[function(require,module,exports){                                                             // 15767\nvar Web3 = require('./lib/web3');                                                                                      // 15768\n                                                                                                                       // 15769\n// dont override global variable                                                                                       // 15770\nif (typeof window !== 'undefined' && typeof window.Web3 === 'undefined') {                                             // 15771\n    window.Web3 = Web3;                                                                                                // 15772\n}                                                                                                                      // 15773\n                                                                                                                       // 15774\nmodule.exports = Web3;                                                                                                 // 15775\n                                                                                                                       // 15776\n},{\"./lib/web3\":22}]},{},[\"web3\"])                                                                                     // 15777\n//# sourceMappingURL=web3.js.map                                                                                       // 15778\n                                                                                                                       // 15779\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ethereum_web3/package-init.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* jshint ignore:start */                                                                                              // 1\n                                                                                                                       // 2\n                                                                                                                       // 3\n// Browser environment                                                                                                 // 4\nif(typeof window !== 'undefined') {                                                                                    // 5\n    Web3 = (typeof window.Web3 !== 'undefined') ? window.Web3 : require('web3');                                       // 6\n    BigNumber = (typeof window.BigNumber !== 'undefined') ? window.BigNumber : require('bignumber.js');                // 7\n}                                                                                                                      // 8\n                                                                                                                       // 9\n                                                                                                                       // 10\n// Node environment                                                                                                    // 11\nif(typeof global !== 'undefined') {                                                                                    // 12\n    Web3 = (typeof global.Web3 !== 'undefined') ? global.Web3 : require('web3');                                       // 13\n    BigNumber = (typeof global.BigNumber !== 'undefined') ? global.BigNumber : require('bignumber.js');                // 14\n}                                                                                                                      // 15\n                                                                                                                       // 16\n/* jshint ignore:end */                                                                                                // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['ethereum:web3'] = {\n  Web3: Web3,\n  BigNumber: BigNumber\n};\n\n})();\n","servePath":"/packages/ethereum_web3.js","sourceMap":{"version":3,"sources":["/packages/ethereum_web3/dist/web3.js","/packages/ethereum_web3/package-init.js"],"names":[],"mappingsl6eA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H","file":"/packages/ethereum_web3.js","sourcesContent":["require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports=[\n  {\n    \"constant\": true,\n    \"inputs\": [\n      {\n        \"name\": \"_owner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"name\",\n    \"outputs\": [\n      {\n        \"name\": \"o_name\",\n        \"type\": \"bytes32\"\n      }\n    ],\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [\n      {\n        \"name\": \"_name\",\n        \"type\": \"bytes32\"\n      }\n    ],\n    \"name\": \"owner\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [\n      {\n        \"name\": \"_name\",\n        \"type\": \"bytes32\"\n      }\n    ],\n    \"name\": \"content\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\"\n      }\n    ],\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [\n      {\n        \"name\": \"_name\",\n        \"type\": \"bytes32\"\n      }\n    ],\n    \"name\": \"addr\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_name\",\n        \"type\": \"bytes32\"\n      }\n    ],\n    \"name\": \"reserve\",\n    \"outputs\": [],\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [\n      {\n        \"name\": \"_name\",\n        \"type\": \"bytes32\"\n      }\n    ],\n    \"name\": \"subRegistrar\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_name\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"name\": \"_newOwner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"transfer\",\n    \"outputs\": [],\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_name\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"name\": \"_registrar\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"setSubRegistrar\",\n    \"outputs\": [],\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [],\n    \"name\": \"Registrar\",\n    \"outputs\": [],\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_name\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"name\": \"_a\",\n        \"type\": \"address\"\n      },\n      {\n        \"name\": \"_primary\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"name\": \"setAddress\",\n    \"outputs\": [],\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_name\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"name\": \"_content\",\n        \"type\": \"bytes32\"\n      }\n    ],\n    \"name\": \"setContent\",\n    \"outputs\": [],\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_name\",\n        \"type\": \"bytes32\"\n      }\n    ],\n    \"name\": \"disown\",\n    \"outputs\": [],\n    \"type\": \"function\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"name\": \"_name\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"indexed\": false,\n        \"name\": \"_winner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"AuctionEnded\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"name\": \"_name\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"indexed\": false,\n        \"name\": \"_bidder\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"name\": \"_value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"NewBid\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"name\": \"name\",\n        \"type\": \"bytes32\"\n      }\n    ],\n    \"name\": \"Changed\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"name\": \"name\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"indexed\": true,\n        \"name\": \"addr\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"PrimaryChanged\",\n    \"type\": \"event\"\n  }\n]\n\n},{}],2:[function(require,module,exports){\nmodule.exports=[\n  {\n    \"constant\": true,\n    \"inputs\": [\n      {\n        \"name\": \"_name\",\n        \"type\": \"bytes32\"\n      }\n    ],\n    \"name\": \"owner\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_name\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"name\": \"_refund\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"disown\",\n    \"outputs\": [],\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [\n      {\n        \"name\": \"_name\",\n        \"type\": \"bytes32\"\n      }\n    ],\n    \"name\": \"addr\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_name\",\n        \"type\": \"bytes32\"\n      }\n    ],\n    \"name\": \"reserve\",\n    \"outputs\": [],\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_name\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"name\": \"_newOwner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"transfer\",\n    \"outputs\": [],\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_name\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"name\": \"_a\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"setAddr\",\n    \"outputs\": [],\n    \"type\": \"function\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"name\": \"name\",\n        \"type\": \"bytes32\"\n      }\n    ],\n    \"name\": \"Changed\",\n    \"type\": \"event\"\n  }\n]\n\n},{}],3:[function(require,module,exports){\nmodule.exports=[\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"from\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transfer\",\n    \"outputs\": [],\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"from\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"name\": \"indirectId\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"icapTransfer\",\n    \"outputs\": [],\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"to\",\n        \"type\": \"bytes32\"\n      }\n    ],\n    \"name\": \"deposit\",\n    \"outputs\": [],\n    \"type\": \"function\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"AnonymousDeposit\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"name\": \"to\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"indexed\": false,\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Deposit\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"name\": \"from\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"indexed\": true,\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Transfer\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"name\": \"from\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"indexed\": true,\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"name\": \"indirectId\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"indexed\": false,\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"IcapTransfer\",\n    \"type\": \"event\"\n  }\n]\n\n},{}],4:[function(require,module,exports){\nvar f = require('./formatters');\nvar SolidityType = require('./type');\n\n/**\n * SolidityTypeAddress is a prootype that represents address type\n * It matches:\n * address\n * address[]\n * address[4]\n * address[][]\n * address[3][]\n * address[][6][], ...\n */\nvar SolidityTypeAddress = function () {\n    this._inputFormatter = f.formatInputInt;\n    this._outputFormatter = f.formatOutputAddress;\n};\n\nSolidityTypeAddress.prototype = new SolidityType({});\nSolidityTypeAddress.prototype.constructor = SolidityTypeAddress;\n\nSolidityTypeAddress.prototype.isType = function (name) {\n    return !!name.match(/address(\\[([0-9]*)\\])?/);\n};\n\nSolidityTypeAddress.prototype.staticPartLength = function (name) {\n    return 32 * this.staticArrayLength(name);\n};\n\nmodule.exports = SolidityTypeAddress;\n\n\n},{\"./formatters\":9,\"./type\":14}],5:[function(require,module,exports){\nvar f = require('./formatters');\nvar SolidityType = require('./type');\n\n/**\n * SolidityTypeBool is a prootype that represents bool type\n * It matches:\n * bool\n * bool[]\n * bool[4]\n * bool[][]\n * bool[3][]\n * bool[][6][], ...\n */\nvar SolidityTypeBool = function () {\n    this._inputFormatter = f.formatInputBool;\n    this._outputFormatter = f.formatOutputBool;\n};\n\nSolidityTypeBool.prototype = new SolidityType({});\nSolidityTypeBool.prototype.constructor = SolidityTypeBool;\n\nSolidityTypeBool.prototype.isType = function (name) {\n    return !!name.match(/^bool(\\[([0-9]*)\\])*$/);\n};\n\nSolidityTypeBool.prototype.staticPartLength = function (name) {\n    return 32 * this.staticArrayLength(name);\n};\n\nmodule.exports = SolidityTypeBool;\n\n},{\"./formatters\":9,\"./type\":14}],6:[function(require,module,exports){\nvar f = require('./formatters');\nvar SolidityType = require('./type');\n\n/**\n * SolidityTypeBytes is a prootype that represents bytes type\n * It matches:\n * bytes\n * bytes[]\n * bytes[4]\n * bytes[][]\n * bytes[3][]\n * bytes[][6][], ...\n * bytes32\n * bytes64[]\n * bytes8[4]\n * bytes256[][]\n * bytes[3][]\n * bytes64[][6][], ...\n */\nvar SolidityTypeBytes = function () {\n    this._inputFormatter = f.formatInputBytes;\n    this._outputFormatter = f.formatOutputBytes;\n};\n\nSolidityTypeBytes.prototype = new SolidityType({});\nSolidityTypeBytes.prototype.constructor = SolidityTypeBytes;\n\nSolidityTypeBytes.prototype.isType = function (name) {\n    return !!name.match(/^bytes([0-9]{1,})(\\[([0-9]*)\\])*$/);\n};\n\nSolidityTypeBytes.prototype.staticPartLength = function (name) {\n    var matches = name.match(/^bytes([0-9]*)/);\n    var size = parseInt(matches[1]);\n    return size * this.staticArrayLength(name);\n};\n\nmodule.exports = SolidityTypeBytes;\n\n},{\"./formatters\":9,\"./type\":14}],7:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file coder.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar f = require('./formatters');\n\nvar SolidityTypeAddress = require('./address');\nvar SolidityTypeBool = require('./bool');\nvar SolidityTypeInt = require('./int');\nvar SolidityTypeUInt = require('./uint');\nvar SolidityTypeDynamicBytes = require('./dynamicbytes');\nvar SolidityTypeString = require('./string');\nvar SolidityTypeReal = require('./real');\nvar SolidityTypeUReal = require('./ureal');\nvar SolidityTypeBytes = require('./bytes');\n\n/**\n * SolidityCoder prototype should be used to encode/decode solidity params of any type\n */\nvar SolidityCoder = function (types) {\n    this._types = types;\n};\n\n/**\n * This method should be used to transform type to SolidityType\n *\n * @method _requireType\n * @param {String} type\n * @returns {SolidityType} \n * @throws {Error} throws if no matching type is found\n */\nSolidityCoder.prototype._requireType = function (type) {\n    var solidityType = this._types.filter(function (t) {\n        return t.isType(type);\n    })[0];\n\n    if (!solidityType) {\n        throw Error('invalid solidity type!: ' + type);\n    }\n\n    return solidityType;\n};\n\n/**\n * Should be used to encode plain param\n *\n * @method encodeParam\n * @param {String} type\n * @param {Object} plain param\n * @return {String} encoded plain param\n */\nSolidityCoder.prototype.encodeParam = function (type, param) {\n    return this.encodeParams([type], [param]);\n};\n\n/**\n * Should be used to encode list of params\n *\n * @method encodeParams\n * @param {Array} types\n * @param {Array} params\n * @return {String} encoded list of params\n */\nSolidityCoder.prototype.encodeParams = function (types, params) {\n    var solidityTypes = this.getSolidityTypes(types);\n\n    var encodeds = solidityTypes.map(function (solidityType, index) {\n        return solidityType.encode(params[index], types[index]);\n    });\n\n    var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {\n        var staticPartLength = solidityType.staticPartLength(types[index]);\n        var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;\n        return acc + roundedStaticPartLength;\n    }, 0);\n\n    var result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset); \n\n    return result;\n};\n\nSolidityCoder.prototype.encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {\n    var result = \"\";\n    var self = this;\n\n    var isDynamic = function (i) {\n       return solidityTypes[i].isDynamicArray(types[i]) || solidityTypes[i].isDynamicType(types[i]);\n    };\n\n    types.forEach(function (type, i) {\n        if (isDynamic(i)) {\n            result += f.formatInputInt(dynamicOffset).encode();\n            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n            dynamicOffset += e.length / 2;\n        } else {\n            // don't add length to dynamicOffset. it's already counted\n            result += self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n        }\n\n        // TODO: figure out nested arrays\n    });\n    \n    types.forEach(function (type, i) {\n        if (isDynamic(i)) {\n            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n            dynamicOffset += e.length / 2;\n            result += e;\n        }\n    });\n    return result;\n};\n\n// TODO: refactor whole encoding!\nSolidityCoder.prototype.encodeWithOffset = function (type, solidityType, encoded, offset) {\n    var self = this;\n    if (solidityType.isDynamicArray(type)) {\n        return (function () {\n            // offset was already set\n            var nestedName = solidityType.nestedName(type);\n            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);\n            var result = encoded[0];\n            \n            (function () {\n                var previousLength = 2; // in int\n                if (solidityType.isDynamicArray(nestedName)) {\n                    for (var i = 1; i < encoded.length; i++) {\n                        previousLength += +(encoded[i - 1])[0] || 0;\n                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();\n                    }\n                }\n            })();\n            \n            // first element is length, skip it\n            (function () {\n                for (var i = 0; i < encoded.length - 1; i++) {\n                    var additionalOffset = result / 2;\n                    result += self.encodeWithOffset(nestedName, solidityType, encoded[i + 1], offset +  additionalOffset);\n                }\n            })();\n\n            return result;\n        })();\n       \n    } else if (solidityType.isStaticArray(type)) {\n        return (function () {\n            var nestedName = solidityType.nestedName(type);\n            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);\n            var result = \"\";\n\n\n            if (solidityType.isDynamicArray(nestedName)) {\n                (function () {\n                    var previousLength = 0; // in int\n                    for (var i = 0; i < encoded.length; i++) {\n                        // calculate length of previous item\n                        previousLength += +(encoded[i - 1] || [])[0] || 0; \n                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();\n                    }\n                })();\n            }\n\n            (function () {\n                for (var i = 0; i < encoded.length; i++) {\n                    var additionalOffset = result / 2;\n                    result += self.encodeWithOffset(nestedName, solidityType, encoded[i], offset + additionalOffset);\n                }\n            })();\n\n            return result;\n        })();\n    }\n\n    return encoded;\n};\n\n/**\n * Should be used to decode bytes to plain param\n *\n * @method decodeParam\n * @param {String} type\n * @param {String} bytes\n * @return {Object} plain param\n */\nSolidityCoder.prototype.decodeParam = function (type, bytes) {\n    return this.decodeParams([type], bytes)[0];\n};\n\n/**\n * Should be used to decode list of params\n *\n * @method decodeParam\n * @param {Array} types\n * @param {String} bytes\n * @return {Array} array of plain params\n */\nSolidityCoder.prototype.decodeParams = function (types, bytes) {\n    var solidityTypes = this.getSolidityTypes(types);\n    var offsets = this.getOffsets(types, solidityTypes);\n        \n    return solidityTypes.map(function (solidityType, index) {\n        return solidityType.decode(bytes, offsets[index],  types[index], index);\n    });\n};\n\nSolidityCoder.prototype.getOffsets = function (types, solidityTypes) {\n    var lengths =  solidityTypes.map(function (solidityType, index) {\n        return solidityType.staticPartLength(types[index]);\n    });\n    \n    for (var i = 1; i < lengths.length; i++) {\n         // sum with length of previous element\n        lengths[i] += lengths[i - 1]; \n    }\n\n    return lengths.map(function (length, index) {\n        // remove the current length, so the length is sum of previous elements\n        var staticPartLength = solidityTypes[index].staticPartLength(types[index]);\n        return length - staticPartLength; \n    });\n};\n\nSolidityCoder.prototype.getSolidityTypes = function (types) {\n    var self = this;\n    return types.map(function (type) {\n        return self._requireType(type);\n    });\n};\n\nvar coder = new SolidityCoder([\n    new SolidityTypeAddress(),\n    new SolidityTypeBool(),\n    new SolidityTypeInt(),\n    new SolidityTypeUInt(),\n    new SolidityTypeDynamicBytes(),\n    new SolidityTypeBytes(),\n    new SolidityTypeString(),\n    new SolidityTypeReal(),\n    new SolidityTypeUReal()\n]);\n\nmodule.exports = coder;\n\n\n},{\"./address\":4,\"./bool\":5,\"./bytes\":6,\"./dynamicbytes\":8,\"./formatters\":9,\"./int\":10,\"./real\":12,\"./string\":13,\"./uint\":15,\"./ureal\":16}],8:[function(require,module,exports){\nvar f = require('./formatters');\nvar SolidityType = require('./type');\n\nvar SolidityTypeDynamicBytes = function () {\n    this._inputFormatter = f.formatInputDynamicBytes;\n    this._outputFormatter = f.formatOutputDynamicBytes;\n};\n\nSolidityTypeDynamicBytes.prototype = new SolidityType({});\nSolidityTypeDynamicBytes.prototype.constructor = SolidityTypeDynamicBytes;\n\nSolidityTypeDynamicBytes.prototype.isType = function (name) {\n    return !!name.match(/^bytes(\\[([0-9]*)\\])*$/);\n};\n\nSolidityTypeDynamicBytes.prototype.staticPartLength = function (name) {\n    return 32 * this.staticArrayLength(name);\n};\n\nSolidityTypeDynamicBytes.prototype.isDynamicType = function () {\n    return true;\n};\n\nmodule.exports = SolidityTypeDynamicBytes;\n\n\n},{\"./formatters\":9,\"./type\":14}],9:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file formatters.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar BigNumber = require('bignumber.js');\nvar utils = require('../utils/utils');\nvar c = require('../utils/config');\nvar SolidityParam = require('./param');\n\n\n/**\n * Formats input value to byte representation of int\n * If value is negative, return it's two's complement\n * If the value is floating point, round it down\n *\n * @method formatInputInt\n * @param {String|Number|BigNumber} value that needs to be formatted\n * @returns {SolidityParam}\n */\nvar formatInputInt = function (value) {\n    BigNumber.config(c.ETH_BIGNUMBER_ROUNDING_MODE);\n    var result = utils.padLeft(utils.toTwosComplement(value).round().toString(16), 64);\n    return new SolidityParam(result);\n};\n\n/**\n * Formats input bytes\n *\n * @method formatInputBytes\n * @param {String}\n * @returns {SolidityParam}\n */\nvar formatInputBytes = function (value) {\n    var result = utils.toHex(value).substr(2);\n    var l = Math.floor((result.length + 63) / 64);\n    result = utils.padRight(result, l * 64);\n    return new SolidityParam(result);\n};\n\n/**\n * Formats input bytes\n *\n * @method formatDynamicInputBytes\n * @param {String}\n * @returns {SolidityParam}\n */\nvar formatInputDynamicBytes = function (value) {\n    var result = utils.toHex(value).substr(2);\n    var length = result.length / 2;\n    var l = Math.floor((result.length + 63) / 64);\n    result = utils.padRight(result, l * 64);\n    return new SolidityParam(formatInputInt(length).value + result);\n};\n\n/**\n * Formats input value to byte representation of string\n *\n * @method formatInputString\n * @param {String}\n * @returns {SolidityParam}\n */\nvar formatInputString = function (value) {\n    var result = utils.fromUtf8(value).substr(2);\n    var length = result.length / 2;\n    var l = Math.floor((result.length + 63) / 64);\n    result = utils.padRight(result, l * 64);\n    return new SolidityParam(formatInputInt(length).value + result);\n};\n\n/**\n * Formats input value to byte representation of bool\n *\n * @method formatInputBool\n * @param {Boolean}\n * @returns {SolidityParam}\n */\nvar formatInputBool = function (value) {\n    var result = '000000000000000000000000000000000000000000000000000000000000000' + (value ?  '1' : '0');\n    return new SolidityParam(result);\n};\n\n/**\n * Formats input value to byte representation of real\n * Values are multiplied by 2^m and encoded as integers\n *\n * @method formatInputReal\n * @param {String|Number|BigNumber}\n * @returns {SolidityParam}\n */\nvar formatInputReal = function (value) {\n    return formatInputInt(new BigNumber(value).times(new BigNumber(2).pow(128)));\n};\n\n/**\n * Check if input value is negative\n *\n * @method signedIsNegative\n * @param {String} value is hex format\n * @returns {Boolean} true if it is negative, otherwise false\n */\nvar signedIsNegative = function (value) {\n    return (new BigNumber(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';\n};\n\n/**\n * Formats right-aligned output bytes to int\n *\n * @method formatOutputInt\n * @param {SolidityParam} param\n * @returns {BigNumber} right-aligned output bytes formatted to big number\n */\nvar formatOutputInt = function (param) {\n    var value = param.staticPart() || \"0\";\n\n    // check if it's negative number\n    // it it is, return two's complement\n    if (signedIsNegative(value)) {\n        return new BigNumber(value, 16).minus(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)).minus(1);\n    }\n    return new BigNumber(value, 16);\n};\n\n/**\n * Formats right-aligned output bytes to uint\n *\n * @method formatOutputUInt\n * @param {SolidityParam}\n * @returns {BigNumeber} right-aligned output bytes formatted to uint\n */\nvar formatOutputUInt = function (param) {\n    var value = param.staticPart() || \"0\";\n    return new BigNumber(value, 16);\n};\n\n/**\n * Formats right-aligned output bytes to real\n *\n * @method formatOutputReal\n * @param {SolidityParam}\n * @returns {BigNumber} input bytes formatted to real\n */\nvar formatOutputReal = function (param) {\n    return formatOutputInt(param).dividedBy(new BigNumber(2).pow(128)); \n};\n\n/**\n * Formats right-aligned output bytes to ureal\n *\n * @method formatOutputUReal\n * @param {SolidityParam}\n * @returns {BigNumber} input bytes formatted to ureal\n */\nvar formatOutputUReal = function (param) {\n    return formatOutputUInt(param).dividedBy(new BigNumber(2).pow(128)); \n};\n\n/**\n * Should be used to format output bool\n *\n * @method formatOutputBool\n * @param {SolidityParam}\n * @returns {Boolean} right-aligned input bytes formatted to bool\n */\nvar formatOutputBool = function (param) {\n    return param.staticPart() === '0000000000000000000000000000000000000000000000000000000000000001' ? true : false;\n};\n\n/**\n * Should be used to format output bytes\n *\n * @method formatOutputBytes\n * @param {SolidityParam} left-aligned hex representation of string\n * @returns {String} hex string\n */\nvar formatOutputBytes = function (param) {\n    return '0x' + param.staticPart();\n};\n\n/**\n * Should be used to format output bytes\n *\n * @method formatOutputDynamicBytes\n * @param {SolidityParam} left-aligned hex representation of string\n * @returns {String} hex string\n */\nvar formatOutputDynamicBytes = function (param) {\n    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;\n    return '0x' + param.dynamicPart().substr(64, length);\n};\n\n/**\n * Should be used to format output string\n *\n * @method formatOutputString\n * @param {SolidityParam} left-aligned hex representation of string\n * @returns {String} ascii string\n */\nvar formatOutputString = function (param) {\n    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;\n    return utils.toUtf8(param.dynamicPart().substr(64, length));\n};\n\n/**\n * Should be used to format output address\n *\n * @method formatOutputAddress\n * @param {SolidityParam} right-aligned input bytes\n * @returns {String} address\n */\nvar formatOutputAddress = function (param) {\n    var value = param.staticPart();\n    return \"0x\" + value.slice(value.length - 40, value.length);\n};\n\nmodule.exports = {\n    formatInputInt: formatInputInt,\n    formatInputBytes: formatInputBytes,\n    formatInputDynamicBytes: formatInputDynamicBytes,\n    formatInputString: formatInputString,\n    formatInputBool: formatInputBool,\n    formatInputReal: formatInputReal,\n    formatOutputInt: formatOutputInt,\n    formatOutputUInt: formatOutputUInt,\n    formatOutputReal: formatOutputReal,\n    formatOutputUReal: formatOutputUReal,\n    formatOutputBool: formatOutputBool,\n    formatOutputBytes: formatOutputBytes,\n    formatOutputDynamicBytes: formatOutputDynamicBytes,\n    formatOutputString: formatOutputString,\n    formatOutputAddress: formatOutputAddress\n};\n\n\n},{\"../utils/config\":18,\"../utils/utils\":20,\"./param\":11,\"bignumber.js\":\"bignumber.js\"}],10:[function(require,module,exports){\nvar f = require('./formatters');\nvar SolidityType = require('./type');\n\n/**\n * SolidityTypeInt is a prootype that represents int type\n * It matches:\n * int\n * int[]\n * int[4]\n * int[][]\n * int[3][]\n * int[][6][], ...\n * int32\n * int64[]\n * int8[4]\n * int256[][]\n * int[3][]\n * int64[][6][], ...\n */\nvar SolidityTypeInt = function () {\n    this._inputFormatter = f.formatInputInt;\n    this._outputFormatter = f.formatOutputInt;\n};\n\nSolidityTypeInt.prototype = new SolidityType({});\nSolidityTypeInt.prototype.constructor = SolidityTypeInt;\n\nSolidityTypeInt.prototype.isType = function (name) {\n    return !!name.match(/^int([0-9]*)?(\\[([0-9]*)\\])*$/);\n};\n\nSolidityTypeInt.prototype.staticPartLength = function (name) {\n    return 32 * this.staticArrayLength(name);\n};\n\nmodule.exports = SolidityTypeInt;\n\n},{\"./formatters\":9,\"./type\":14}],11:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file param.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar utils = require('../utils/utils');\n\n/**\n * SolidityParam object prototype.\n * Should be used when encoding, decoding solidity bytes\n */\nvar SolidityParam = function (value, offset) {\n    this.value = value || '';\n    this.offset = offset; // offset in bytes\n};\n\n/**\n * This method should be used to get length of params's dynamic part\n * \n * @method dynamicPartLength\n * @returns {Number} length of dynamic part (in bytes)\n */\nSolidityParam.prototype.dynamicPartLength = function () {\n    return this.dynamicPart().length / 2;\n};\n\n/**\n * This method should be used to create copy of solidity param with different offset\n *\n * @method withOffset\n * @param {Number} offset length in bytes\n * @returns {SolidityParam} new solidity param with applied offset\n */\nSolidityParam.prototype.withOffset = function (offset) {\n    return new SolidityParam(this.value, offset);\n};\n\n/**\n * This method should be used to combine solidity params together\n * eg. when appending an array\n *\n * @method combine\n * @param {SolidityParam} param with which we should combine\n * @param {SolidityParam} result of combination\n */\nSolidityParam.prototype.combine = function (param) {\n    return new SolidityParam(this.value + param.value); \n};\n\n/**\n * This method should be called to check if param has dynamic size.\n * If it has, it returns true, otherwise false\n *\n * @method isDynamic\n * @returns {Boolean}\n */\nSolidityParam.prototype.isDynamic = function () {\n    return this.offset !== undefined;\n};\n\n/**\n * This method should be called to transform offset to bytes\n *\n * @method offsetAsBytes\n * @returns {String} bytes representation of offset\n */\nSolidityParam.prototype.offsetAsBytes = function () {\n    return !this.isDynamic() ? '' : utils.padLeft(utils.toTwosComplement(this.offset).toString(16), 64);\n};\n\n/**\n * This method should be called to get static part of param\n *\n * @method staticPart\n * @returns {String} offset if it is a dynamic param, otherwise value\n */\nSolidityParam.prototype.staticPart = function () {\n    if (!this.isDynamic()) {\n        return this.value; \n    } \n    return this.offsetAsBytes();\n};\n\n/**\n * This method should be called to get dynamic part of param\n *\n * @method dynamicPart\n * @returns {String} returns a value if it is a dynamic param, otherwise empty string\n */\nSolidityParam.prototype.dynamicPart = function () {\n    return this.isDynamic() ? this.value : '';\n};\n\n/**\n * This method should be called to encode param\n *\n * @method encode\n * @returns {String}\n */\nSolidityParam.prototype.encode = function () {\n    return this.staticPart() + this.dynamicPart();\n};\n\n/**\n * This method should be called to encode array of params\n *\n * @method encodeList\n * @param {Array[SolidityParam]} params\n * @returns {String}\n */\nSolidityParam.encodeList = function (params) {\n    \n    // updating offsets\n    var totalOffset = params.length * 32;\n    var offsetParams = params.map(function (param) {\n        if (!param.isDynamic()) {\n            return param;\n        }\n        var offset = totalOffset;\n        totalOffset += param.dynamicPartLength();\n        return param.withOffset(offset);\n    });\n\n    // encode everything!\n    return offsetParams.reduce(function (result, param) {\n        return result + param.dynamicPart();\n    }, offsetParams.reduce(function (result, param) {\n        return result + param.staticPart();\n    }, ''));\n};\n\n\n\nmodule.exports = SolidityParam;\n\n\n},{\"../utils/utils\":20}],12:[function(require,module,exports){\nvar f = require('./formatters');\nvar SolidityType = require('./type');\n\n/**\n * SolidityTypeReal is a prootype that represents real type\n * It matches:\n * real\n * real[]\n * real[4]\n * real[][]\n * real[3][]\n * real[][6][], ...\n * real32\n * real64[]\n * real8[4]\n * real256[][]\n * real[3][]\n * real64[][6][], ...\n */\nvar SolidityTypeReal = function () {\n    this._inputFormatter = f.formatInputReal;\n    this._outputFormatter = f.formatOutputReal;\n};\n\nSolidityTypeReal.prototype = new SolidityType({});\nSolidityTypeReal.prototype.constructor = SolidityTypeReal;\n\nSolidityTypeReal.prototype.isType = function (name) {\n    return !!name.match(/real([0-9]*)?(\\[([0-9]*)\\])?/);\n};\n\nSolidityTypeReal.prototype.staticPartLength = function (name) {\n    return 32 * this.staticArrayLength(name);\n};\n\nmodule.exports = SolidityTypeReal;\n\n},{\"./formatters\":9,\"./type\":14}],13:[function(require,module,exports){\nvar f = require('./formatters');\nvar SolidityType = require('./type');\n\nvar SolidityTypeString = function () {\n    this._inputFormatter = f.formatInputString;\n    this._outputFormatter = f.formatOutputString;\n};\n\nSolidityTypeString.prototype = new SolidityType({});\nSolidityTypeString.prototype.constructor = SolidityTypeString;\n\nSolidityTypeString.prototype.isType = function (name) {\n    return !!name.match(/^string(\\[([0-9]*)\\])*$/);\n};\n\nSolidityTypeString.prototype.staticPartLength = function (name) {\n    return 32 * this.staticArrayLength(name);\n};\n\nSolidityTypeString.prototype.isDynamicType = function () {\n    return true;\n};\n\nmodule.exports = SolidityTypeString;\n\n\n},{\"./formatters\":9,\"./type\":14}],14:[function(require,module,exports){\nvar f = require('./formatters');\nvar SolidityParam = require('./param');\n\n/**\n * SolidityType prototype is used to encode/decode solidity params of certain type\n */\nvar SolidityType = function (config) {\n    this._inputFormatter = config.inputFormatter;\n    this._outputFormatter = config.outputFormatter;\n};\n\n/**\n * Should be used to determine if this SolidityType do match given name\n *\n * @method isType\n * @param {String} name\n * @return {Bool} true if type match this SolidityType, otherwise false\n */\nSolidityType.prototype.isType = function (name) {\n    throw \"this method should be overrwritten for type \" + name;\n};\n\n/**\n * Should be used to determine what is the length of static part in given type\n *\n * @method staticPartLength\n * @param {String} name\n * @return {Number} length of static part in bytes\n */\nSolidityType.prototype.staticPartLength = function (name) {\n    throw \"this method should be overrwritten for type: \" + name;\n};\n\n/**\n * Should be used to determine if type is dynamic array\n * eg: \n * \"type[]\" => true\n * \"type[4]\" => false\n *\n * @method isDynamicArray\n * @param {String} name\n * @return {Bool} true if the type is dynamic array \n */\nSolidityType.prototype.isDynamicArray = function (name) {\n    var nestedTypes = this.nestedTypes(name);\n    return !!nestedTypes && !nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);\n};\n\n/**\n * Should be used to determine if type is static array\n * eg: \n * \"type[]\" => false\n * \"type[4]\" => true\n *\n * @method isStaticArray\n * @param {String} name\n * @return {Bool} true if the type is static array \n */\nSolidityType.prototype.isStaticArray = function (name) {\n    var nestedTypes = this.nestedTypes(name);\n    return !!nestedTypes && !!nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);\n};\n\n/**\n * Should return length of static array\n * eg. \n * \"int[32]\" => 32\n * \"int256[14]\" => 14\n * \"int[2][3]\" => 3\n * \"int\" => 1\n * \"int[1]\" => 1\n * \"int[]\" => 1\n *\n * @method staticArrayLength\n * @param {String} name\n * @return {Number} static array length\n */\nSolidityType.prototype.staticArrayLength = function (name) {\n    var nestedTypes = this.nestedTypes(name);\n    if (nestedTypes) {\n       return parseInt(nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g) || 1);\n    }\n    return 1;\n};\n\n/**\n * Should return nested type\n * eg.\n * \"int[32]\" => \"int\"\n * \"int256[14]\" => \"int256\"\n * \"int[2][3]\" => \"int[2]\"\n * \"int\" => \"int\"\n * \"int[]\" => \"int\"\n *\n * @method nestedName\n * @param {String} name\n * @return {String} nested name\n */\nSolidityType.prototype.nestedName = function (name) {\n    // remove last [] in name\n    var nestedTypes = this.nestedTypes(name);\n    if (!nestedTypes) {\n        return name;\n    }\n\n    return name.substr(0, name.length - nestedTypes[nestedTypes.length - 1].length);\n};\n\n/**\n * Should return true if type has dynamic size by default\n * such types are \"string\", \"bytes\"\n *\n * @method isDynamicType\n * @param {String} name\n * @return {Bool} true if is dynamic, otherwise false\n */\nSolidityType.prototype.isDynamicType = function () {\n    return false;\n};\n\n/**\n * Should return array of nested types\n * eg.\n * \"int[2][3][]\" => [\"[2]\", \"[3]\", \"[]\"]\n * \"int[] => [\"[]\"]\n * \"int\" => null\n *\n * @method nestedTypes\n * @param {String} name\n * @return {Array} array of nested types\n */\nSolidityType.prototype.nestedTypes = function (name) {\n    // return list of strings eg. \"[]\", \"[3]\", \"[]\", \"[2]\"\n    return name.match(/(\\[[0-9]*\\])/g);\n};\n\n/**\n * Should be used to encode the value\n *\n * @method encode\n * @param {Object} value \n * @param {String} name\n * @return {String} encoded value\n */\nSolidityType.prototype.encode = function (value, name) {\n    var self = this;\n    if (this.isDynamicArray(name)) {\n\n        return (function () {\n            var length = value.length;                          // in int\n            var nestedName = self.nestedName(name);\n\n            var result = [];\n            result.push(f.formatInputInt(length).encode());\n            \n            value.forEach(function (v) {\n                result.push(self.encode(v, nestedName));\n            });\n\n            return result;\n        })();\n\n    } else if (this.isStaticArray(name)) {\n\n        return (function () {\n            var length = self.staticArrayLength(name);          // in int\n            var nestedName = self.nestedName(name);\n\n            var result = [];\n            for (var i = 0; i < length; i++) {\n                result.push(self.encode(value[i], nestedName));\n            }\n\n            return result;\n        })();\n\n    }\n\n    return this._inputFormatter(value, name).encode();\n};\n\n/**\n * Should be used to decode value from bytes\n *\n * @method decode\n * @param {String} bytes\n * @param {Number} offset in bytes\n * @param {String} name type name\n * @returns {Object} decoded value\n */\nSolidityType.prototype.decode = function (bytes, offset, name) {\n    var self = this;\n\n    if (this.isDynamicArray(name)) {\n\n        return (function () {\n            var arrayOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes\n            var length = parseInt('0x' + bytes.substr(arrayOffset * 2, 64)); // in int\n            var arrayStart = arrayOffset + 32; // array starts after length; // in bytes\n\n            var nestedName = self.nestedName(name);\n            var nestedStaticPartLength = self.staticPartLength(nestedName);  // in bytes\n            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;\n            var result = [];\n\n            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {\n                result.push(self.decode(bytes, arrayStart + i, nestedName));\n            }\n\n            return result;\n        })();\n\n    } else if (this.isStaticArray(name)) {\n\n        return (function () {\n            var length = self.staticArrayLength(name);                      // in int\n            var arrayStart = offset;                                        // in bytes\n\n            var nestedName = self.nestedName(name);\n            var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes\n            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;\n            var result = [];\n\n            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {\n                result.push(self.decode(bytes, arrayStart + i, nestedName));\n            }\n\n            return result;\n        })();\n    } else if (this.isDynamicType(name)) {\n        \n        return (function () {\n            var dynamicOffset = parseInt('0x' + bytes.substr(offset * 2, 64));      // in bytes\n            var length = parseInt('0x' + bytes.substr(dynamicOffset * 2, 64));      // in bytes\n            var roundedLength = Math.floor((length + 31) / 32);                     // in int\n        \n            return self._outputFormatter(new SolidityParam(bytes.substr(dynamicOffset * 2, ( 1 + roundedLength) * 64), 0));\n        })();\n    }\n\n    var length = this.staticPartLength(name);\n    return this._outputFormatter(new SolidityParam(bytes.substr(offset * 2, length * 2)));\n};\n\nmodule.exports = SolidityType;\n\n},{\"./formatters\":9,\"./param\":11}],15:[function(require,module,exports){\nvar f = require('./formatters');\nvar SolidityType = require('./type');\n\n/**\n * SolidityTypeUInt is a prootype that represents uint type\n * It matches:\n * uint\n * uint[]\n * uint[4]\n * uint[][]\n * uint[3][]\n * uint[][6][], ...\n * uint32\n * uint64[]\n * uint8[4]\n * uint256[][]\n * uint[3][]\n * uint64[][6][], ...\n */\nvar SolidityTypeUInt = function () {\n    this._inputFormatter = f.formatInputInt;\n    this._outputFormatter = f.formatOutputUInt;\n};\n\nSolidityTypeUInt.prototype = new SolidityType({});\nSolidityTypeUInt.prototype.constructor = SolidityTypeUInt;\n\nSolidityTypeUInt.prototype.isType = function (name) {\n    return !!name.match(/^uint([0-9]*)?(\\[([0-9]*)\\])*$/);\n};\n\nSolidityTypeUInt.prototype.staticPartLength = function (name) {\n    return 32 * this.staticArrayLength(name);\n};\n\nmodule.exports = SolidityTypeUInt;\n\n},{\"./formatters\":9,\"./type\":14}],16:[function(require,module,exports){\nvar f = require('./formatters');\nvar SolidityType = require('./type');\n\n/**\n * SolidityTypeUReal is a prootype that represents ureal type\n * It matches:\n * ureal\n * ureal[]\n * ureal[4]\n * ureal[][]\n * ureal[3][]\n * ureal[][6][], ...\n * ureal32\n * ureal64[]\n * ureal8[4]\n * ureal256[][]\n * ureal[3][]\n * ureal64[][6][], ...\n */\nvar SolidityTypeUReal = function () {\n    this._inputFormatter = f.formatInputReal;\n    this._outputFormatter = f.formatOutputUReal;\n};\n\nSolidityTypeUReal.prototype = new SolidityType({});\nSolidityTypeUReal.prototype.constructor = SolidityTypeUReal;\n\nSolidityTypeUReal.prototype.isType = function (name) {\n    return !!name.match(/^ureal([0-9]*)?(\\[([0-9]*)\\])*$/);\n};\n\nSolidityTypeUReal.prototype.staticPartLength = function (name) {\n    return 32 * this.staticArrayLength(name);\n};\n\nmodule.exports = SolidityTypeUReal;\n\n},{\"./formatters\":9,\"./type\":14}],17:[function(require,module,exports){\n'use strict';\n\n// go env doesn't have and need XMLHttpRequest\nif (typeof XMLHttpRequest === 'undefined') {\n    exports.XMLHttpRequest = {};\n} else {\n    exports.XMLHttpRequest = XMLHttpRequest; // jshint ignore:line\n}\n\n\n},{}],18:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file config.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\n/**\n * Utils\n * \n * @module utils\n */\n\n/**\n * Utility functions\n * \n * @class [utils] config\n * @constructor\n */\n\n\n/// required to define ETH_BIGNUMBER_ROUNDING_MODE\nvar BigNumber = require('bignumber.js');\n\nvar ETH_UNITS = [\n    'wei',\n    'kwei',\n    'Mwei',\n    'Gwei',\n    'szabo',\n    'finney',\n    'femtoether',\n    'picoether',\n    'nanoether',\n    'microether',\n    'milliether',\n    'nano',\n    'micro',\n    'milli',\n    'ether',\n    'grand',\n    'Mether',\n    'Gether',\n    'Tether',\n    'Pether',\n    'Eether',\n    'Zether',\n    'Yether',\n    'Nether',\n    'Dether',\n    'Vether',\n    'Uether'\n];\n\nmodule.exports = {\n    ETH_PADDING: 32,\n    ETH_SIGNATURE_LENGTH: 4,\n    ETH_UNITS: ETH_UNITS,\n    ETH_BIGNUMBER_ROUNDING_MODE: { ROUNDING_MODE: BigNumber.ROUND_DOWN },\n    ETH_POLLING_TIMEOUT: 1000/2,\n    defaultBlock: 'latest',\n    defaultAccount: undefined\n};\n\n\n},{\"bignumber.js\":\"bignumber.js\"}],19:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file sha3.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar CryptoJS = require('crypto-js');\nvar sha3 = require('crypto-js/sha3');\n\nmodule.exports = function (value, options) {\n    if (options && options.encoding === 'hex') {\n        if (value.length > 2 && value.substr(0, 2) === '0x') {\n            value = value.substr(2);\n        }\n        value = CryptoJS.enc.Hex.parse(value);\n    }\n\n    return sha3(value, {\n        outputLength: 256\n    }).toString();\n};\n\n\n},{\"crypto-js\":57,\"crypto-js/sha3\":78}],20:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\n/**\n * Utils\n *\n * @module utils\n */\n\n/**\n * Utility functions\n *\n * @class [utils] utils\n * @constructor\n */\n\n\nvar BigNumber = require('bignumber.js');\nvar utf8 = require('utf8');\n\nvar unitMap = {\n    'wei':          '1',\n    'kwei':         '1000',\n    'ada':          '1000',\n    'femtoether':   '1000',\n    'mwei':         '1000000',\n    'babbage':      '1000000',\n    'picoether':    '1000000',\n    'gwei':         '1000000000',\n    'shannon':      '1000000000',\n    'nanoether':    '1000000000',\n    'nano':         '1000000000',\n    'szabo':        '1000000000000',\n    'microether':   '1000000000000',\n    'micro':        '1000000000000',\n    'finney':       '1000000000000000',\n    'milliether':    '1000000000000000',\n    'milli':         '1000000000000000',\n    'ether':        '1000000000000000000',\n    'kether':       '1000000000000000000000',\n    'grand':        '1000000000000000000000',\n    'einstein':     '1000000000000000000000',\n    'mether':       '1000000000000000000000000',\n    'gether':       '1000000000000000000000000000',\n    'tether':       '1000000000000000000000000000000'\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method padLeft\n * @param {String} string to be padded\n * @param {Number} characters that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar padLeft = function (string, chars, sign) {\n    return new Array(chars - string.length + 1).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method padRight\n * @param {String} string to be padded\n * @param {Number} characters that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar padRight = function (string, chars, sign) {\n    return string + (new Array(chars - string.length + 1).join(sign ? sign : \"0\"));\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method toUtf8\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nvar toUtf8 = function(hex) {\n// Find termination\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        if (code === 0)\n            break;\n        str += String.fromCharCode(code);\n    }\n\n    return utf8.decode(str);\n};\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method toAscii\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nvar toAscii = function(hex) {\n// Find termination\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 a string\n *\n * @method fromUtf8\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nvar fromUtf8 = function(str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        if (code === 0)\n            break;\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method fromAscii\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nvar fromAscii = function(str) {\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method transformToFullName\n * @param {Object} json-abi\n * @return {String} full fnction/event name\n */\nvar transformToFullName = function (json) {\n    if (json.name.indexOf('(') !== -1) {\n        return json.name;\n    }\n\n    var typeName = json.inputs.map(function(i){return i.type; }).join();\n    return json.name + '(' + typeName + ')';\n};\n\n/**\n * Should be called to get display name of contract function\n *\n * @method extractDisplayName\n * @param {String} name of function/event\n * @returns {String} display name for function/event eg. multiply(uint256) -> multiply\n */\nvar extractDisplayName = function (name) {\n    var length = name.indexOf('(');\n    return length !== -1 ? name.substr(0, length) : name;\n};\n\n/// @returns overloaded part of function/event name\nvar extractTypeName = function (name) {\n    /// TODO: make it invulnerable\n    var length = name.indexOf('(');\n    return length !== -1 ? name.substr(length + 1, name.length - 1 - (length + 1)).replace(' ', '') : \"\";\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method toDecimal\n * @param {String|Number|BigNumber}\n * @return {String}\n */\nvar toDecimal = function (value) {\n    return toBigNumber(value).toNumber();\n};\n\n/**\n * Converts value to it's hex representation\n *\n * @method fromDecimal\n * @param {String|Number|BigNumber}\n * @return {String}\n */\nvar fromDecimal = function (value) {\n    var number = toBigNumber(value);\n    var result = number.toString(16);\n\n    return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BigNumber|Object}\n * @return {String}\n */\nvar toHex = function (val) {\n    /*jshint maxcomplexity: 8 */\n\n    if (isBoolean(val))\n        return fromDecimal(+val);\n\n    if (isBigNumber(val))\n        return fromDecimal(val);\n\n    if (isObject(val))\n        return fromUtf8(JSON.stringify(val));\n\n    // if its a negative number, pass it through fromDecimal\n    if (isString(val)) {\n        if (val.indexOf('-0x') === 0)\n            return fromDecimal(val);\n        else if(val.indexOf('0x') === 0)\n            return val;\n        else if (!isFinite(val))\n            return fromAscii(val);\n    }\n\n    return fromDecimal(val);\n};\n\n/**\n * Returns value of unit in Wei\n *\n * @method getValueOfUnit\n * @param {String} unit the unit to convert to, default ether\n * @returns {BigNumber} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getValueOfUnit = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    var unitValue = unitMap[unit];\n    if (unitValue === undefined) {\n        throw new Error('This unit doesn\\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));\n    }\n    return new BigNumber(unitValue, 10);\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     ada\n * - mwei       picoether      babbage\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    einstein     grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number\n*/\nvar fromWei = function(number, unit) {\n    var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));\n\n    return isBigNumber(number) ? returnValue : returnValue.toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     ada\n * - mwei       picoether      babbage\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    einstein     grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number\n*/\nvar toWei = function(number, unit) {\n    var returnValue = toBigNumber(number).times(getValueOfUnit(unit));\n\n    return isBigNumber(number) ? returnValue : returnValue.toString(10);\n};\n\n/**\n * Takes an input and transforms it into an bignumber\n *\n * @method toBigNumber\n * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber\n * @return {BigNumber} BigNumber\n*/\nvar toBigNumber = function(number) {\n    /*jshint maxcomplexity:5 */\n    number = number || 0;\n    if (isBigNumber(number))\n        return number;\n\n    if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {\n        return new BigNumber(number.replace('0x',''), 16);\n    }\n\n    return new BigNumber(number.toString(10), 10);\n};\n\n/**\n * Takes and input transforms it into bignumber and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BigNumber}\n * @return {BigNumber}\n */\nvar toTwosComplement = function (number) {\n    var bigNumber = toBigNumber(number);\n    if (bigNumber.lessThan(0)) {\n        return new BigNumber(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", 16).plus(bigNumber).plus(1);\n    }\n    return bigNumber;\n};\n\n/**\n * Checks if the given string is strictly an address\n *\n * @method isStrictAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n*/\nvar isStrictAddress = function (address) {\n    return /^0x[0-9a-f]{40}$/i.test(address);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n*/\nvar isAddress = function (address) {\n    return /^(0x)?[0-9a-f]{40}$/i.test(address);\n};\n\n/**\n * Transforms given string to valid 20 bytes-length addres with 0x prefix\n *\n * @method toAddress\n * @param {String} address\n * @return {String} formatted address\n */\nvar toAddress = function (address) {\n    if (isStrictAddress(address)) {\n        return address;\n    }\n\n    if (/^[0-9a-f]{40}$/.test(address)) {\n        return '0x' + address;\n    }\n\n    return '0x' + padLeft(toHex(address).substr(2), 40);\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object}\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object instanceof BigNumber ||\n        (object && object.constructor && object.constructor.name === 'BigNumber');\n};\n\n/**\n * Returns true if object is string, otherwise false\n *\n * @method isString\n * @param {Object}\n * @return {Boolean}\n */\nvar isString = function (object) {\n    return typeof object === 'string' ||\n        (object && object.constructor && object.constructor.name === 'String');\n};\n\n/**\n * Returns true if object is function, otherwise false\n *\n * @method isFunction\n * @param {Object}\n * @return {Boolean}\n */\nvar isFunction = function (object) {\n    return typeof object === 'function';\n};\n\n/**\n * Returns true if object is Objet, otherwise false\n *\n * @method isObject\n * @param {Object}\n * @return {Boolean}\n */\nvar isObject = function (object) {\n    return typeof object === 'object';\n};\n\n/**\n * Returns true if object is boolean, otherwise false\n *\n * @method isBoolean\n * @param {Object}\n * @return {Boolean}\n */\nvar isBoolean = function (object) {\n    return typeof object === 'boolean';\n};\n\n/**\n * Returns true if object is array, otherwise false\n *\n * @method isArray\n * @param {Object}\n * @return {Boolean}\n */\nvar isArray = function (object) {\n    return object instanceof Array;\n};\n\n/**\n * Returns true if given string is valid json object\n *\n * @method isJson\n * @param {String}\n * @return {Boolean}\n */\nvar isJson = function (str) {\n    try {\n        return !!JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n};\n\nmodule.exports = {\n    padLeft: padLeft,\n    padRight: padRight,\n    toHex: toHex,\n    toDecimal: toDecimal,\n    fromDecimal: fromDecimal,\n    toUtf8: toUtf8,\n    toAscii: toAscii,\n    fromUtf8: fromUtf8,\n    fromAscii: fromAscii,\n    transformToFullName: transformToFullName,\n    extractDisplayName: extractDisplayName,\n    extractTypeName: extractTypeName,\n    toWei: toWei,\n    fromWei: fromWei,\n    toBigNumber: toBigNumber,\n    toTwosComplement: toTwosComplement,\n    toAddress: toAddress,\n    isBigNumber: isBigNumber,\n    isStrictAddress: isStrictAddress,\n    isAddress: isAddress,\n    isFunction: isFunction,\n    isString: isString,\n    isObject: isObject,\n    isBoolean: isBoolean,\n    isArray: isArray,\n    isJson: isJson\n};\n\n},{\"bignumber.js\":\"bignumber.js\",\"utf8\":83}],21:[function(require,module,exports){\nmodule.exports={\n    \"version\": \"0.15.2\"\n}\n\n},{}],22:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file web3.js\n * @authors:\n *   Jeffrey Wilcke <jeff@ethdev.com>\n *   Marek Kotewicz <marek@ethdev.com>\n *   Marian Oancea <marian@ethdev.com>\n *   Fabian Vogelsteller <fabian@ethdev.com>\n *   Gav Wood <g@ethdev.com>\n * @date 2014\n */\n\nvar RequestManager = require('./web3/requestmanager');\nvar Iban = require('./web3/iban');\nvar Eth = require('./web3/methods/eth');\nvar DB = require('./web3/methods/db');\nvar Shh = require('./web3/methods/shh');\nvar Net = require('./web3/methods/net');\nvar Settings = require('./web3/settings');\nvar version = require('./version.json');\nvar utils = require('./utils/utils');\nvar sha3 = require('./utils/sha3');\nvar extend = require('./web3/extend');\nvar Batch = require('./web3/batch');\nvar Property = require('./web3/property');\nvar HttpProvider = require('./web3/httpprovider');\nvar IpcProvider = require('./web3/ipcprovider');\n\n\n\nfunction Web3 (provider) {\n    this._requestManager = new RequestManager(provider);\n    this.currentProvider = provider;\n    this.eth = new Eth(this);\n    this.db = new DB(this);\n    this.shh = new Shh(this);\n    this.net = new Net(this);\n    this.settings = new Settings();\n    this.version = {\n        api: version.version\n    };\n    this.providers = {\n        HttpProvider: HttpProvider,\n        IpcProvider: IpcProvider\n    };\n    this._extend = extend(this);\n    this._extend({\n        properties: properties()\n    });\n}\n\n// expose providers on the class\nWeb3.providers = {\n    HttpProvider: HttpProvider,\n    IpcProvider: IpcProvider\n};\n\nWeb3.prototype.setProvider = function (provider) {\n    this._requestManager.setProvider(provider);\n    this.currentProvider = provider;\n};\n\nWeb3.prototype.reset = function (keepIsSyncing) {\n    this._requestManager.reset(keepIsSyncing);\n    this.settings = new Settings();\n};\n\nWeb3.prototype.toHex = utils.toHex;\nWeb3.prototype.toAscii = utils.toAscii;\nWeb3.prototype.toUtf8 = utils.toUtf8;\nWeb3.prototype.fromAscii = utils.fromAscii;\nWeb3.prototype.fromUtf8 = utils.fromUtf8;\nWeb3.prototype.toDecimal = utils.toDecimal;\nWeb3.prototype.fromDecimal = utils.fromDecimal;\nWeb3.prototype.toBigNumber = utils.toBigNumber;\nWeb3.prototype.toWei = utils.toWei;\nWeb3.prototype.fromWei = utils.fromWei;\nWeb3.prototype.isAddress = utils.isAddress;\nWeb3.prototype.isIBAN = utils.isIBAN;\nWeb3.prototype.sha3 = sha3;\n\n/**\n * Transforms direct icap to address\n */\nWeb3.prototype.fromICAP = function (icap) {\n    var iban = new Iban(icap);\n    return iban.address();\n};\n\nvar properties = function () {\n    return [\n        new Property({\n            name: 'version.node',\n            getter: 'web3_clientVersion'\n        }),\n        new Property({\n            name: 'version.network',\n            getter: 'net_version',\n            inputFormatter: utils.toDecimal\n        }),\n        new Property({\n            name: 'version.ethereum',\n            getter: 'eth_protocolVersion',\n            inputFormatter: utils.toDecimal\n        }),\n        new Property({\n            name: 'version.whisper',\n            getter: 'shh_version',\n            inputFormatter: utils.toDecimal\n        })\n    ];\n};\n\nWeb3.prototype.isConnected = function(){\n    return (this.currentProvider && this.currentProvider.isConnected());\n};\n\nWeb3.prototype.createBatch = function () {\n    return new Batch(this);\n};\n\nmodule.exports = Web3;\n\n\n},{\"./utils/sha3\":19,\"./utils/utils\":20,\"./version.json\":21,\"./web3/batch\":24,\"./web3/extend\":28,\"./web3/httpprovider\":32,\"./web3/iban\":33,\"./web3/ipcprovider\":34,\"./web3/methods/db\":37,\"./web3/methods/eth\":38,\"./web3/methods/net\":39,\"./web3/methods/shh\":40,\"./web3/property\":43,\"./web3/requestmanager\":44,\"./web3/settings\":45}],23:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file allevents.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2014\n */\n\nvar sha3 = require('../utils/sha3');\nvar SolidityEvent = require('./event');\nvar formatters = require('./formatters');\nvar utils = require('../utils/utils');\nvar Filter = require('./filter');\nvar watches = require('./methods/watches');\n\nvar AllSolidityEvents = function (requestManager, json, address) {\n    this._requestManager = requestManager;\n    this._json = json;\n    this._address = address;\n};\n\nAllSolidityEvents.prototype.encode = function (options) {\n    options = options || {};\n    var result = {};\n\n    ['fromBlock', 'toBlock'].filter(function (f) {\n        return options[f] !== undefined;\n    }).forEach(function (f) {\n        result[f] = formatters.inputBlockNumberFormatter(options[f]);\n    });\n\n    result.address = this._address;\n\n    return result;\n};\n\nAllSolidityEvents.prototype.decode = function (data) {\n    data.data = data.data || '';\n    data.topics = data.topics || [];\n\n    var eventTopic = data.topics[0].slice(2);\n    var match = this._json.filter(function (j) {\n        return eventTopic === sha3(utils.transformToFullName(j));\n    })[0];\n\n    if (!match) { // cannot find matching event?\n        console.warn('cannot find event for log');\n        return data;\n    }\n\n    var event = new SolidityEvent(this._requestManager, match, this._address);\n    return event.decode(data);\n};\n\nAllSolidityEvents.prototype.execute = function (options, callback) {\n\n    if (utils.isFunction(arguments[arguments.length - 1])) {\n        callback = arguments[arguments.length - 1];\n        if(arguments.length === 1)\n            options = null;\n    }\n\n    var o = this.encode(options);\n    var formatter = this.decode.bind(this);\n    return new Filter(this._requestManager, o, watches.eth(), formatter, callback);\n};\n\nAllSolidityEvents.prototype.attachToContract = function (contract) {\n    var execute = this.execute.bind(this);\n    contract.allEvents = execute;\n};\n\nmodule.exports = AllSolidityEvents;\n\n\n},{\"../utils/sha3\":19,\"../utils/utils\":20,\"./event\":27,\"./filter\":29,\"./formatters\":30,\"./methods/watches\":41}],24:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file batch.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar Jsonrpc = require('./jsonrpc');\nvar errors = require('./errors');\n\nvar Batch = function (web3) {\n    this.requestManager = web3._requestManager;\n    this.requests = [];\n};\n\n/**\n * Should be called to add create new request to batch request\n *\n * @method add\n * @param {Object} jsonrpc requet object\n */\nBatch.prototype.add = function (request) {\n    this.requests.push(request);\n};\n\n/**\n * Should be called to execute batch request\n *\n * @method execute\n */\nBatch.prototype.execute = function () {\n    var requests = this.requests;\n    this.requestManager.sendBatch(requests, function (err, results) {\n        results = results || [];\n        requests.map(function (request, index) {\n            return results[index] || {};\n        }).forEach(function (result, index) {\n            if (requests[index].callback) {\n\n                if (!Jsonrpc.getInstance().isValidResponse(result)) {\n                    return requests[index].callback(errors.InvalidResponse(result));\n                }\n\n                requests[index].callback(null, (requests[index].format ? requests[index].format(result.result) : result.result));\n            }\n        });\n    }); \n};\n\nmodule.exports = Batch;\n\n\n},{\"./errors\":26,\"./jsonrpc\":35}],25:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file contract.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2014\n */\n\nvar utils = require('../utils/utils');\nvar coder = require('../solidity/coder');\nvar SolidityEvent = require('./event');\nvar SolidityFunction = require('./function');\nvar AllEvents = require('./allevents');\n\n/**\n * Should be called to encode constructor params\n *\n * @method encodeConstructorParams\n * @param {Array} abi\n * @param {Array} constructor params\n */\nvar encodeConstructorParams = function (abi, params) {\n    return abi.filter(function (json) {\n        return json.type === 'constructor' && json.inputs.length === params.length;\n    }).map(function (json) {\n        return json.inputs.map(function (input) {\n            return input.type;\n        });\n    }).map(function (types) {\n        return coder.encodeParams(types, params);\n    })[0] || '';\n};\n\n/**\n * Should be called to add functions to contract object\n *\n * @method addFunctionsToContract\n * @param {Contract} contract\n * @param {Array} abi\n */\nvar addFunctionsToContract = function (contract) {\n    contract.abi.filter(function (json) {\n        return json.type === 'function';\n    }).map(function (json) {\n        return new SolidityFunction(contract._eth, json, contract.address);\n    }).forEach(function (f) {\n        f.attachToContract(contract);\n    });\n};\n\n/**\n * Should be called to add events to contract object\n *\n * @method addEventsToContract\n * @param {Contract} contract\n * @param {Array} abi\n */\nvar addEventsToContract = function (contract) {\n    var events = contract.abi.filter(function (json) {\n        return json.type === 'event';\n    });\n\n    var All = new AllEvents(contract._eth._requestManager, events, contract.address);\n    All.attachToContract(contract);\n\n    events.map(function (json) {\n        return new SolidityEvent(contract._eth._requestManager, json, contract.address);\n    }).forEach(function (e) {\n        e.attachToContract(contract);\n    });\n};\n\n\n/**\n * Should be called to check if the contract gets properly deployed on the blockchain.\n *\n * @method checkForContractAddress\n * @param {Object} contract\n * @param {Function} callback\n * @returns {Undefined}\n */\nvar checkForContractAddress = function(contract, callback){\n    var count = 0,\n        callbackFired = false;\n\n    // wait for receipt\n    var filter = contract._eth.filter('latest', function(e){\n        if (!e && !callbackFired) {\n            count++;\n\n            // stop watching after 50 blocks (timeout)\n            if (count > 50) {\n\n                filter.stopWatching();\n                callbackFired = true;\n\n                if (callback)\n                    callback(new Error('Contract transaction couldn\\'t be found after 50 blocks'));\n                else\n                    throw new Error('Contract transaction couldn\\'t be found after 50 blocks');\n\n\n            } else {\n\n                contract._eth.getTransactionReceipt(contract.transactionHash, function(e, receipt){\n                    if(receipt && !callbackFired) {\n\n                        contract._eth.getCode(receipt.contractAddress, function(e, code){\n                            /*jshint maxcomplexity: 6 */\n\n                            if(callbackFired || !code)\n                                return;\n\n                            filter.stopWatching();\n                            callbackFired = true;\n\n                            if(code.length > 2) {\n\n                                // console.log('Contract code deployed!');\n\n                                contract.address = receipt.contractAddress;\n\n                                // attach events and methods again after we have\n                                addFunctionsToContract(contract);\n                                addEventsToContract(contract);\n\n                                // call callback for the second time\n                                if(callback)\n                                    callback(null, contract);\n\n                            } else {\n                                if(callback)\n                                    callback(new Error('The contract code couldn\\'t be stored, please check your gas amount.'));\n                                else\n                                    throw new Error('The contract code couldn\\'t be stored, please check your gas amount.');\n                            }\n                        });\n                    }\n                });\n            }\n        }\n    });\n};\n\n/**\n * Should be called to create new ContractFactory instance\n *\n * @method ContractFactory\n * @param {Array} abi\n */\nvar ContractFactory = function (eth, abi) {\n    this.eth = eth;\n    this.abi = abi;\n\n    /**\n     * Should be called to create new contract on a blockchain\n     *\n     * @method new\n     * @param {Any} contract constructor param1 (optional)\n     * @param {Any} contract constructor param2 (optional)\n     * @param {Object} contract transaction object (required)\n     * @param {Function} callback\n     * @returns {Contract} returns contract instance\n     */\n    this.new = function () {\n        var contract = new Contract(this.eth, this.abi);\n\n        // parse arguments\n        var options = {}; // required!\n        var callback;\n\n        var args = Array.prototype.slice.call(arguments);\n        if (utils.isFunction(args[args.length - 1])) {\n            callback = args.pop();\n        }\n\n        var last = args[args.length - 1];\n        if (utils.isObject(last) && !utils.isArray(last)) {\n            options = args.pop();\n        }\n\n        var bytes = encodeConstructorParams(this.abi, args);\n        options.data += bytes;\n\n        if (callback) {\n\n            // wait for the contract address adn check if the code was deployed\n            this.eth.sendTransaction(options, function (err, hash) {\n                if (err) {\n                    callback(err);\n                } else {\n                    // add the transaction hash\n                    contract.transactionHash = hash;\n\n                    // call callback for the first time\n                    callback(null, contract);\n\n                    checkForContractAddress(contract, callback);\n                }\n            });\n        } else {\n            var hash = this.eth.sendTransaction(options);\n            // add the transaction hash\n            contract.transactionHash = hash;\n            checkForContractAddress(contract);\n        }\n\n        return contract;\n    };\n\n    this.new.getData = this.getData.bind(this);\n};\n\n/**\n * Should be called to create new ContractFactory\n *\n * @method contract\n * @param {Array} abi\n * @returns {ContractFactory} new contract factory\n */\n//var contract = function (abi) {\n    //return new ContractFactory(abi);\n//};\n\n\n\n/**\n * Should be called to get access to existing contract on a blockchain\n *\n * @method at\n * @param {Address} contract address (required)\n * @param {Function} callback {optional)\n * @returns {Contract} returns contract if no callback was passed,\n * otherwise calls callback function (err, contract)\n */\nContractFactory.prototype.at = function (address, callback) {\n    var contract = new Contract(this.eth, this.abi, address);\n\n    // this functions are not part of prototype,\n    // because we dont want to spoil the interface\n    addFunctionsToContract(contract);\n    addEventsToContract(contract);\n\n    if (callback) {\n        callback(null, contract);\n    }\n    return contract;\n};\n\n/**\n * Gets the data, which is data to deploy plus constructor params\n *\n * @method getData\n */\nContractFactory.prototype.getData = function () {\n    var options = {}; // required!\n    var args = Array.prototype.slice.call(arguments);\n\n    var last = args[args.length - 1];\n    if (utils.isObject(last) && !utils.isArray(last)) {\n        options = args.pop();\n    }\n\n    var bytes = encodeConstructorParams(this.abi, args);\n    options.data += bytes;\n\n    return options.data;\n};\n\n/**\n * Should be called to create new contract instance\n *\n * @method Contract\n * @param {Array} abi\n * @param {Address} contract address\n */\nvar Contract = function (eth, abi, address) {\n    this._eth = eth;\n    this.transactionHash = null;\n    this.address = address;\n    this.abi = abi;\n};\n\nmodule.exports = ContractFactory;\n\n},{\"../solidity/coder\":7,\"../utils/utils\":20,\"./allevents\":23,\"./event\":27,\"./function\":31}],26:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file errors.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nmodule.exports = {\n    InvalidNumberOfParams: function () {\n        return new Error('Invalid number of input parameters');\n    },\n    InvalidConnection: function (host){\n        return new Error('CONNECTION ERROR: Couldn\\'t connect to node '+ host +'.');\n    },\n    InvalidProvider: function () {\n        return new Error('Provider not set or invalid');\n    },\n    InvalidResponse: function (result){\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);\n        return new Error(message);\n    }\n};\n\n\n},{}],27:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file event.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2014\n */\n\nvar utils = require('../utils/utils');\nvar coder = require('../solidity/coder');\nvar formatters = require('./formatters');\nvar sha3 = require('../utils/sha3');\nvar Filter = require('./filter');\nvar watches = require('./methods/watches');\n\n/**\n * This prototype should be used to create event filters\n */\nvar SolidityEvent = function (requestManager, json, address) {\n    this._requestManager = requestManager;\n    this._params = json.inputs;\n    this._name = utils.transformToFullName(json);\n    this._address = address;\n    this._anonymous = json.anonymous;\n};\n\n/**\n * Should be used to get filtered param types\n *\n * @method types\n * @param {Bool} decide if returned typed should be indexed\n * @return {Array} array of types\n */\nSolidityEvent.prototype.types = function (indexed) {\n    return this._params.filter(function (i) {\n        return i.indexed === indexed;\n    }).map(function (i) {\n        return i.type;\n    });\n};\n\n/**\n * Should be used to get event display name\n *\n * @method displayName\n * @return {String} event display name\n */\nSolidityEvent.prototype.displayName = function () {\n    return utils.extractDisplayName(this._name);\n};\n\n/**\n * Should be used to get event type name\n *\n * @method typeName\n * @return {String} event type name\n */\nSolidityEvent.prototype.typeName = function () {\n    return utils.extractTypeName(this._name);\n};\n\n/**\n * Should be used to get event signature\n *\n * @method signature\n * @return {String} event signature\n */\nSolidityEvent.prototype.signature = function () {\n    return sha3(this._name);\n};\n\n/**\n * Should be used to encode indexed params and options to one final object\n * \n * @method encode\n * @param {Object} indexed\n * @param {Object} options\n * @return {Object} everything combined together and encoded\n */\nSolidityEvent.prototype.encode = function (indexed, options) {\n    indexed = indexed || {};\n    options = options || {};\n    var result = {};\n\n    ['fromBlock', 'toBlock'].filter(function (f) {\n        return options[f] !== undefined;\n    }).forEach(function (f) {\n        result[f] = formatters.inputBlockNumberFormatter(options[f]);\n    });\n\n    result.topics = [];\n\n    result.address = this._address;\n    if (!this._anonymous) {\n        result.topics.push('0x' + this.signature());\n    }\n\n    var indexedTopics = this._params.filter(function (i) {\n        return i.indexed === true;\n    }).map(function (i) {\n        var value = indexed[i.name];\n        if (value === undefined || value === null) {\n            return null;\n        }\n        \n        if (utils.isArray(value)) {\n            return value.map(function (v) {\n                return '0x' + coder.encodeParam(i.type, v);\n            });\n        }\n        return '0x' + coder.encodeParam(i.type, value);\n    });\n\n    result.topics = result.topics.concat(indexedTopics);\n\n    return result;\n};\n\n/**\n * Should be used to decode indexed params and options\n *\n * @method decode\n * @param {Object} data\n * @return {Object} result object with decoded indexed && not indexed params\n */\nSolidityEvent.prototype.decode = function (data) {\n \n    data.data = data.data || '';\n    data.topics = data.topics || [];\n\n    var argTopics = this._anonymous ? data.topics : data.topics.slice(1);\n    var indexedData = argTopics.map(function (topics) { return topics.slice(2); }).join(\"\");\n    var indexedParams = coder.decodeParams(this.types(true), indexedData); \n\n    var notIndexedData = data.data.slice(2);\n    var notIndexedParams = coder.decodeParams(this.types(false), notIndexedData);\n    \n    var result = formatters.outputLogFormatter(data);\n    result.event = this.displayName();\n    result.address = data.address;\n\n    result.args = this._params.reduce(function (acc, current) {\n        acc[current.name] = current.indexed ? indexedParams.shift() : notIndexedParams.shift();\n        return acc;\n    }, {});\n\n    delete result.data;\n    delete result.topics;\n\n    return result;\n};\n\n/**\n * Should be used to create new filter object from event\n *\n * @method execute\n * @param {Object} indexed\n * @param {Object} options\n * @return {Object} filter object\n */\nSolidityEvent.prototype.execute = function (indexed, options, callback) {\n\n    if (utils.isFunction(arguments[arguments.length - 1])) {\n        callback = arguments[arguments.length - 1];\n        if(arguments.length === 2)\n            options = null;\n        if(arguments.length === 1) {\n            options = null;\n            indexed = {};\n        }\n    }\n    \n    var o = this.encode(indexed, options);\n    var formatter = this.decode.bind(this);\n    return new Filter(this._requestManager, o, watches.eth(), formatter, callback);\n};\n\n/**\n * Should be used to attach event to contract object\n *\n * @method attachToContract\n * @param {Contract}\n */\nSolidityEvent.prototype.attachToContract = function (contract) {\n    var execute = this.execute.bind(this);\n    var displayName = this.displayName();\n    if (!contract[displayName]) {\n        contract[displayName] = execute;\n    }\n    contract[displayName][this.typeName()] = this.execute.bind(this, contract);\n};\n\nmodule.exports = SolidityEvent;\n\n\n},{\"../solidity/coder\":7,\"../utils/sha3\":19,\"../utils/utils\":20,\"./filter\":29,\"./formatters\":30,\"./methods/watches\":41}],28:[function(require,module,exports){\nvar formatters = require('./formatters');\nvar utils = require('./../utils/utils');\nvar Method = require('./method');\nvar Property = require('./property');\n\n// TODO: refactor, so the input params are not altered.\n// it's necessary to make same 'extension' work with multiple providers\nvar extend = function (web3) {\n    /* jshint maxcomplexity:5 */\n    var ex = function (extension) {\n\n        var extendedObject;\n        if (extension.property) {\n            if (!web3[extension.property]) {\n                web3[extension.property] = {};\n            }\n            extendedObject = web3[extension.property];\n        } else {\n            extendedObject = web3;\n        }\n\n        if (extension.methods) {\n            extension.methods.forEach(function (method) {\n                method.attachToObject(extendedObject);\n                method.setRequestManager(web3._requestManager);\n            });\n        }\n\n        if (extension.properties) {\n            extension.properties.forEach(function (property) {\n                property.attachToObject(extendedObject);\n                property.setRequestManager(web3._requestManager);\n            });\n        }\n    };\n\n    ex.formatters = formatters; \n    ex.utils = utils;\n    ex.Method = Method;\n    ex.Property = Property;\n\n    return ex;\n};\n\n\n\nmodule.exports = extend;\n\n\n},{\"./../utils/utils\":20,\"./formatters\":30,\"./method\":36,\"./property\":43}],29:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file filter.js\n * @authors:\n *   Jeffrey Wilcke <jeff@ethdev.com>\n *   Marek Kotewicz <marek@ethdev.com>\n *   Marian Oancea <marian@ethdev.com>\n *   Fabian Vogelsteller <fabian@ethdev.com>\n *   Gav Wood <g@ethdev.com>\n * @date 2014\n */\n\nvar formatters = require('./formatters');\nvar utils = require('../utils/utils');\n\n/**\n* Converts a given topic to a hex string, but also allows null values.\n*\n* @param {Mixed} value\n* @return {String}\n*/\nvar toTopic = function(value){\n\n    if(value === null || typeof value === 'undefined')\n        return null;\n\n    value = String(value);\n\n    if(value.indexOf('0x') === 0)\n        return value;\n    else\n        return utils.fromUtf8(value);\n};\n\n/// This method should be called on options object, to verify deprecated properties && lazy load dynamic ones\n/// @param should be string or object\n/// @returns options string or object\nvar getOptions = function (options) {\n\n    if (utils.isString(options)) {\n        return options;\n    }\n\n    options = options || {};\n\n    // make sure topics, get converted to hex\n    options.topics = options.topics || [];\n    options.topics = options.topics.map(function(topic){\n        return (utils.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);\n    });\n\n    return {\n        topics: options.topics,\n        from: options.from,\n        to: options.to,\n        address: options.address,\n        fromBlock: formatters.inputBlockNumberFormatter(options.fromBlock),\n        toBlock: formatters.inputBlockNumberFormatter(options.toBlock)\n    };\n};\n\n/**\nAdds the callback and sets up the methods, to iterate over the results.\n\n@method getLogsAtStart\n@param {Object} self\n@param {funciton}\n*/\nvar getLogsAtStart = function(self, callback){\n    // call getFilterLogs for the first watch callback start\n    if (!utils.isString(self.options)) {\n        self.get(function (err, messages) {\n            // don't send all the responses to all the watches again... just to self one\n            if (err) {\n                callback(err);\n            }\n\n            if(utils.isArray(messages)) {\n                messages.forEach(function (message) {\n                    callback(null, message);\n                });\n            }\n        });\n    }\n};\n\n/**\nAdds the callback and sets up the methods, to iterate over the results.\n\n@method pollFilter\n@param {Object} self\n*/\nvar pollFilter = function(self) {\n\n    var onMessage = function (error, messages) {\n        if (error) {\n            return self.callbacks.forEach(function (callback) {\n                callback(error);\n            });\n        }\n\n        if(utils.isArray(messages)) {\n            messages.forEach(function (message) {\n                message = self.formatter ? self.formatter(message) : message;\n                self.callbacks.forEach(function (callback) {\n                    callback(null, message);\n                });\n            });\n        }\n    };\n\n    self.requestManager.startPolling({\n        method: self.implementation.poll.call,\n        params: [self.filterId],\n    }, self.filterId, onMessage, self.stopWatching.bind(self));\n\n};\n\nvar Filter = function (requestManager, options, methods, formatter, callback) {\n    var self = this;\n    var implementation = {};\n    methods.forEach(function (method) {\n        method.setRequestManager(requestManager);\n        method.attachToObject(implementation);\n    });\n    this.requestManager = requestManager;\n    this.options = getOptions(options);\n    this.implementation = implementation;\n    this.filterId = null;\n    this.callbacks = [];\n    this.getLogsCallbacks = [];\n    this.pollFilters = [];\n    this.formatter = formatter;\n    this.implementation.newFilter(this.options, function(error, id){\n        if(error) {\n            self.callbacks.forEach(function(cb){\n                cb(error);\n            });\n        } else {\n            self.filterId = id;\n\n            // check if there are get pending callbacks as a consequence\n            // of calling get() with filterId unassigned.\n            self.getLogsCallbacks.forEach(function (cb){\n                self.get(cb);\n            });\n            self.getLogsCallbacks = [];\n\n            // get filter logs for the already existing watch calls\n            self.callbacks.forEach(function(cb){\n                getLogsAtStart(self, cb);\n            });\n            if(self.callbacks.length > 0)\n                pollFilter(self);\n\n            // start to watch immediately\n            if(typeof callback === 'function') {\n                return self.watch(callback);\n            }\n        }\n    });\n\n    return this;\n};\n\nFilter.prototype.watch = function (callback) {\n    this.callbacks.push(callback);\n\n    if(this.filterId) {\n        getLogsAtStart(this, callback);\n        pollFilter(this);\n    }\n\n    return this;\n};\n\nFilter.prototype.stopWatching = function () {\n    this.requestManager.stopPolling(this.filterId);\n    // remove filter async\n    this.implementation.uninstallFilter(this.filterId, function(){});\n    this.callbacks = [];\n};\n\nFilter.prototype.get = function (callback) {\n    var self = this;\n    if (utils.isFunction(callback)) {\n        if (this.filterId === null) {\n            // If filterId is not set yet, call it back\n            // when newFilter() assigns it.\n            this.getLogsCallbacks.push(callback);\n        } else {\n            this.implementation.getLogs(this.filterId, function(err, res){\n                if (err) {\n                    callback(err);\n                } else {\n                    callback(null, res.map(function (log) {\n                        return self.formatter ? self.formatter(log) : log;\n                    }));\n                }\n            });\n        }\n    } else {\n        if (this.filterId === null) {\n            throw new Error('Filter ID Error: filter().get() can\\'t be chained synchronous, please provide a callback for the get() method.');\n        }\n        var logs = this.implementation.getLogs(this.filterId);\n        return logs.map(function (log) {\n            return self.formatter ? self.formatter(log) : log;\n        });\n    }\n\n    return this;\n};\n\nmodule.exports = Filter;\n\n\n},{\"../utils/utils\":20,\"./formatters\":30}],30:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file formatters.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @author Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\nvar utils = require('../utils/utils');\nvar config = require('../utils/config');\nvar Iban = require('./iban');\n\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber}\n * @returns {BigNumber} object\n */\nvar outputBigNumberFormatter = function (number) {\n    return utils.toBigNumber(number);\n};\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return config.defaultBlock;\n    }\n    return inputBlockNumberFormatter(blockNumber);\n};\n\nvar inputBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    } else if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    return utils.toHex(blockNumber);\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputCallFormatter = function (options){\n\n    options.from = options.from || config.defaultAccount;\n\n    if (options.from) {\n        options.from = inputAddressFormatter(options.from);\n    }\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.fromDecimal(options[key]);\n    });\n\n    return options; \n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputTransactionFormatter = function (options){\n\n    options.from = options.from || config.defaultAccount;\n    options.from = inputAddressFormatter(options.from);\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.fromDecimal(options[key]);\n    });\n\n    return options; \n};\n\n/**\n * Formats the output of a transaction to its proper values\n * \n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n*/\nvar outputTransactionFormatter = function (tx){\n    if(tx.blockNumber !== null)\n        tx.blockNumber = utils.toDecimal(tx.blockNumber);\n    if(tx.transactionIndex !== null)\n        tx.transactionIndex = utils.toDecimal(tx.transactionIndex);\n    tx.nonce = utils.toDecimal(tx.nonce);\n    tx.gas = utils.toDecimal(tx.gas);\n    tx.gasPrice = utils.toBigNumber(tx.gasPrice);\n    tx.value = utils.toBigNumber(tx.value);\n    return tx;\n};\n\n/**\n * Formats the output of a transaction receipt to its proper values\n * \n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n*/\nvar outputTransactionReceiptFormatter = function (receipt){\n    if(receipt.blockNumber !== null)\n        receipt.blockNumber = utils.toDecimal(receipt.blockNumber);\n    if(receipt.transactionIndex !== null)\n        receipt.transactionIndex = utils.toDecimal(receipt.transactionIndex);\n    receipt.cumulativeGasUsed = utils.toDecimal(receipt.cumulativeGasUsed);\n    receipt.gasUsed = utils.toDecimal(receipt.gasUsed);\n\n    if(utils.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(function(log){\n            return outputLogFormatter(log);\n        });\n    }\n\n    return receipt;\n};\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block \n * @returns {Object}\n*/\nvar outputBlockFormatter = function(block) {\n\n    // transform to number\n    block.gasLimit = utils.toDecimal(block.gasLimit);\n    block.gasUsed = utils.toDecimal(block.gasUsed);\n    block.size = utils.toDecimal(block.size);\n    block.timestamp = utils.toDecimal(block.timestamp);\n    if(block.number !== null)\n        block.number = utils.toDecimal(block.number);\n\n    block.difficulty = utils.toBigNumber(block.difficulty);\n    block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);\n\n    if (utils.isArray(block.transactions)) {\n        block.transactions.forEach(function(item){\n            if(!utils.isString(item))\n                return outputTransactionFormatter(item);\n        });\n    }\n\n    return block;\n};\n\n/**\n * Formats the output of a log\n * \n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar outputLogFormatter = function(log) {\n    if(log.blockNumber !== null)\n        log.blockNumber = utils.toDecimal(log.blockNumber);\n    if(log.transactionIndex !== null)\n        log.transactionIndex = utils.toDecimal(log.transactionIndex);\n    if(log.logIndex !== null)\n        log.logIndex = utils.toDecimal(log.logIndex);\n\n    return log;\n};\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\nvar inputPostFormatter = function(post) {\n\n    // post.payload = utils.toHex(post.payload);\n    post.ttl = utils.fromDecimal(post.ttl);\n    post.workToProve = utils.fromDecimal(post.workToProve);\n    post.priority = utils.fromDecimal(post.priority);\n\n    // fallback\n    if (!utils.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : [];\n    }\n\n    // format the following options\n    post.topics = post.topics.map(function(topic){\n        // convert only if not hex\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);\n    });\n\n    return post; \n};\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function(post){\n\n    post.expiry = utils.toDecimal(post.expiry);\n    post.sent = utils.toDecimal(post.sent);\n    post.ttl = utils.toDecimal(post.ttl);\n    post.workProved = utils.toDecimal(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.toAscii(post.payload);\n\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function(topic){\n        return utils.toAscii(topic);\n    });\n\n    return post;\n};\n\nvar inputAddressFormatter = function (address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return '0x' + iban.address();\n    } else if (utils.isStrictAddress(address)) {\n        return address;\n    } else if (utils.isAddress(address)) {\n        return '0x' + address;\n    }\n    throw 'invalid address';\n};\n\n\nvar outputSyncingFormatter = function(result) {\n\n    result.startingBlock = utils.toDecimal(result.startingBlock);\n    result.currentBlock = utils.toDecimal(result.currentBlock);\n    result.highestBlock = utils.toDecimal(result.highestBlock);\n\n    return result;\n};\n\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n\n\n},{\"../utils/config\":18,\"../utils/utils\":20,\"./iban\":33}],31:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file function.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar coder = require('../solidity/coder');\nvar utils = require('../utils/utils');\nvar formatters = require('./formatters');\nvar sha3 = require('../utils/sha3');\n\n/**\n * This prototype should be used to call/sendTransaction to solidity functions\n */\nvar SolidityFunction = function (eth, json, address) {\n    this._eth = eth;\n    this._inputTypes = json.inputs.map(function (i) {\n        return i.type;\n    });\n    this._outputTypes = json.outputs.map(function (i) {\n        return i.type;\n    });\n    this._constant = json.constant;\n    this._name = utils.transformToFullName(json);\n    this._address = address;\n};\n\nSolidityFunction.prototype.extractCallback = function (args) {\n    if (utils.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\nSolidityFunction.prototype.extractDefaultBlock = function (args) {\n    if (args.length > this._inputTypes.length && !utils.isObject(args[args.length -1])) {\n        return formatters.inputDefaultBlockNumberFormatter(args.pop()); // modify the args array!\n    }\n};\n\n/**\n * Should be used to create payload from arguments\n *\n * @method toPayload\n * @param {Array} solidity function params\n * @param {Object} optional payload options\n */\nSolidityFunction.prototype.toPayload = function (args) {\n    var options = {};\n    if (args.length > this._inputTypes.length && utils.isObject(args[args.length -1])) {\n        options = args[args.length - 1];\n    }\n    options.to = this._address;\n    options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);\n    return options;\n};\n\n/**\n * Should be used to get function signature\n *\n * @method signature\n * @return {String} function signature\n */\nSolidityFunction.prototype.signature = function () {\n    return sha3(this._name).slice(0, 8);\n};\n\n\nSolidityFunction.prototype.unpackOutput = function (output) {\n    if (!output) {\n        return;\n    }\n\n    output = output.length >= 2 ? output.slice(2) : output;\n    var result = coder.decodeParams(this._outputTypes, output);\n    return result.length === 1 ? result[0] : result;\n};\n\n/**\n * Calls a contract function.\n *\n * @method call\n * @param {...Object} Contract function arguments\n * @param {function} If the last argument is a function, the contract function\n *   call will be asynchronous, and the callback will be passed the\n *   error and result.\n * @return {String} output bytes\n */\nSolidityFunction.prototype.call = function () {\n    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });\n    var callback = this.extractCallback(args);\n    var defaultBlock = this.extractDefaultBlock(args);\n    var payload = this.toPayload(args);\n\n\n    if (!callback) {\n        var output = this._eth.call(payload, defaultBlock);\n        return this.unpackOutput(output);\n    } \n        \n    var self = this;\n    this._eth.call(payload, defaultBlock, function (error, output) {\n        callback(error, self.unpackOutput(output));\n    });\n};\n\n/**\n * Should be used to sendTransaction to solidity function\n *\n * @method sendTransaction\n */\nSolidityFunction.prototype.sendTransaction = function () {\n    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });\n    var callback = this.extractCallback(args);\n    var payload = this.toPayload(args);\n\n    if (!callback) {\n        return this._eth.sendTransaction(payload);\n    }\n\n    this._eth.sendTransaction(payload, callback);\n};\n\n/**\n * Should be used to estimateGas of solidity function\n *\n * @method estimateGas\n */\nSolidityFunction.prototype.estimateGas = function () {\n    var args = Array.prototype.slice.call(arguments);\n    var callback = this.extractCallback(args);\n    var payload = this.toPayload(args);\n\n    if (!callback) {\n        return this._eth.estimateGas(payload);\n    }\n\n    this._eth.estimateGas(payload, callback);\n};\n\n/**\n * Return the encoded data of the call\n *\n * @method getData\n * @return {String} the encoded data\n */\nSolidityFunction.prototype.getData = function () {\n    var args = Array.prototype.slice.call(arguments);\n    var payload = this.toPayload(args);\n\n    return payload.data;\n};\n\n/**\n * Should be used to get function display name\n *\n * @method displayName\n * @return {String} display name of the function\n */\nSolidityFunction.prototype.displayName = function () {\n    return utils.extractDisplayName(this._name);\n};\n\n/**\n * Should be used to get function type name\n *\n * @method typeName\n * @return {String} type name of the function\n */\nSolidityFunction.prototype.typeName = function () {\n    return utils.extractTypeName(this._name);\n};\n\n/**\n * Should be called to get rpc requests from solidity function\n *\n * @method request\n * @returns {Object}\n */\nSolidityFunction.prototype.request = function () {\n    var args = Array.prototype.slice.call(arguments);\n    var callback = this.extractCallback(args);\n    var payload = this.toPayload(args);\n    var format = this.unpackOutput.bind(this);\n    \n    return {\n        method: this._constant ? 'eth_call' : 'eth_sendTransaction',\n        callback: callback,\n        params: [payload], \n        format: format\n    };\n};\n\n/**\n * Should be called to execute function\n *\n * @method execute\n */\nSolidityFunction.prototype.execute = function () {\n    var transaction = !this._constant;\n\n    // send transaction\n    if (transaction) {\n        return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));\n    }\n\n    // call\n    return this.call.apply(this, Array.prototype.slice.call(arguments));\n};\n\n/**\n * Should be called to attach function to contract\n *\n * @method attachToContract\n * @param {Contract}\n */\nSolidityFunction.prototype.attachToContract = function (contract) {\n    var execute = this.execute.bind(this);\n    execute.request = this.request.bind(this);\n    execute.call = this.call.bind(this);\n    execute.sendTransaction = this.sendTransaction.bind(this);\n    execute.estimateGas = this.estimateGas.bind(this);\n    execute.getData = this.getData.bind(this);\n    var displayName = this.displayName();\n    if (!contract[displayName]) {\n        contract[displayName] = execute;\n    }\n    contract[displayName][this.typeName()] = execute; // circular!!!!\n};\n\nmodule.exports = SolidityFunction;\n\n\n},{\"../solidity/coder\":7,\"../utils/sha3\":19,\"../utils/utils\":20,\"./formatters\":30}],32:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file httpprovider.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n *   Marian Oancea <marian@ethdev.com>\n *   Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\n\"use strict\";\n\nvar errors = require('./errors');\n\n// workaround to use httpprovider in different envs\nvar XMLHttpRequest; // jshint ignore: line\n\n// meteor server environment\nif (typeof Meteor !== 'undefined' && Meteor.isServer) { // jshint ignore: line\n    XMLHttpRequest = Npm.require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line\n\n// browser\n} else if (typeof window !== 'undefined' && window.XMLHttpRequest) {\n    XMLHttpRequest = window.XMLHttpRequest; // jshint ignore: line\n\n// node\n} else {\n    XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line\n}\n\n/**\n * HttpProvider should be used to send rpc calls over http\n */\nvar HttpProvider = function (host) {\n    this.host = host || 'http://localhost:8545';\n};\n\n/**\n * Should be called to prepare new XMLHttpRequest\n *\n * @method prepareRequest\n * @param {Boolean} true if request should be async\n * @return {XMLHttpRequest} object\n */\nHttpProvider.prototype.prepareRequest = function (async) {\n    var request = new XMLHttpRequest();\n    request.open('POST', this.host, async);\n    request.setRequestHeader('Content-Type','application/json');\n    return request;\n};\n\n/**\n * Should be called to make sync request\n *\n * @method send\n * @param {Object} payload\n * @return {Object} result\n */\nHttpProvider.prototype.send = function (payload) {\n    var request = this.prepareRequest(false);\n\n    try {\n        request.send(JSON.stringify(payload));\n    } catch(error) {\n        throw errors.InvalidConnection(this.host);\n    }\n\n    var result = request.responseText;\n\n    try {\n        result = JSON.parse(result);\n    } catch(e) {\n        throw errors.InvalidResponse(request.responseText);                \n    }\n\n    return result;\n};\n\n/**\n * Should be used to make async request\n *\n * @method sendAsync\n * @param {Object} payload\n * @param {Function} callback triggered on end with (err, result)\n */\nHttpProvider.prototype.sendAsync = function (payload, callback) {\n    var request = this.prepareRequest(true); \n\n    request.onreadystatechange = function() {\n        if (request.readyState === 4) {\n            var result = request.responseText;\n            var error = null;\n\n            try {\n                result = JSON.parse(result);\n            } catch(e) {\n                error = errors.InvalidResponse(request.responseText);                \n            }\n\n            callback(error, result);\n        }\n    };\n    \n    try {\n        request.send(JSON.stringify(payload));\n    } catch(error) {\n        callback(errors.InvalidConnection(this.host));\n    }\n};\n\n/**\n * Synchronously tries to make Http request\n *\n * @method isConnected\n * @return {Boolean} returns true if request haven't failed. Otherwise false\n */\nHttpProvider.prototype.isConnected = function() {\n    try {\n        this.send({\n            id: 9999999999,\n            jsonrpc: '2.0',\n            method: 'net_listening',\n            params: []\n        });\n        return true;\n    } catch(e) {\n        return false;\n    }\n};\n\nmodule.exports = HttpProvider;\n\n\n},{\"./errors\":26,\"xmlhttprequest\":17}],33:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file iban.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar BigNumber = require('bignumber.js');\n\nvar padLeft = function (string, bytes) {\n    var result = string;\n    while (result.length < bytes * 2) {\n        result = '00' + result;\n    }\n    return result;\n};\n\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */\nvar iso13616Prepare = function (iban) {\n    var A = 'A'.charCodeAt(0);\n    var Z = 'Z'.charCodeAt(0);\n\n    iban = iban.toUpperCase();\n    iban = iban.substr(4) + iban.substr(0,4);\n\n    return iban.split('').map(function(n){\n        var code = n.charCodeAt(0);\n        if (code >= A && code <= Z){\n            // A = 10, B = 11, ... Z = 35\n            return code - A + 10;\n        } else {\n            return n;\n        }\n    }).join('');\n};\n\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */\nvar mod9710 = function (iban) {\n    var remainder = iban,\n        block;\n\n    while (remainder.length > 2){\n        block = remainder.slice(0, 9);\n        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n    }\n\n    return parseInt(remainder, 10) % 97;\n};\n\n/**\n * This prototype should be used to create iban object from iban correct string\n *\n * @param {String} iban\n */\nvar Iban = function (iban) {\n    this._iban = iban;\n};\n\n/**\n * This method should be used to create iban object from ethereum address\n *\n * @method fromAddress\n * @param {String} address\n * @return {Iban} the IBAN object\n */\nIban.fromAddress = function (address) {\n    var asBn = new BigNumber(address, 16);\n    var base36 = asBn.toString(36);\n    var padded = padLeft(base36, 15);\n    return Iban.fromBban(padded.toUpperCase());\n};\n\n/**\n * Convert the passed BBAN to an IBAN for this country specification.\n * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n *\n * @method fromBban\n * @param {String} bban the BBAN to convert to IBAN\n * @returns {Iban} the IBAN object\n */\nIban.fromBban = function (bban) {\n    var countryCode = 'XE';\n\n    var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));\n    var checkDigit = ('0' + (98 - remainder)).slice(-2);\n\n    return new Iban(countryCode + checkDigit + bban);\n};\n\n/**\n * Should be used to create IBAN object for given institution and identifier\n *\n * @method createIndirect\n * @param {Object} options, required options are \"institution\" and \"identifier\"\n * @return {Iban} the IBAN object\n */\nIban.createIndirect = function (options) {\n    return Iban.fromBban('ETH' + options.institution + options.identifier);\n};\n\n/**\n * Thos method should be used to check if given string is valid iban object\n *\n * @method isValid\n * @param {String} iban string\n * @return {Boolean} true if it is valid IBAN\n */\nIban.isValid = function (iban) {\n    var i = new Iban(iban);\n    return i.isValid();\n};\n\n/**\n * Should be called to check if iban is correct\n *\n * @method isValid\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isValid = function () {\n    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&\n        mod9710(iso13616Prepare(this._iban)) === 1;\n};\n\n/**\n * Should be called to check if iban number is direct\n *\n * @method isDirect\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isDirect = function () {\n    return this._iban.length === 34 || this._iban.length === 35;\n};\n\n/**\n * Should be called to check if iban number if indirect\n *\n * @method isIndirect\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isIndirect = function () {\n    return this._iban.length === 20;\n};\n\n/**\n * Should be called to get iban checksum\n * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n *\n * @method checksum\n * @returns {String} checksum\n */\nIban.prototype.checksum = function () {\n    return this._iban.substr(2, 2);\n};\n\n/**\n * Should be called to get institution identifier\n * eg. XREG\n *\n * @method institution\n * @returns {String} institution identifier\n */\nIban.prototype.institution = function () {\n    return this.isIndirect() ? this._iban.substr(7, 4) : '';\n};\n\n/**\n * Should be called to get client identifier within institution\n * eg. GAVOFYORK\n *\n * @method client\n * @returns {String} client identifier\n */\nIban.prototype.client = function () {\n    return this.isIndirect() ? this._iban.substr(11) : '';\n};\n\n/**\n * Should be called to get client direct address\n *\n * @method address\n * @returns {String} client direct address\n */\nIban.prototype.address = function () {\n    if (this.isDirect()) {\n        var base36 = this._iban.substr(4);\n        var asBn = new BigNumber(base36, 36);\n        return padLeft(asBn.toString(16), 20);\n    } \n\n    return '';\n};\n\nIban.prototype.toString = function () {\n    return this._iban;\n};\n\nmodule.exports = Iban;\n\n\n},{\"bignumber.js\":\"bignumber.js\"}],34:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file ipcprovider.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\n\"use strict\";\n\nvar utils = require('../utils/utils');\nvar errors = require('./errors');\n\n\nvar IpcProvider = function (path, net) {\n    var _this = this;\n    this.responseCallbacks = {};\n    this.path = path;\n    \n    this.connection = net.connect({path: this.path});\n\n    this.connection.on('error', function(e){\n        console.error('IPC Connection Error', e);\n        _this._timeout();\n    });\n\n    this.connection.on('end', function(){\n        _this._timeout();\n    }); \n\n\n    // LISTEN FOR CONNECTION RESPONSES\n    this.connection.on('data', function(data) {\n        /*jshint maxcomplexity: 6 */\n\n        _this._parseResponse(data.toString()).forEach(function(result){\n\n            var id = null;\n\n            // get the id which matches the returned id\n            if(utils.isArray(result)) {\n                result.forEach(function(load){\n                    if(_this.responseCallbacks[load.id])\n                        id = load.id;\n                });\n            } else {\n                id = result.id;\n            }\n\n            // fire the callback\n            if(_this.responseCallbacks[id]) {\n                _this.responseCallbacks[id](null, result);\n                delete _this.responseCallbacks[id];\n            }\n        });\n    });\n};\n\n/**\nWill parse the response and make an array out of it.\n\n@method _parseResponse\n@param {String} data\n*/\nIpcProvider.prototype._parseResponse = function(data) {\n    var _this = this,\n        returnValues = [];\n    \n    // DE-CHUNKER\n    var dechunkedData = data\n        .replace(/\\}\\{/g,'}|--|{') // }{\n        .replace(/\\}\\]\\[\\{/g,'}]|--|[{') // }][{\n        .replace(/\\}\\[\\{/g,'}|--|[{') // }[{\n        .replace(/\\}\\]\\{/g,'}]|--|{') // }]{\n        .split('|--|');\n\n    dechunkedData.forEach(function(data){\n\n        // prepend the last chunk\n        if(_this.lastChunk)\n            data = _this.lastChunk + data;\n\n        var result = null;\n\n        try {\n            result = JSON.parse(data);\n\n        } catch(e) {\n\n            _this.lastChunk = data;\n\n            // start timeout to cancel all requests\n            clearTimeout(_this.lastChunkTimeout);\n            _this.lastChunkTimeout = setTimeout(function(){\n                _this._timeout();\n                throw errors.InvalidResponse(data);\n            }, 1000 * 15);\n\n            return;\n        }\n\n        // cancel timeout and set chunk to null\n        clearTimeout(_this.lastChunkTimeout);\n        _this.lastChunk = null;\n\n        if(result)\n            returnValues.push(result);\n    });\n\n    return returnValues;\n};\n\n\n/**\nGet the adds a callback to the responseCallbacks object,\nwhich will be called if a response matching the response Id will arrive.\n\n@method _addResponseCallback\n*/\nIpcProvider.prototype._addResponseCallback = function(payload, callback) {\n    var id = payload.id || payload[0].id;\n    var method = payload.method || payload[0].method;\n\n    this.responseCallbacks[id] = callback;\n    this.responseCallbacks[id].method = method;\n};\n\n/**\nTimeout all requests when the end/error event is fired\n\n@method _timeout\n*/\nIpcProvider.prototype._timeout = function() {\n    for(var key in this.responseCallbacks) {\n        if(this.responseCallbacks.hasOwnProperty(key)){\n            this.responseCallbacks[key](errors.InvalidConnection('on IPC'));\n            delete this.responseCallbacks[key];\n        }\n    }\n};\n\n\n/**\nCheck if the current connection is still valid.\n\n@method isConnected\n*/\nIpcProvider.prototype.isConnected = function() {\n    var _this = this;\n\n    // try reconnect, when connection is gone\n    if(!_this.connection.writable)\n        _this.connection.connect({path: _this.path});\n\n    return !!this.connection.writable;\n};\n\nIpcProvider.prototype.send = function (payload) {\n\n    if(this.connection.writeSync) {\n        var result;\n\n        // try reconnect, when connection is gone\n        if(!this.connection.writable)\n            this.connection.connect({path: this.path});\n\n        var data = this.connection.writeSync(JSON.stringify(payload));\n\n        try {\n            result = JSON.parse(data);\n        } catch(e) {\n            throw errors.InvalidResponse(data);                \n        }\n\n        return result;\n\n    } else {\n        throw new Error('You tried to send \"'+ payload.method +'\" synchronously. Synchronous requests are not supported by the IPC provider.');\n    }\n};\n\nIpcProvider.prototype.sendAsync = function (payload, callback) {\n    // try reconnect, when connection is gone\n    if(!this.connection.writable)\n        this.connection.connect({path: this.path});\n\n\n    this.connection.write(JSON.stringify(payload));\n    this._addResponseCallback(payload, callback);\n};\n\nmodule.exports = IpcProvider;\n\n\n},{\"../utils/utils\":20,\"./errors\":26}],35:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file jsonrpc.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar Jsonrpc = function () {\n    // singleton pattern\n    if (arguments.callee._singletonInstance) {\n        return arguments.callee._singletonInstance;\n    }\n    arguments.callee._singletonInstance = this;\n\n    this.messageId = 1;\n};\n\n/**\n * @return {Jsonrpc} singleton\n */\nJsonrpc.getInstance = function () {\n    var instance = new Jsonrpc();\n    return instance;\n};\n\n/**\n * Should be called to valid json create payload object\n *\n * @method toPayload\n * @param {Function} method of jsonrpc call, required\n * @param {Array} params, an array of method params, optional\n * @returns {Object} valid jsonrpc payload object\n */\nJsonrpc.prototype.toPayload = function (method, params) {\n    if (!method)\n        console.error('jsonrpc method should be specified!');\n\n    return {\n        jsonrpc: '2.0',\n        method: method,\n        params: params || [],\n        id: this.messageId++\n    };\n};\n\n/**\n * Should be called to check if jsonrpc response is valid\n *\n * @method isValidResponse\n * @param {Object}\n * @returns {Boolean} true if response is valid, otherwise false\n */\nJsonrpc.prototype.isValidResponse = function (response) {\n    return !!response &&\n        !response.error &&\n        response.jsonrpc === '2.0' &&\n        typeof response.id === 'number' &&\n        response.result !== undefined; // only undefined is not valid json object\n};\n\n/**\n * Should be called to create batch payload object\n *\n * @method toBatchPayload\n * @param {Array} messages, an array of objects with method (required) and params (optional) fields\n * @returns {Array} batch payload\n */\nJsonrpc.prototype.toBatchPayload = function (messages) {\n    var self = this;\n    return messages.map(function (message) {\n        return self.toPayload(message.method, message.params);\n    });\n};\n\nmodule.exports = Jsonrpc;\n\n\n},{}],36:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file method.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar utils = require('../utils/utils');\nvar errors = require('./errors');\n\nvar Method = function (options) {\n    this.name = options.name;\n    this.call = options.call;\n    this.params = options.params || 0;\n    this.inputFormatter = options.inputFormatter;\n    this.outputFormatter = options.outputFormatter;\n    this.requestManager = null;\n};\n\nMethod.prototype.setRequestManager = function (rm) {\n    this.requestManager = rm;\n};\n\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\nMethod.prototype.getCall = function (args) {\n    return utils.isFunction(this.call) ? this.call(args) : this.call;\n};\n\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nMethod.prototype.extractCallback = function (args) {\n    if (utils.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\n/**\n * Should be called to check if the number of arguments is correct\n * \n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\nMethod.prototype.validateArgs = function (args) {\n    if (args.length !== this.params) {\n        throw errors.InvalidNumberOfParams();\n    }\n};\n\n/**\n * Should be called to format input args of method\n * \n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nMethod.prototype.formatInput = function (args) {\n    if (!this.inputFormatter) {\n        return args;\n    }\n\n    return this.inputFormatter.map(function (formatter, index) {\n        return formatter ? formatter(args[index]) : args[index];\n    });\n};\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nMethod.prototype.formatOutput = function (result) {\n    return this.outputFormatter && result ? this.outputFormatter(result) : result;\n};\n\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nMethod.prototype.toPayload = function (args) {\n    var call = this.getCall(args);\n    var callback = this.extractCallback(args);\n    var params = this.formatInput(args);\n    this.validateArgs(params);\n\n    return {\n        method: call,\n        params: params,\n        callback: callback\n    };\n};\n\nMethod.prototype.attachToObject = function (obj) {\n    var func = this.buildCall();\n    func.call = this.call; // TODO!!! that's ugly. filter.js uses it\n    var name = this.name.split('.');\n    if (name.length > 1) {\n        obj[name[0]] = obj[name[0]] || {};\n        obj[name[0]][name[1]] = func;\n    } else {\n        obj[name[0]] = func; \n    }\n};\n\nMethod.prototype.buildCall = function() {\n    var method = this;\n    var send = function () {\n        var payload = method.toPayload(Array.prototype.slice.call(arguments));\n        if (payload.callback) {\n            return method.requestManager.sendAsync(payload, function (err, result) {\n                payload.callback(err, method.formatOutput(result));\n            });\n        }\n        return method.formatOutput(method.requestManager.send(payload));\n    };\n    send.request = this.request.bind(this);\n    return send;\n};\n\n/**\n * Should be called to create pure JSONRPC request which can be used in batch request\n *\n * @method request\n * @param {...} params\n * @return {Object} jsonrpc request\n */\nMethod.prototype.request = function () {\n    var payload = this.toPayload(Array.prototype.slice.call(arguments));\n    payload.format = this.formatOutput.bind(this);\n    return payload;\n};\n\nmodule.exports = Method;\n\n\n},{\"../utils/utils\":20,\"./errors\":26}],37:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file db.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar Method = require('../method');\n\nvar DB = function (web3) {\n    this._requestManager = web3._requestManager;\n\n    var self = this;\n    \n    methods().forEach(function(method) { \n        method.attachToObject(self);\n        method.setRequestManager(web3._requestManager);\n    });\n};\n\nvar methods = function () {\n    var putString = new Method({\n        name: 'putString',\n        call: 'db_putString',\n        params: 3\n    });\n\n    var getString = new Method({\n        name: 'getString',\n        call: 'db_getString',\n        params: 2\n    });\n\n    var putHex = new Method({\n        name: 'putHex',\n        call: 'db_putHex',\n        params: 3\n    });\n\n    var getHex = new Method({\n        name: 'getHex',\n        call: 'db_getHex',\n        params: 2\n    });\n\n    return [\n        putString, getString, putHex, getHex\n    ];\n};\n\nmodule.exports = DB;\n\n},{\"../method\":36}],38:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file eth.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @author Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\n\"use strict\";\n\nvar formatters = require('../formatters');\nvar utils = require('../../utils/utils');\nvar Method = require('../method');\nvar Property = require('../property');\nvar c = require('../../utils/config');\nvar Contract = require('../contract');\nvar watches = require('./watches');\nvar Filter = require('../filter');\nvar IsSyncing = require('../syncing');\nvar namereg = require('../namereg');\nvar Iban = require('../iban');\nvar transfer = require('../transfer');\n\nvar blockCall = function (args) {\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";\n};\n\nvar transactionFromBlockCall = function (args) {\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';\n};\n\nvar uncleCall = function (args) {\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';\n};\n\nvar getBlockTransactionCountCall = function (args) {\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';\n};\n\nvar uncleCountCall = function (args) {\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';\n};\n\nfunction Eth(web3) {\n    this._requestManager = web3._requestManager;\n\n    var self = this;\n\n    methods().forEach(function(method) { \n        method.attachToObject(self);\n        method.setRequestManager(self._requestManager);\n    });\n\n    properties().forEach(function(p) { \n        p.attachToObject(self);\n        p.setRequestManager(self._requestManager);\n    });\n\n\n    this.iban = Iban;\n    this.sendIBANTransaction = transfer.bind(null, this);\n}\n\nObject.defineProperty(Eth.prototype, 'defaultBlock', {\n    get: function () {\n        return c.defaultBlock;\n    },\n    set: function (val) {\n        c.defaultBlock = val;\n        return val;\n    }\n});\n\nObject.defineProperty(Eth.prototype, 'defaultAccount', {\n    get: function () {\n        return c.defaultAccount;\n    },\n    set: function (val) {\n        c.defaultAccount = val;\n        return val;\n    }\n});\n\nvar methods = function () {\n    var getBalance = new Method({\n        name: 'getBalance',\n        call: 'eth_getBalance',\n        params: 2,\n        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],\n        outputFormatter: formatters.outputBigNumberFormatter\n    });\n\n    var getStorageAt = new Method({\n        name: 'getStorageAt',\n        call: 'eth_getStorageAt',\n        params: 3,\n        inputFormatter: [null, utils.toHex, formatters.inputDefaultBlockNumberFormatter]\n    });\n\n    var getCode = new Method({\n        name: 'getCode',\n        call: 'eth_getCode',\n        params: 2,\n        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    });\n\n    var getBlock = new Method({\n        name: 'getBlock',\n        call: blockCall,\n        params: 2,\n        inputFormatter: [formatters.inputBlockNumberFormatter, function (val) { return !!val; }],\n        outputFormatter: formatters.outputBlockFormatter\n    });\n\n    var getUncle = new Method({\n        name: 'getUncle',\n        call: uncleCall,\n        params: 2,\n        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],\n        outputFormatter: formatters.outputBlockFormatter,\n\n    });\n\n    var getCompilers = new Method({\n        name: 'getCompilers',\n        call: 'eth_getCompilers',\n        params: 0\n    });\n\n    var getBlockTransactionCount = new Method({\n        name: 'getBlockTransactionCount',\n        call: getBlockTransactionCountCall,\n        params: 1,\n        inputFormatter: [formatters.inputBlockNumberFormatter],\n        outputFormatter: utils.toDecimal\n    });\n\n    var getBlockUncleCount = new Method({\n        name: 'getBlockUncleCount',\n        call: uncleCountCall,\n        params: 1,\n        inputFormatter: [formatters.inputBlockNumberFormatter],\n        outputFormatter: utils.toDecimal\n    });\n\n    var getTransaction = new Method({\n        name: 'getTransaction',\n        call: 'eth_getTransactionByHash',\n        params: 1,\n        outputFormatter: formatters.outputTransactionFormatter\n    });\n\n    var getTransactionFromBlock = new Method({\n        name: 'getTransactionFromBlock',\n        call: transactionFromBlockCall,\n        params: 2,\n        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],\n        outputFormatter: formatters.outputTransactionFormatter\n    });\n\n    var getTransactionReceipt = new Method({\n        name: 'getTransactionReceipt',\n        call: 'eth_getTransactionReceipt',\n        params: 1,\n        outputFormatter: formatters.outputTransactionReceiptFormatter\n    });\n\n    var getTransactionCount = new Method({\n        name: 'getTransactionCount',\n        call: 'eth_getTransactionCount',\n        params: 2,\n        inputFormatter: [null, formatters.inputDefaultBlockNumberFormatter],\n        outputFormatter: utils.toDecimal\n    });\n\n    var sendRawTransaction = new Method({\n        name: 'sendRawTransaction',\n        call: 'eth_sendRawTransaction',\n        params: 1,\n        inputFormatter: [null]\n    });\n\n    var sendTransaction = new Method({\n        name: 'sendTransaction',\n        call: 'eth_sendTransaction',\n        params: 1,\n        inputFormatter: [formatters.inputTransactionFormatter]\n    });\n\n    var sign = new Method({\n        name: 'sign',\n        call: 'eth_sign',\n        params: 2,\n        inputFormatter: [formatters.inputAddressFormatter, null]\n    });\n\n    var call = new Method({\n        name: 'call',\n        call: 'eth_call',\n        params: 2,\n        inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]\n    });\n\n    var estimateGas = new Method({\n        name: 'estimateGas',\n        call: 'eth_estimateGas',\n        params: 1,\n        inputFormatter: [formatters.inputCallFormatter],\n        outputFormatter: utils.toDecimal\n    });\n\n    var compileSolidity = new Method({\n        name: 'compile.solidity',\n        call: 'eth_compileSolidity',\n        params: 1\n    });\n\n    var compileLLL = new Method({\n        name: 'compile.lll',\n        call: 'eth_compileLLL',\n        params: 1\n    });\n\n    var compileSerpent = new Method({\n        name: 'compile.serpent',\n        call: 'eth_compileSerpent',\n        params: 1\n    });\n\n    var submitWork = new Method({\n        name: 'submitWork',\n        call: 'eth_submitWork',\n        params: 3\n    });\n\n    var getWork = new Method({\n        name: 'getWork',\n        call: 'eth_getWork',\n        params: 0\n    });\n\n    return [\n        getBalance,\n        getStorageAt,\n        getCode,\n        getBlock,\n        getUncle,\n        getCompilers,\n        getBlockTransactionCount,\n        getBlockUncleCount,\n        getTransaction,\n        getTransactionFromBlock,\n        getTransactionReceipt,\n        getTransactionCount,\n        call,\n        estimateGas,\n        sendRawTransaction,\n        sendTransaction,\n        sign,\n        compileSolidity,\n        compileLLL,\n        compileSerpent,\n        submitWork,\n        getWork\n    ];\n};\n\n\nvar properties = function () {\n    return [\n        new Property({\n            name: 'coinbase',\n            getter: 'eth_coinbase'\n        }),\n        new Property({\n            name: 'mining',\n            getter: 'eth_mining'\n        }),\n        new Property({\n            name: 'hashrate',\n            getter: 'eth_hashrate',\n            outputFormatter: utils.toDecimal\n        }),\n        new Property({\n            name: 'syncing',\n            getter: 'eth_syncing',\n            outputFormatter: formatters.outputSyncingFormatter\n        }),\n        new Property({\n            name: 'gasPrice',\n            getter: 'eth_gasPrice',\n            outputFormatter: formatters.outputBigNumberFormatter\n        }),\n        new Property({\n            name: 'accounts',\n            getter: 'eth_accounts'\n        }),\n        new Property({\n            name: 'blockNumber',\n            getter: 'eth_blockNumber',\n            outputFormatter: utils.toDecimal\n        })\n    ];\n};\n\nEth.prototype.contract = function (abi) {\n    var factory = new Contract(this, abi);\n    return factory;\n};\n\nEth.prototype.filter = function (fil, callback) {\n    return new Filter(this._requestManager, fil, watches.eth(), formatters.outputLogFormatter, callback);\n};\n\nEth.prototype.namereg = function () {\n    return this.contract(namereg.global.abi).at(namereg.global.address);\n};\n\nEth.prototype.icapNamereg = function () {\n    return this.contract(namereg.icap.abi).at(namereg.icap.address);\n};\n\nEth.prototype.isSyncing = function (callback) {\n    return new IsSyncing(this._requestManager, callback);\n};\n\nmodule.exports = Eth;\n\n\n},{\"../../utils/config\":18,\"../../utils/utils\":20,\"../contract\":25,\"../filter\":29,\"../formatters\":30,\"../iban\":33,\"../method\":36,\"../namereg\":42,\"../property\":43,\"../syncing\":46,\"../transfer\":47,\"./watches\":41}],39:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file eth.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar utils = require('../../utils/utils');\nvar Property = require('../property');\n\nvar Net = function (web3) {\n    this._requestManager = web3._requestManager;\n\n    var self = this;\n\n    properties().forEach(function(p) { \n        p.attachToObject(self);\n        p.setRequestManager(web3._requestManager);\n    });\n};\n\n/// @returns an array of objects describing web3.eth api properties\nvar properties = function () {\n    return [\n        new Property({\n            name: 'listening',\n            getter: 'net_listening'\n        }),\n        new Property({\n            name: 'peerCount',\n            getter: 'net_peerCount',\n            outputFormatter: utils.toDecimal\n        })\n    ];\n};\n\nmodule.exports = Net;\n\n},{\"../../utils/utils\":20,\"../property\":43}],40:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file shh.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar Method = require('../method');\nvar formatters = require('../formatters');\nvar Filter = require('../filter');\nvar watches = require('./watches');\n\nvar Shh = function (web3) {\n    this._requestManager = web3._requestManager;\n\n    var self = this;\n\n    methods().forEach(function(method) { \n        method.attachToObject(self);\n        method.setRequestManager(self._requestManager);\n    });\n};\n\nShh.prototype.filter = function (fil, callback) {\n    return new Filter(this._requestManager, fil, watches.shh(), formatters.outputPostFormatter, callback);\n};\n\nvar methods = function () { \n\n    var post = new Method({\n        name: 'post', \n        call: 'shh_post', \n        params: 1,\n        inputFormatter: [formatters.inputPostFormatter]\n    });\n\n    var newIdentity = new Method({\n        name: 'newIdentity',\n        call: 'shh_newIdentity',\n        params: 0\n    });\n\n    var hasIdentity = new Method({\n        name: 'hasIdentity',\n        call: 'shh_hasIdentity',\n        params: 1\n    });\n\n    var newGroup = new Method({\n        name: 'newGroup',\n        call: 'shh_newGroup',\n        params: 0\n    });\n\n    var addToGroup = new Method({\n        name: 'addToGroup',\n        call: 'shh_addToGroup',\n        params: 0\n    });\n\n    return [\n        post,\n        newIdentity,\n        hasIdentity,\n        newGroup,\n        addToGroup\n    ];\n};\n\nmodule.exports = Shh;\n\n\n},{\"../filter\":29,\"../formatters\":30,\"../method\":36,\"./watches\":41}],41:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file watches.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar Method = require('../method');\n\n/// @returns an array of objects describing web3.eth.filter api methods\nvar eth = function () {\n    var newFilterCall = function (args) {\n        var type = args[0];\n\n        switch(type) {\n            case 'latest':\n                args.shift();\n                this.params = 0;\n                return 'eth_newBlockFilter';\n            case 'pending':\n                args.shift();\n                this.params = 0;\n                return 'eth_newPendingTransactionFilter';\n            default:\n                return 'eth_newFilter';\n        }\n    };\n\n    var newFilter = new Method({\n        name: 'newFilter',\n        call: newFilterCall,\n        params: 1\n    });\n\n    var uninstallFilter = new Method({\n        name: 'uninstallFilter',\n        call: 'eth_uninstallFilter',\n        params: 1\n    });\n\n    var getLogs = new Method({\n        name: 'getLogs',\n        call: 'eth_getFilterLogs',\n        params: 1\n    });\n\n    var poll = new Method({\n        name: 'poll',\n        call: 'eth_getFilterChanges',\n        params: 1\n    });\n\n    return [\n        newFilter,\n        uninstallFilter,\n        getLogs,\n        poll\n    ];\n};\n\n/// @returns an array of objects describing web3.shh.watch api methods\nvar shh = function () {\n    var newFilter = new Method({\n        name: 'newFilter',\n        call: 'shh_newFilter',\n        params: 1\n    });\n\n    var uninstallFilter = new Method({\n        name: 'uninstallFilter',\n        call: 'shh_uninstallFilter',\n        params: 1\n    });\n\n    var getLogs = new Method({\n        name: 'getLogs',\n        call: 'shh_getMessages',\n        params: 1\n    });\n\n    var poll = new Method({\n        name: 'poll',\n        call: 'shh_getFilterChanges',\n        params: 1\n    });\n\n    return [\n        newFilter,\n        uninstallFilter,\n        getLogs,\n        poll\n    ];\n};\n\nmodule.exports = {\n    eth: eth,\n    shh: shh\n};\n\n\n},{\"../method\":36}],42:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file namereg.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar globalRegistrarAbi = require('../contracts/GlobalRegistrar.json');\nvar icapRegistrarAbi= require('../contracts/ICAPRegistrar.json');\n\nvar globalNameregAddress = '0xc6d9d2cd449a754c494264e1809c50e34d64562b';\nvar icapNameregAddress = '0xa1a111bc074c9cfa781f0c38e63bd51c91b8af00';\n\nmodule.exports = {\n    global: {\n        abi: globalRegistrarAbi,\n        address: globalNameregAddress\n    },\n    icap: {\n        abi: icapRegistrarAbi,\n        address: icapNameregAddress\n    }\n};\n\n\n},{\"../contracts/GlobalRegistrar.json\":1,\"../contracts/ICAPRegistrar.json\":2}],43:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file property.js\n * @author Fabian Vogelsteller <fabian@frozeman.de>\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar utils = require('../utils/utils');\n\nvar Property = function (options) {\n    this.name = options.name;\n    this.getter = options.getter;\n    this.setter = options.setter;\n    this.outputFormatter = options.outputFormatter;\n    this.inputFormatter = options.inputFormatter;\n    this.requestManager = null;\n};\n\nProperty.prototype.setRequestManager = function (rm) {\n    this.requestManager = rm;\n};\n\n/**\n * Should be called to format input args of method\n * \n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nProperty.prototype.formatInput = function (arg) {\n    return this.inputFormatter ? this.inputFormatter(arg) : arg;\n};\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nProperty.prototype.formatOutput = function (result) {\n    return this.outputFormatter && result !== null ? this.outputFormatter(result) : result;\n};\n\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nProperty.prototype.extractCallback = function (args) {\n    if (utils.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\n\n/**\n * Should attach function to method\n * \n * @method attachToObject\n * @param {Object}\n * @param {Function}\n */\nProperty.prototype.attachToObject = function (obj) {\n    var proto = {\n        get: this.buildGet(),\n        enumerable: true \n    };\n\n    var names = this.name.split('.');\n    var name = names[0];\n    if (names.length > 1) {\n        obj[names[0]] = obj[names[0]] || {};\n        obj = obj[names[0]];\n        name = names[1];\n    }\n\n    Object.defineProperty(obj, name, proto);\n    obj[asyncGetterName(name)] = this.buildAsyncGet();\n};\n\nvar asyncGetterName = function (name) {\n    return 'get' + name.charAt(0).toUpperCase() + name.slice(1);\n};\n\nProperty.prototype.buildGet = function () {\n    var property = this;\n    return function get() {\n        return property.formatOutput(property.requestManager.send({\n            method: property.getter\n        })); \n    };\n};\n\nProperty.prototype.buildAsyncGet = function () {\n    var property = this;\n    var get = function (callback) {\n        property.requestManager.sendAsync({\n            method: property.getter\n        }, function (err, result) {\n            callback(err, property.formatOutput(result));\n        });\n    };\n    get.request = this.request.bind(this);\n    return get;\n};\n\n/**\n * Should be called to create pure JSONRPC request which can be used in batch request\n *\n * @method request\n * @param {...} params\n * @return {Object} jsonrpc request\n */\nProperty.prototype.request = function () {\n    var payload = {\n        method: this.getter,\n        params: [],\n        callback: this.extractCallback(Array.prototype.slice.call(arguments))\n    };\n    payload.format = this.formatOutput.bind(this);\n    return payload;\n};\n\nmodule.exports = Property;\n\n\n},{\"../utils/utils\":20}],44:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file requestmanager.js\n * @author Jeffrey Wilcke <jeff@ethdev.com>\n * @author Marek Kotewicz <marek@ethdev.com>\n * @author Marian Oancea <marian@ethdev.com>\n * @author Fabian Vogelsteller <fabian@ethdev.com>\n * @author Gav Wood <g@ethdev.com>\n * @date 2014\n */\n\nvar Jsonrpc = require('./jsonrpc');\nvar utils = require('../utils/utils');\nvar c = require('../utils/config');\nvar errors = require('./errors');\n\n/**\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n * Singleton\n */\nvar RequestManager = function (provider) {\n    this.provider = provider;\n    this.polls = {};\n    this.timeout = null;\n};\n\n/**\n * Should be used to synchronously send request\n *\n * @method send\n * @param {Object} data\n * @return {Object}\n */\nRequestManager.prototype.send = function (data) {\n    if (!this.provider) {\n        console.error(errors.InvalidProvider());\n        return null;\n    }\n\n    var payload = Jsonrpc.getInstance().toPayload(data.method, data.params);\n    var result = this.provider.send(payload);\n\n    if (!Jsonrpc.getInstance().isValidResponse(result)) {\n        throw errors.InvalidResponse(result);\n    }\n\n    return result.result;\n};\n\n/**\n * Should be used to asynchronously send request\n *\n * @method sendAsync\n * @param {Object} data\n * @param {Function} callback\n */\nRequestManager.prototype.sendAsync = function (data, callback) {\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n\n    var payload = Jsonrpc.getInstance().toPayload(data.method, data.params);\n    this.provider.sendAsync(payload, function (err, result) {\n        if (err) {\n            return callback(err);\n        }\n        \n        if (!Jsonrpc.getInstance().isValidResponse(result)) {\n            return callback(errors.InvalidResponse(result));\n        }\n\n        callback(null, result.result);\n    });\n};\n\n/**\n * Should be called to asynchronously send batch request\n *\n * @method sendBatch\n * @param {Array} batch data\n * @param {Function} callback\n */\nRequestManager.prototype.sendBatch = function (data, callback) {\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n\n    var payload = Jsonrpc.getInstance().toBatchPayload(data);\n\n    this.provider.sendAsync(payload, function (err, results) {\n        if (err) {\n            return callback(err);\n        }\n\n        if (!utils.isArray(results)) {\n            return callback(errors.InvalidResponse(results));\n        }\n\n        callback(err, results);\n    }); \n};\n\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n * @param {Object}\n */\nRequestManager.prototype.setProvider = function (p) {\n    this.provider = p;\n};\n\n/**\n * Should be used to start polling\n *\n * @method startPolling\n * @param {Object} data\n * @param {Number} pollId\n * @param {Function} callback\n * @param {Function} uninstall\n *\n * @todo cleanup number of params\n */\nRequestManager.prototype.startPolling = function (data, pollId, callback, uninstall) {\n    this.polls[pollId] = {data: data, id: pollId, callback: callback, uninstall: uninstall};\n\n\n    // start polling\n    if (!this.timeout) {\n        this.poll();\n    }\n};\n\n/**\n * Should be used to stop polling for filter with given id\n *\n * @method stopPolling\n * @param {Number} pollId\n */\nRequestManager.prototype.stopPolling = function (pollId) {\n    delete this.polls[pollId];\n\n    // stop polling\n    if(Object.keys(this.polls).length === 0 && this.timeout) {\n        clearTimeout(this.timeout);\n        this.timeout = null;\n    }\n};\n\n/**\n * Should be called to reset the polling mechanism of the request manager\n *\n * @method reset\n */\nRequestManager.prototype.reset = function (keepIsSyncing) {\n    /*jshint maxcomplexity:5 */\n\n    for (var key in this.polls) {\n        // remove all polls, except sync polls,\n        // they need to be removed manually by calling syncing.stopWatching()\n        if(!keepIsSyncing || key.indexOf('syncPoll_') === -1) {\n            this.polls[key].uninstall();\n            delete this.polls[key];\n        }\n    }\n\n    // stop polling\n    if(Object.keys(this.polls).length === 0 && this.timeout) {\n        clearTimeout(this.timeout);\n        this.timeout = null;\n    }\n};\n\n/**\n * Should be called to poll for changes on filter with given id\n *\n * @method poll\n */\nRequestManager.prototype.poll = function () {\n    /*jshint maxcomplexity: 6 */\n    this.timeout = setTimeout(this.poll.bind(this), c.ETH_POLLING_TIMEOUT);\n\n    if (Object.keys(this.polls).length === 0) {\n        return;\n    }\n\n    if (!this.provider) {\n        console.error(errors.InvalidProvider());\n        return;\n    }\n\n    var pollsData = [];\n    var pollsIds = [];\n    for (var key in this.polls) {\n        pollsData.push(this.polls[key].data);\n        pollsIds.push(key);\n    }\n\n    if (pollsData.length === 0) {\n        return;\n    }\n\n    var payload = Jsonrpc.getInstance().toBatchPayload(pollsData);\n    \n    // map the request id to they poll id\n    var pollsIdMap = {};\n    payload.forEach(function(load, index){\n        pollsIdMap[load.id] = pollsIds[index];\n    });\n\n\n    var self = this;\n    this.provider.sendAsync(payload, function (error, results) {\n\n\n        // TODO: console log?\n        if (error) {\n            return;\n        }\n\n        if (!utils.isArray(results)) {\n            throw errors.InvalidResponse(results);\n        }\n        results.map(function (result) {\n            var id = pollsIdMap[result.id];\n\n            // make sure the filter is still installed after arrival of the request\n            if (self.polls[id]) {\n                result.callback = self.polls[id].callback;\n                return result;\n            } else\n                return false;\n        }).filter(function (result) {\n            return !!result; \n        }).filter(function (result) {\n            var valid = Jsonrpc.getInstance().isValidResponse(result);\n            if (!valid) {\n                result.callback(errors.InvalidResponse(result));\n            }\n            return valid;\n        }).forEach(function (result) {\n            result.callback(null, result.result);\n        });\n    });\n};\n\nmodule.exports = RequestManager;\n\n\n},{\"../utils/config\":18,\"../utils/utils\":20,\"./errors\":26,\"./jsonrpc\":35}],45:[function(require,module,exports){\n\n\nvar Settings = function () {\n    this.defaultBlock = 'latest';\n    this.defaultAccount = undefined;\n};\n\nmodule.exports = Settings;\n\n\n},{}],46:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file syncing.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\nvar formatters = require('./formatters');\nvar utils = require('../utils/utils');\n\nvar count = 1;\n\n/**\nAdds the callback and sets up the methods, to iterate over the results.\n\n@method pollSyncing\n@param {Object} self\n*/\nvar pollSyncing = function(self) {\n\n    var onMessage = function (error, sync) {\n        if (error) {\n            return self.callbacks.forEach(function (callback) {\n                callback(error);\n            });\n        }\n\n        if(utils.isObject(sync) && sync.startingBlock)\n            sync = formatters.outputSyncingFormatter(sync);\n\n        self.callbacks.forEach(function (callback) {\n            if (self.lastSyncState !== sync) {\n                \n                // call the callback with true first so the app can stop anything, before receiving the sync data\n                if(!self.lastSyncState && utils.isObject(sync))\n                    callback(null, true);\n                \n                // call on the next CPU cycle, so the actions of the sync stop can be processes first\n                setTimeout(function() {\n                    callback(null, sync);\n                }, 0);\n                \n                self.lastSyncState = sync;\n            }\n        });\n    };\n\n    self.requestManager.startPolling({\n        method: 'eth_syncing',\n        params: [],\n    }, self.pollId, onMessage, self.stopWatching.bind(self));\n\n};\n\nvar IsSyncing = function (requestManager, callback) {\n    this.requestManager = requestManager;\n    this.pollId = 'syncPoll_'+ count++;\n    this.callbacks = [];\n    this.addCallback(callback);\n    this.lastSyncState = false;\n    pollSyncing(this);\n\n    return this;\n};\n\nIsSyncing.prototype.addCallback = function (callback) {\n    if(callback)\n        this.callbacks.push(callback);\n    return this;\n};\n\nIsSyncing.prototype.stopWatching = function () {\n    this.requestManager.stopPolling(this.pollId);\n    this.callbacks = [];\n};\n\nmodule.exports = IsSyncing;\n\n\n},{\"../utils/utils\":20,\"./formatters\":30}],47:[function(require,module,exports){\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file transfer.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar Iban = require('./iban');\nvar exchangeAbi = require('../contracts/SmartExchange.json');\n\n/**\n * Should be used to make Iban transfer\n *\n * @method transfer\n * @param {String} from\n * @param {String} to iban\n * @param {Value} value to be tranfered\n * @param {Function} callback, callback\n */\nvar transfer = function (eth, from, to, value, callback) {\n    var iban = new Iban(to); \n    if (!iban.isValid()) {\n        throw new Error('invalid iban address');\n    }\n\n    if (iban.isDirect()) {\n        return transferToAddress(eth, from, iban.address(), value, callback);\n    }\n    \n    if (!callback) {\n        var address = eth.icapNamereg().addr(iban.institution());\n        return deposit(eth, from, address, value, iban.client());\n    }\n\n    eth.icapNamereg().addr(iban.institution(), function (err, address) {\n        return deposit(eth, from, address, value, iban.client(), callback);\n    });\n    \n};\n\n/**\n * Should be used to transfer funds to certain address\n *\n * @method transferToAddress\n * @param {String} from\n * @param {String} to\n * @param {Value} value to be tranfered\n * @param {Function} callback, callback\n */\nvar transferToAddress = function (eth, from, to, value, callback) {\n    return eth.sendTransaction({\n        address: to,\n        from: from,\n        value: value\n    }, callback);\n};\n\n/**\n * Should be used to deposit funds to generic Exchange contract (must implement deposit(bytes32) method!)\n *\n * @method deposit\n * @param {String} from\n * @param {String} to\n * @param {Value} value to be transfered\n * @param {String} client unique identifier\n * @param {Function} callback, callback\n */\nvar deposit = function (eth, from, to, value, client, callback) {\n    var abi = exchangeAbi;\n    return eth.contract(abi).at(to).deposit(client, {\n        from: from,\n        value: value\n    }, callback);\n};\n\nmodule.exports = transfer;\n\n\n},{\"../contracts/SmartExchange.json\":3,\"./iban\":33}],48:[function(require,module,exports){\n\n},{}],49:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var BlockCipher = C_lib.BlockCipher;\n\t    var C_algo = C.algo;\n\n\t    // Lookup tables\n\t    var SBOX = [];\n\t    var INV_SBOX = [];\n\t    var SUB_MIX_0 = [];\n\t    var SUB_MIX_1 = [];\n\t    var SUB_MIX_2 = [];\n\t    var SUB_MIX_3 = [];\n\t    var INV_SUB_MIX_0 = [];\n\t    var INV_SUB_MIX_1 = [];\n\t    var INV_SUB_MIX_2 = [];\n\t    var INV_SUB_MIX_3 = [];\n\n\t    // Compute lookup tables\n\t    (function () {\n\t        // Compute double table\n\t        var d = [];\n\t        for (var i = 0; i < 256; i++) {\n\t            if (i < 128) {\n\t                d[i] = i << 1;\n\t            } else {\n\t                d[i] = (i << 1) ^ 0x11b;\n\t            }\n\t        }\n\n\t        // Walk GF(2^8)\n\t        var x = 0;\n\t        var xi = 0;\n\t        for (var i = 0; i < 256; i++) {\n\t            // Compute sbox\n\t            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n\t            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n\t            SBOX[x] = sx;\n\t            INV_SBOX[sx] = x;\n\n\t            // Compute multiplication\n\t            var x2 = d[x];\n\t            var x4 = d[x2];\n\t            var x8 = d[x4];\n\n\t            // Compute sub bytes, mix columns tables\n\t            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n\t            SUB_MIX_0[x] = (t << 24) | (t >>> 8);\n\t            SUB_MIX_1[x] = (t << 16) | (t >>> 16);\n\t            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);\n\t            SUB_MIX_3[x] = t;\n\n\t            // Compute inv sub bytes, inv mix columns tables\n\t            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n\t            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\n\t            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\n\t            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);\n\t            INV_SUB_MIX_3[sx] = t;\n\n\t            // Compute next counter\n\t            if (!x) {\n\t                x = xi = 1;\n\t            } else {\n\t                x = x2 ^ d[d[d[x8 ^ x2]]];\n\t                xi ^= d[d[xi]];\n\t            }\n\t        }\n\t    }());\n\n\t    // Precomputed Rcon lookup\n\t    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n\t    /**\n\t     * AES block cipher algorithm.\n\t     */\n\t    var AES = C_algo.AES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\t            var keySize = key.sigBytes / 4;\n\n\t            // Compute number of rounds\n\t            var nRounds = this._nRounds = keySize + 6\n\n\t            // Compute number of key schedule rows\n\t            var ksRows = (nRounds + 1) * 4;\n\n\t            // Compute key schedule\n\t            var keySchedule = this._keySchedule = [];\n\t            for (var ksRow = 0; ksRow < ksRows; ksRow++) {\n\t                if (ksRow < keySize) {\n\t                    keySchedule[ksRow] = keyWords[ksRow];\n\t                } else {\n\t                    var t = keySchedule[ksRow - 1];\n\n\t                    if (!(ksRow % keySize)) {\n\t                        // Rot word\n\t                        t = (t << 8) | (t >>> 24);\n\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\n\t                        // Mix Rcon\n\t                        t ^= RCON[(ksRow / keySize) | 0] << 24;\n\t                    } else if (keySize > 6 && ksRow % keySize == 4) {\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\t                    }\n\n\t                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n\t                }\n\t            }\n\n\t            // Compute inv key schedule\n\t            var invKeySchedule = this._invKeySchedule = [];\n\t            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n\t                var ksRow = ksRows - invKsRow;\n\n\t                if (invKsRow % 4) {\n\t                    var t = keySchedule[ksRow];\n\t                } else {\n\t                    var t = keySchedule[ksRow - 4];\n\t                }\n\n\t                if (invKsRow < 4 || ksRow <= 4) {\n\t                    invKeySchedule[invKsRow] = t;\n\t                } else {\n\t                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\n\t                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n\t                }\n\t            }\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            // Swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\n\t            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n\n\t            // Inv swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\t        },\n\n\t        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n\t            // Shortcut\n\t            var nRounds = this._nRounds;\n\n\t            // Get input, add round key\n\t            var s0 = M[offset]     ^ keySchedule[0];\n\t            var s1 = M[offset + 1] ^ keySchedule[1];\n\t            var s2 = M[offset + 2] ^ keySchedule[2];\n\t            var s3 = M[offset + 3] ^ keySchedule[3];\n\n\t            // Key schedule row counter\n\t            var ksRow = 4;\n\n\t            // Rounds\n\t            for (var round = 1; round < nRounds; round++) {\n\t                // Shift rows, sub bytes, mix columns, add round key\n\t                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];\n\t                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];\n\t                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];\n\t                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];\n\n\t                // Update state\n\t                s0 = t0;\n\t                s1 = t1;\n\t                s2 = t2;\n\t                s3 = t3;\n\t            }\n\n\t            // Shift rows, sub bytes, add round key\n\t            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n\n\t            // Set output\n\t            M[offset]     = t0;\n\t            M[offset + 1] = t1;\n\t            M[offset + 2] = t2;\n\t            M[offset + 3] = t3;\n\t        },\n\n\t        keySize: 256/32\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.AES = BlockCipher._createHelper(AES);\n\t}());\n\n\n\treturn CryptoJS.AES;\n\n}));\n},{\"./cipher-core\":50,\"./core\":51,\"./enc-base64\":52,\"./evpkdf\":54,\"./md5\":59}],50:[function(require,module,exports){\n;(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher core components.\n\t */\n\tCryptoJS.lib.Cipher || (function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var Base64 = C_enc.Base64;\n\t    var C_algo = C.algo;\n\t    var EvpKDF = C_algo.EvpKDF;\n\n\t    /**\n\t     * Abstract base cipher template.\n\t     *\n\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n\t     */\n\t    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {WordArray} iv The IV to use for this operation.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Creates this cipher in encryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createEncryptor: function (key, cfg) {\n\t            return this.create(this._ENC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Creates this cipher in decryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createDecryptor: function (key, cfg) {\n\t            return this.create(this._DEC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created cipher.\n\t         *\n\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n\t         */\n\t        init: function (xformMode, key, cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Store transform mode and key\n\t            this._xformMode = xformMode;\n\t            this._key = key;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this cipher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     cipher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-cipher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Adds data to be encrypted or decrypted.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.process('data');\n\t         *     var encrypted = cipher.process(wordArray);\n\t         */\n\t        process: function (dataUpdate) {\n\t            // Append\n\t            this._append(dataUpdate);\n\n\t            // Process available blocks\n\t            return this._process();\n\t        },\n\n\t        /**\n\t         * Finalizes the encryption or decryption process.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after final processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.finalize();\n\t         *     var encrypted = cipher.finalize('data');\n\t         *     var encrypted = cipher.finalize(wordArray);\n\t         */\n\t        finalize: function (dataUpdate) {\n\t            // Final data update\n\t            if (dataUpdate) {\n\t                this._append(dataUpdate);\n\t            }\n\n\t            // Perform concrete-cipher logic\n\t            var finalProcessedData = this._doFinalize();\n\n\t            return finalProcessedData;\n\t        },\n\n\t        keySize: 128/32,\n\n\t        ivSize: 128/32,\n\n\t        _ENC_XFORM_MODE: 1,\n\n\t        _DEC_XFORM_MODE: 2,\n\n\t        /**\n\t         * Creates shortcut functions to a cipher's object interface.\n\t         *\n\t         * @param {Cipher} cipher The cipher to create a helper for.\n\t         *\n\t         * @return {Object} An object with encrypt and decrypt shortcut functions.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n\t         */\n\t        _createHelper: (function () {\n\t            function selectCipherStrategy(key) {\n\t                if (typeof key == 'string') {\n\t                    return PasswordBasedCipher;\n\t                } else {\n\t                    return SerializableCipher;\n\t                }\n\t            }\n\n\t            return function (cipher) {\n\t                return {\n\t                    encrypt: function (message, key, cfg) {\n\t                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n\t                    },\n\n\t                    decrypt: function (ciphertext, key, cfg) {\n\t                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n\t                    }\n\t                };\n\t            };\n\t        }())\n\t    });\n\n\t    /**\n\t     * Abstract base stream cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n\t     */\n\t    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n\t        _doFinalize: function () {\n\t            // Process partial blocks\n\t            var finalProcessedBlocks = this._process(!!'flush');\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 1\n\t    });\n\n\t    /**\n\t     * Mode namespace.\n\t     */\n\t    var C_mode = C.mode = {};\n\n\t    /**\n\t     * Abstract base block cipher mode template.\n\t     */\n\t    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n\t        /**\n\t         * Creates this mode for encryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n\t         */\n\t        createEncryptor: function (cipher, iv) {\n\t            return this.Encryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Creates this mode for decryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n\t         */\n\t        createDecryptor: function (cipher, iv) {\n\t            return this.Decryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created mode.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n\t         */\n\t        init: function (cipher, iv) {\n\t            this._cipher = cipher;\n\t            this._iv = iv;\n\t        }\n\t    });\n\n\t    /**\n\t     * Cipher Block Chaining mode.\n\t     */\n\t    var CBC = C_mode.CBC = (function () {\n\t        /**\n\t         * Abstract base CBC mode.\n\t         */\n\t        var CBC = BlockCipherMode.extend();\n\n\t        /**\n\t         * CBC encryptor.\n\t         */\n\t        CBC.Encryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // XOR and encrypt\n\t                xorBlock.call(this, words, offset, blockSize);\n\t                cipher.encryptBlock(words, offset);\n\n\t                // Remember this block to use with next block\n\t                this._prevBlock = words.slice(offset, offset + blockSize);\n\t            }\n\t        });\n\n\t        /**\n\t         * CBC decryptor.\n\t         */\n\t        CBC.Decryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // Remember this block to use with next block\n\t                var thisBlock = words.slice(offset, offset + blockSize);\n\n\t                // Decrypt and XOR\n\t                cipher.decryptBlock(words, offset);\n\t                xorBlock.call(this, words, offset, blockSize);\n\n\t                // This block becomes the previous block\n\t                this._prevBlock = thisBlock;\n\t            }\n\t        });\n\n\t        function xorBlock(words, offset, blockSize) {\n\t            // Shortcut\n\t            var iv = this._iv;\n\n\t            // Choose mixing block\n\t            if (iv) {\n\t                var block = iv;\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            } else {\n\t                var block = this._prevBlock;\n\t            }\n\n\t            // XOR blocks\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= block[i];\n\t            }\n\t        }\n\n\t        return CBC;\n\t    }());\n\n\t    /**\n\t     * Padding namespace.\n\t     */\n\t    var C_pad = C.pad = {};\n\n\t    /**\n\t     * PKCS #5/7 padding strategy.\n\t     */\n\t    var Pkcs7 = C_pad.Pkcs7 = {\n\t        /**\n\t         * Pads data using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to pad.\n\t         * @param {number} blockSize The multiple that the data should be padded to.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n\t         */\n\t        pad: function (data, blockSize) {\n\t            // Shortcut\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count padding bytes\n\t            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t            // Create padding word\n\t            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\n\n\t            // Create padding\n\t            var paddingWords = [];\n\t            for (var i = 0; i < nPaddingBytes; i += 4) {\n\t                paddingWords.push(paddingWord);\n\t            }\n\t            var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n\t            // Add padding\n\t            data.concat(padding);\n\t        },\n\n\t        /**\n\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to unpad.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n\t         */\n\t        unpad: function (data) {\n\t            // Get number of padding bytes from last byte\n\t            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t            // Remove padding\n\t            data.sigBytes -= nPaddingBytes;\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract base block cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n\t     */\n\t    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Mode} mode The block mode to use. Default: CBC\n\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n\t         */\n\t        cfg: Cipher.cfg.extend({\n\t            mode: CBC,\n\t            padding: Pkcs7\n\t        }),\n\n\t        reset: function () {\n\t            // Reset cipher\n\t            Cipher.reset.call(this);\n\n\t            // Shortcuts\n\t            var cfg = this.cfg;\n\t            var iv = cfg.iv;\n\t            var mode = cfg.mode;\n\n\t            // Reset block mode\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                var modeCreator = mode.createEncryptor;\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                var modeCreator = mode.createDecryptor;\n\n\t                // Keep at least one block in the buffer for unpadding\n\t                this._minBufferSize = 1;\n\t            }\n\t            this._mode = modeCreator.call(mode, this, iv && iv.words);\n\t        },\n\n\t        _doProcessBlock: function (words, offset) {\n\t            this._mode.processBlock(words, offset);\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcut\n\t            var padding = this.cfg.padding;\n\n\t            // Finalize\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                // Pad data\n\t                padding.pad(this._data, this.blockSize);\n\n\t                // Process final blocks\n\t                var finalProcessedBlocks = this._process(!!'flush');\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                // Process final blocks\n\t                var finalProcessedBlocks = this._process(!!'flush');\n\n\t                // Unpad data\n\t                padding.unpad(finalProcessedBlocks);\n\t            }\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 128/32\n\t    });\n\n\t    /**\n\t     * A collection of cipher parameters.\n\t     *\n\t     * @property {WordArray} ciphertext The raw ciphertext.\n\t     * @property {WordArray} key The key to this ciphertext.\n\t     * @property {WordArray} iv The IV used in the ciphering operation.\n\t     * @property {WordArray} salt The salt used with a key derivation function.\n\t     * @property {Cipher} algorithm The cipher algorithm.\n\t     * @property {Mode} mode The block mode used in the ciphering operation.\n\t     * @property {Padding} padding The padding scheme used in the ciphering operation.\n\t     * @property {number} blockSize The block size of the cipher.\n\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n\t     */\n\t    var CipherParams = C_lib.CipherParams = Base.extend({\n\t        /**\n\t         * Initializes a newly created cipher params object.\n\t         *\n\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({\n\t         *         ciphertext: ciphertextWordArray,\n\t         *         key: keyWordArray,\n\t         *         iv: ivWordArray,\n\t         *         salt: saltWordArray,\n\t         *         algorithm: CryptoJS.algo.AES,\n\t         *         mode: CryptoJS.mode.CBC,\n\t         *         padding: CryptoJS.pad.PKCS7,\n\t         *         blockSize: 4,\n\t         *         formatter: CryptoJS.format.OpenSSL\n\t         *     });\n\t         */\n\t        init: function (cipherParams) {\n\t            this.mixIn(cipherParams);\n\t        },\n\n\t        /**\n\t         * Converts this cipher params object to a string.\n\t         *\n\t         * @param {Format} formatter (Optional) The formatting strategy to use.\n\t         *\n\t         * @return {string} The stringified cipher params.\n\t         *\n\t         * @throws Error If neither the formatter nor the default formatter is set.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = cipherParams + '';\n\t         *     var string = cipherParams.toString();\n\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n\t         */\n\t        toString: function (formatter) {\n\t            return (formatter || this.formatter).stringify(this);\n\t        }\n\t    });\n\n\t    /**\n\t     * Format namespace.\n\t     */\n\t    var C_format = C.format = {};\n\n\t    /**\n\t     * OpenSSL formatting strategy.\n\t     */\n\t    var OpenSSLFormatter = C_format.OpenSSL = {\n\t        /**\n\t         * Converts a cipher params object to an OpenSSL-compatible string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The OpenSSL-compatible string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n\t         */\n\t        stringify: function (cipherParams) {\n\t            // Shortcuts\n\t            var ciphertext = cipherParams.ciphertext;\n\t            var salt = cipherParams.salt;\n\n\t            // Format\n\t            if (salt) {\n\t                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n\t            } else {\n\t                var wordArray = ciphertext;\n\t            }\n\n\t            return wordArray.toString(Base64);\n\t        },\n\n\t        /**\n\t         * Converts an OpenSSL-compatible string to a cipher params object.\n\t         *\n\t         * @param {string} openSSLStr The OpenSSL-compatible string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n\t         */\n\t        parse: function (openSSLStr) {\n\t            // Parse base64\n\t            var ciphertext = Base64.parse(openSSLStr);\n\n\t            // Shortcut\n\t            var ciphertextWords = ciphertext.words;\n\n\t            // Test for salt\n\t            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n\t                // Extract salt\n\t                var salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n\t                // Remove salt from ciphertext\n\t                ciphertextWords.splice(0, 4);\n\t                ciphertext.sigBytes -= 16;\n\t            }\n\n\t            return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n\t         */\n\t        cfg: Base.extend({\n\t            format: OpenSSLFormatter\n\t        }),\n\n\t        /**\n\t         * Encrypts a message.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Encrypt\n\t            var encryptor = cipher.createEncryptor(key, cfg);\n\t            var ciphertext = encryptor.finalize(message);\n\n\t            // Shortcut\n\t            var cipherCfg = encryptor.cfg;\n\n\t            // Create and return serializable cipher params\n\t            return CipherParams.create({\n\t                ciphertext: ciphertext,\n\t                key: key,\n\t                iv: cipherCfg.iv,\n\t                algorithm: cipher,\n\t                mode: cipherCfg.mode,\n\t                padding: cipherCfg.padding,\n\t                blockSize: cipher.blockSize,\n\t                formatter: cfg.format\n\t            });\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Decrypt\n\t            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n\n\t            return plaintext;\n\t        },\n\n\t        /**\n\t         * Converts serialized ciphertext to CipherParams,\n\t         * else assumed CipherParams already and returns ciphertext unchanged.\n\t         *\n\t         * @param {CipherParams|string} ciphertext The ciphertext.\n\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n\t         *\n\t         * @return {CipherParams} The unserialized ciphertext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n\t         */\n\t        _parse: function (ciphertext, format) {\n\t            if (typeof ciphertext == 'string') {\n\t                return format.parse(ciphertext, this);\n\t            } else {\n\t                return ciphertext;\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * Key derivation function namespace.\n\t     */\n\t    var C_kdf = C.kdf = {};\n\n\t    /**\n\t     * OpenSSL key derivation function.\n\t     */\n\t    var OpenSSLKdf = C_kdf.OpenSSL = {\n\t        /**\n\t         * Derives a key and IV from a password.\n\t         *\n\t         * @param {string} password The password to derive from.\n\t         * @param {number} keySize The size in words of the key to generate.\n\t         * @param {number} ivSize The size in words of the IV to generate.\n\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n\t         *\n\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n\t         */\n\t        execute: function (password, keySize, ivSize, salt) {\n\t            // Generate random salt\n\t            if (!salt) {\n\t                salt = WordArray.random(64/8);\n\t            }\n\n\t            // Derive key and IV\n\t            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n\n\t            // Separate key and IV\n\t            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n\t            key.sigBytes = keySize * 4;\n\n\t            // Return params\n\t            return CipherParams.create({ key: key, iv: iv, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A serializable cipher wrapper that derives the key from a password,\n\t     * and returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n\t         */\n\t        cfg: SerializableCipher.cfg.extend({\n\t            kdf: OpenSSLKdf\n\t        }),\n\n\t        /**\n\t         * Encrypts a message using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Encrypt\n\t            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n\t            // Mix in derived params\n\t            ciphertext.mixIn(derivedParams);\n\n\t            return ciphertext;\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Decrypt\n\t            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n\n\t            return plaintext;\n\t        }\n\t    });\n\t}());\n\n\n}));\n},{\"./core\":51}],51:[function(require,module,exports){\n;(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory();\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory();\n\t}\n}(this, function () {\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\t        function F() {}\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                F.prototype = this;\n\t                var subtype = new F();\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init')) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var i = 0; i < thatSigBytes; i += 4) {\n\t                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            var r = (function (m_w) {\n\t                var m_w = m_w;\n\t                var m_z = 0x3ade68b1;\n\t                var mask = 0xffffffff;\n\n\t                return function () {\n\t                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;\n\t                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;\n\t                    var result = ((m_z << 0x10) + m_w) & mask;\n\t                    result /= 0x100000000;\n\t                    result += 0.5;\n\t                    return result * (Math.random() > .5 ? 1 : -1);\n\t                }\n\t            });\n\n\t            for (var i = 0, rcache; i < nBytes; i += 4) {\n\t                var _r = r((rcache || Math.random()) * 0x100000000);\n\n\t                rcache = _r() * 0x3ade67b7;\n\t                words.push((_r() * 0x100000000) | 0);\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                var processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));\n},{}],52:[function(require,module,exports){\n;(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64 encoding strategy.\n\t     */\n\t    var Base64 = C_enc.Base64 = {\n\t        /**\n\t         * Converts a word array to a Base64 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Base64 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64 string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n\t         */\n\t        parse: function (base64Str) {\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = this._map;\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex != -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            var words = [];\n\t            var nBytes = 0;\n\t            for (var i = 0; i < base64StrLength; i++) {\n\t                if (i % 4) {\n\t                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);\n\t                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);\n\t                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);\n\t                    nBytes++;\n\t                }\n\t            }\n\n\t            return WordArray.create(words, nBytes);\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n\t    };\n\t}());\n\n\n\treturn CryptoJS.enc.Base64;\n\n}));\n},{\"./core\":51}],53:[function(require,module,exports){\n;(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * UTF-16 BE encoding strategy.\n\t     */\n\t    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 BE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 BE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 BE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 BE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-16 LE encoding strategy.\n\t     */\n\t    C_enc.Utf16LE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 LE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 LE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 LE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 LE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    function swapEndian(word) {\n\t        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Utf16;\n\n}));\n},{\"./core\":51}],54:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var MD5 = C_algo.MD5;\n\n\t    /**\n\t     * This key derivation function is meant to conform with EVP_BytesToKey.\n\t     * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n\t     */\n\t    var EvpKDF = C_algo.EvpKDF = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: MD5,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create();\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Derives a key from a password.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init hasher\n\t            var hasher = cfg.hasher.create();\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                if (block) {\n\t                    hasher.update(block);\n\t                }\n\t                var block = hasher.update(password).finalize(salt);\n\t                hasher.reset();\n\n\t                // Iterations\n\t                for (var i = 1; i < iterations; i++) {\n\t                    block = hasher.finalize(block);\n\t                    hasher.reset();\n\t                }\n\n\t                derivedKey.concat(block);\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Derives a key from a password.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.EvpKDF(password, salt);\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.EvpKDF = function (password, salt, cfg) {\n\t        return EvpKDF.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.EvpKDF;\n\n}));\n},{\"./core\":51,\"./hmac\":56,\"./sha1\":75}],55:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var CipherParams = C_lib.CipherParams;\n\t    var C_enc = C.enc;\n\t    var Hex = C_enc.Hex;\n\t    var C_format = C.format;\n\n\t    var HexFormatter = C_format.Hex = {\n\t        /**\n\t         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The hexadecimally encoded string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);\n\t         */\n\t        stringify: function (cipherParams) {\n\t            return cipherParams.ciphertext.toString(Hex);\n\t        },\n\n\t        /**\n\t         * Converts a hexadecimally encoded ciphertext string to a cipher params object.\n\t         *\n\t         * @param {string} input The hexadecimally encoded string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);\n\t         */\n\t        parse: function (input) {\n\t            var ciphertext = Hex.parse(input);\n\t            return CipherParams.create({ ciphertext: ciphertext });\n\t        }\n\t    };\n\t}());\n\n\n\treturn CryptoJS.format.Hex;\n\n}));\n},{\"./cipher-core\":50,\"./core\":51}],56:[function(require,module,exports){\n;(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * HMAC algorithm.\n\t     */\n\t    var HMAC = C_algo.HMAC = Base.extend({\n\t        /**\n\t         * Initializes a newly created HMAC.\n\t         *\n\t         * @param {Hasher} hasher The hash algorithm to use.\n\t         * @param {WordArray|string} key The secret key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t         */\n\t        init: function (hasher, key) {\n\t            // Init hasher\n\t            hasher = this._hasher = new hasher.init();\n\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof key == 'string') {\n\t                key = Utf8.parse(key);\n\t            }\n\n\t            // Shortcuts\n\t            var hasherBlockSize = hasher.blockSize;\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n\t            // Allow arbitrary length keys\n\t            if (key.sigBytes > hasherBlockSizeBytes) {\n\t                key = hasher.finalize(key);\n\t            }\n\n\t            // Clamp excess bits\n\t            key.clamp();\n\n\t            // Clone key for inner and outer pads\n\t            var oKey = this._oKey = key.clone();\n\t            var iKey = this._iKey = key.clone();\n\n\t            // Shortcuts\n\t            var oKeyWords = oKey.words;\n\t            var iKeyWords = iKey.words;\n\n\t            // XOR keys with pad constants\n\t            for (var i = 0; i < hasherBlockSize; i++) {\n\t                oKeyWords[i] ^= 0x5c5c5c5c;\n\t                iKeyWords[i] ^= 0x36363636;\n\t            }\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this HMAC to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Reset\n\t            hasher.reset();\n\t            hasher.update(this._iKey);\n\t        },\n\n\t        /**\n\t         * Updates this HMAC with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {HMAC} This HMAC instance.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.update('message');\n\t         *     hmacHasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            this._hasher.update(messageUpdate);\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the HMAC computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The HMAC.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmac = hmacHasher.finalize();\n\t         *     var hmac = hmacHasher.finalize('message');\n\t         *     var hmac = hmacHasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Compute HMAC\n\t            var innerHash = hasher.finalize(messageUpdate);\n\t            hasher.reset();\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n\t            return hmac;\n\t        }\n\t    });\n\t}());\n\n\n}));\n},{\"./core\":51}],57:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"), require(\"./lib-typedarrays\"), require(\"./enc-utf16\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./sha1\"), require(\"./sha256\"), require(\"./sha224\"), require(\"./sha512\"), require(\"./sha384\"), require(\"./sha3\"), require(\"./ripemd160\"), require(\"./hmac\"), require(\"./pbkdf2\"), require(\"./evpkdf\"), require(\"./cipher-core\"), require(\"./mode-cfb\"), require(\"./mode-ctr\"), require(\"./mode-ctr-gladman\"), require(\"./mode-ofb\"), require(\"./mode-ecb\"), require(\"./pad-ansix923\"), require(\"./pad-iso10126\"), require(\"./pad-iso97971\"), require(\"./pad-zeropadding\"), require(\"./pad-nopadding\"), require(\"./format-hex\"), require(\"./aes\"), require(\"./tripledes\"), require(\"./rc4\"), require(\"./rabbit\"), require(\"./rabbit-legacy\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\", \"./lib-typedarrays\", \"./enc-utf16\", \"./enc-base64\", \"./md5\", \"./sha1\", \"./sha256\", \"./sha224\", \"./sha512\", \"./sha384\", \"./sha3\", \"./ripemd160\", \"./hmac\", \"./pbkdf2\", \"./evpkdf\", \"./cipher-core\", \"./mode-cfb\", \"./mode-ctr\", \"./mode-ctr-gladman\", \"./mode-ofb\", \"./mode-ecb\", \"./pad-ansix923\", \"./pad-iso10126\", \"./pad-iso97971\", \"./pad-zeropadding\", \"./pad-nopadding\", \"./format-hex\", \"./aes\", \"./tripledes\", \"./rc4\", \"./rabbit\", \"./rabbit-legacy\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\treturn CryptoJS;\n\n}));\n},{\"./aes\":49,\"./cipher-core\":50,\"./core\":51,\"./enc-base64\":52,\"./enc-utf16\":53,\"./evpkdf\":54,\"./format-hex\":55,\"./hmac\":56,\"./lib-typedarrays\":58,\"./md5\":59,\"./mode-cfb\":60,\"./mode-ctr\":62,\"./mode-ctr-gladman\":61,\"./mode-ecb\":63,\"./mode-ofb\":64,\"./pad-ansix923\":65,\"./pad-iso10126\":66,\"./pad-iso97971\":67,\"./pad-nopadding\":68,\"./pad-zeropadding\":69,\"./pbkdf2\":70,\"./rabbit\":72,\"./rabbit-legacy\":71,\"./rc4\":73,\"./ripemd160\":74,\"./sha1\":75,\"./sha224\":76,\"./sha256\":77,\"./sha3\":78,\"./sha384\":79,\"./sha512\":80,\"./tripledes\":81,\"./x64-core\":82}],58:[function(require,module,exports){\n;(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Check if typed arrays are supported\n\t    if (typeof ArrayBuffer != 'function') {\n\t        return;\n\t    }\n\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\n\t    // Reference original init\n\t    var superInit = WordArray.init;\n\n\t    // Augment WordArray.init to handle typed arrays\n\t    var subInit = WordArray.init = function (typedArray) {\n\t        // Convert buffers to uint8\n\t        if (typedArray instanceof ArrayBuffer) {\n\t            typedArray = new Uint8Array(typedArray);\n\t        }\n\n\t        // Convert other array views to uint8\n\t        if (\n\t            typedArray instanceof Int8Array ||\n\t            (typeof Uint8ClampedArray !== \"undefined\" && typedArray instanceof Uint8ClampedArray) ||\n\t            typedArray instanceof Int16Array ||\n\t            typedArray instanceof Uint16Array ||\n\t            typedArray instanceof Int32Array ||\n\t            typedArray instanceof Uint32Array ||\n\t            typedArray instanceof Float32Array ||\n\t            typedArray instanceof Float64Array\n\t        ) {\n\t            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n\t        }\n\n\t        // Handle Uint8Array\n\t        if (typedArray instanceof Uint8Array) {\n\t            // Shortcut\n\t            var typedArrayByteLength = typedArray.byteLength;\n\n\t            // Extract bytes\n\t            var words = [];\n\t            for (var i = 0; i < typedArrayByteLength; i++) {\n\t                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\n\t            }\n\n\t            // Initialize this word array\n\t            superInit.call(this, words, typedArrayByteLength);\n\t        } else {\n\t            // Else call normal init\n\t            superInit.apply(this, arguments);\n\t        }\n\t    };\n\n\t    subInit.prototype = WordArray;\n\t}());\n\n\n\treturn CryptoJS.lib.WordArray;\n\n}));\n},{\"./core\":51}],59:[function(require,module,exports){\n;(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Constants table\n\t    var T = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        for (var i = 0; i < 64; i++) {\n\t            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;\n\t        }\n\t    }());\n\n\t    /**\n\t     * MD5 hash algorithm.\n\t     */\n\t    var MD5 = C_algo.MD5 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Swap endian\n\t            for (var i = 0; i < 16; i++) {\n\t                // Shortcuts\n\t                var offset_i = offset + i;\n\t                var M_offset_i = M[offset_i];\n\n\t                M[offset_i] = (\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n\t                );\n\t            }\n\n\t            // Shortcuts\n\t            var H = this._hash.words;\n\n\t            var M_offset_0  = M[offset + 0];\n\t            var M_offset_1  = M[offset + 1];\n\t            var M_offset_2  = M[offset + 2];\n\t            var M_offset_3  = M[offset + 3];\n\t            var M_offset_4  = M[offset + 4];\n\t            var M_offset_5  = M[offset + 5];\n\t            var M_offset_6  = M[offset + 6];\n\t            var M_offset_7  = M[offset + 7];\n\t            var M_offset_8  = M[offset + 8];\n\t            var M_offset_9  = M[offset + 9];\n\t            var M_offset_10 = M[offset + 10];\n\t            var M_offset_11 = M[offset + 11];\n\t            var M_offset_12 = M[offset + 12];\n\t            var M_offset_13 = M[offset + 13];\n\t            var M_offset_14 = M[offset + 14];\n\t            var M_offset_15 = M[offset + 15];\n\n\t            // Working varialbes\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\n\t            // Computation\n\t            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);\n\t            d = FF(d, a, b, c, M_offset_1,  12, T[1]);\n\t            c = FF(c, d, a, b, M_offset_2,  17, T[2]);\n\t            b = FF(b, c, d, a, M_offset_3,  22, T[3]);\n\t            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);\n\t            d = FF(d, a, b, c, M_offset_5,  12, T[5]);\n\t            c = FF(c, d, a, b, M_offset_6,  17, T[6]);\n\t            b = FF(b, c, d, a, M_offset_7,  22, T[7]);\n\t            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);\n\t            d = FF(d, a, b, c, M_offset_9,  12, T[9]);\n\t            c = FF(c, d, a, b, M_offset_10, 17, T[10]);\n\t            b = FF(b, c, d, a, M_offset_11, 22, T[11]);\n\t            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);\n\t            d = FF(d, a, b, c, M_offset_13, 12, T[13]);\n\t            c = FF(c, d, a, b, M_offset_14, 17, T[14]);\n\t            b = FF(b, c, d, a, M_offset_15, 22, T[15]);\n\n\t            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);\n\t            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);\n\t            c = GG(c, d, a, b, M_offset_11, 14, T[18]);\n\t            b = GG(b, c, d, a, M_offset_0,  20, T[19]);\n\t            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);\n\t            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);\n\t            c = GG(c, d, a, b, M_offset_15, 14, T[22]);\n\t            b = GG(b, c, d, a, M_offset_4,  20, T[23]);\n\t            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);\n\t            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);\n\t            c = GG(c, d, a, b, M_offset_3,  14, T[26]);\n\t            b = GG(b, c, d, a, M_offset_8,  20, T[27]);\n\t            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);\n\t            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);\n\t            c = GG(c, d, a, b, M_offset_7,  14, T[30]);\n\t            b = GG(b, c, d, a, M_offset_12, 20, T[31]);\n\n\t            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);\n\t            d = HH(d, a, b, c, M_offset_8,  11, T[33]);\n\t            c = HH(c, d, a, b, M_offset_11, 16, T[34]);\n\t            b = HH(b, c, d, a, M_offset_14, 23, T[35]);\n\t            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);\n\t            d = HH(d, a, b, c, M_offset_4,  11, T[37]);\n\t            c = HH(c, d, a, b, M_offset_7,  16, T[38]);\n\t            b = HH(b, c, d, a, M_offset_10, 23, T[39]);\n\t            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);\n\t            d = HH(d, a, b, c, M_offset_0,  11, T[41]);\n\t            c = HH(c, d, a, b, M_offset_3,  16, T[42]);\n\t            b = HH(b, c, d, a, M_offset_6,  23, T[43]);\n\t            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);\n\t            d = HH(d, a, b, c, M_offset_12, 11, T[45]);\n\t            c = HH(c, d, a, b, M_offset_15, 16, T[46]);\n\t            b = HH(b, c, d, a, M_offset_2,  23, T[47]);\n\n\t            a = II(a, b, c, d, M_offset_0,  6,  T[48]);\n\t            d = II(d, a, b, c, M_offset_7,  10, T[49]);\n\t            c = II(c, d, a, b, M_offset_14, 15, T[50]);\n\t            b = II(b, c, d, a, M_offset_5,  21, T[51]);\n\t            a = II(a, b, c, d, M_offset_12, 6,  T[52]);\n\t            d = II(d, a, b, c, M_offset_3,  10, T[53]);\n\t            c = II(c, d, a, b, M_offset_10, 15, T[54]);\n\t            b = II(b, c, d, a, M_offset_1,  21, T[55]);\n\t            a = II(a, b, c, d, M_offset_8,  6,  T[56]);\n\t            d = II(d, a, b, c, M_offset_15, 10, T[57]);\n\t            c = II(c, d, a, b, M_offset_6,  15, T[58]);\n\t            b = II(b, c, d, a, M_offset_13, 21, T[59]);\n\t            a = II(a, b, c, d, M_offset_4,  6,  T[60]);\n\t            d = II(d, a, b, c, M_offset_11, 10, T[61]);\n\t            c = II(c, d, a, b, M_offset_2,  15, T[62]);\n\t            b = II(b, c, d, a, M_offset_9,  21, T[63]);\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\n\t            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);\n\t            var nBitsTotalL = nBitsTotal;\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (\n\t                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)\n\t            );\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n\t                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)\n\t            );\n\n\t            data.sigBytes = (dataWords.length + 1) * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var hash = this._hash;\n\t            var H = hash.words;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 4; i++) {\n\t                // Shortcut\n\t                var H_i = H[i];\n\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    function FF(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & c) | (~b & d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function GG(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & d) | (c & ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function HH(a, b, c, d, x, s, t) {\n\t        var n = a + (b ^ c ^ d) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function II(a, b, c, d, x, s, t) {\n\t        var n = a + (c ^ (b | ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.MD5('message');\n\t     *     var hash = CryptoJS.MD5(wordArray);\n\t     */\n\t    C.MD5 = Hasher._createHelper(MD5);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacMD5(message, key);\n\t     */\n\t    C.HmacMD5 = Hasher._createHmacHelper(MD5);\n\t}(Math));\n\n\n\treturn CryptoJS.MD5;\n\n}));\n},{\"./core\":51}],60:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher Feedback block mode.\n\t */\n\tCryptoJS.mode.CFB = (function () {\n\t    var CFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    CFB.Encryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // Remember this block to use with next block\n\t            this._prevBlock = words.slice(offset, offset + blockSize);\n\t        }\n\t    });\n\n\t    CFB.Decryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            // Remember this block to use with next block\n\t            var thisBlock = words.slice(offset, offset + blockSize);\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // This block becomes the previous block\n\t            this._prevBlock = thisBlock;\n\t        }\n\t    });\n\n\t    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n\t        // Shortcut\n\t        var iv = this._iv;\n\n\t        // Generate keystream\n\t        if (iv) {\n\t            var keystream = iv.slice(0);\n\n\t            // Remove IV for subsequent blocks\n\t            this._iv = undefined;\n\t        } else {\n\t            var keystream = this._prevBlock;\n\t        }\n\t        cipher.encryptBlock(keystream, 0);\n\n\t        // Encrypt\n\t        for (var i = 0; i < blockSize; i++) {\n\t            words[offset + i] ^= keystream[i];\n\t        }\n\t    }\n\n\t    return CFB;\n\t}());\n\n\n\treturn CryptoJS.mode.CFB;\n\n}));\n},{\"./cipher-core\":50,\"./core\":51}],61:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/** @preserve\n\t * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n\t * derived from CryptoJS.mode.CTR\n\t * Jan Hruby jhruby.web@gmail.com\n\t */\n\tCryptoJS.mode.CTRGladman = (function () {\n\t    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();\n\n\t\tfunction incWord(word)\n\t\t{\n\t\t\tif (((word >> 24) & 0xff) === 0xff) { //overflow\n\t\t\tvar b1 = (word >> 16)&0xff;\n\t\t\tvar b2 = (word >> 8)&0xff;\n\t\t\tvar b3 = word & 0xff;\n\n\t\t\tif (b1 === 0xff) // overflow b1\n\t\t\t{\n\t\t\tb1 = 0;\n\t\t\tif (b2 === 0xff)\n\t\t\t{\n\t\t\t\tb2 = 0;\n\t\t\t\tif (b3 === 0xff)\n\t\t\t\t{\n\t\t\t\t\tb3 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t++b3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t++b2;\n\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t++b1;\n\t\t\t}\n\n\t\t\tword = 0;\n\t\t\tword += (b1 << 16);\n\t\t\tword += (b2 << 8);\n\t\t\tword += b3;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tword += (0x01 << 24);\n\t\t\t}\n\t\t\treturn word;\n\t\t}\n\n\t\tfunction incCounter(counter)\n\t\t{\n\t\t\tif ((counter[0] = incWord(counter[0])) === 0)\n\t\t\t{\n\t\t\t\t// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n\t\t\t\tcounter[1] = incWord(counter[1]);\n\t\t\t}\n\t\t\treturn counter;\n\t\t}\n\n\t    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\n\t\t\t\tincCounter(counter);\n\n\t\t\t\tvar keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTRGladman.Decryptor = Encryptor;\n\n\t    return CTRGladman;\n\t}());\n\n\n\n\n\treturn CryptoJS.mode.CTRGladman;\n\n}));\n},{\"./cipher-core\":50,\"./core\":51}],62:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Counter block mode.\n\t */\n\tCryptoJS.mode.CTR = (function () {\n\t    var CTR = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    var Encryptor = CTR.Encryptor = CTR.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\t            var keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Increment counter\n\t            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTR.Decryptor = Encryptor;\n\n\t    return CTR;\n\t}());\n\n\n\treturn CryptoJS.mode.CTR;\n\n}));\n},{\"./cipher-core\":50,\"./core\":51}],63:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Electronic Codebook block mode.\n\t */\n\tCryptoJS.mode.ECB = (function () {\n\t    var ECB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    ECB.Encryptor = ECB.extend({\n\t        processBlock: function (words, offset) {\n\t            this._cipher.encryptBlock(words, offset);\n\t        }\n\t    });\n\n\t    ECB.Decryptor = ECB.extend({\n\t        processBlock: function (words, offset) {\n\t            this._cipher.decryptBlock(words, offset);\n\t        }\n\t    });\n\n\t    return ECB;\n\t}());\n\n\n\treturn CryptoJS.mode.ECB;\n\n}));\n},{\"./cipher-core\":50,\"./core\":51}],64:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Output Feedback block mode.\n\t */\n\tCryptoJS.mode.OFB = (function () {\n\t    var OFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    var Encryptor = OFB.Encryptor = OFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var keystream = this._keystream;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                keystream = this._keystream = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    OFB.Decryptor = Encryptor;\n\n\t    return OFB;\n\t}());\n\n\n\treturn CryptoJS.mode.OFB;\n\n}));\n},{\"./cipher-core\":50,\"./core\":51}],65:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ANSI X.923 padding strategy.\n\t */\n\tCryptoJS.pad.AnsiX923 = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcuts\n\t        var dataSigBytes = data.sigBytes;\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Count padding bytes\n\t        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;\n\n\t        // Compute last byte position\n\t        var lastBytePos = dataSigBytes + nPaddingBytes - 1;\n\n\t        // Pad\n\t        data.clamp();\n\t        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);\n\t        data.sigBytes += nPaddingBytes;\n\t    },\n\n\t    unpad: function (data) {\n\t        // Get number of padding bytes from last byte\n\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t        // Remove padding\n\t        data.sigBytes -= nPaddingBytes;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Ansix923;\n\n}));\n},{\"./cipher-core\":50,\"./core\":51}],66:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ISO 10126 padding strategy.\n\t */\n\tCryptoJS.pad.Iso10126 = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcut\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Count padding bytes\n\t        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t        // Pad\n\t        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).\n\t             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));\n\t    },\n\n\t    unpad: function (data) {\n\t        // Get number of padding bytes from last byte\n\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t        // Remove padding\n\t        data.sigBytes -= nPaddingBytes;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Iso10126;\n\n}));\n},{\"./cipher-core\":50,\"./core\":51}],67:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ISO/IEC 9797-1 Padding Method 2.\n\t */\n\tCryptoJS.pad.Iso97971 = {\n\t    pad: function (data, blockSize) {\n\t        // Add 0x80 byte\n\t        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));\n\n\t        // Zero pad the rest\n\t        CryptoJS.pad.ZeroPadding.pad(data, blockSize);\n\t    },\n\n\t    unpad: function (data) {\n\t        // Remove zero padding\n\t        CryptoJS.pad.ZeroPadding.unpad(data);\n\n\t        // Remove one more byte -- the 0x80 byte\n\t        data.sigBytes--;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Iso97971;\n\n}));\n},{\"./cipher-core\":50,\"./core\":51}],68:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * A noop padding strategy.\n\t */\n\tCryptoJS.pad.NoPadding = {\n\t    pad: function () {\n\t    },\n\n\t    unpad: function () {\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.NoPadding;\n\n}));\n},{\"./cipher-core\":50,\"./core\":51}],69:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Zero padding strategy.\n\t */\n\tCryptoJS.pad.ZeroPadding = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcut\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Pad\n\t        data.clamp();\n\t        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);\n\t    },\n\n\t    unpad: function (data) {\n\t        // Shortcut\n\t        var dataWords = data.words;\n\n\t        // Unpad\n\t        var i = data.sigBytes - 1;\n\t        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {\n\t            i--;\n\t        }\n\t        data.sigBytes = i + 1;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.ZeroPadding;\n\n}));\n},{\"./cipher-core\":50,\"./core\":51}],70:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA1 = C_algo.SHA1;\n\t    var HMAC = C_algo.HMAC;\n\n\t    /**\n\t     * Password-Based Key Derivation Function 2 algorithm.\n\t     */\n\t    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hasher to use. Default: SHA1\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: SHA1,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create();\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Computes the Password-Based Key Derivation Function 2.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init HMAC\n\t            var hmac = HMAC.create(cfg.hasher, password);\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\t            var blockIndex = WordArray.create([0x00000001]);\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var blockIndexWords = blockIndex.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                var block = hmac.update(salt).finalize(blockIndex);\n\t                hmac.reset();\n\n\t                // Shortcuts\n\t                var blockWords = block.words;\n\t                var blockWordsLength = blockWords.length;\n\n\t                // Iterations\n\t                var intermediate = block;\n\t                for (var i = 1; i < iterations; i++) {\n\t                    intermediate = hmac.finalize(intermediate);\n\t                    hmac.reset();\n\n\t                    // Shortcut\n\t                    var intermediateWords = intermediate.words;\n\n\t                    // XOR intermediate with block\n\t                    for (var j = 0; j < blockWordsLength; j++) {\n\t                        blockWords[j] ^= intermediateWords[j];\n\t                    }\n\t                }\n\n\t                derivedKey.concat(block);\n\t                blockIndexWords[0]++;\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Computes the Password-Based Key Derivation Function 2.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.PBKDF2(password, salt);\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.PBKDF2 = function (password, salt, cfg) {\n\t        return PBKDF2.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.PBKDF2;\n\n}));\n},{\"./core\":51,\"./hmac\":56,\"./sha1\":75}],71:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var StreamCipher = C_lib.StreamCipher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable objects\n\t    var S  = [];\n\t    var C_ = [];\n\t    var G  = [];\n\n\t    /**\n\t     * Rabbit stream cipher algorithm.\n\t     *\n\t     * This is a legacy version that neglected to convert the key to little-endian.\n\t     * This error doesn't affect the cipher's security,\n\t     * but it does affect its compatibility with other implementations.\n\t     */\n\t    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var K = this._key.words;\n\t            var iv = this.cfg.iv;\n\n\t            // Generate initial state values\n\t            var X = this._X = [\n\t                K[0], (K[3] << 16) | (K[2] >>> 16),\n\t                K[1], (K[0] << 16) | (K[3] >>> 16),\n\t                K[2], (K[1] << 16) | (K[0] >>> 16),\n\t                K[3], (K[2] << 16) | (K[1] >>> 16)\n\t            ];\n\n\t            // Generate initial counter values\n\t            var C = this._C = [\n\t                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),\n\t                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),\n\t                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),\n\t                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)\n\t            ];\n\n\t            // Carry bit\n\t            this._b = 0;\n\n\t            // Iterate the system four times\n\t            for (var i = 0; i < 4; i++) {\n\t                nextState.call(this);\n\t            }\n\n\t            // Modify the counters\n\t            for (var i = 0; i < 8; i++) {\n\t                C[i] ^= X[(i + 4) & 7];\n\t            }\n\n\t            // IV setup\n\t            if (iv) {\n\t                // Shortcuts\n\t                var IV = iv.words;\n\t                var IV_0 = IV[0];\n\t                var IV_1 = IV[1];\n\n\t                // Generate four subvectors\n\t                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);\n\t                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);\n\t                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);\n\t                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);\n\n\t                // Modify counter values\n\t                C[0] ^= i0;\n\t                C[1] ^= i1;\n\t                C[2] ^= i2;\n\t                C[3] ^= i3;\n\t                C[4] ^= i0;\n\t                C[5] ^= i1;\n\t                C[6] ^= i2;\n\t                C[7] ^= i3;\n\n\t                // Iterate the system four times\n\t                for (var i = 0; i < 4; i++) {\n\t                    nextState.call(this);\n\t                }\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var X = this._X;\n\n\t            // Iterate the system\n\t            nextState.call(this);\n\n\t            // Generate four keystream words\n\t            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);\n\t            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);\n\t            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);\n\t            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);\n\n\t            for (var i = 0; i < 4; i++) {\n\t                // Swap endian\n\t                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |\n\t                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);\n\n\t                // Encrypt\n\t                M[offset + i] ^= S[i];\n\t            }\n\t        },\n\n\t        blockSize: 128/32,\n\n\t        ivSize: 64/32\n\t    });\n\n\t    function nextState() {\n\t        // Shortcuts\n\t        var X = this._X;\n\t        var C = this._C;\n\n\t        // Save old counter values\n\t        for (var i = 0; i < 8; i++) {\n\t            C_[i] = C[i];\n\t        }\n\n\t        // Calculate new counter values\n\t        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;\n\t        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;\n\t        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;\n\t        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;\n\t        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;\n\t        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;\n\t        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;\n\t        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;\n\t        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;\n\n\t        // Calculate the g-values\n\t        for (var i = 0; i < 8; i++) {\n\t            var gx = X[i] + C[i];\n\n\t            // Construct high and low argument for squaring\n\t            var ga = gx & 0xffff;\n\t            var gb = gx >>> 16;\n\n\t            // Calculate high and low result of squaring\n\t            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;\n\t            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);\n\n\t            // High XOR low\n\t            G[i] = gh ^ gl;\n\t        }\n\n\t        // Calculate new state values\n\t        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;\n\t        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;\n\t        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;\n\t        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;\n\t        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;\n\t        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;\n\t        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;\n\t        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);\n\t}());\n\n\n\treturn CryptoJS.RabbitLegacy;\n\n}));\n},{\"./cipher-core\":50,\"./core\":51,\"./enc-base64\":52,\"./evpkdf\":54,\"./md5\":59}],72:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var StreamCipher = C_lib.StreamCipher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable objects\n\t    var S  = [];\n\t    var C_ = [];\n\t    var G  = [];\n\n\t    /**\n\t     * Rabbit stream cipher algorithm\n\t     */\n\t    var Rabbit = C_algo.Rabbit = StreamCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var K = this._key.words;\n\t            var iv = this.cfg.iv;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 4; i++) {\n\t                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |\n\t                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Generate initial state values\n\t            var X = this._X = [\n\t                K[0], (K[3] << 16) | (K[2] >>> 16),\n\t                K[1], (K[0] << 16) | (K[3] >>> 16),\n\t                K[2], (K[1] << 16) | (K[0] >>> 16),\n\t                K[3], (K[2] << 16) | (K[1] >>> 16)\n\t            ];\n\n\t            // Generate initial counter values\n\t            var C = this._C = [\n\t                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),\n\t                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),\n\t                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),\n\t                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)\n\t            ];\n\n\t            // Carry bit\n\t            this._b = 0;\n\n\t            // Iterate the system four times\n\t            for (var i = 0; i < 4; i++) {\n\t                nextState.call(this);\n\t            }\n\n\t            // Modify the counters\n\t            for (var i = 0; i < 8; i++) {\n\t                C[i] ^= X[(i + 4) & 7];\n\t            }\n\n\t            // IV setup\n\t            if (iv) {\n\t                // Shortcuts\n\t                var IV = iv.words;\n\t                var IV_0 = IV[0];\n\t                var IV_1 = IV[1];\n\n\t                // Generate four subvectors\n\t                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);\n\t                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);\n\t                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);\n\t                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);\n\n\t                // Modify counter values\n\t                C[0] ^= i0;\n\t                C[1] ^= i1;\n\t                C[2] ^= i2;\n\t                C[3] ^= i3;\n\t                C[4] ^= i0;\n\t                C[5] ^= i1;\n\t                C[6] ^= i2;\n\t                C[7] ^= i3;\n\n\t                // Iterate the system four times\n\t                for (var i = 0; i < 4; i++) {\n\t                    nextState.call(this);\n\t                }\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var X = this._X;\n\n\t            // Iterate the system\n\t            nextState.call(this);\n\n\t            // Generate four keystream words\n\t            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);\n\t            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);\n\t            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);\n\t            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);\n\n\t            for (var i = 0; i < 4; i++) {\n\t                // Swap endian\n\t                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |\n\t                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);\n\n\t                // Encrypt\n\t                M[offset + i] ^= S[i];\n\t            }\n\t        },\n\n\t        blockSize: 128/32,\n\n\t        ivSize: 64/32\n\t    });\n\n\t    function nextState() {\n\t        // Shortcuts\n\t        var X = this._X;\n\t        var C = this._C;\n\n\t        // Save old counter values\n\t        for (var i = 0; i < 8; i++) {\n\t            C_[i] = C[i];\n\t        }\n\n\t        // Calculate new counter values\n\t        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;\n\t        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;\n\t        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;\n\t        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;\n\t        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;\n\t        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;\n\t        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;\n\t        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;\n\t        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;\n\n\t        // Calculate the g-values\n\t        for (var i = 0; i < 8; i++) {\n\t            var gx = X[i] + C[i];\n\n\t            // Construct high and low argument for squaring\n\t            var ga = gx & 0xffff;\n\t            var gb = gx >>> 16;\n\n\t            // Calculate high and low result of squaring\n\t            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;\n\t            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);\n\n\t            // High XOR low\n\t            G[i] = gh ^ gl;\n\t        }\n\n\t        // Calculate new state values\n\t        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;\n\t        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;\n\t        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;\n\t        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;\n\t        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;\n\t        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;\n\t        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;\n\t        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.Rabbit = StreamCipher._createHelper(Rabbit);\n\t}());\n\n\n\treturn CryptoJS.Rabbit;\n\n}));\n},{\"./cipher-core\":50,\"./core\":51,\"./enc-base64\":52,\"./evpkdf\":54,\"./md5\":59}],73:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var StreamCipher = C_lib.StreamCipher;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * RC4 stream cipher algorithm.\n\t     */\n\t    var RC4 = C_algo.RC4 = StreamCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\t            var keySigBytes = key.sigBytes;\n\n\t            // Init sbox\n\t            var S = this._S = [];\n\t            for (var i = 0; i < 256; i++) {\n\t                S[i] = i;\n\t            }\n\n\t            // Key setup\n\t            for (var i = 0, j = 0; i < 256; i++) {\n\t                var keyByteIndex = i % keySigBytes;\n\t                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;\n\n\t                j = (j + S[i] + keyByte) % 256;\n\n\t                // Swap\n\t                var t = S[i];\n\t                S[i] = S[j];\n\t                S[j] = t;\n\t            }\n\n\t            // Counters\n\t            this._i = this._j = 0;\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            M[offset] ^= generateKeystreamWord.call(this);\n\t        },\n\n\t        keySize: 256/32,\n\n\t        ivSize: 0\n\t    });\n\n\t    function generateKeystreamWord() {\n\t        // Shortcuts\n\t        var S = this._S;\n\t        var i = this._i;\n\t        var j = this._j;\n\n\t        // Generate keystream word\n\t        var keystreamWord = 0;\n\t        for (var n = 0; n < 4; n++) {\n\t            i = (i + 1) % 256;\n\t            j = (j + S[i]) % 256;\n\n\t            // Swap\n\t            var t = S[i];\n\t            S[i] = S[j];\n\t            S[j] = t;\n\n\t            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);\n\t        }\n\n\t        // Update counters\n\t        this._i = i;\n\t        this._j = j;\n\n\t        return keystreamWord;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.RC4 = StreamCipher._createHelper(RC4);\n\n\t    /**\n\t     * Modified RC4 stream cipher algorithm.\n\t     */\n\t    var RC4Drop = C_algo.RC4Drop = RC4.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} drop The number of keystream words to drop. Default 192\n\t         */\n\t        cfg: RC4.cfg.extend({\n\t            drop: 192\n\t        }),\n\n\t        _doReset: function () {\n\t            RC4._doReset.call(this);\n\n\t            // Drop\n\t            for (var i = this.cfg.drop; i > 0; i--) {\n\t                generateKeystreamWord.call(this);\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.RC4Drop = StreamCipher._createHelper(RC4Drop);\n\t}());\n\n\n\treturn CryptoJS.RC4;\n\n}));\n},{\"./cipher-core\":50,\"./core\":51,\"./enc-base64\":52,\"./evpkdf\":54,\"./md5\":59}],74:[function(require,module,exports){\n;(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/** @preserve\n\t(c) 2012 by Cédric Mesnil. All rights reserved.\n\n\tRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n\t    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\t    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n\tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t*/\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Constants table\n\t    var _zl = WordArray.create([\n\t        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n\t        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,\n\t        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,\n\t        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,\n\t        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);\n\t    var _zr = WordArray.create([\n\t        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,\n\t        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,\n\t        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,\n\t        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,\n\t        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);\n\t    var _sl = WordArray.create([\n\t         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,\n\t        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,\n\t        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,\n\t          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,\n\t        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);\n\t    var _sr = WordArray.create([\n\t        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,\n\t        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,\n\t        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,\n\t        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,\n\t        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);\n\n\t    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);\n\t    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);\n\n\t    /**\n\t     * RIPEMD160 hash algorithm.\n\t     */\n\t    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\n\t            // Swap endian\n\t            for (var i = 0; i < 16; i++) {\n\t                // Shortcuts\n\t                var offset_i = offset + i;\n\t                var M_offset_i = M[offset_i];\n\n\t                // Swap\n\t                M[offset_i] = (\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n\t                );\n\t            }\n\t            // Shortcut\n\t            var H  = this._hash.words;\n\t            var hl = _hl.words;\n\t            var hr = _hr.words;\n\t            var zl = _zl.words;\n\t            var zr = _zr.words;\n\t            var sl = _sl.words;\n\t            var sr = _sr.words;\n\n\t            // Working variables\n\t            var al, bl, cl, dl, el;\n\t            var ar, br, cr, dr, er;\n\n\t            ar = al = H[0];\n\t            br = bl = H[1];\n\t            cr = cl = H[2];\n\t            dr = dl = H[3];\n\t            er = el = H[4];\n\t            // Computation\n\t            var t;\n\t            for (var i = 0; i < 80; i += 1) {\n\t                t = (al +  M[offset+zl[i]])|0;\n\t                if (i<16){\n\t\t            t +=  f1(bl,cl,dl) + hl[0];\n\t                } else if (i<32) {\n\t\t            t +=  f2(bl,cl,dl) + hl[1];\n\t                } else if (i<48) {\n\t\t            t +=  f3(bl,cl,dl) + hl[2];\n\t                } else if (i<64) {\n\t\t            t +=  f4(bl,cl,dl) + hl[3];\n\t                } else {// if (i<80) {\n\t\t            t +=  f5(bl,cl,dl) + hl[4];\n\t                }\n\t                t = t|0;\n\t                t =  rotl(t,sl[i]);\n\t                t = (t+el)|0;\n\t                al = el;\n\t                el = dl;\n\t                dl = rotl(cl, 10);\n\t                cl = bl;\n\t                bl = t;\n\n\t                t = (ar + M[offset+zr[i]])|0;\n\t                if (i<16){\n\t\t            t +=  f5(br,cr,dr) + hr[0];\n\t                } else if (i<32) {\n\t\t            t +=  f4(br,cr,dr) + hr[1];\n\t                } else if (i<48) {\n\t\t            t +=  f3(br,cr,dr) + hr[2];\n\t                } else if (i<64) {\n\t\t            t +=  f2(br,cr,dr) + hr[3];\n\t                } else {// if (i<80) {\n\t\t            t +=  f1(br,cr,dr) + hr[4];\n\t                }\n\t                t = t|0;\n\t                t =  rotl(t,sr[i]) ;\n\t                t = (t+er)|0;\n\t                ar = er;\n\t                er = dr;\n\t                dr = rotl(cr, 10);\n\t                cr = br;\n\t                br = t;\n\t            }\n\t            // Intermediate hash value\n\t            t    = (H[1] + cl + dr)|0;\n\t            H[1] = (H[2] + dl + er)|0;\n\t            H[2] = (H[3] + el + ar)|0;\n\t            H[3] = (H[4] + al + br)|0;\n\t            H[4] = (H[0] + bl + cr)|0;\n\t            H[0] =  t;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n\t                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)\n\t            );\n\t            data.sigBytes = (dataWords.length + 1) * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var hash = this._hash;\n\t            var H = hash.words;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 5; i++) {\n\t                // Shortcut\n\t                var H_i = H[i];\n\n\t                // Swap\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\n\t    function f1(x, y, z) {\n\t        return ((x) ^ (y) ^ (z));\n\n\t    }\n\n\t    function f2(x, y, z) {\n\t        return (((x)&(y)) | ((~x)&(z)));\n\t    }\n\n\t    function f3(x, y, z) {\n\t        return (((x) | (~(y))) ^ (z));\n\t    }\n\n\t    function f4(x, y, z) {\n\t        return (((x) & (z)) | ((y)&(~(z))));\n\t    }\n\n\t    function f5(x, y, z) {\n\t        return ((x) ^ ((y) |(~(z))));\n\n\t    }\n\n\t    function rotl(x,n) {\n\t        return (x<<n) | (x>>>(32-n));\n\t    }\n\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.RIPEMD160('message');\n\t     *     var hash = CryptoJS.RIPEMD160(wordArray);\n\t     */\n\t    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);\n\t     */\n\t    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);\n\t}(Math));\n\n\n\treturn CryptoJS.RIPEMD160;\n\n}));\n},{\"./core\":51}],75:[function(require,module,exports){\n;(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-1 hash algorithm.\n\t     */\n\t    var SHA1 = C_algo.SHA1 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476,\n\t                0xc3d2e1f0\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\n\t            // Computation\n\t            for (var i = 0; i < 80; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n\t                    W[i] = (n << 1) | (n >>> 31);\n\t                }\n\n\t                var t = ((a << 5) | (a >>> 27)) + e + W[i];\n\t                if (i < 20) {\n\t                    t += ((b & c) | (~b & d)) + 0x5a827999;\n\t                } else if (i < 40) {\n\t                    t += (b ^ c ^ d) + 0x6ed9eba1;\n\t                } else if (i < 60) {\n\t                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n\t                } else /* if (i < 80) */ {\n\t                    t += (b ^ c ^ d) - 0x359d3e2a;\n\t                }\n\n\t                e = d;\n\t                d = c;\n\t                c = (b << 30) | (b >>> 2);\n\t                b = a;\n\t                a = t;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA1('message');\n\t     *     var hash = CryptoJS.SHA1(wordArray);\n\t     */\n\t    C.SHA1 = Hasher._createHelper(SHA1);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA1(message, key);\n\t     */\n\t    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n\t}());\n\n\n\treturn CryptoJS.SHA1;\n\n}));\n},{\"./core\":51}],76:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha256\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha256\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA256 = C_algo.SHA256;\n\n\t    /**\n\t     * SHA-224 hash algorithm.\n\t     */\n\t    var SHA224 = C_algo.SHA224 = SHA256.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n\t                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4\n\t            ]);\n\t        },\n\n\t        _doFinalize: function () {\n\t            var hash = SHA256._doFinalize.call(this);\n\n\t            hash.sigBytes -= 4;\n\n\t            return hash;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA224('message');\n\t     *     var hash = CryptoJS.SHA224(wordArray);\n\t     */\n\t    C.SHA224 = SHA256._createHelper(SHA224);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA224(message, key);\n\t     */\n\t    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);\n\t}());\n\n\n\treturn CryptoJS.SHA224;\n\n}));\n},{\"./core\":51,\"./sha256\":77}],77:[function(require,module,exports){\n;(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Initialization and round constants tables\n\t    var H = [];\n\t    var K = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        function isPrime(n) {\n\t            var sqrtN = Math.sqrt(n);\n\t            for (var factor = 2; factor <= sqrtN; factor++) {\n\t                if (!(n % factor)) {\n\t                    return false;\n\t                }\n\t            }\n\n\t            return true;\n\t        }\n\n\t        function getFractionalBits(n) {\n\t            return ((n - (n | 0)) * 0x100000000) | 0;\n\t        }\n\n\t        var n = 2;\n\t        var nPrime = 0;\n\t        while (nPrime < 64) {\n\t            if (isPrime(n)) {\n\t                if (nPrime < 8) {\n\t                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n\t                }\n\t                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n\n\t                nPrime++;\n\t            }\n\n\t            n++;\n\t        }\n\t    }());\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-256 hash algorithm.\n\t     */\n\t    var SHA256 = C_algo.SHA256 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init(H.slice(0));\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\t            var f = H[5];\n\t            var g = H[6];\n\t            var h = H[7];\n\n\t            // Computation\n\t            for (var i = 0; i < 64; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var gamma0x = W[i - 15];\n\t                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n\t                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\n\t                                   (gamma0x >>> 3);\n\n\t                    var gamma1x = W[i - 2];\n\t                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n\t                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\n\t                                   (gamma1x >>> 10);\n\n\t                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n\t                }\n\n\t                var ch  = (e & f) ^ (~e & g);\n\t                var maj = (a & b) ^ (a & c) ^ (b & c);\n\n\t                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n\t                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n\t                var t1 = h + sigma1 + ch + K[i] + W[i];\n\t                var t2 = sigma0 + maj;\n\n\t                h = g;\n\t                g = f;\n\t                f = e;\n\t                e = (d + t1) | 0;\n\t                d = c;\n\t                c = b;\n\t                b = a;\n\t                a = (t1 + t2) | 0;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t            H[5] = (H[5] + f) | 0;\n\t            H[6] = (H[6] + g) | 0;\n\t            H[7] = (H[7] + h) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA256('message');\n\t     *     var hash = CryptoJS.SHA256(wordArray);\n\t     */\n\t    C.SHA256 = Hasher._createHelper(SHA256);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA256(message, key);\n\t     */\n\t    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA256;\n\n}));\n},{\"./core\":51}],78:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var C_algo = C.algo;\n\n\t    // Constants tables\n\t    var RHO_OFFSETS = [];\n\t    var PI_INDEXES  = [];\n\t    var ROUND_CONSTANTS = [];\n\n\t    // Compute Constants\n\t    (function () {\n\t        // Compute rho offset constants\n\t        var x = 1, y = 0;\n\t        for (var t = 0; t < 24; t++) {\n\t            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;\n\n\t            var newX = y % 5;\n\t            var newY = (2 * x + 3 * y) % 5;\n\t            x = newX;\n\t            y = newY;\n\t        }\n\n\t        // Compute pi index constants\n\t        for (var x = 0; x < 5; x++) {\n\t            for (var y = 0; y < 5; y++) {\n\t                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;\n\t            }\n\t        }\n\n\t        // Compute round constants\n\t        var LFSR = 0x01;\n\t        for (var i = 0; i < 24; i++) {\n\t            var roundConstantMsw = 0;\n\t            var roundConstantLsw = 0;\n\n\t            for (var j = 0; j < 7; j++) {\n\t                if (LFSR & 0x01) {\n\t                    var bitPosition = (1 << j) - 1;\n\t                    if (bitPosition < 32) {\n\t                        roundConstantLsw ^= 1 << bitPosition;\n\t                    } else /* if (bitPosition >= 32) */ {\n\t                        roundConstantMsw ^= 1 << (bitPosition - 32);\n\t                    }\n\t                }\n\n\t                // Compute next LFSR\n\t                if (LFSR & 0x80) {\n\t                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1\n\t                    LFSR = (LFSR << 1) ^ 0x71;\n\t                } else {\n\t                    LFSR <<= 1;\n\t                }\n\t            }\n\n\t            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);\n\t        }\n\t    }());\n\n\t    // Reusable objects for temporary values\n\t    var T = [];\n\t    (function () {\n\t        for (var i = 0; i < 25; i++) {\n\t            T[i] = X64Word.create();\n\t        }\n\t    }());\n\n\t    /**\n\t     * SHA-3 hash algorithm.\n\t     */\n\t    var SHA3 = C_algo.SHA3 = Hasher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} outputLength\n\t         *   The desired number of bits in the output hash.\n\t         *   Only values permitted are: 224, 256, 384, 512.\n\t         *   Default: 512\n\t         */\n\t        cfg: Hasher.cfg.extend({\n\t            outputLength: 512\n\t        }),\n\n\t        _doReset: function () {\n\t            var state = this._state = []\n\t            for (var i = 0; i < 25; i++) {\n\t                state[i] = new X64Word.init();\n\t            }\n\n\t            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcuts\n\t            var state = this._state;\n\t            var nBlockSizeLanes = this.blockSize / 2;\n\n\t            // Absorb\n\t            for (var i = 0; i < nBlockSizeLanes; i++) {\n\t                // Shortcuts\n\t                var M2i  = M[offset + 2 * i];\n\t                var M2i1 = M[offset + 2 * i + 1];\n\n\t                // Swap endian\n\t                M2i = (\n\t                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |\n\t                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)\n\t                );\n\t                M2i1 = (\n\t                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |\n\t                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)\n\t                );\n\n\t                // Absorb message into state\n\t                var lane = state[i];\n\t                lane.high ^= M2i1;\n\t                lane.low  ^= M2i;\n\t            }\n\n\t            // Rounds\n\t            for (var round = 0; round < 24; round++) {\n\t                // Theta\n\t                for (var x = 0; x < 5; x++) {\n\t                    // Mix column lanes\n\t                    var tMsw = 0, tLsw = 0;\n\t                    for (var y = 0; y < 5; y++) {\n\t                        var lane = state[x + 5 * y];\n\t                        tMsw ^= lane.high;\n\t                        tLsw ^= lane.low;\n\t                    }\n\n\t                    // Temporary values\n\t                    var Tx = T[x];\n\t                    Tx.high = tMsw;\n\t                    Tx.low  = tLsw;\n\t                }\n\t                for (var x = 0; x < 5; x++) {\n\t                    // Shortcuts\n\t                    var Tx4 = T[(x + 4) % 5];\n\t                    var Tx1 = T[(x + 1) % 5];\n\t                    var Tx1Msw = Tx1.high;\n\t                    var Tx1Lsw = Tx1.low;\n\n\t                    // Mix surrounding columns\n\t                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));\n\t                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));\n\t                    for (var y = 0; y < 5; y++) {\n\t                        var lane = state[x + 5 * y];\n\t                        lane.high ^= tMsw;\n\t                        lane.low  ^= tLsw;\n\t                    }\n\t                }\n\n\t                // Rho Pi\n\t                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {\n\t                    // Shortcuts\n\t                    var lane = state[laneIndex];\n\t                    var laneMsw = lane.high;\n\t                    var laneLsw = lane.low;\n\t                    var rhoOffset = RHO_OFFSETS[laneIndex];\n\n\t                    // Rotate lanes\n\t                    if (rhoOffset < 32) {\n\t                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));\n\t                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));\n\t                    } else /* if (rhoOffset >= 32) */ {\n\t                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));\n\t                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));\n\t                    }\n\n\t                    // Transpose lanes\n\t                    var TPiLane = T[PI_INDEXES[laneIndex]];\n\t                    TPiLane.high = tMsw;\n\t                    TPiLane.low  = tLsw;\n\t                }\n\n\t                // Rho pi at x = y = 0\n\t                var T0 = T[0];\n\t                var state0 = state[0];\n\t                T0.high = state0.high;\n\t                T0.low  = state0.low;\n\n\t                // Chi\n\t                for (var x = 0; x < 5; x++) {\n\t                    for (var y = 0; y < 5; y++) {\n\t                        // Shortcuts\n\t                        var laneIndex = x + 5 * y;\n\t                        var lane = state[laneIndex];\n\t                        var TLane = T[laneIndex];\n\t                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];\n\t                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];\n\n\t                        // Mix rows\n\t                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);\n\t                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);\n\t                    }\n\t                }\n\n\t                // Iota\n\t                var lane = state[0];\n\t                var roundConstant = ROUND_CONSTANTS[round];\n\t                lane.high ^= roundConstant.high;\n\t                lane.low  ^= roundConstant.low;;\n\t            }\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\t            var blockSizeBits = this.blockSize * 32;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);\n\t            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var state = this._state;\n\t            var outputLengthBytes = this.cfg.outputLength / 8;\n\t            var outputLengthLanes = outputLengthBytes / 8;\n\n\t            // Squeeze\n\t            var hashWords = [];\n\t            for (var i = 0; i < outputLengthLanes; i++) {\n\t                // Shortcuts\n\t                var lane = state[i];\n\t                var laneMsw = lane.high;\n\t                var laneLsw = lane.low;\n\n\t                // Swap endian\n\t                laneMsw = (\n\t                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |\n\t                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)\n\t                );\n\t                laneLsw = (\n\t                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |\n\t                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)\n\t                );\n\n\t                // Squeeze state to retrieve hash\n\t                hashWords.push(laneLsw);\n\t                hashWords.push(laneMsw);\n\t            }\n\n\t            // Return final computed hash\n\t            return new WordArray.init(hashWords, outputLengthBytes);\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\n\t            var state = clone._state = this._state.slice(0);\n\t            for (var i = 0; i < 25; i++) {\n\t                state[i] = state[i].clone();\n\t            }\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA3('message');\n\t     *     var hash = CryptoJS.SHA3(wordArray);\n\t     */\n\t    C.SHA3 = Hasher._createHelper(SHA3);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA3(message, key);\n\t     */\n\t    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA3;\n\n}));\n},{\"./core\":51,\"./x64-core\":82}],79:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"), require(\"./sha512\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\", \"./sha512\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var X64WordArray = C_x64.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA512 = C_algo.SHA512;\n\n\t    /**\n\t     * SHA-384 hash algorithm.\n\t     */\n\t    var SHA384 = C_algo.SHA384 = SHA512.extend({\n\t        _doReset: function () {\n\t            this._hash = new X64WordArray.init([\n\t                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),\n\t                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),\n\t                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),\n\t                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)\n\t            ]);\n\t        },\n\n\t        _doFinalize: function () {\n\t            var hash = SHA512._doFinalize.call(this);\n\n\t            hash.sigBytes -= 16;\n\n\t            return hash;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA384('message');\n\t     *     var hash = CryptoJS.SHA384(wordArray);\n\t     */\n\t    C.SHA384 = SHA512._createHelper(SHA384);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA384(message, key);\n\t     */\n\t    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);\n\t}());\n\n\n\treturn CryptoJS.SHA384;\n\n}));\n},{\"./core\":51,\"./sha512\":80,\"./x64-core\":82}],80:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var X64WordArray = C_x64.WordArray;\n\t    var C_algo = C.algo;\n\n\t    function X64Word_create() {\n\t        return X64Word.create.apply(X64Word, arguments);\n\t    }\n\n\t    // Constants\n\t    var K = [\n\t        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),\n\t        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),\n\t        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),\n\t        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),\n\t        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),\n\t        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),\n\t        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),\n\t        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),\n\t        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),\n\t        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),\n\t        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),\n\t        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),\n\t        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),\n\t        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),\n\t        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),\n\t        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),\n\t        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),\n\t        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),\n\t        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),\n\t        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),\n\t        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),\n\t        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),\n\t        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),\n\t        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),\n\t        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),\n\t        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),\n\t        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),\n\t        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),\n\t        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),\n\t        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),\n\t        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),\n\t        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),\n\t        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),\n\t        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),\n\t        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),\n\t        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),\n\t        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),\n\t        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),\n\t        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),\n\t        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)\n\t    ];\n\n\t    // Reusable objects\n\t    var W = [];\n\t    (function () {\n\t        for (var i = 0; i < 80; i++) {\n\t            W[i] = X64Word_create();\n\t        }\n\t    }());\n\n\t    /**\n\t     * SHA-512 hash algorithm.\n\t     */\n\t    var SHA512 = C_algo.SHA512 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new X64WordArray.init([\n\t                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),\n\t                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),\n\t                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),\n\t                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcuts\n\t            var H = this._hash.words;\n\n\t            var H0 = H[0];\n\t            var H1 = H[1];\n\t            var H2 = H[2];\n\t            var H3 = H[3];\n\t            var H4 = H[4];\n\t            var H5 = H[5];\n\t            var H6 = H[6];\n\t            var H7 = H[7];\n\n\t            var H0h = H0.high;\n\t            var H0l = H0.low;\n\t            var H1h = H1.high;\n\t            var H1l = H1.low;\n\t            var H2h = H2.high;\n\t            var H2l = H2.low;\n\t            var H3h = H3.high;\n\t            var H3l = H3.low;\n\t            var H4h = H4.high;\n\t            var H4l = H4.low;\n\t            var H5h = H5.high;\n\t            var H5l = H5.low;\n\t            var H6h = H6.high;\n\t            var H6l = H6.low;\n\t            var H7h = H7.high;\n\t            var H7l = H7.low;\n\n\t            // Working variables\n\t            var ah = H0h;\n\t            var al = H0l;\n\t            var bh = H1h;\n\t            var bl = H1l;\n\t            var ch = H2h;\n\t            var cl = H2l;\n\t            var dh = H3h;\n\t            var dl = H3l;\n\t            var eh = H4h;\n\t            var el = H4l;\n\t            var fh = H5h;\n\t            var fl = H5l;\n\t            var gh = H6h;\n\t            var gl = H6l;\n\t            var hh = H7h;\n\t            var hl = H7l;\n\n\t            // Rounds\n\t            for (var i = 0; i < 80; i++) {\n\t                // Shortcut\n\t                var Wi = W[i];\n\n\t                // Extend message\n\t                if (i < 16) {\n\t                    var Wih = Wi.high = M[offset + i * 2]     | 0;\n\t                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;\n\t                } else {\n\t                    // Gamma0\n\t                    var gamma0x  = W[i - 15];\n\t                    var gamma0xh = gamma0x.high;\n\t                    var gamma0xl = gamma0x.low;\n\t                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);\n\t                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));\n\n\t                    // Gamma1\n\t                    var gamma1x  = W[i - 2];\n\t                    var gamma1xh = gamma1x.high;\n\t                    var gamma1xl = gamma1x.low;\n\t                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);\n\t                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));\n\n\t                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n\t                    var Wi7  = W[i - 7];\n\t                    var Wi7h = Wi7.high;\n\t                    var Wi7l = Wi7.low;\n\n\t                    var Wi16  = W[i - 16];\n\t                    var Wi16h = Wi16.high;\n\t                    var Wi16l = Wi16.low;\n\n\t                    var Wil = gamma0l + Wi7l;\n\t                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);\n\t                    var Wil = Wil + gamma1l;\n\t                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);\n\t                    var Wil = Wil + Wi16l;\n\t                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);\n\n\t                    Wi.high = Wih;\n\t                    Wi.low  = Wil;\n\t                }\n\n\t                var chh  = (eh & fh) ^ (~eh & gh);\n\t                var chl  = (el & fl) ^ (~el & gl);\n\t                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\n\t                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);\n\n\t                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\n\t                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\n\t                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));\n\t                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));\n\n\t                // t1 = h + sigma1 + ch + K[i] + W[i]\n\t                var Ki  = K[i];\n\t                var Kih = Ki.high;\n\t                var Kil = Ki.low;\n\n\t                var t1l = hl + sigma1l;\n\t                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\n\t                var t1l = t1l + chl;\n\t                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\n\t                var t1l = t1l + Kil;\n\t                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);\n\t                var t1l = t1l + Wil;\n\t                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);\n\n\t                // t2 = sigma0 + maj\n\t                var t2l = sigma0l + majl;\n\t                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);\n\n\t                // Update working variables\n\t                hh = gh;\n\t                hl = gl;\n\t                gh = fh;\n\t                gl = fl;\n\t                fh = eh;\n\t                fl = el;\n\t                el = (dl + t1l) | 0;\n\t                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n\t                dh = ch;\n\t                dl = cl;\n\t                ch = bh;\n\t                cl = bl;\n\t                bh = ah;\n\t                bl = al;\n\t                al = (t1l + t2l) | 0;\n\t                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\n\t            }\n\n\t            // Intermediate hash value\n\t            H0l = H0.low  = (H0l + al);\n\t            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));\n\t            H1l = H1.low  = (H1l + bl);\n\t            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));\n\t            H2l = H2.low  = (H2l + cl);\n\t            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));\n\t            H3l = H3.low  = (H3l + dl);\n\t            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));\n\t            H4l = H4.low  = (H4l + el);\n\t            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));\n\t            H5l = H5.low  = (H5l + fl);\n\t            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));\n\t            H6l = H6.low  = (H6l + gl);\n\t            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));\n\t            H7l = H7.low  = (H7l + hl);\n\t            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Convert hash to 32-bit word array before returning\n\t            var hash = this._hash.toX32();\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        },\n\n\t        blockSize: 1024/32\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA512('message');\n\t     *     var hash = CryptoJS.SHA512(wordArray);\n\t     */\n\t    C.SHA512 = Hasher._createHelper(SHA512);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA512(message, key);\n\t     */\n\t    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);\n\t}());\n\n\n\treturn CryptoJS.SHA512;\n\n}));\n},{\"./core\":51,\"./x64-core\":82}],81:[function(require,module,exports){\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var BlockCipher = C_lib.BlockCipher;\n\t    var C_algo = C.algo;\n\n\t    // Permuted Choice 1 constants\n\t    var PC1 = [\n\t        57, 49, 41, 33, 25, 17, 9,  1,\n\t        58, 50, 42, 34, 26, 18, 10, 2,\n\t        59, 51, 43, 35, 27, 19, 11, 3,\n\t        60, 52, 44, 36, 63, 55, 47, 39,\n\t        31, 23, 15, 7,  62, 54, 46, 38,\n\t        30, 22, 14, 6,  61, 53, 45, 37,\n\t        29, 21, 13, 5,  28, 20, 12, 4\n\t    ];\n\n\t    // Permuted Choice 2 constants\n\t    var PC2 = [\n\t        14, 17, 11, 24, 1,  5,\n\t        3,  28, 15, 6,  21, 10,\n\t        23, 19, 12, 4,  26, 8,\n\t        16, 7,  27, 20, 13, 2,\n\t        41, 52, 31, 37, 47, 55,\n\t        30, 40, 51, 45, 33, 48,\n\t        44, 49, 39, 56, 34, 53,\n\t        46, 42, 50, 36, 29, 32\n\t    ];\n\n\t    // Cumulative bit shift constants\n\t    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];\n\n\t    // SBOXes and round permutation constants\n\t    var SBOX_P = [\n\t        {\n\t            0x0: 0x808200,\n\t            0x10000000: 0x8000,\n\t            0x20000000: 0x808002,\n\t            0x30000000: 0x2,\n\t            0x40000000: 0x200,\n\t            0x50000000: 0x808202,\n\t            0x60000000: 0x800202,\n\t            0x70000000: 0x800000,\n\t            0x80000000: 0x202,\n\t            0x90000000: 0x800200,\n\t            0xa0000000: 0x8200,\n\t            0xb0000000: 0x808000,\n\t            0xc0000000: 0x8002,\n\t            0xd0000000: 0x800002,\n\t            0xe0000000: 0x0,\n\t            0xf0000000: 0x8202,\n\t            0x8000000: 0x0,\n\t            0x18000000: 0x808202,\n\t            0x28000000: 0x8202,\n\t            0x38000000: 0x8000,\n\t            0x48000000: 0x808200,\n\t            0x58000000: 0x200,\n\t            0x68000000: 0x808002,\n\t            0x78000000: 0x2,\n\t            0x88000000: 0x800200,\n\t            0x98000000: 0x8200,\n\t            0xa8000000: 0x808000,\n\t            0xb8000000: 0x800202,\n\t            0xc8000000: 0x800002,\n\t            0xd8000000: 0x8002,\n\t            0xe8000000: 0x202,\n\t            0xf8000000: 0x800000,\n\t            0x1: 0x8000,\n\t            0x10000001: 0x2,\n\t            0x20000001: 0x808200,\n\t            0x30000001: 0x800000,\n\t            0x40000001: 0x808002,\n\t            0x50000001: 0x8200,\n\t            0x60000001: 0x200,\n\t            0x70000001: 0x800202,\n\t            0x80000001: 0x808202,\n\t            0x90000001: 0x808000,\n\t            0xa0000001: 0x800002,\n\t            0xb0000001: 0x8202,\n\t            0xc0000001: 0x202,\n\t            0xd0000001: 0x800200,\n\t            0xe0000001: 0x8002,\n\t            0xf0000001: 0x0,\n\t            0x8000001: 0x808202,\n\t            0x18000001: 0x808000,\n\t            0x28000001: 0x800000,\n\t            0x38000001: 0x200,\n\t            0x48000001: 0x8000,\n\t            0x58000001: 0x800002,\n\t            0x68000001: 0x2,\n\t            0x78000001: 0x8202,\n\t            0x88000001: 0x8002,\n\t            0x98000001: 0x800202,\n\t            0xa8000001: 0x202,\n\t            0xb8000001: 0x808200,\n\t            0xc8000001: 0x800200,\n\t            0xd8000001: 0x0,\n\t            0xe8000001: 0x8200,\n\t            0xf8000001: 0x808002\n\t        },\n\t        {\n\t            0x0: 0x40084010,\n\t            0x1000000: 0x4000,\n\t            0x2000000: 0x80000,\n\t            0x3000000: 0x40080010,\n\t            0x4000000: 0x40000010,\n\t            0x5000000: 0x40084000,\n\t            0x6000000: 0x40004000,\n\t            0x7000000: 0x10,\n\t            0x8000000: 0x84000,\n\t            0x9000000: 0x40004010,\n\t            0xa000000: 0x40000000,\n\t            0xb000000: 0x84010,\n\t            0xc000000: 0x80010,\n\t            0xd000000: 0x0,\n\t            0xe000000: 0x4010,\n\t            0xf000000: 0x40080000,\n\t            0x800000: 0x40004000,\n\t            0x1800000: 0x84010,\n\t            0x2800000: 0x10,\n\t            0x3800000: 0x40004010,\n\t            0x4800000: 0x40084010,\n\t            0x5800000: 0x40000000,\n\t            0x6800000: 0x80000,\n\t            0x7800000: 0x40080010,\n\t            0x8800000: 0x80010,\n\t            0x9800000: 0x0,\n\t            0xa800000: 0x4000,\n\t            0xb800000: 0x40080000,\n\t            0xc800000: 0x40000010,\n\t            0xd800000: 0x84000,\n\t            0xe800000: 0x40084000,\n\t            0xf800000: 0x4010,\n\t            0x10000000: 0x0,\n\t            0x11000000: 0x40080010,\n\t            0x12000000: 0x40004010,\n\t            0x13000000: 0x40084000,\n\t            0x14000000: 0x40080000,\n\t            0x15000000: 0x10,\n\t            0x16000000: 0x84010,\n\t            0x17000000: 0x4000,\n\t            0x18000000: 0x4010,\n\t            0x19000000: 0x80000,\n\t            0x1a000000: 0x80010,\n\t            0x1b000000: 0x40000010,\n\t            0x1c000000: 0x84000,\n\t            0x1d000000: 0x40004000,\n\t            0x1e000000: 0x40000000,\n\t            0x1f000000: 0x40084010,\n\t            0x10800000: 0x84010,\n\t            0x11800000: 0x80000,\n\t            0x12800000: 0x40080000,\n\t            0x13800000: 0x4000,\n\t            0x14800000: 0x40004000,\n\t            0x15800000: 0x40084010,\n\t            0x16800000: 0x10,\n\t            0x17800000: 0x40000000,\n\t            0x18800000: 0x40084000,\n\t            0x19800000: 0x40000010,\n\t            0x1a800000: 0x40004010,\n\t            0x1b800000: 0x80010,\n\t            0x1c800000: 0x0,\n\t            0x1d800000: 0x4010,\n\t            0x1e800000: 0x40080010,\n\t            0x1f800000: 0x84000\n\t        },\n\t        {\n\t            0x0: 0x104,\n\t            0x100000: 0x0,\n\t            0x200000: 0x4000100,\n\t            0x300000: 0x10104,\n\t            0x400000: 0x10004,\n\t            0x500000: 0x4000004,\n\t            0x600000: 0x4010104,\n\t            0x700000: 0x4010000,\n\t            0x800000: 0x4000000,\n\t            0x900000: 0x4010100,\n\t            0xa00000: 0x10100,\n\t            0xb00000: 0x4010004,\n\t            0xc00000: 0x4000104,\n\t            0xd00000: 0x10000,\n\t            0xe00000: 0x4,\n\t            0xf00000: 0x100,\n\t            0x80000: 0x4010100,\n\t            0x180000: 0x4010004,\n\t            0x280000: 0x0,\n\t            0x380000: 0x4000100,\n\t            0x480000: 0x4000004,\n\t            0x580000: 0x10000,\n\t            0x680000: 0x10004,\n\t            0x780000: 0x104,\n\t            0x880000: 0x4,\n\t            0x980000: 0x100,\n\t            0xa80000: 0x4010000,\n\t            0xb80000: 0x10104,\n\t            0xc80000: 0x10100,\n\t            0xd80000: 0x4000104,\n\t            0xe80000: 0x4010104,\n\t            0xf80000: 0x4000000,\n\t            0x1000000: 0x4010100,\n\t            0x1100000: 0x10004,\n\t            0x1200000: 0x10000,\n\t            0x1300000: 0x4000100,\n\t            0x1400000: 0x100,\n\t            0x1500000: 0x4010104,\n\t            0x1600000: 0x4000004,\n\t            0x1700000: 0x0,\n\t            0x1800000: 0x4000104,\n\t            0x1900000: 0x4000000,\n\t            0x1a00000: 0x4,\n\t            0x1b00000: 0x10100,\n\t            0x1c00000: 0x4010000,\n\t            0x1d00000: 0x104,\n\t            0x1e00000: 0x10104,\n\t            0x1f00000: 0x4010004,\n\t            0x1080000: 0x4000000,\n\t            0x1180000: 0x104,\n\t            0x1280000: 0x4010100,\n\t            0x1380000: 0x0,\n\t            0x1480000: 0x10004,\n\t            0x1580000: 0x4000100,\n\t            0x1680000: 0x100,\n\t            0x1780000: 0x4010004,\n\t            0x1880000: 0x10000,\n\t            0x1980000: 0x4010104,\n\t            0x1a80000: 0x10104,\n\t            0x1b80000: 0x4000004,\n\t            0x1c80000: 0x4000104,\n\t            0x1d80000: 0x4010000,\n\t            0x1e80000: 0x4,\n\t            0x1f80000: 0x10100\n\t        },\n\t        {\n\t            0x0: 0x80401000,\n\t            0x10000: 0x80001040,\n\t            0x20000: 0x401040,\n\t            0x30000: 0x80400000,\n\t            0x40000: 0x0,\n\t            0x50000: 0x401000,\n\t            0x60000: 0x80000040,\n\t            0x70000: 0x400040,\n\t            0x80000: 0x80000000,\n\t            0x90000: 0x400000,\n\t            0xa0000: 0x40,\n\t            0xb0000: 0x80001000,\n\t            0xc0000: 0x80400040,\n\t            0xd0000: 0x1040,\n\t            0xe0000: 0x1000,\n\t            0xf0000: 0x80401040,\n\t            0x8000: 0x80001040,\n\t            0x18000: 0x40,\n\t            0x28000: 0x80400040,\n\t            0x38000: 0x80001000,\n\t            0x48000: 0x401000,\n\t            0x58000: 0x80401040,\n\t            0x68000: 0x0,\n\t            0x78000: 0x80400000,\n\t            0x88000: 0x1000,\n\t            0x98000: 0x80401000,\n\t            0xa8000: 0x400000,\n\t            0xb8000: 0x1040,\n\t            0xc8000: 0x80000000,\n\t            0xd8000: 0x400040,\n\t            0xe8000: 0x401040,\n\t            0xf8000: 0x80000040,\n\t            0x100000: 0x400040,\n\t            0x110000: 0x401000,\n\t            0x120000: 0x80000040,\n\t            0x130000: 0x0,\n\t            0x140000: 0x1040,\n\t            0x150000: 0x80400040,\n\t            0x160000: 0x80401000,\n\t            0x170000: 0x80001040,\n\t            0x180000: 0x80401040,\n\t            0x190000: 0x80000000,\n\t            0x1a0000: 0x80400000,\n\t            0x1b0000: 0x401040,\n\t            0x1c0000: 0x80001000,\n\t            0x1d0000: 0x400000,\n\t            0x1e0000: 0x40,\n\t            0x1f0000: 0x1000,\n\t            0x108000: 0x80400000,\n\t            0x118000: 0x80401040,\n\t            0x128000: 0x0,\n\t            0x138000: 0x401000,\n\t            0x148000: 0x400040,\n\t            0x158000: 0x80000000,\n\t            0x168000: 0x80001040,\n\t            0x178000: 0x40,\n\t            0x188000: 0x80000040,\n\t            0x198000: 0x1000,\n\t            0x1a8000: 0x80001000,\n\t            0x1b8000: 0x80400040,\n\t            0x1c8000: 0x1040,\n\t            0x1d8000: 0x80401000,\n\t            0x1e8000: 0x400000,\n\t            0x1f8000: 0x401040\n\t        },\n\t        {\n\t            0x0: 0x80,\n\t            0x1000: 0x1040000,\n\t            0x2000: 0x40000,\n\t            0x3000: 0x20000000,\n\t            0x4000: 0x20040080,\n\t            0x5000: 0x1000080,\n\t            0x6000: 0x21000080,\n\t            0x7000: 0x40080,\n\t            0x8000: 0x1000000,\n\t            0x9000: 0x20040000,\n\t            0xa000: 0x20000080,\n\t            0xb000: 0x21040080,\n\t            0xc000: 0x21040000,\n\t            0xd000: 0x0,\n\t            0xe000: 0x1040080,\n\t            0xf000: 0x21000000,\n\t            0x800: 0x1040080,\n\t            0x1800: 0x21000080,\n\t            0x2800: 0x80,\n\t            0x3800: 0x1040000,\n\t            0x4800: 0x40000,\n\t            0x5800: 0x20040080,\n\t            0x6800: 0x21040000,\n\t            0x7800: 0x20000000,\n\t            0x8800: 0x20040000,\n\t            0x9800: 0x0,\n\t            0xa800: 0x21040080,\n\t            0xb800: 0x1000080,\n\t            0xc800: 0x20000080,\n\t            0xd800: 0x21000000,\n\t            0xe800: 0x1000000,\n\t            0xf800: 0x40080,\n\t            0x10000: 0x40000,\n\t            0x11000: 0x80,\n\t            0x12000: 0x20000000,\n\t            0x13000: 0x21000080,\n\t            0x14000: 0x1000080,\n\t            0x15000: 0x21040000,\n\t            0x16000: 0x20040080,\n\t            0x17000: 0x1000000,\n\t            0x18000: 0x21040080,\n\t            0x19000: 0x21000000,\n\t            0x1a000: 0x1040000,\n\t            0x1b000: 0x20040000,\n\t            0x1c000: 0x40080,\n\t            0x1d000: 0x20000080,\n\t            0x1e000: 0x0,\n\t            0x1f000: 0x1040080,\n\t            0x10800: 0x21000080,\n\t            0x11800: 0x1000000,\n\t            0x12800: 0x1040000,\n\t            0x13800: 0x20040080,\n\t            0x14800: 0x20000000,\n\t            0x15800: 0x1040080,\n\t            0x16800: 0x80,\n\t            0x17800: 0x21040000,\n\t            0x18800: 0x40080,\n\t            0x19800: 0x21040080,\n\t            0x1a800: 0x0,\n\t            0x1b800: 0x21000000,\n\t            0x1c800: 0x1000080,\n\t            0x1d800: 0x40000,\n\t            0x1e800: 0x20040000,\n\t            0x1f800: 0x20000080\n\t        },\n\t        {\n\t            0x0: 0x10000008,\n\t            0x100: 0x2000,\n\t            0x200: 0x10200000,\n\t            0x300: 0x10202008,\n\t            0x400: 0x10002000,\n\t            0x500: 0x200000,\n\t            0x600: 0x200008,\n\t            0x700: 0x10000000,\n\t            0x800: 0x0,\n\t            0x900: 0x10002008,\n\t            0xa00: 0x202000,\n\t            0xb00: 0x8,\n\t            0xc00: 0x10200008,\n\t            0xd00: 0x202008,\n\t            0xe00: 0x2008,\n\t            0xf00: 0x10202000,\n\t            0x80: 0x10200000,\n\t            0x180: 0x10202008,\n\t            0x280: 0x8,\n\t            0x380: 0x200000,\n\t            0x480: 0x202008,\n\t            0x580: 0x10000008,\n\t            0x680: 0x10002000,\n\t            0x780: 0x2008,\n\t            0x880: 0x200008,\n\t            0x980: 0x2000,\n\t            0xa80: 0x10002008,\n\t            0xb80: 0x10200008,\n\t            0xc80: 0x0,\n\t            0xd80: 0x10202000,\n\t            0xe80: 0x202000,\n\t            0xf80: 0x10000000,\n\t            0x1000: 0x10002000,\n\t            0x1100: 0x10200008,\n\t            0x1200: 0x10202008,\n\t            0x1300: 0x2008,\n\t            0x1400: 0x200000,\n\t            0x1500: 0x10000000,\n\t            0x1600: 0x10000008,\n\t            0x1700: 0x202000,\n\t            0x1800: 0x202008,\n\t            0x1900: 0x0,\n\t            0x1a00: 0x8,\n\t            0x1b00: 0x10200000,\n\t            0x1c00: 0x2000,\n\t            0x1d00: 0x10002008,\n\t            0x1e00: 0x10202000,\n\t            0x1f00: 0x200008,\n\t            0x1080: 0x8,\n\t            0x1180: 0x202000,\n\t            0x1280: 0x200000,\n\t            0x1380: 0x10000008,\n\t            0x1480: 0x10002000,\n\t            0x1580: 0x2008,\n\t            0x1680: 0x10202008,\n\t            0x1780: 0x10200000,\n\t            0x1880: 0x10202000,\n\t            0x1980: 0x10200008,\n\t            0x1a80: 0x2000,\n\t            0x1b80: 0x202008,\n\t            0x1c80: 0x200008,\n\t            0x1d80: 0x0,\n\t            0x1e80: 0x10000000,\n\t            0x1f80: 0x10002008\n\t        },\n\t        {\n\t            0x0: 0x100000,\n\t            0x10: 0x2000401,\n\t            0x20: 0x400,\n\t            0x30: 0x100401,\n\t            0x40: 0x2100401,\n\t            0x50: 0x0,\n\t            0x60: 0x1,\n\t            0x70: 0x2100001,\n\t            0x80: 0x2000400,\n\t            0x90: 0x100001,\n\t            0xa0: 0x2000001,\n\t            0xb0: 0x2100400,\n\t            0xc0: 0x2100000,\n\t            0xd0: 0x401,\n\t            0xe0: 0x100400,\n\t            0xf0: 0x2000000,\n\t            0x8: 0x2100001,\n\t            0x18: 0x0,\n\t            0x28: 0x2000401,\n\t            0x38: 0x2100400,\n\t            0x48: 0x100000,\n\t            0x58: 0x2000001,\n\t            0x68: 0x2000000,\n\t            0x78: 0x401,\n\t            0x88: 0x100401,\n\t            0x98: 0x2000400,\n\t            0xa8: 0x2100000,\n\t            0xb8: 0x100001,\n\t            0xc8: 0x400,\n\t            0xd8: 0x2100401,\n\t            0xe8: 0x1,\n\t            0xf8: 0x100400,\n\t            0x100: 0x2000000,\n\t            0x110: 0x100000,\n\t            0x120: 0x2000401,\n\t            0x130: 0x2100001,\n\t            0x140: 0x100001,\n\t            0x150: 0x2000400,\n\t            0x160: 0x2100400,\n\t            0x170: 0x100401,\n\t            0x180: 0x401,\n\t            0x190: 0x2100401,\n\t            0x1a0: 0x100400,\n\t            0x1b0: 0x1,\n\t            0x1c0: 0x0,\n\t            0x1d0: 0x2100000,\n\t            0x1e0: 0x2000001,\n\t            0x1f0: 0x400,\n\t            0x108: 0x100400,\n\t            0x118: 0x2000401,\n\t            0x128: 0x2100001,\n\t            0x138: 0x1,\n\t            0x148: 0x2000000,\n\t            0x158: 0x100000,\n\t            0x168: 0x401,\n\t            0x178: 0x2100400,\n\t            0x188: 0x2000001,\n\t            0x198: 0x2100000,\n\t            0x1a8: 0x0,\n\t            0x1b8: 0x2100401,\n\t            0x1c8: 0x100401,\n\t            0x1d8: 0x400,\n\t            0x1e8: 0x2000400,\n\t            0x1f8: 0x100001\n\t        },\n\t        {\n\t            0x0: 0x8000820,\n\t            0x1: 0x20000,\n\t            0x2: 0x8000000,\n\t            0x3: 0x20,\n\t            0x4: 0x20020,\n\t            0x5: 0x8020820,\n\t            0x6: 0x8020800,\n\t            0x7: 0x800,\n\t            0x8: 0x8020000,\n\t            0x9: 0x8000800,\n\t            0xa: 0x20800,\n\t            0xb: 0x8020020,\n\t            0xc: 0x820,\n\t            0xd: 0x0,\n\t            0xe: 0x8000020,\n\t            0xf: 0x20820,\n\t            0x80000000: 0x800,\n\t            0x80000001: 0x8020820,\n\t            0x80000002: 0x8000820,\n\t            0x80000003: 0x8000000,\n\t            0x80000004: 0x8020000,\n\t            0x80000005: 0x20800,\n\t            0x80000006: 0x20820,\n\t            0x80000007: 0x20,\n\t            0x80000008: 0x8000020,\n\t            0x80000009: 0x820,\n\t            0x8000000a: 0x20020,\n\t            0x8000000b: 0x8020800,\n\t            0x8000000c: 0x0,\n\t            0x8000000d: 0x8020020,\n\t            0x8000000e: 0x8000800,\n\t            0x8000000f: 0x20000,\n\t            0x10: 0x20820,\n\t            0x11: 0x8020800,\n\t            0x12: 0x20,\n\t            0x13: 0x800,\n\t            0x14: 0x8000800,\n\t            0x15: 0x8000020,\n\t            0x16: 0x8020020,\n\t            0x17: 0x20000,\n\t            0x18: 0x0,\n\t            0x19: 0x20020,\n\t            0x1a: 0x8020000,\n\t            0x1b: 0x8000820,\n\t            0x1c: 0x8020820,\n\t            0x1d: 0x20800,\n\t            0x1e: 0x820,\n\t            0x1f: 0x8000000,\n\t            0x80000010: 0x20000,\n\t            0x80000011: 0x800,\n\t            0x80000012: 0x8020020,\n\t            0x80000013: 0x20820,\n\t            0x80000014: 0x20,\n\t            0x80000015: 0x8020000,\n\t            0x80000016: 0x8000000,\n\t            0x80000017: 0x8000820,\n\t            0x80000018: 0x8020820,\n\t            0x80000019: 0x8000020,\n\t            0x8000001a: 0x8000800,\n\t            0x8000001b: 0x0,\n\t            0x8000001c: 0x20800,\n\t            0x8000001d: 0x820,\n\t            0x8000001e: 0x20020,\n\t            0x8000001f: 0x8020800\n\t        }\n\t    ];\n\n\t    // Masks that select the SBOX input\n\t    var SBOX_MASK = [\n\t        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,\n\t        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f\n\t    ];\n\n\t    /**\n\t     * DES block cipher algorithm.\n\t     */\n\t    var DES = C_algo.DES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\n\t            // Select 56 bits according to PC1\n\t            var keyBits = [];\n\t            for (var i = 0; i < 56; i++) {\n\t                var keyBitPos = PC1[i] - 1;\n\t                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;\n\t            }\n\n\t            // Assemble 16 subkeys\n\t            var subKeys = this._subKeys = [];\n\t            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {\n\t                // Create subkey\n\t                var subKey = subKeys[nSubKey] = [];\n\n\t                // Shortcut\n\t                var bitShift = BIT_SHIFTS[nSubKey];\n\n\t                // Select 48 bits according to PC2\n\t                for (var i = 0; i < 24; i++) {\n\t                    // Select from the left 28 key bits\n\t                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);\n\n\t                    // Select from the right 28 key bits\n\t                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);\n\t                }\n\n\t                // Since each subkey is applied to an expanded 32-bit input,\n\t                // the subkey can be broken into 8 values scaled to 32-bits,\n\t                // which allows the key to be used without expansion\n\t                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);\n\t                for (var i = 1; i < 7; i++) {\n\t                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);\n\t                }\n\t                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);\n\t            }\n\n\t            // Compute inverse subkeys\n\t            var invSubKeys = this._invSubKeys = [];\n\t            for (var i = 0; i < 16; i++) {\n\t                invSubKeys[i] = subKeys[15 - i];\n\t            }\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._subKeys);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._invSubKeys);\n\t        },\n\n\t        _doCryptBlock: function (M, offset, subKeys) {\n\t            // Get input\n\t            this._lBlock = M[offset];\n\t            this._rBlock = M[offset + 1];\n\n\t            // Initial permutation\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);\n\t            exchangeLR.call(this, 16, 0x0000ffff);\n\t            exchangeRL.call(this, 2,  0x33333333);\n\t            exchangeRL.call(this, 8,  0x00ff00ff);\n\t            exchangeLR.call(this, 1,  0x55555555);\n\n\t            // Rounds\n\t            for (var round = 0; round < 16; round++) {\n\t                // Shortcuts\n\t                var subKey = subKeys[round];\n\t                var lBlock = this._lBlock;\n\t                var rBlock = this._rBlock;\n\n\t                // Feistel function\n\t                var f = 0;\n\t                for (var i = 0; i < 8; i++) {\n\t                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];\n\t                }\n\t                this._lBlock = rBlock;\n\t                this._rBlock = lBlock ^ f;\n\t            }\n\n\t            // Undo swap from last round\n\t            var t = this._lBlock;\n\t            this._lBlock = this._rBlock;\n\t            this._rBlock = t;\n\n\t            // Final permutation\n\t            exchangeLR.call(this, 1,  0x55555555);\n\t            exchangeRL.call(this, 8,  0x00ff00ff);\n\t            exchangeRL.call(this, 2,  0x33333333);\n\t            exchangeLR.call(this, 16, 0x0000ffff);\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);\n\n\t            // Set output\n\t            M[offset] = this._lBlock;\n\t            M[offset + 1] = this._rBlock;\n\t        },\n\n\t        keySize: 64/32,\n\n\t        ivSize: 64/32,\n\n\t        blockSize: 64/32\n\t    });\n\n\t    // Swap bits across the left and right words\n\t    function exchangeLR(offset, mask) {\n\t        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;\n\t        this._rBlock ^= t;\n\t        this._lBlock ^= t << offset;\n\t    }\n\n\t    function exchangeRL(offset, mask) {\n\t        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;\n\t        this._lBlock ^= t;\n\t        this._rBlock ^= t << offset;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.DES = BlockCipher._createHelper(DES);\n\n\t    /**\n\t     * Triple-DES block cipher algorithm.\n\t     */\n\t    var TripleDES = C_algo.TripleDES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\n\t            // Create DES instances\n\t            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));\n\t            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));\n\t            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._des1.encryptBlock(M, offset);\n\t            this._des2.decryptBlock(M, offset);\n\t            this._des3.encryptBlock(M, offset);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            this._des3.decryptBlock(M, offset);\n\t            this._des2.encryptBlock(M, offset);\n\t            this._des1.decryptBlock(M, offset);\n\t        },\n\n\t        keySize: 192/32,\n\n\t        ivSize: 64/32,\n\n\t        blockSize: 64/32\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.TripleDES = BlockCipher._createHelper(TripleDES);\n\t}());\n\n\n\treturn CryptoJS.TripleDES;\n\n}));\n},{\"./cipher-core\":50,\"./core\":51,\"./enc-base64\":52,\"./evpkdf\":54,\"./md5\":59}],82:[function(require,module,exports){\n;(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var X32WordArray = C_lib.WordArray;\n\n\t    /**\n\t     * x64 namespace.\n\t     */\n\t    var C_x64 = C.x64 = {};\n\n\t    /**\n\t     * A 64-bit word.\n\t     */\n\t    var X64Word = C_x64.Word = Base.extend({\n\t        /**\n\t         * Initializes a newly created 64-bit word.\n\t         *\n\t         * @param {number} high The high 32 bits.\n\t         * @param {number} low The low 32 bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\n\t         */\n\t        init: function (high, low) {\n\t            this.high = high;\n\t            this.low = low;\n\t        }\n\n\t        /**\n\t         * Bitwise NOTs this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after negating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var negated = x64Word.not();\n\t         */\n\t        // not: function () {\n\t            // var high = ~this.high;\n\t            // var low = ~this.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise ANDs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to AND with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after ANDing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var anded = x64Word.and(anotherX64Word);\n\t         */\n\t        // and: function (word) {\n\t            // var high = this.high & word.high;\n\t            // var low = this.low & word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise ORs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to OR with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after ORing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var ored = x64Word.or(anotherX64Word);\n\t         */\n\t        // or: function (word) {\n\t            // var high = this.high | word.high;\n\t            // var low = this.low | word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise XORs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to XOR with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after XORing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var xored = x64Word.xor(anotherX64Word);\n\t         */\n\t        // xor: function (word) {\n\t            // var high = this.high ^ word.high;\n\t            // var low = this.low ^ word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Shifts this word n bits to the left.\n\t         *\n\t         * @param {number} n The number of bits to shift.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after shifting.\n\t         *\n\t         * @example\n\t         *\n\t         *     var shifted = x64Word.shiftL(25);\n\t         */\n\t        // shiftL: function (n) {\n\t            // if (n < 32) {\n\t                // var high = (this.high << n) | (this.low >>> (32 - n));\n\t                // var low = this.low << n;\n\t            // } else {\n\t                // var high = this.low << (n - 32);\n\t                // var low = 0;\n\t            // }\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Shifts this word n bits to the right.\n\t         *\n\t         * @param {number} n The number of bits to shift.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after shifting.\n\t         *\n\t         * @example\n\t         *\n\t         *     var shifted = x64Word.shiftR(7);\n\t         */\n\t        // shiftR: function (n) {\n\t            // if (n < 32) {\n\t                // var low = (this.low >>> n) | (this.high << (32 - n));\n\t                // var high = this.high >>> n;\n\t            // } else {\n\t                // var low = this.high >>> (n - 32);\n\t                // var high = 0;\n\t            // }\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Rotates this word n bits to the left.\n\t         *\n\t         * @param {number} n The number of bits to rotate.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after rotating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var rotated = x64Word.rotL(25);\n\t         */\n\t        // rotL: function (n) {\n\t            // return this.shiftL(n).or(this.shiftR(64 - n));\n\t        // },\n\n\t        /**\n\t         * Rotates this word n bits to the right.\n\t         *\n\t         * @param {number} n The number of bits to rotate.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after rotating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var rotated = x64Word.rotR(7);\n\t         */\n\t        // rotR: function (n) {\n\t            // return this.shiftR(n).or(this.shiftL(64 - n));\n\t        // },\n\n\t        /**\n\t         * Adds this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to add with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after adding.\n\t         *\n\t         * @example\n\t         *\n\t         *     var added = x64Word.add(anotherX64Word);\n\t         */\n\t        // add: function (word) {\n\t            // var low = (this.low + word.low) | 0;\n\t            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;\n\t            // var high = (this.high + word.high + carry) | 0;\n\n\t            // return X64Word.create(high, low);\n\t        // }\n\t    });\n\n\t    /**\n\t     * An array of 64-bit words.\n\t     *\n\t     * @property {Array} words The array of CryptoJS.x64.Word objects.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var X64WordArray = C_x64.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create();\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n\t         *     ]);\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n\t         *     ], 10);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 8;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this 64-bit word array to a 32-bit word array.\n\t         *\n\t         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var x32WordArray = x64WordArray.toX32();\n\t         */\n\t        toX32: function () {\n\t            // Shortcuts\n\t            var x64Words = this.words;\n\t            var x64WordsLength = x64Words.length;\n\n\t            // Convert\n\t            var x32Words = [];\n\t            for (var i = 0; i < x64WordsLength; i++) {\n\t                var x64Word = x64Words[i];\n\t                x32Words.push(x64Word.high);\n\t                x32Words.push(x64Word.low);\n\t            }\n\n\t            return X32WordArray.create(x32Words, this.sigBytes);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {X64WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = x64WordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\n\t            // Clone \"words\" array\n\t            var words = clone.words = this.words.slice(0);\n\n\t            // Clone each X64Word object\n\t            var wordsLength = words.length;\n\t            for (var i = 0; i < wordsLength; i++) {\n\t                words[i] = words[i].clone();\n\t            }\n\n\t            return clone;\n\t        }\n\t    });\n\t}());\n\n\n\treturn CryptoJS;\n\n}));\n},{\"./core\":51}],83:[function(require,module,exports){\n/*! https://mths.be/utf8js v2.0.0 by @mathias */\n;(function(root) {\n\n\t// Detect free variables `exports`\n\tvar freeExports = typeof exports == 'object' && exports;\n\n\t// Detect free variable `module`\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\n\t// Detect free variable `global`, from Node.js or Browserified code,\n\t// and use it as `root`\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar stringFromCharCode = String.fromCharCode;\n\n\t// Taken from https://mths.be/punycode\n\tfunction ucs2decode(string) {\n\t\tvar output = [];\n\t\tvar counter = 0;\n\t\tvar length = string.length;\n\t\tvar value;\n\t\tvar extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t// Taken from https://mths.be/punycode\n\tfunction ucs2encode(array) {\n\t\tvar length = array.length;\n\t\tvar index = -1;\n\t\tvar value;\n\t\tvar output = '';\n\t\twhile (++index < length) {\n\t\t\tvalue = array[index];\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t}\n\t\treturn output;\n\t}\n\n\tfunction checkScalarValue(codePoint) {\n\t\tif (codePoint >= 0xD800 && codePoint <= 0xDFFF) {\n\t\t\tthrow Error(\n\t\t\t\t'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +\n\t\t\t\t' is not a scalar value'\n\t\t\t);\n\t\t}\n\t}\n\t/*--------------------------------------------------------------------------*/\n\n\tfunction createByte(codePoint, shift) {\n\t\treturn stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);\n\t}\n\n\tfunction encodeCodePoint(codePoint) {\n\t\tif ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence\n\t\t\treturn stringFromCharCode(codePoint);\n\t\t}\n\t\tvar symbol = '';\n\t\tif ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);\n\t\t}\n\t\telse if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence\n\t\t\tcheckScalarValue(codePoint);\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);\n\t\t\tsymbol += createByte(codePoint, 6);\n\t\t}\n\t\telse if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);\n\t\t\tsymbol += createByte(codePoint, 12);\n\t\t\tsymbol += createByte(codePoint, 6);\n\t\t}\n\t\tsymbol += stringFromCharCode((codePoint & 0x3F) | 0x80);\n\t\treturn symbol;\n\t}\n\n\tfunction utf8encode(string) {\n\t\tvar codePoints = ucs2decode(string);\n\t\tvar length = codePoints.length;\n\t\tvar index = -1;\n\t\tvar codePoint;\n\t\tvar byteString = '';\n\t\twhile (++index < length) {\n\t\t\tcodePoint = codePoints[index];\n\t\t\tbyteString += encodeCodePoint(codePoint);\n\t\t}\n\t\treturn byteString;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tfunction readContinuationByte() {\n\t\tif (byteIndex >= byteCount) {\n\t\t\tthrow Error('Invalid byte index');\n\t\t}\n\n\t\tvar continuationByte = byteArray[byteIndex] & 0xFF;\n\t\tbyteIndex++;\n\n\t\tif ((continuationByte & 0xC0) == 0x80) {\n\t\t\treturn continuationByte & 0x3F;\n\t\t}\n\n\t\t// If we end up here, it’s not a continuation byte\n\t\tthrow Error('Invalid continuation byte');\n\t}\n\n\tfunction decodeSymbol() {\n\t\tvar byte1;\n\t\tvar byte2;\n\t\tvar byte3;\n\t\tvar byte4;\n\t\tvar codePoint;\n\n\t\tif (byteIndex > byteCount) {\n\t\t\tthrow Error('Invalid byte index');\n\t\t}\n\n\t\tif (byteIndex == byteCount) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Read first byte\n\t\tbyte1 = byteArray[byteIndex] & 0xFF;\n\t\tbyteIndex++;\n\n\t\t// 1-byte sequence (no continuation bytes)\n\t\tif ((byte1 & 0x80) == 0) {\n\t\t\treturn byte1;\n\t\t}\n\n\t\t// 2-byte sequence\n\t\tif ((byte1 & 0xE0) == 0xC0) {\n\t\t\tvar byte2 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x1F) << 6) | byte2;\n\t\t\tif (codePoint >= 0x80) {\n\t\t\t\treturn codePoint;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid continuation byte');\n\t\t\t}\n\t\t}\n\n\t\t// 3-byte sequence (may include unpaired surrogates)\n\t\tif ((byte1 & 0xF0) == 0xE0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tbyte3 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;\n\t\t\tif (codePoint >= 0x0800) {\n\t\t\t\tcheckScalarValue(codePoint);\n\t\t\t\treturn codePoint;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid continuation byte');\n\t\t\t}\n\t\t}\n\n\t\t// 4-byte sequence\n\t\tif ((byte1 & 0xF8) == 0xF0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tbyte3 = readContinuationByte();\n\t\t\tbyte4 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |\n\t\t\t\t(byte3 << 0x06) | byte4;\n\t\t\tif (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {\n\t\t\t\treturn codePoint;\n\t\t\t}\n\t\t}\n\n\t\tthrow Error('Invalid UTF-8 detected');\n\t}\n\n\tvar byteArray;\n\tvar byteCount;\n\tvar byteIndex;\n\tfunction utf8decode(byteString) {\n\t\tbyteArray = ucs2decode(byteString);\n\t\tbyteCount = byteArray.length;\n\t\tbyteIndex = 0;\n\t\tvar codePoints = [];\n\t\tvar tmp;\n\t\twhile ((tmp = decodeSymbol()) !== false) {\n\t\t\tcodePoints.push(tmp);\n\t\t}\n\t\treturn ucs2encode(codePoints);\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar utf8 = {\n\t\t'version': '2.0.0',\n\t\t'encode': utf8encode,\n\t\t'decode': utf8decode\n\t};\n\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine(function() {\n\t\t\treturn utf8;\n\t\t});\n\t}\telse if (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = utf8;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tvar object = {};\n\t\t\tvar hasOwnProperty = object.hasOwnProperty;\n\t\t\tfor (var key in utf8) {\n\t\t\t\thasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.utf8 = utf8;\n\t}\n\n}(this));\n\n},{}],\"bignumber.js\":[function(require,module,exports){\n/*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */\n\n;(function (global) {\n    'use strict';\n\n    /*\n      bignumber.js v2.0.7\n      A JavaScript library for arbitrary-precision arithmetic.\n      https://github.com/MikeMcl/bignumber.js\n      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>\n      MIT Expat Licence\n    */\n\n\n    var BigNumber, crypto, parseNumeric,\n        isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n        mathceil = Math.ceil,\n        mathfloor = Math.floor,\n        notBool = ' not a boolean or binary digit',\n        roundingMode = 'rounding mode',\n        tooManyDigits = 'number type has more than 15 significant digits',\n        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\n        BASE = 1e14,\n        LOG_BASE = 14,\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n        SQRT_BASE = 1e7,\n\n        /*\n         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an\n         * exception is thrown (if ERRORS is true).\n         */\n        MAX = 1E9;                                   // 0 to MAX_INT32\n\n\n    /*\n     * Create and return a BigNumber constructor.\n     */\n    function another(configObj) {\n        var div,\n\n            // id tracks the caller function, so its name can be included in error messages.\n            id = 0,\n            P = BigNumber.prototype,\n            ONE = new BigNumber(1),\n\n\n            /********************************* EDITABLE DEFAULTS **********************************/\n\n\n            /*\n             * The default values below must be integers within the inclusive ranges stated.\n             * The values can also be changed at run-time using BigNumber.config.\n             */\n\n            // The maximum number of decimal places for operations involving division.\n            DECIMAL_PLACES = 20,                     // 0 to MAX\n\n            /*\n             * The rounding mode used when rounding to the above decimal places, and when using\n             * toExponential, toFixed, toFormat and toPrecision, and round (default value).\n             * UP         0 Away from zero.\n             * DOWN       1 Towards zero.\n             * CEIL       2 Towards +Infinity.\n             * FLOOR      3 Towards -Infinity.\n             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n             */\n            ROUNDING_MODE = 4,                       // 0 to 8\n\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n\n            // The exponent value at and beneath which toString returns exponential notation.\n            // Number type: -7\n            TO_EXP_NEG = -7,                         // 0 to -MAX\n\n            // The exponent value at and above which toString returns exponential notation.\n            // Number type: 21\n            TO_EXP_POS = 21,                         // 0 to MAX\n\n            // RANGE : [MIN_EXP, MAX_EXP]\n\n            // The minimum exponent value, beneath which underflow to zero occurs.\n            // Number type: -324  (5e-324)\n            MIN_EXP = -1e7,                          // -1 to -MAX\n\n            // The maximum exponent value, above which overflow to Infinity occurs.\n            // Number type:  308  (1.7976931348623157e+308)\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n            MAX_EXP = 1e7,                           // 1 to MAX\n\n            // Whether BigNumber Errors are ever thrown.\n            ERRORS = true,                           // true or false\n\n            // Change to intValidatorNoErrors if ERRORS is false.\n            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors\n\n            // Whether to use cryptographically-secure random number generation, if available.\n            CRYPTO = false,                          // true or false\n\n            /*\n             * The modulo mode used when calculating the modulus: a mod n.\n             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n             * The remainder (r) is calculated as: r = a - n * q.\n             *\n             * UP        0 The remainder is positive if the dividend is negative, else is negative.\n             * DOWN      1 The remainder has the same sign as the dividend.\n             *             This modulo mode is commonly known as 'truncated division' and is\n             *             equivalent to (a % n) in JavaScript.\n             * FLOOR     3 The remainder has the same sign as the divisor (Python %).\n             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n             *             The remainder is always positive.\n             *\n             * The truncated division, floored division, Euclidian division and IEEE 754 remainder\n             * modes are commonly used for the modulus operation.\n             * Although the other rounding modes can also be used, they may not give useful results.\n             */\n            MODULO_MODE = 1,                         // 0 to 9\n\n            // The maximum number of significant digits of the result of the toPower operation.\n            // If POW_PRECISION is 0, there will be unlimited significant digits.\n            POW_PRECISION = 100,                     // 0 to MAX\n\n            // The format specification used by the BigNumber.prototype.toFormat method.\n            FORMAT = {\n                decimalSeparator: '.',\n                groupSeparator: ',',\n                groupSize: 3,\n                secondaryGroupSize: 0,\n                fractionGroupSeparator: '\\xA0',      // non-breaking space\n                fractionGroupSize: 0\n            };\n\n\n        /******************************************************************************************/\n\n\n        // CONSTRUCTOR\n\n\n        /*\n         * The BigNumber constructor and exported function.\n         * Create and return a new instance of a BigNumber object.\n         *\n         * n {number|string|BigNumber} A numeric value.\n         * [b] {number} The base of n. Integer, 2 to 64 inclusive.\n         */\n        function BigNumber( n, b ) {\n            var c, e, i, num, len, str,\n                x = this;\n\n            // Enable constructor usage without new.\n            if ( !( x instanceof BigNumber ) ) {\n\n                // 'BigNumber() constructor call without new: {n}'\n                if (ERRORS) raise( 26, 'constructor call without new', n );\n                return new BigNumber( n, b );\n            }\n\n            // 'new BigNumber() base not an integer: {b}'\n            // 'new BigNumber() base out of range: {b}'\n            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {\n\n                // Duplicate.\n                if ( n instanceof BigNumber ) {\n                    x.s = n.s;\n                    x.e = n.e;\n                    x.c = ( n = n.c ) ? n.slice() : n;\n                    id = 0;\n                    return;\n                }\n\n                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {\n                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;\n\n                    // Fast path for integers.\n                    if ( n === ~~n ) {\n                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );\n                        x.e = e;\n                        x.c = [n];\n                        id = 0;\n                        return;\n                    }\n\n                    str = n + '';\n                } else {\n                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\n                }\n            } else {\n                b = b | 0;\n                str = n + '';\n\n                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\n                // Allow exponential notation to be used with base 10 argument.\n                if ( b == 10 ) {\n                    x = new BigNumber( n instanceof BigNumber ? n : str );\n                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );\n                }\n\n                // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n                // Any number in exponential form will fail due to the [Ee][+-].\n                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||\n                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +\n                    '(?:\\\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {\n                    return parseNumeric( x, str, num, b );\n                }\n\n                if (num) {\n                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;\n\n                    if ( ERRORS && str.replace( /^0\\.0*|\\./, '' ).length > 15 ) {\n\n                        // 'new BigNumber() number type has more than 15 significant digits: {n}'\n                        raise( id, tooManyDigits, n );\n                    }\n\n                    // Prevent later check for length on converted number.\n                    num = false;\n                } else {\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\n                }\n\n                str = convertBase( str, 10, b, x.s );\n            }\n\n            // Decimal point?\n            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );\n\n            // Exponential form?\n            if ( ( i = str.search( /e/i ) ) > 0 ) {\n\n                // Determine exponent.\n                if ( e < 0 ) e = i;\n                e += +str.slice( i + 1 );\n                str = str.substring( 0, i );\n            } else if ( e < 0 ) {\n\n                // Integer.\n                e = str.length;\n            }\n\n            // Determine leading zeros.\n            for ( i = 0; str.charCodeAt(i) === 48; i++ );\n\n            // Determine trailing zeros.\n            for ( len = str.length; str.charCodeAt(--len) === 48; );\n            str = str.slice( i, len + 1 );\n\n            if (str) {\n                len = str.length;\n\n                // Disallow numbers with over 15 significant digits if number type.\n                // 'new BigNumber() number type has more than 15 significant digits: {n}'\n                if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );\n\n                e = e - i - 1;\n\n                 // Overflow?\n                if ( e > MAX_EXP ) {\n\n                    // Infinity.\n                    x.c = x.e = null;\n\n                // Underflow?\n                } else if ( e < MIN_EXP ) {\n\n                    // Zero.\n                    x.c = [ x.e = 0 ];\n                } else {\n                    x.e = e;\n                    x.c = [];\n\n                    // Transform base\n\n                    // e is the base 10 exponent.\n                    // i is where to slice str to get the first element of the coefficient array.\n                    i = ( e + 1 ) % LOG_BASE;\n                    if ( e < 0 ) i += LOG_BASE;\n\n                    if ( i < len ) {\n                        if (i) x.c.push( +str.slice( 0, i ) );\n\n                        for ( len -= LOG_BASE; i < len; ) {\n                            x.c.push( +str.slice( i, i += LOG_BASE ) );\n                        }\n\n                        str = str.slice(i);\n                        i = LOG_BASE - str.length;\n                    } else {\n                        i -= len;\n                    }\n\n                    for ( ; i--; str += '0' );\n                    x.c.push( +str );\n                }\n            } else {\n\n                // Zero.\n                x.c = [ x.e = 0 ];\n            }\n\n            id = 0;\n        }\n\n\n        // CONSTRUCTOR PROPERTIES\n\n\n        BigNumber.another = another;\n\n        BigNumber.ROUND_UP = 0;\n        BigNumber.ROUND_DOWN = 1;\n        BigNumber.ROUND_CEIL = 2;\n        BigNumber.ROUND_FLOOR = 3;\n        BigNumber.ROUND_HALF_UP = 4;\n        BigNumber.ROUND_HALF_DOWN = 5;\n        BigNumber.ROUND_HALF_EVEN = 6;\n        BigNumber.ROUND_HALF_CEIL = 7;\n        BigNumber.ROUND_HALF_FLOOR = 8;\n        BigNumber.EUCLID = 9;\n\n\n        /*\n         * Configure infrequently-changing library-wide settings.\n         *\n         * Accept an object or an argument list, with one or many of the following properties or\n         * parameters respectively:\n         *\n         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive\n         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive\n         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or\n         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]\n         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or\n         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]\n         *   ERRORS          {boolean|number}   true, false, 1 or 0\n         *   CRYPTO          {boolean|number}   true, false, 1 or 0\n         *   MODULO_MODE     {number}           0 to 9 inclusive\n         *   POW_PRECISION   {number}           0 to MAX inclusive\n         *   FORMAT          {object}           See BigNumber.prototype.toFormat\n         *      decimalSeparator       {string}\n         *      groupSeparator         {string}\n         *      groupSize              {number}\n         *      secondaryGroupSize     {number}\n         *      fractionGroupSeparator {string}\n         *      fractionGroupSize      {number}\n         *\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)\n         *\n         * E.g.\n         * BigNumber.config(20, 4) is equivalent to\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\n         *\n         * Ignore properties/parameters set to null or undefined.\n         * Return an object with the properties current values.\n         */\n        BigNumber.config = function () {\n            var v, p,\n                i = 0,\n                r = {},\n                a = arguments,\n                o = a[0],\n                has = o && typeof o == 'object'\n                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }\n                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };\n\n            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n            // 'config() DECIMAL_PLACES not an integer: {v}'\n            // 'config() DECIMAL_PLACES out of range: {v}'\n            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {\n                DECIMAL_PLACES = v | 0;\n            }\n            r[p] = DECIMAL_PLACES;\n\n            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n            // 'config() ROUNDING_MODE not an integer: {v}'\n            // 'config() ROUNDING_MODE out of range: {v}'\n            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {\n                ROUNDING_MODE = v | 0;\n            }\n            r[p] = ROUNDING_MODE;\n\n            // EXPONENTIAL_AT {number|number[]}\n            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n            // 'config() EXPONENTIAL_AT not an integer: {v}'\n            // 'config() EXPONENTIAL_AT out of range: {v}'\n            if ( has( p = 'EXPONENTIAL_AT' ) ) {\n\n                if ( isArray(v) ) {\n                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {\n                        TO_EXP_NEG = v[0] | 0;\n                        TO_EXP_POS = v[1] | 0;\n                    }\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\n                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );\n                }\n            }\n            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];\n\n            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n            // 'config() RANGE not an integer: {v}'\n            // 'config() RANGE cannot be zero: {v}'\n            // 'config() RANGE out of range: {v}'\n            if ( has( p = 'RANGE' ) ) {\n\n                if ( isArray(v) ) {\n                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {\n                        MIN_EXP = v[0] | 0;\n                        MAX_EXP = v[1] | 0;\n                    }\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\n                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );\n                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );\n                }\n            }\n            r[p] = [ MIN_EXP, MAX_EXP ];\n\n            // ERRORS {boolean|number} true, false, 1 or 0.\n            // 'config() ERRORS not a boolean or binary digit: {v}'\n            if ( has( p = 'ERRORS' ) ) {\n\n                if ( v === !!v || v === 1 || v === 0 ) {\n                    id = 0;\n                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;\n                } else if (ERRORS) {\n                    raise( 2, p + notBool, v );\n                }\n            }\n            r[p] = ERRORS;\n\n            // CRYPTO {boolean|number} true, false, 1 or 0.\n            // 'config() CRYPTO not a boolean or binary digit: {v}'\n            // 'config() crypto unavailable: {crypto}'\n            if ( has( p = 'CRYPTO' ) ) {\n\n                if ( v === !!v || v === 1 || v === 0 ) {\n                    CRYPTO = !!( v && crypto && typeof crypto == 'object' );\n                    if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', crypto );\n                } else if (ERRORS) {\n                    raise( 2, p + notBool, v );\n                }\n            }\n            r[p] = CRYPTO;\n\n            // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n            // 'config() MODULO_MODE not an integer: {v}'\n            // 'config() MODULO_MODE out of range: {v}'\n            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {\n                MODULO_MODE = v | 0;\n            }\n            r[p] = MODULO_MODE;\n\n            // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n            // 'config() POW_PRECISION not an integer: {v}'\n            // 'config() POW_PRECISION out of range: {v}'\n            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {\n                POW_PRECISION = v | 0;\n            }\n            r[p] = POW_PRECISION;\n\n            // FORMAT {object}\n            // 'config() FORMAT not an object: {v}'\n            if ( has( p = 'FORMAT' ) ) {\n\n                if ( typeof v == 'object' ) {\n                    FORMAT = v;\n                } else if (ERRORS) {\n                    raise( 2, p + ' not an object', v );\n                }\n            }\n            r[p] = FORMAT;\n\n            return r;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the maximum of the arguments.\n         *\n         * arguments {number|string|BigNumber}\n         */\n        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };\n\n\n        /*\n         * Return a new BigNumber whose value is the minimum of the arguments.\n         *\n         * arguments {number|string|BigNumber}\n         */\n        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };\n\n\n        /*\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\n         * zeros are produced).\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         *\n         * 'random() decimal places not an integer: {dp}'\n         * 'random() decimal places out of range: {dp}'\n         * 'random() crypto unavailable: {crypto}'\n         */\n        BigNumber.random = (function () {\n            var pow2_53 = 0x20000000000000;\n\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n            // Check if Math.random() produces more than 32 bits of randomness.\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\n              ? function () { return mathfloor( Math.random() * pow2_53 ); }\n              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\n                  (Math.random() * 0x800000 | 0); };\n\n            return function (dp) {\n                var a, b, e, k, v,\n                    i = 0,\n                    c = [],\n                    rand = new BigNumber(ONE);\n\n                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;\n                k = mathceil( dp / LOG_BASE );\n\n                if (CRYPTO) {\n\n                    // Browsers supporting crypto.getRandomValues.\n                    if ( crypto && crypto.getRandomValues ) {\n\n                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );\n\n                        for ( ; i < k; ) {\n\n                            // 53 bits:\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n                            //                                     11111 11111111 11111111\n                            // 0x20000 is 2^21.\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\n\n                            // Rejection sampling:\n                            // 0 <= v < 9007199254740992\n                            // Probability that v >= 9e15, is\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n                            if ( v >= 9e15 ) {\n                                b = crypto.getRandomValues( new Uint32Array(2) );\n                                a[i] = b[0];\n                                a[i + 1] = b[1];\n                            } else {\n\n                                // 0 <= v <= 8999999999999999\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push( v % 1e14 );\n                                i += 2;\n                            }\n                        }\n                        i = k / 2;\n\n                    // Node.js supporting crypto.randomBytes.\n                    } else if ( crypto && crypto.randomBytes ) {\n\n                        // buffer\n                        a = crypto.randomBytes( k *= 7 );\n\n                        for ( ; i < k; ) {\n\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n                            // 0 <= v < 9007199254740992\n                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +\n                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +\n                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];\n\n                            if ( v >= 9e15 ) {\n                                crypto.randomBytes(7).copy( a, i );\n                            } else {\n\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push( v % 1e14 );\n                                i += 7;\n                            }\n                        }\n                        i = k / 7;\n                    } else if (ERRORS) {\n                        raise( 14, 'crypto unavailable', crypto );\n                    }\n                }\n\n                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.\n                if (!i) {\n\n                    for ( ; i < k; ) {\n                        v = random53bitInt();\n                        if ( v < 9e15 ) c[i++] = v % 1e14;\n                    }\n                }\n\n                k = c[--i];\n                dp %= LOG_BASE;\n\n                // Convert trailing digits to zeros according to dp.\n                if ( k && dp ) {\n                    v = POWS_TEN[LOG_BASE - dp];\n                    c[i] = mathfloor( k / v ) * v;\n                }\n\n                // Remove trailing elements which are zero.\n                for ( ; c[i] === 0; c.pop(), i-- );\n\n                // Zero?\n                if ( i < 0 ) {\n                    c = [ e = 0 ];\n                } else {\n\n                    // Remove leading elements which are zero and adjust exponent accordingly.\n                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);\n\n                    // Count the digits of the first element of c to determine leading zeros, and...\n                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);\n\n                    // adjust the exponent accordingly.\n                    if ( i < LOG_BASE ) e -= LOG_BASE - i;\n                }\n\n                rand.e = e;\n                rand.c = c;\n                return rand;\n            };\n        })();\n\n\n        // PRIVATE FUNCTIONS\n\n\n        // Convert a numeric string of baseIn to a numeric string of baseOut.\n        function convertBase( str, baseOut, baseIn, sign ) {\n            var d, e, k, r, x, xc, y,\n                i = str.indexOf( '.' ),\n                dp = DECIMAL_PLACES,\n                rm = ROUNDING_MODE;\n\n            if ( baseIn < 37 ) str = str.toLowerCase();\n\n            // Non-integer.\n            if ( i >= 0 ) {\n                k = POW_PRECISION;\n\n                // Unlimited precision.\n                POW_PRECISION = 0;\n                str = str.replace( '.', '' );\n                y = new BigNumber(baseIn);\n                x = y.pow( str.length - i );\n                POW_PRECISION = k;\n\n                // Convert str as if an integer, then restore the fraction part by dividing the\n                // result by its base raised to a power.\n                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );\n                y.e = y.c.length;\n            }\n\n            // Convert the number as integer.\n            xc = toBaseOut( str, baseIn, baseOut );\n            e = k = xc.length;\n\n            // Remove trailing zeros.\n            for ( ; xc[--k] == 0; xc.pop() );\n            if ( !xc[0] ) return '0';\n\n            if ( i < 0 ) {\n                --e;\n            } else {\n                x.c = xc;\n                x.e = e;\n\n                // sign is needed for correct rounding.\n                x.s = sign;\n                x = div( x, y, dp, rm, baseOut );\n                xc = x.c;\n                r = x.r;\n                e = x.e;\n            }\n\n            d = e + dp + 1;\n\n            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.\n            i = xc[d];\n            k = baseOut / 2;\n            r = r || d < 0 || xc[d + 1] != null;\n\n            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\n                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\n                         rm == ( x.s < 0 ? 8 : 7 ) );\n\n            if ( d < 1 || !xc[0] ) {\n\n                // 1^-dp or 0.\n                str = r ? toFixedPoint( '1', -dp ) : '0';\n            } else {\n                xc.length = d;\n\n                if (r) {\n\n                    // Rounding up may mean the previous digit has to be rounded up and so on.\n                    for ( --baseOut; ++xc[--d] > baseOut; ) {\n                        xc[d] = 0;\n\n                        if ( !d ) {\n                            ++e;\n                            xc.unshift(1);\n                        }\n                    }\n                }\n\n                // Determine trailing zeros.\n                for ( k = xc.length; !xc[--k]; );\n\n                // E.g. [4, 11, 15] becomes 4bf.\n                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );\n                str = toFixedPoint( str, e );\n            }\n\n            // The caller will add the sign.\n            return str;\n        }\n\n\n        // Perform division in the specified base. Called by div and convertBase.\n        div = (function () {\n\n            // Assume non-zero x and k.\n            function multiply( x, k, base ) {\n                var m, temp, xlo, xhi,\n                    carry = 0,\n                    i = x.length,\n                    klo = k % SQRT_BASE,\n                    khi = k / SQRT_BASE | 0;\n\n                for ( x = x.slice(); i--; ) {\n                    xlo = x[i] % SQRT_BASE;\n                    xhi = x[i] / SQRT_BASE | 0;\n                    m = khi * xlo + xhi * klo;\n                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;\n                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;\n                    x[i] = temp % base;\n                }\n\n                if (carry) x.unshift(carry);\n\n                return x;\n            }\n\n            function compare( a, b, aL, bL ) {\n                var i, cmp;\n\n                if ( aL != bL ) {\n                    cmp = aL > bL ? 1 : -1;\n                } else {\n\n                    for ( i = cmp = 0; i < aL; i++ ) {\n\n                        if ( a[i] != b[i] ) {\n                            cmp = a[i] > b[i] ? 1 : -1;\n                            break;\n                        }\n                    }\n                }\n                return cmp;\n            }\n\n            function subtract( a, b, aL, base ) {\n                var i = 0;\n\n                // Subtract b from a.\n                for ( ; aL--; ) {\n                    a[aL] -= i;\n                    i = a[aL] < b[aL] ? 1 : 0;\n                    a[aL] = i * base + a[aL] - b[aL];\n                }\n\n                // Remove leading zeros.\n                for ( ; !a[0] && a.length > 1; a.shift() );\n            }\n\n            // x: dividend, y: divisor.\n            return function ( x, y, dp, rm, base ) {\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\n                    yL, yz,\n                    s = x.s == y.s ? 1 : -1,\n                    xc = x.c,\n                    yc = y.c;\n\n                // Either NaN, Infinity or 0?\n                if ( !xc || !xc[0] || !yc || !yc[0] ) {\n\n                    return new BigNumber(\n\n                      // Return NaN if either NaN, or both Infinity or 0.\n                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :\n\n                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0\n                    );\n                }\n\n                q = new BigNumber(s);\n                qc = q.c = [];\n                e = x.e - y.e;\n                s = dp + e + 1;\n\n                if ( !base ) {\n                    base = BASE;\n                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );\n                    s = s / LOG_BASE | 0;\n                }\n\n                // Result exponent may be one less then the current value of e.\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );\n                if ( yc[i] > ( xc[i] || 0 ) ) e--;\n\n                if ( s < 0 ) {\n                    qc.push(1);\n                    more = true;\n                } else {\n                    xL = xc.length;\n                    yL = yc.length;\n                    i = 0;\n                    s += 2;\n\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n                    n = mathfloor( base / ( yc[0] + 1 ) );\n\n                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.\n                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {\n                    if ( n > 1 ) {\n                        yc = multiply( yc, n, base );\n                        xc = multiply( xc, n, base );\n                        yL = yc.length;\n                        xL = xc.length;\n                    }\n\n                    xi = yL;\n                    rem = xc.slice( 0, yL );\n                    remL = rem.length;\n\n                    // Add zeros to make remainder as long as divisor.\n                    for ( ; remL < yL; rem[remL++] = 0 );\n                    yz = yc.slice();\n                    yz.unshift(0);\n                    yc0 = yc[0];\n                    if ( yc[1] >= base / 2 ) yc0++;\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.\n                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;\n\n                    do {\n                        n = 0;\n\n                        // Compare divisor and remainder.\n                        cmp = compare( yc, rem, yL, remL );\n\n                        // If divisor < remainder.\n                        if ( cmp < 0 ) {\n\n                            // Calculate trial digit, n.\n\n                            rem0 = rem[0];\n                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );\n\n                            // n is how many times the divisor goes into the current remainder.\n                            n = mathfloor( rem0 / yc0 );\n\n                            //  Algorithm:\n                            //  1. product = divisor * trial digit (n)\n                            //  2. if product > remainder: product -= divisor, n--\n                            //  3. remainder -= product\n                            //  4. if product was < remainder at 2:\n                            //    5. compare new remainder and divisor\n                            //    6. If remainder > divisor: remainder -= divisor, n++\n\n                            if ( n > 1 ) {\n\n                                // n may be > base only when base is 3.\n                                if (n >= base) n = base - 1;\n\n                                // product = divisor * trial digit.\n                                prod = multiply( yc, n, base );\n                                prodL = prod.length;\n                                remL = rem.length;\n\n                                // Compare product and remainder.\n                                // If product > remainder.\n                                // Trial digit n too high.\n                                // n is 1 too high about 5% of the time, and is not known to have\n                                // ever been more than 1 too high.\n                                while ( compare( prod, rem, prodL, remL ) == 1 ) {\n                                    n--;\n\n                                    // Subtract divisor from product.\n                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );\n                                    prodL = prod.length;\n                                    cmp = 1;\n                                }\n                            } else {\n\n                                // n is 0 or 1, cmp is -1.\n                                // If n is 0, there is no need to compare yc and rem again below,\n                                // so change cmp to 1 to avoid it.\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                                if ( n == 0 ) {\n\n                                    // divisor < remainder, so n must be at least 1.\n                                    cmp = n = 1;\n                                }\n\n                                // product = divisor\n                                prod = yc.slice();\n                                prodL = prod.length;\n                            }\n\n                            if ( prodL < remL ) prod.unshift(0);\n\n                            // Subtract product from remainder.\n                            subtract( rem, prod, remL, base );\n                            remL = rem.length;\n\n                             // If product was < remainder.\n                            if ( cmp == -1 ) {\n\n                                // Compare divisor and new remainder.\n                                // If divisor < new remainder, subtract divisor from remainder.\n                                // Trial digit n too low.\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                                while ( compare( yc, rem, yL, remL ) < 1 ) {\n                                    n++;\n\n                                    // Subtract divisor from remainder.\n                                    subtract( rem, yL < remL ? yz : yc, remL, base );\n                                    remL = rem.length;\n                                }\n                            }\n                        } else if ( cmp === 0 ) {\n                            n++;\n                            rem = [0];\n                        } // else cmp === 1 and n will be 0\n\n                        // Add the next digit, n, to the result array.\n                        qc[i++] = n;\n\n                        // Update the remainder.\n                        if ( rem[0] ) {\n                            rem[remL++] = xc[xi] || 0;\n                        } else {\n                            rem = [ xc[xi] ];\n                            remL = 1;\n                        }\n                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );\n\n                    more = rem[0] != null;\n\n                    // Leading zero?\n                    if ( !qc[0] ) qc.shift();\n                }\n\n                if ( base == BASE ) {\n\n                    // To calculate q.e, first get the number of digits of qc[0].\n                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );\n                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );\n\n                // Caller is convertBase.\n                } else {\n                    q.e = e;\n                    q.r = +more;\n                }\n\n                return q;\n            };\n        })();\n\n\n        /*\n         * Return a string representing the value of BigNumber n in fixed-point or exponential\n         * notation rounded to the specified decimal places or significant digits.\n         *\n         * n is a BigNumber.\n         * i is the index of the last digit required (i.e. the digit that may be rounded up).\n         * rm is the rounding mode.\n         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.\n         */\n        function format( n, i, rm, caller ) {\n            var c0, e, ne, len, str;\n\n            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )\n              ? rm | 0 : ROUNDING_MODE;\n\n            if ( !n.c ) return n.toString();\n            c0 = n.c[0];\n            ne = n.e;\n\n            if ( i == null ) {\n                str = coeffToString( n.c );\n                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG\n                  ? toExponential( str, ne )\n                  : toFixedPoint( str, ne );\n            } else {\n                n = round( new BigNumber(n), i, rm );\n\n                // n.e may have changed if the value was rounded up.\n                e = n.e;\n\n                str = coeffToString( n.c );\n                len = str.length;\n\n                // toPrecision returns exponential notation if the number of significant digits\n                // specified is less than the number of digits necessary to represent the integer\n                // part of the value in fixed-point notation.\n\n                // Exponential notation.\n                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {\n\n                    // Append zeros?\n                    for ( ; len < i; str += '0', len++ );\n                    str = toExponential( str, e );\n\n                // Fixed-point notation.\n                } else {\n                    i -= ne;\n                    str = toFixedPoint( str, e );\n\n                    // Append zeros?\n                    if ( e + 1 > len ) {\n                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );\n                    } else {\n                        i += e - len;\n                        if ( i > 0 ) {\n                            if ( e + 1 == len ) str += '.';\n                            for ( ; i--; str += '0' );\n                        }\n                    }\n                }\n            }\n\n            return n.s < 0 && c0 ? '-' + str : str;\n        }\n\n\n        // Handle BigNumber.max and BigNumber.min.\n        function maxOrMin( args, method ) {\n            var m, n,\n                i = 0;\n\n            if ( isArray( args[0] ) ) args = args[0];\n            m = new BigNumber( args[0] );\n\n            for ( ; ++i < args.length; ) {\n                n = new BigNumber( args[i] );\n\n                // If any number is NaN, return NaN.\n                if ( !n.s ) {\n                    m = n;\n                    break;\n                } else if ( method.call( m, n ) ) {\n                    m = n;\n                }\n            }\n\n            return m;\n        }\n\n\n        /*\n         * Return true if n is an integer in range, otherwise throw.\n         * Use for argument validation when ERRORS is true.\n         */\n        function intValidatorWithErrors( n, min, max, caller, name ) {\n            if ( n < min || n > max || n != truncate(n) ) {\n                raise( caller, ( name || 'decimal places' ) +\n                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );\n            }\n\n            return true;\n        }\n\n\n        /*\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\n         * Called by minus, plus and times.\n         */\n        function normalise( n, c, e ) {\n            var i = 1,\n                j = c.length;\n\n             // Remove trailing zeros.\n            for ( ; !c[--j]; c.pop() );\n\n            // Calculate the base 10 exponent. First get the number of digits of c[0].\n            for ( j = c[0]; j >= 10; j /= 10, i++ );\n\n            // Overflow?\n            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {\n\n                // Infinity.\n                n.c = n.e = null;\n\n            // Underflow?\n            } else if ( e < MIN_EXP ) {\n\n                // Zero.\n                n.c = [ n.e = 0 ];\n            } else {\n                n.e = e;\n                n.c = c;\n            }\n\n            return n;\n        }\n\n\n        // Handle values that fail the validity test in BigNumber.\n        parseNumeric = (function () {\n            var basePrefix = /^(-?)0([xbo])/i,\n                dotAfter = /^([^.]+)\\.$/,\n                dotBefore = /^\\.([^.]+)$/,\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n                whitespaceOrPlus = /^\\s*\\+|^\\s+|\\s+$/g;\n\n            return function ( x, str, num, b ) {\n                var base,\n                    s = num ? str : str.replace( whitespaceOrPlus, '' );\n\n                // No exception on ±Infinity or NaN.\n                if ( isInfinityOrNaN.test(s) ) {\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n                } else {\n                    if ( !num ) {\n\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n                        s = s.replace( basePrefix, function ( m, p1, p2 ) {\n                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n                            return !b || b == base ? p1 : m;\n                        });\n\n                        if (b) {\n                            base = b;\n\n                            // E.g. '1.' to '1', '.1' to '0.1'\n                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );\n                        }\n\n                        if ( str != s ) return new BigNumber( s, base );\n                    }\n\n                    // 'new BigNumber() not a number: {n}'\n                    // 'new BigNumber() not a base {b} number: {n}'\n                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );\n                    x.s = null;\n                }\n\n                x.c = x.e = null;\n                id = 0;\n            }\n        })();\n\n\n        // Throw a BigNumber Error.\n        function raise( caller, msg, val ) {\n            var error = new Error( [\n                'new BigNumber',     // 0\n                'cmp',               // 1\n                'config',            // 2\n                'div',               // 3\n                'divToInt',          // 4\n                'eq',                // 5\n                'gt',                // 6\n                'gte',               // 7\n                'lt',                // 8\n                'lte',               // 9\n                'minus',             // 10\n                'mod',               // 11\n                'plus',              // 12\n                'precision',         // 13\n                'random',            // 14\n                'round',             // 15\n                'shift',             // 16\n                'times',             // 17\n                'toDigits',          // 18\n                'toExponential',     // 19\n                'toFixed',           // 20\n                'toFormat',          // 21\n                'toFraction',        // 22\n                'pow',               // 23\n                'toPrecision',       // 24\n                'toString',          // 25\n                'BigNumber'          // 26\n            ][caller] + '() ' + msg + ': ' + val );\n\n            error.name = 'BigNumber Error';\n            id = 0;\n            throw error;\n        }\n\n\n        /*\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\n         * If r is truthy, it is known that there are more digits after the rounding digit.\n         */\n        function round( x, sd, rm, r ) {\n            var d, i, j, k, n, ni, rd,\n                xc = x.c,\n                pows10 = POWS_TEN;\n\n            // if x is not Infinity or NaN...\n            if (xc) {\n\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.\n                // ni is the index of n within x.c.\n                // d is the number of digits of n.\n                // i is the index of rd within n including leading zeros.\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).\n                out: {\n\n                    // Get the number of digits of the first element of xc.\n                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );\n                    i = sd - d;\n\n                    // If the rounding digit is in the first element of xc...\n                    if ( i < 0 ) {\n                        i += LOG_BASE;\n                        j = sd;\n                        n = xc[ ni = 0 ];\n\n                        // Get the rounding digit at index j of n.\n                        rd = n / pows10[ d - j - 1 ] % 10 | 0;\n                    } else {\n                        ni = mathceil( ( i + 1 ) / LOG_BASE );\n\n                        if ( ni >= xc.length ) {\n\n                            if (r) {\n\n                                // Needed by sqrt.\n                                for ( ; xc.length <= ni; xc.push(0) );\n                                n = rd = 0;\n                                d = 1;\n                                i %= LOG_BASE;\n                                j = i - LOG_BASE + 1;\n                            } else {\n                                break out;\n                            }\n                        } else {\n                            n = k = xc[ni];\n\n                            // Get the number of digits of n.\n                            for ( d = 1; k >= 10; k /= 10, d++ );\n\n                            // Get the index of rd within n.\n                            i %= LOG_BASE;\n\n                            // Get the index of rd within n, adjusted for leading zeros.\n                            // The number of leading zeros of n is given by LOG_BASE - d.\n                            j = i - LOG_BASE + d;\n\n                            // Get the rounding digit at index j of n.\n                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;\n                        }\n                    }\n\n                    r = r || sd < 0 ||\n\n                    // Are there any non-zero digits after the rounding digit?\n                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right\n                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );\n\n                    r = rm < 4\n                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\n                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&\n\n                        // Check whether the digit to the left of the rounding digit is odd.\n                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||\n                          rm == ( x.s < 0 ? 8 : 7 ) );\n\n                    if ( sd < 1 || !xc[0] ) {\n                        xc.length = 0;\n\n                        if (r) {\n\n                            // Convert sd to decimal places.\n                            sd -= x.e + 1;\n\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                            xc[0] = pows10[ sd % LOG_BASE ];\n                            x.e = -sd || 0;\n                        } else {\n\n                            // Zero.\n                            xc[0] = x.e = 0;\n                        }\n\n                        return x;\n                    }\n\n                    // Remove excess digits.\n                    if ( i == 0 ) {\n                        xc.length = ni;\n                        k = 1;\n                        ni--;\n                    } else {\n                        xc.length = ni + 1;\n                        k = pows10[ LOG_BASE - i ];\n\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n                        // j > 0 means i > number of leading zeros of n.\n                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;\n                    }\n\n                    // Round up?\n                    if (r) {\n\n                        for ( ; ; ) {\n\n                            // If the digit to be rounded up is in the first element of xc...\n                            if ( ni == 0 ) {\n\n                                // i will be the length of xc[0] before k is added.\n                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );\n                                j = xc[0] += k;\n                                for ( k = 1; j >= 10; j /= 10, k++ );\n\n                                // if i != k the length has increased.\n                                if ( i != k ) {\n                                    x.e++;\n                                    if ( xc[0] == BASE ) xc[0] = 1;\n                                }\n\n                                break;\n                            } else {\n                                xc[ni] += k;\n                                if ( xc[ni] != BASE ) break;\n                                xc[ni--] = 0;\n                                k = 1;\n                            }\n                        }\n                    }\n\n                    // Remove trailing zeros.\n                    for ( i = xc.length; xc[--i] === 0; xc.pop() );\n                }\n\n                // Overflow? Infinity.\n                if ( x.e > MAX_EXP ) {\n                    x.c = x.e = null;\n\n                // Underflow? Zero.\n                } else if ( x.e < MIN_EXP ) {\n                    x.c = [ x.e = 0 ];\n                }\n            }\n\n            return x;\n        }\n\n\n        // PROTOTYPE/INSTANCE METHODS\n\n\n        /*\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.\n         */\n        P.absoluteValue = P.abs = function () {\n            var x = new BigNumber(this);\n            if ( x.s < 0 ) x.s = 1;\n            return x;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\n         * number in the direction of Infinity.\n         */\n        P.ceil = function () {\n            return round( new BigNumber(this), this.e + 1, 2 );\n        };\n\n\n        /*\n         * Return\n         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\n         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\n         * 0 if they have the same value,\n         * or null if the value of either is NaN.\n         */\n        P.comparedTo = P.cmp = function ( y, b ) {\n            id = 1;\n            return compare( this, new BigNumber( y, b ) );\n        };\n\n\n        /*\n         * Return the number of decimal places of the value of this BigNumber, or null if the value\n         * of this BigNumber is ±Infinity or NaN.\n         */\n        P.decimalPlaces = P.dp = function () {\n            var n, v,\n                c = this.c;\n\n            if ( !c ) return null;\n            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;\n\n            // Subtract the number of trailing zeros of the last number.\n            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );\n            if ( n < 0 ) n = 0;\n\n            return n;\n        };\n\n\n        /*\n         *  n / 0 = I\n         *  n / N = N\n         *  n / I = 0\n         *  0 / n = 0\n         *  0 / 0 = N\n         *  0 / N = N\n         *  0 / I = 0\n         *  N / n = N\n         *  N / 0 = N\n         *  N / N = N\n         *  N / I = N\n         *  I / n = I\n         *  I / 0 = I\n         *  I / N = N\n         *  I / I = N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n         */\n        P.dividedBy = P.div = function ( y, b ) {\n            id = 3;\n            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the integer part of dividing the value of this\n         * BigNumber by the value of BigNumber(y, b).\n         */\n        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {\n            id = 4;\n            return div( this, new BigNumber( y, b ), 0, 1 );\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\n         * otherwise returns false.\n         */\n        P.equals = P.eq = function ( y, b ) {\n            id = 5;\n            return compare( this, new BigNumber( y, b ) ) === 0;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\n         * number in the direction of -Infinity.\n         */\n        P.floor = function () {\n            return round( new BigNumber(this), this.e + 1, 3 );\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\n         * otherwise returns false.\n         */\n        P.greaterThan = P.gt = function ( y, b ) {\n            id = 6;\n            return compare( this, new BigNumber( y, b ) ) > 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is greater than or equal to the value of\n         * BigNumber(y, b), otherwise returns false.\n         */\n        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {\n            id = 7;\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;\n\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is a finite number, otherwise returns false.\n         */\n        P.isFinite = function () {\n            return !!this.c;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is an integer, otherwise return false.\n         */\n        P.isInteger = P.isInt = function () {\n            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is NaN, otherwise returns false.\n         */\n        P.isNaN = function () {\n            return !this.s;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is negative, otherwise returns false.\n         */\n        P.isNegative = P.isNeg = function () {\n            return this.s < 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.\n         */\n        P.isZero = function () {\n            return !!this.c && this.c[0] == 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\n         * otherwise returns false.\n         */\n        P.lessThan = P.lt = function ( y, b ) {\n            id = 8;\n            return compare( this, new BigNumber( y, b ) ) < 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is less than or equal to the value of\n         * BigNumber(y, b), otherwise returns false.\n         */\n        P.lessThanOrEqualTo = P.lte = function ( y, b ) {\n            id = 9;\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;\n        };\n\n\n        /*\n         *  n - 0 = n\n         *  n - N = N\n         *  n - I = -I\n         *  0 - n = -n\n         *  0 - 0 = 0\n         *  0 - N = N\n         *  0 - I = -I\n         *  N - n = N\n         *  N - 0 = N\n         *  N - N = N\n         *  N - I = N\n         *  I - n = I\n         *  I - 0 = I\n         *  I - N = N\n         *  I - I = N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\n         * BigNumber(y, b).\n         */\n        P.minus = P.sub = function ( y, b ) {\n            var i, j, t, xLTy,\n                x = this,\n                a = x.s;\n\n            id = 10;\n            y = new BigNumber( y, b );\n            b = y.s;\n\n            // Either NaN?\n            if ( !a || !b ) return new BigNumber(NaN);\n\n            // Signs differ?\n            if ( a != b ) {\n                y.s = -b;\n                return x.plus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if ( !xe || !ye ) {\n\n                // Either Infinity?\n                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );\n\n                // Either zero?\n                if ( !xc[0] || !yc[0] ) {\n\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :\n\n                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n                      ROUNDING_MODE == 3 ? -0 : 0 );\n                }\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Determine which is the bigger number.\n            if ( a = xe - ye ) {\n\n                if ( xLTy = a < 0 ) {\n                    a = -a;\n                    t = xc;\n                } else {\n                    ye = xe;\n                    t = yc;\n                }\n\n                t.reverse();\n\n                // Prepend zeros to equalise exponents.\n                for ( b = a; b--; t.push(0) );\n                t.reverse();\n            } else {\n\n                // Exponents equal. Check digit by digit.\n                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;\n\n                for ( a = b = 0; b < j; b++ ) {\n\n                    if ( xc[b] != yc[b] ) {\n                        xLTy = xc[b] < yc[b];\n                        break;\n                    }\n                }\n            }\n\n            // x < y? Point xc to the array of the bigger number.\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n\n            b = ( j = yc.length ) - ( i = xc.length );\n\n            // Append zeros to xc if shorter.\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );\n            b = BASE - 1;\n\n            // Subtract yc from xc.\n            for ( ; j > a; ) {\n\n                if ( xc[--j] < yc[j] ) {\n                    for ( i = j; i && !xc[--i]; xc[i] = b );\n                    --xc[i];\n                    xc[j] += BASE;\n                }\n\n                xc[j] -= yc[j];\n            }\n\n            // Remove leading zeros and adjust exponent accordingly.\n            for ( ; xc[0] == 0; xc.shift(), --ye );\n\n            // Zero?\n            if ( !xc[0] ) {\n\n                // Following IEEE 754 (2008) 6.3,\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;\n                y.c = [ y.e = 0 ];\n                return y;\n            }\n\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n            // for finite x and y.\n            return normalise( y, xc, ye );\n        };\n\n\n        /*\n         *   n % 0 =  N\n         *   n % N =  N\n         *   n % I =  n\n         *   0 % n =  0\n         *  -0 % n = -0\n         *   0 % 0 =  N\n         *   0 % N =  N\n         *   0 % I =  0\n         *   N % n =  N\n         *   N % 0 =  N\n         *   N % N =  N\n         *   N % I =  N\n         *   I % n =  N\n         *   I % 0 =  N\n         *   I % N =  N\n         *   I % I =  N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\n         */\n        P.modulo = P.mod = function ( y, b ) {\n            var q, s,\n                x = this;\n\n            id = 11;\n            y = new BigNumber( y, b );\n\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n            if ( !x.c || !y.s || y.c && !y.c[0] ) {\n                return new BigNumber(NaN);\n\n            // Return x if y is Infinity or x is zero.\n            } else if ( !y.c || x.c && !x.c[0] ) {\n                return new BigNumber(x);\n            }\n\n            if ( MODULO_MODE == 9 ) {\n\n                // Euclidian division: q = sign(y) * floor(x / abs(y))\n                // r = x - qy    where  0 <= r < abs(y)\n                s = y.s;\n                y.s = 1;\n                q = div( x, y, 0, 3 );\n                y.s = s;\n                q.s *= s;\n            } else {\n                q = div( x, y, 0, MODULO_MODE );\n            }\n\n            return x.minus( q.times(y) );\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber negated,\n         * i.e. multiplied by -1.\n         */\n        P.negated = P.neg = function () {\n            var x = new BigNumber(this);\n            x.s = -x.s || null;\n            return x;\n        };\n\n\n        /*\n         *  n + 0 = n\n         *  n + N = N\n         *  n + I = I\n         *  0 + n = n\n         *  0 + 0 = 0\n         *  0 + N = N\n         *  0 + I = I\n         *  N + n = N\n         *  N + 0 = N\n         *  N + N = N\n         *  N + I = N\n         *  I + n = I\n         *  I + 0 = I\n         *  I + N = N\n         *  I + I = I\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\n         * BigNumber(y, b).\n         */\n        P.plus = P.add = function ( y, b ) {\n            var t,\n                x = this,\n                a = x.s;\n\n            id = 12;\n            y = new BigNumber( y, b );\n            b = y.s;\n\n            // Either NaN?\n            if ( !a || !b ) return new BigNumber(NaN);\n\n            // Signs differ?\n             if ( a != b ) {\n                y.s = -b;\n                return x.minus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if ( !xe || !ye ) {\n\n                // Return ±Infinity if either ±Infinity.\n                if ( !xc || !yc ) return new BigNumber( a / 0 );\n\n                // Either zero?\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n            if ( a = xe - ye ) {\n                if ( a > 0 ) {\n                    ye = xe;\n                    t = yc;\n                } else {\n                    a = -a;\n                    t = xc;\n                }\n\n                t.reverse();\n                for ( ; a--; t.push(0) );\n                t.reverse();\n            }\n\n            a = xc.length;\n            b = yc.length;\n\n            // Point xc to the longer array, and b to the shorter length.\n            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;\n\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n            for ( a = 0; b; ) {\n                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;\n                xc[b] %= BASE;\n            }\n\n            if (a) {\n                xc.unshift(a);\n                ++ye;\n            }\n\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n            // ye = MAX_EXP + 1 possible\n            return normalise( y, xc, ye );\n        };\n\n\n        /*\n         * Return the number of significant digits of the value of this BigNumber.\n         *\n         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\n         */\n        P.precision = P.sd = function (z) {\n            var n, v,\n                x = this,\n                c = x.c;\n\n            // 'precision() argument not a boolean or binary digit: {z}'\n            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {\n                if (ERRORS) raise( 13, 'argument' + notBool, z );\n                if ( z != !!z ) z = null;\n            }\n\n            if ( !c ) return null;\n            v = c.length - 1;\n            n = v * LOG_BASE + 1;\n\n            if ( v = c[v] ) {\n\n                // Subtract the number of trailing zeros of the last element.\n                for ( ; v % 10 == 0; v /= 10, n-- );\n\n                // Add the number of digits of the first element.\n                for ( v = c[0]; v >= 10; v /= 10, n++ );\n            }\n\n            if ( z && x.e + 1 > n ) n = x.e + 1;\n\n            return n;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\n         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if\n         * omitted.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'round() decimal places out of range: {dp}'\n         * 'round() decimal places not an integer: {dp}'\n         * 'round() rounding mode not an integer: {rm}'\n         * 'round() rounding mode out of range: {rm}'\n         */\n        P.round = function ( dp, rm ) {\n            var n = new BigNumber(this);\n\n            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {\n                round( n, ~~dp + this.e + 1, rm == null ||\n                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );\n            }\n\n            return n;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\n         *\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\n         *\n         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity\n         * otherwise.\n         *\n         * 'shift() argument not an integer: {k}'\n         * 'shift() argument out of range: {k}'\n         */\n        P.shift = function (k) {\n            var n = this;\n            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )\n\n              // k < 1e+21, or truncate(k) will produce exponential notation.\n              ? n.times( '1e' + truncate(k) )\n              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )\n                ? n.s * ( k < 0 ? 0 : 1 / 0 )\n                : n );\n        };\n\n\n        /*\n         *  sqrt(-n) =  N\n         *  sqrt( N) =  N\n         *  sqrt(-I) =  N\n         *  sqrt( I) =  I\n         *  sqrt( 0) =  0\n         *  sqrt(-0) = -0\n         *\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n         */\n        P.squareRoot = P.sqrt = function () {\n            var m, n, r, rep, t,\n                x = this,\n                c = x.c,\n                s = x.s,\n                e = x.e,\n                dp = DECIMAL_PLACES + 4,\n                half = new BigNumber('0.5');\n\n            // Negative/NaN/Infinity/zero?\n            if ( s !== 1 || !c || !c[0] ) {\n                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );\n            }\n\n            // Initial estimate.\n            s = Math.sqrt( +x );\n\n            // Math.sqrt underflow/overflow?\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n            if ( s == 0 || s == 1 / 0 ) {\n                n = coeffToString(c);\n                if ( ( n.length + e ) % 2 == 0 ) n += '0';\n                s = Math.sqrt(n);\n                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );\n\n                if ( s == 1 / 0 ) {\n                    n = '1e' + e;\n                } else {\n                    n = s.toExponential();\n                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;\n                }\n\n                r = new BigNumber(n);\n            } else {\n                r = new BigNumber( s + '' );\n            }\n\n            // Check for zero.\n            // r could be zero if MIN_EXP is changed after the this value was created.\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n            // coeffToString to throw.\n            if ( r.c[0] ) {\n                e = r.e;\n                s = e + dp;\n                if ( s < 3 ) s = 0;\n\n                // Newton-Raphson iteration.\n                for ( ; ; ) {\n                    t = r;\n                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );\n\n                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =\n                         coeffToString( r.c ) ).slice( 0, s ) ) {\n\n                        // The exponent of r may here be one less than the final result exponent,\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n                        // are indexed correctly.\n                        if ( r.e < e ) --s;\n                        n = n.slice( s - 3, s + 1 );\n\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n                        // iteration.\n                        if ( n == '9999' || !rep && n == '4999' ) {\n\n                            // On the first iteration only, check to see if rounding up gives the\n                            // exact result as the nines may infinitely repeat.\n                            if ( !rep ) {\n                                round( t, t.e + DECIMAL_PLACES + 2, 0 );\n\n                                if ( t.times(t).eq(x) ) {\n                                    r = t;\n                                    break;\n                                }\n                            }\n\n                            dp += 4;\n                            s += 4;\n                            rep = 1;\n                        } else {\n\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n                            // result. If not, then there are further digits and m will be truthy.\n                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {\n\n                                // Truncate to the first rounding digit.\n                                round( r, r.e + DECIMAL_PLACES + 2, 1 );\n                                m = !r.times(r).eq(x);\n                            }\n\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );\n        };\n\n\n        /*\n         *  n * 0 = 0\n         *  n * N = N\n         *  n * I = I\n         *  0 * n = 0\n         *  0 * 0 = 0\n         *  0 * N = N\n         *  0 * I = N\n         *  N * n = N\n         *  N * 0 = N\n         *  N * N = N\n         *  N * I = N\n         *  I * n = I\n         *  I * 0 = N\n         *  I * N = N\n         *  I * I = I\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber times the value of\n         * BigNumber(y, b).\n         */\n        P.times = P.mul = function ( y, b ) {\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\n                base, sqrtBase,\n                x = this,\n                xc = x.c,\n                yc = ( id = 17, y = new BigNumber( y, b ) ).c;\n\n            // Either NaN, ±Infinity or ±0?\n            if ( !xc || !yc || !xc[0] || !yc[0] ) {\n\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {\n                    y.c = y.e = y.s = null;\n                } else {\n                    y.s *= x.s;\n\n                    // Return ±Infinity if either is ±Infinity.\n                    if ( !xc || !yc ) {\n                        y.c = y.e = null;\n\n                    // Return ±0 if either is ±0.\n                    } else {\n                        y.c = [0];\n                        y.e = 0;\n                    }\n                }\n\n                return y;\n            }\n\n            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );\n            y.s *= x.s;\n            xcL = xc.length;\n            ycL = yc.length;\n\n            // Ensure xc points to longer array and xcL to its length.\n            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\n\n            // Initialise the result array with zeros.\n            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );\n\n            base = BASE;\n            sqrtBase = SQRT_BASE;\n\n            for ( i = ycL; --i >= 0; ) {\n                c = 0;\n                ylo = yc[i] % sqrtBase;\n                yhi = yc[i] / sqrtBase | 0;\n\n                for ( k = xcL, j = i + k; j > i; ) {\n                    xlo = xc[--k] % sqrtBase;\n                    xhi = xc[k] / sqrtBase | 0;\n                    m = yhi * xlo + xhi * ylo;\n                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;\n                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;\n                    zc[j--] = xlo % base;\n                }\n\n                zc[j] = c;\n            }\n\n            if (c) {\n                ++e;\n            } else {\n                zc.shift();\n            }\n\n            return normalise( y, zc, e );\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\n         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n         *\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'toDigits() precision out of range: {sd}'\n         * 'toDigits() precision not an integer: {sd}'\n         * 'toDigits() rounding mode not an integer: {rm}'\n         * 'toDigits() rounding mode out of range: {rm}'\n         */\n        P.toDigits = function ( sd, rm ) {\n            var n = new BigNumber(this);\n            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;\n            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;\n            return sd ? round( n, sd, rm ) : n;\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in exponential notation and\n         * rounded using ROUNDING_MODE to dp fixed decimal places.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'toExponential() decimal places not an integer: {dp}'\n         * 'toExponential() decimal places out of range: {dp}'\n         * 'toExponential() rounding mode not an integer: {rm}'\n         * 'toExponential() rounding mode out of range: {rm}'\n         */\n        P.toExponential = function ( dp, rm ) {\n            return format( this,\n              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n         *\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\n         * but e.g. (-0.00001).toFixed(0) is '-0'.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'toFixed() decimal places not an integer: {dp}'\n         * 'toFixed() decimal places out of range: {dp}'\n         * 'toFixed() rounding mode not an integer: {rm}'\n         * 'toFixed() rounding mode out of range: {rm}'\n         */\n        P.toFixed = function ( dp, rm ) {\n            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )\n              ? ~~dp + this.e + 1 : null, rm, 20 );\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\n         * of the FORMAT object (see BigNumber.config).\n         *\n         * FORMAT = {\n         *      decimalSeparator : '.',\n         *      groupSeparator : ',',\n         *      groupSize : 3,\n         *      secondaryGroupSize : 0,\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\n         *      fractionGroupSize : 0\n         * };\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'toFormat() decimal places not an integer: {dp}'\n         * 'toFormat() decimal places out of range: {dp}'\n         * 'toFormat() rounding mode not an integer: {rm}'\n         * 'toFormat() rounding mode out of range: {rm}'\n         */\n        P.toFormat = function ( dp, rm ) {\n            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )\n              ? ~~dp + this.e + 1 : null, rm, 21 );\n\n            if ( this.c ) {\n                var i,\n                    arr = str.split('.'),\n                    g1 = +FORMAT.groupSize,\n                    g2 = +FORMAT.secondaryGroupSize,\n                    groupSeparator = FORMAT.groupSeparator,\n                    intPart = arr[0],\n                    fractionPart = arr[1],\n                    isNeg = this.s < 0,\n                    intDigits = isNeg ? intPart.slice(1) : intPart,\n                    len = intDigits.length;\n\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n                if ( g1 > 0 && len > 0 ) {\n                    i = len % g1 || g1;\n                    intPart = intDigits.substr( 0, i );\n\n                    for ( ; i < len; i += g1 ) {\n                        intPart += groupSeparator + intDigits.substr( i, g1 );\n                    }\n\n                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);\n                    if (isNeg) intPart = '-' + intPart;\n                }\n\n                str = fractionPart\n                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )\n                    ? fractionPart.replace( new RegExp( '\\\\d{' + g2 + '}\\\\B', 'g' ),\n                      '$&' + FORMAT.fractionGroupSeparator )\n                    : fractionPart )\n                  : intPart;\n            }\n\n            return str;\n        };\n\n\n        /*\n         * Return a string array representing the value of this BigNumber as a simple fraction with\n         * an integer numerator and an integer denominator. The denominator will be a positive\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum\n         * denominator is not specified, the denominator will be the lowest value necessary to\n         * represent the number exactly.\n         *\n         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.\n         *\n         * 'toFraction() max denominator not an integer: {md}'\n         * 'toFraction() max denominator out of range: {md}'\n         */\n        P.toFraction = function (md) {\n            var arr, d0, d2, e, exp, n, n0, q, s,\n                k = ERRORS,\n                x = this,\n                xc = x.c,\n                d = new BigNumber(ONE),\n                n1 = d0 = new BigNumber(ONE),\n                d1 = n0 = new BigNumber(ONE);\n\n            if ( md != null ) {\n                ERRORS = false;\n                n = new BigNumber(md);\n                ERRORS = k;\n\n                if ( !( k = n.isInt() ) || n.lt(ONE) ) {\n\n                    if (ERRORS) {\n                        raise( 22,\n                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );\n                    }\n\n                    // ERRORS is false:\n                    // If md is a finite non-integer >= 1, round it to an integer and use it.\n                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;\n                }\n            }\n\n            if ( !xc ) return x.toString();\n            s = coeffToString(xc);\n\n            // Determine initial denominator.\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n            e = d.e = s.length - x.e - 1;\n            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];\n            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;\n\n            exp = MAX_EXP;\n            MAX_EXP = 1 / 0;\n            n = new BigNumber(s);\n\n            // n0 = d1 = 0\n            n0.c[0] = 0;\n\n            for ( ; ; )  {\n                q = div( n, d, 0, 1 );\n                d2 = d0.plus( q.times(d1) );\n                if ( d2.cmp(md) == 1 ) break;\n                d0 = d1;\n                d1 = d2;\n                n1 = n0.plus( q.times( d2 = n1 ) );\n                n0 = d2;\n                d = n.minus( q.times( d2 = d ) );\n                n = d2;\n            }\n\n            d2 = div( md.minus(d0), d1, 0, 1 );\n            n0 = n0.plus( d2.times(n1) );\n            d0 = d0.plus( d2.times(d1) );\n            n0.s = n1.s = x.s;\n            e *= 2;\n\n            // Determine which fraction is closer to x, n0/d0 or n1/d1\n            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(\n                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1\n                    ? [ n1.toString(), d1.toString() ]\n                    : [ n0.toString(), d0.toString() ];\n\n            MAX_EXP = exp;\n            return arr;\n        };\n\n\n        /*\n         * Return the value of this BigNumber converted to a number primitive.\n         */\n        P.toNumber = function () {\n            var x = this;\n\n            // Ensure zero has correct sign.\n            return +x || ( x.s ? x.s * 0 : NaN );\n        };\n\n\n        /*\n         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\n         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.\n         *\n         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.\n         * (Performs 54 loop iterations for n of 9007199254740992.)\n         *\n         * 'pow() exponent not an integer: {n}'\n         * 'pow() exponent out of range: {n}'\n         */\n        P.toPower = P.pow = function (n) {\n            var k, y,\n                i = mathfloor( n < 0 ? -n : +n ),\n                x = this;\n\n            // Pass ±Infinity to Math.pow if exponent is out of range.\n            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&\n              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||\n                parseFloat(n) != n && !( n = NaN ) ) ) {\n                return new BigNumber( Math.pow( +x, n ) );\n            }\n\n            // Truncating each coefficient array to a length of k after each multiplication equates\n            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a\n            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)\n            k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;\n            y = new BigNumber(ONE);\n\n            for ( ; ; ) {\n\n                if ( i % 2 ) {\n                    y = y.times(x);\n                    if ( !y.c ) break;\n                    if ( k && y.c.length > k ) y.c.length = k;\n                }\n\n                i = mathfloor( i / 2 );\n                if ( !i ) break;\n\n                x = x.times(x);\n                if ( k && x.c && x.c.length > k ) x.c.length = k;\n            }\n\n            if ( n < 0 ) y = ONE.div(y);\n            return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber rounded to sd significant digits\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\n         * necessary to represent the integer part of the value in fixed-point notation, then use\n         * exponential notation.\n         *\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'toPrecision() precision not an integer: {sd}'\n         * 'toPrecision() precision out of range: {sd}'\n         * 'toPrecision() rounding mode not an integer: {rm}'\n         * 'toPrecision() rounding mode out of range: {rm}'\n         */\n        P.toPrecision = function ( sd, rm ) {\n            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )\n              ? sd | 0 : null, rm, 24 );\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\n         * TO_EXP_NEG, return exponential notation.\n         *\n         * [b] {number} Integer, 2 to 64 inclusive.\n         *\n         * 'toString() base not an integer: {b}'\n         * 'toString() base out of range: {b}'\n         */\n        P.toString = function (b) {\n            var str,\n                n = this,\n                s = n.s,\n                e = n.e;\n\n            // Infinity or NaN?\n            if ( e === null ) {\n\n                if (s) {\n                    str = 'Infinity';\n                    if ( s < 0 ) str = '-' + str;\n                } else {\n                    str = 'NaN';\n                }\n            } else {\n                str = coeffToString( n.c );\n\n                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\n                      ? toExponential( str, e )\n                      : toFixedPoint( str, e );\n                } else {\n                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );\n                }\n\n                if ( s < 0 && n.c[0] ) str = '-' + str;\n            }\n\n            return str;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole\n         * number.\n         */\n        P.truncated = P.trunc = function () {\n            return round( new BigNumber(this), this.e + 1, 1 );\n        };\n\n\n\n        /*\n         * Return as toString, but do not accept a base argument.\n         */\n        P.valueOf = P.toJSON = function () {\n            return this.toString();\n        };\n\n\n        // Aliases for BigDecimal methods.\n        //P.add = P.plus;         // P.add included above\n        //P.subtract = P.minus;   // P.sub included above\n        //P.multiply = P.times;   // P.mul included above\n        //P.divide = P.div;\n        //P.remainder = P.mod;\n        //P.compareTo = P.cmp;\n        //P.negate = P.neg;\n\n\n        if ( configObj != null ) BigNumber.config(configObj);\n\n        return BigNumber;\n    }\n\n\n    // PRIVATE HELPER FUNCTIONS\n\n\n    function bitFloor(n) {\n        var i = n | 0;\n        return n > 0 || n === i ? i : i - 1;\n    }\n\n\n    // Return a coefficient array as a string of base 10 digits.\n    function coeffToString(a) {\n        var s, z,\n            i = 1,\n            j = a.length,\n            r = a[0] + '';\n\n        for ( ; i < j; ) {\n            s = a[i++] + '';\n            z = LOG_BASE - s.length;\n            for ( ; z--; s = '0' + s );\n            r += s;\n        }\n\n        // Determine trailing zeros.\n        for ( j = r.length; r.charCodeAt(--j) === 48; );\n        return r.slice( 0, j + 1 || 1 );\n    }\n\n\n    // Compare the value of BigNumbers x and y.\n    function compare( x, y ) {\n        var a, b,\n            xc = x.c,\n            yc = y.c,\n            i = x.s,\n            j = y.s,\n            k = x.e,\n            l = y.e;\n\n        // Either NaN?\n        if ( !i || !j ) return null;\n\n        a = xc && !xc[0];\n        b = yc && !yc[0];\n\n        // Either zero?\n        if ( a || b ) return a ? b ? 0 : -j : i;\n\n        // Signs differ?\n        if ( i != j ) return i;\n\n        a = i < 0;\n        b = k == l;\n\n        // Either Infinity?\n        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;\n\n        // Compare exponents.\n        if ( !b ) return k > l ^ a ? 1 : -1;\n\n        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;\n\n        // Compare digit by digit.\n        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;\n\n        // Compare lengths.\n        return k == l ? 0 : k > l ^ a ? 1 : -1;\n    }\n\n\n    /*\n     * Return true if n is a valid number in range, otherwise false.\n     * Use for argument validation when ERRORS is false.\n     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.\n     */\n    function intValidatorNoErrors( n, min, max ) {\n        return ( n = truncate(n) ) >= min && n <= max;\n    }\n\n\n    function isArray(obj) {\n        return Object.prototype.toString.call(obj) == '[object Array]';\n    }\n\n\n    /*\n     * Convert string of baseIn to an array of numbers of baseOut.\n     * Eg. convertBase('255', 10, 16) returns [15, 15].\n     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\n     */\n    function toBaseOut( str, baseIn, baseOut ) {\n        var j,\n            arr = [0],\n            arrL,\n            i = 0,\n            len = str.length;\n\n        for ( ; i < len; ) {\n            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );\n            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );\n\n            for ( ; j < arr.length; j++ ) {\n\n                if ( arr[j] > baseOut - 1 ) {\n                    if ( arr[j + 1] == null ) arr[j + 1] = 0;\n                    arr[j + 1] += arr[j] / baseOut | 0;\n                    arr[j] %= baseOut;\n                }\n            }\n        }\n\n        return arr.reverse();\n    }\n\n\n    function toExponential( str, e ) {\n        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +\n          ( e < 0 ? 'e' : 'e+' ) + e;\n    }\n\n\n    function toFixedPoint( str, e ) {\n        var len, z;\n\n        // Negative exponent?\n        if ( e < 0 ) {\n\n            // Prepend zeros.\n            for ( z = '0.'; ++e; z += '0' );\n            str = z + str;\n\n        // Positive exponent\n        } else {\n            len = str.length;\n\n            // Append zeros.\n            if ( ++e > len ) {\n                for ( z = '0', e -= len; --e; z += '0' );\n                str += z;\n            } else if ( e < len ) {\n                str = str.slice( 0, e ) + '.' + str.slice(e);\n            }\n        }\n\n        return str;\n    }\n\n\n    function truncate(n) {\n        n = parseFloat(n);\n        return n < 0 ? mathceil(n) : mathfloor(n);\n    }\n\n\n    // EXPORT\n\n\n    BigNumber = another();\n\n    // AMD.\n    if ( typeof define == 'function' && define.amd ) {\n        define( function () { return BigNumber; } );\n\n    // Node and other environments that support module.exports.\n    } else if ( typeof module != 'undefined' && module.exports ) {\n        module.exports = BigNumber;\n        if ( !crypto ) try { crypto = require('crypto'); } catch (e) {}\n\n    // Browser.\n    } else {\n        global.BigNumber = BigNumber;\n    }\n})(this);\n\n},{\"crypto\":48}],\"web3\":[function(require,module,exports){\nvar Web3 = require('./lib/web3');\n\n// dont override global variable\nif (typeof window !== 'undefined' && typeof window.Web3 === 'undefined') {\n    window.Web3 = Web3;\n}\n\nmodule.exports = Web3;\n\n},{\"./lib/web3\":22}]},{},[\"web3\"])\n//# sourceMappingURL=web3.js.map\n","/* jshint ignore:start */\n\n\n// Browser environment\nif(typeof window !== 'undefined') {\n    Web3 = (typeof window.Web3 !== 'undefined') ? window.Web3 : require('web3');\n    BigNumber = (typeof window.BigNumber !== 'undefined') ? window.BigNumber : require('bignumber.js');\n}\n\n\n// Node environment\nif(typeof global !== 'undefined') {\n    Web3 = (typeof global.Web3 !== 'undefined') ? global.Web3 : require('web3');\n    BigNumber = (typeof global.BigNumber !== 'undefined') ? global.BigNumber : require('bignumber.js');\n}\n\n/* jshint ignore:end */"]}}]